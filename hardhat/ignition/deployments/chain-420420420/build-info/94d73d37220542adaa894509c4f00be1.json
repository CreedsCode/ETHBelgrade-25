{
  "id": "94d73d37220542adaa894509c4f00be1",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/MockUSDStableCoin.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ncontract MockUSDStableCoin {\n    string public name = \"Mock USD Stable\";\n    string public symbol = \"MUSD\";\n    uint8 public decimals = 6; // Most USD stablecoins use 6 decimals\n    uint256 public totalSupply;\n    \n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    address public owner;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed from, uint256 amount);\n    \n    constructor() {\n        owner = msg.sender;\n        // Mint initial supply for testing (1 million MUSD)\n        uint256 initialSupply = 1_000_000 * 10**decimals;\n        balanceOf[msg.sender] = initialSupply;\n        totalSupply = initialSupply;\n        emit Transfer(address(0), msg.sender, initialSupply);\n    }\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Only owner can perform this action\");\n        _;\n    }\n    \n    function transfer(address to, uint256 amount) external returns (bool) {\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        require(to != address(0), \"Cannot transfer to zero address\");\n        \n        balanceOf[msg.sender] -= amount;\n        balanceOf[to] += amount;\n        \n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n    \n    function transferFrom(address from, address to, uint256 amount) external returns (bool) {\n        require(balanceOf[from] >= amount, \"Insufficient balance\");\n        require(allowance[from][msg.sender] >= amount, \"Insufficient allowance\");\n        require(to != address(0), \"Cannot transfer to zero address\");\n        \n        balanceOf[from] -= amount;\n        balanceOf[to] += amount;\n        allowance[from][msg.sender] -= amount;\n        \n        emit Transfer(from, to, amount);\n        return true;\n    }\n    \n    function approve(address spender, uint256 amount) external returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n    \n    // Helper function to increase allowance (safer than approve)\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        allowance[msg.sender][spender] += addedValue;\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n    \n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        uint256 currentAllowance = allowance[msg.sender][spender];\n        require(currentAllowance >= subtractedValue, \"Decreased allowance below zero\");\n        allowance[msg.sender][spender] = currentAllowance - subtractedValue;\n        emit Approval(msg.sender, spender, allowance[msg.sender][spender]);\n        return true;\n    }\n    \n    // Mint function for testing (only owner can mint)\n    function mint(address to, uint256 amount) external onlyOwner {\n        require(to != address(0), \"Cannot mint to zero address\");\n        \n        balanceOf[to] += amount;\n        totalSupply += amount;\n        \n        emit Mint(to, amount);\n        emit Transfer(address(0), to, amount);\n    }\n    \n    // Burn function for testing\n    function burn(uint256 amount) external {\n        require(balanceOf[msg.sender] >= amount, \"Insufficient balance to burn\");\n        \n        balanceOf[msg.sender] -= amount;\n        totalSupply -= amount;\n        \n        emit Burn(msg.sender, amount);\n        emit Transfer(msg.sender, address(0), amount);\n    }\n    \n    // Faucet function for easy testing - anyone can get free tokens\n    function faucet(uint256 amount) external {\n        require(amount <= 1000 * 10**decimals, \"Faucet limit: 1000 MUSD per call\");\n        \n        balanceOf[msg.sender] += amount;\n        totalSupply += amount;\n        \n        emit Mint(msg.sender, amount);\n        emit Transfer(address(0), msg.sender, amount);\n    }\n    \n    // Batch mint for multiple addresses (useful for testing)\n    function batchMint(address[] memory recipients, uint256[] memory amounts) external onlyOwner {\n        require(recipients.length == amounts.length, \"Arrays length mismatch\");\n        \n        for (uint256 i = 0; i < recipients.length; i++) {\n            require(recipients[i] != address(0), \"Cannot mint to zero address\");\n            \n            balanceOf[recipients[i]] += amounts[i];\n            totalSupply += amounts[i];\n            \n            emit Mint(recipients[i], amounts[i]);\n            emit Transfer(address(0), recipients[i], amounts[i]);\n        }\n    }\n    \n    // Utility functions for easier frontend integration\n    function balanceOfInUSD(address account) external view returns (string memory) {\n        uint256 balance = balanceOf[account];\n        uint256 dollars = balance / 10**decimals;\n        uint256 cents = (balance % 10**decimals) / 10**(decimals-2);\n        return string(abi.encodePacked(uintToString(dollars), \".\", centsToString(cents)));\n    }\n    \n    function amountInUSD(uint256 amount) external view returns (string memory) {\n        uint256 dollars = amount / 10**decimals;\n        uint256 cents = (amount % 10**decimals) / 10**(decimals-2);\n        return string(abi.encodePacked(uintToString(dollars), \".\", centsToString(cents)));\n    }\n    \n    // Helper functions for string conversion\n    function uintToString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) return \"0\";\n        \n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        \n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        \n        return string(buffer);\n    }\n    \n    function centsToString(uint256 cents) internal pure returns (string memory) {\n        if (cents < 10) {\n            return string(abi.encodePacked(\"0\", uintToString(cents)));\n        }\n        return uintToString(cents);\n    }\n    \n    // Transfer ownership\n    function transferOwnership(address newOwner) external onlyOwner {\n        require(newOwner != address(0), \"Cannot transfer to zero address\");\n        owner = newOwner;\n    }\n} "
      },
      "contracts/OnChainExpenses.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IERC20 {\n    function transfer(address to, uint256 amount) external returns (bool);\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n\ncontract OnChainExpenses {\n    // Struct for individual expense items (one receipt = one item)\n    struct ExpenseItem {\n        string ipfsHash; // IPFS hash of receipt data/metadata\n        uint256 amount; // Amount in ERC20 token units\n        string category;\n        bool paid;\n        uint256 timestamp;\n    }\n    \n    // Main expense request struct\n    struct ExpenseRequest {\n        string title;\n        address creator;\n        address payer;\n        uint256 timestamp;\n        bool readyToReview;\n        bool fullyPaid;\n        ExpenseItem[] items;\n        uint256 totalPaidAmount;\n    }\n    \n    // Private mapping: only accessible by creator, payer, and iApp\n    mapping(uint256 => ExpenseRequest) private expenses;\n    uint256 private expenseCounter;\n    \n    // iApp public key for verification\n    address public iAppPublicKey;\n    address public owner;\n    \n    // ERC20 stable coin for payments\n    IERC20 public stableCoin;\n    \n    // Events\n    event ExpenseCreated(uint256 indexed expenseId, address indexed creator, address indexed payer, string title);\n    event ItemAdded(uint256 indexed expenseId, string ipfsHash, uint256 amount, string category);\n    event ReadyForReview(uint256 indexed expenseId);\n    event ItemsPaidBatch(uint256 indexed expenseId, uint256[] itemIds, uint256 totalAmount);\n    event PaymentCompleted(uint256 indexed expenseId, uint256 totalAmount);\n    \n    constructor(address _iAppPublicKey, address _stableCoinAddress) {\n        owner = msg.sender;\n        iAppPublicKey = _iAppPublicKey;\n        stableCoin = IERC20(_stableCoinAddress);\n        expenseCounter = 0;\n    }\n    \n    // Access control modifier\n    modifier onlyAuthorized(uint256 expenseId) {\n        require(\n            msg.sender == expenses[expenseId].creator || \n            msg.sender == expenses[expenseId].payer || \n            msg.sender == iAppPublicKey ||\n            msg.sender == owner,\n            \"Not authorized to access this expense\"\n        );\n        _;\n    }\n    \n    modifier onlyCreator(uint256 expenseId) {\n        require(msg.sender == expenses[expenseId].creator, \"Only creator can perform this action\");\n        _;\n    }\n    \n    modifier onlyPayer(uint256 expenseId) {\n        require(msg.sender == expenses[expenseId].payer, \"Only payer can perform this action\");\n        _;\n    }\n    \n    modifier onlyIApp() {\n        require(msg.sender == iAppPublicKey, \"Only iApp can perform this action\");\n        _;\n    }\n    \n    // Create new expense request (called by frontend after user submits)\n    function createExpenseRequest(\n        string memory _title,\n        address _payer\n    ) external returns (uint256) {\n        uint256 expenseId = expenseCounter++;\n        \n        ExpenseRequest storage newExpense = expenses[expenseId];\n        newExpense.title = _title;\n        newExpense.creator = msg.sender;\n        newExpense.payer = _payer;\n        newExpense.timestamp = block.timestamp;\n        newExpense.readyToReview = false;\n        newExpense.fullyPaid = false;\n        newExpense.totalPaidAmount = 0;\n        \n        emit ExpenseCreated(expenseId, msg.sender, _payer, _title);\n        return expenseId;\n    }\n    \n    // Called by iApp to add detected expense items (one receipt = one item)\n    function addExpenseItem(\n        uint256 expenseId,\n        string memory _ipfsHash,\n        uint256 _amount,\n        string memory _category\n    ) external onlyIApp {\n        require(expenseId < expenseCounter, \"Invalid expense ID\");\n        \n        ExpenseItem memory newItem = ExpenseItem({\n            ipfsHash: _ipfsHash,\n            amount: _amount,\n            category: _category,\n            paid: false,\n            timestamp: block.timestamp\n        });\n        \n        expenses[expenseId].items.push(newItem);\n        emit ItemAdded(expenseId, _ipfsHash, _amount, _category);\n    }\n    \n    // Creator marks expense as ready for payer review\n    function setReadyForReview(uint256 expenseId) external onlyCreator(expenseId) {\n        expenses[expenseId].readyToReview = true;\n        emit ReadyForReview(expenseId);\n    }\n    \n    // Payer selects items and pays in one batch transaction\n    function batchPayItems(\n        uint256 expenseId,\n        uint256[] memory itemIds,\n        uint256 totalAmount\n    ) external onlyPayer(expenseId) {\n        require(expenses[expenseId].readyToReview, \"Expense not ready for review\");\n        require(itemIds.length > 0, \"No items selected\");\n        \n        uint256 calculatedTotal = 0;\n        \n        // Validate items and calculate total\n        for (uint256 i = 0; i < itemIds.length; i++) {\n            uint256 itemId = itemIds[i];\n            require(itemId < expenses[expenseId].items.length, \"Invalid item ID\");\n            require(!expenses[expenseId].items[itemId].paid, \"Item already paid\");\n            \n            calculatedTotal += expenses[expenseId].items[itemId].amount;\n        }\n        \n        // Verify provided total matches calculated total\n        require(totalAmount == calculatedTotal, \"Total amount mismatch\");\n        \n        // Check allowance and balance\n        require(\n            stableCoin.allowance(msg.sender, address(this)) >= totalAmount,\n            \"Insufficient allowance\"\n        );\n        require(\n            stableCoin.balanceOf(msg.sender) >= totalAmount,\n            \"Insufficient balance\"\n        );\n        \n        // Transfer tokens from payer to creator\n        require(\n            stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount),\n            \"Transfer failed\"\n        );\n        \n        // Mark items as paid\n        for (uint256 i = 0; i < itemIds.length; i++) {\n            expenses[expenseId].items[itemIds[i]].paid = true;\n        }\n        \n        expenses[expenseId].totalPaidAmount += totalAmount;\n        \n        // Check if all items are paid\n        bool allItemsPaid = true;\n        for (uint256 i = 0; i < expenses[expenseId].items.length; i++) {\n            if (!expenses[expenseId].items[i].paid) {\n                allItemsPaid = false;\n                break;\n            }\n        }\n        \n        if (allItemsPaid) {\n            expenses[expenseId].fullyPaid = true;\n        }\n        \n        emit ItemsPaidBatch(expenseId, itemIds, totalAmount);\n        emit PaymentCompleted(expenseId, totalAmount);\n    }\n    \n    // Getter functions with access control\n    function getExpenseRequest(uint256 expenseId) \n        external \n        view \n        onlyAuthorized(expenseId) \n        returns (\n            string memory title,\n            address creator,\n            address payer,\n            uint256 timestamp,\n            bool readyToReview,\n            bool fullyPaid,\n            uint256 totalPaidAmount,\n            uint256 itemCount\n        ) \n    {\n        ExpenseRequest storage expense = expenses[expenseId];\n        return (\n            expense.title,\n            expense.creator,\n            expense.payer,\n            expense.timestamp,\n            expense.readyToReview,\n            expense.fullyPaid,\n            expense.totalPaidAmount,\n            expense.items.length\n        );\n    }\n    \n    function getExpenseItem(uint256 expenseId, uint256 itemId) \n        external \n        view \n        onlyAuthorized(expenseId) \n        returns (\n            string memory ipfsHash,\n            uint256 amount,\n            string memory category,\n            bool paid,\n            uint256 timestamp\n        ) \n    {\n        require(itemId < expenses[expenseId].items.length, \"Invalid item ID\");\n        ExpenseItem storage item = expenses[expenseId].items[itemId];\n        return (item.ipfsHash, item.amount, item.category, item.paid, item.timestamp);\n    }\n    \n    // Get all items for an expense (for easier frontend integration)\n    function getAllExpenseItems(uint256 expenseId)\n        external\n        view\n        onlyAuthorized(expenseId)\n        returns (\n            string[] memory ipfsHashes,\n            uint256[] memory amounts,\n            string[] memory categories,\n            bool[] memory paidStatus,\n            uint256[] memory timestamps\n        )\n    {\n        uint256 itemCount = expenses[expenseId].items.length;\n        \n        ipfsHashes = new string[](itemCount);\n        amounts = new uint256[](itemCount);\n        categories = new string[](itemCount);\n        paidStatus = new bool[](itemCount);\n        timestamps = new uint256[](itemCount);\n        \n        for (uint256 i = 0; i < itemCount; i++) {\n            ExpenseItem storage item = expenses[expenseId].items[i];\n            ipfsHashes[i] = item.ipfsHash;\n            amounts[i] = item.amount;\n            categories[i] = item.category;\n            paidStatus[i] = item.paid;\n            timestamps[i] = item.timestamp;\n        }\n    }\n    \n    // Get expenses ready for review (for payer frontend)\n    function getExpensesReadyForReview(address payer) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        uint256[] memory readyExpenses = new uint256[](expenseCounter);\n        uint256 count = 0;\n        \n        for (uint256 i = 0; i < expenseCounter; i++) {\n            if (expenses[i].payer == payer && expenses[i].readyToReview && !expenses[i].fullyPaid) {\n                readyExpenses[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        uint256[] memory result = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = readyExpenses[i];\n        }\n        \n        return result;\n    }\n    \n    // Get creator's expenses\n    function getCreatorExpenses(address creator) \n        external \n        view \n        returns (uint256[] memory) \n    {\n        uint256[] memory creatorExpenses = new uint256[](expenseCounter);\n        uint256 count = 0;\n        \n        for (uint256 i = 0; i < expenseCounter; i++) {\n            if (expenses[i].creator == creator) {\n                creatorExpenses[count] = i;\n                count++;\n            }\n        }\n        \n        // Resize array to actual count\n        uint256[] memory result = new uint256[](count);\n        for (uint256 i = 0; i < count; i++) {\n            result[i] = creatorExpenses[i];\n        }\n        \n        return result;\n    }\n    \n    // Calculate total unpaid amount for an expense\n    function getUnpaidTotal(uint256 expenseId) \n        external \n        view \n        onlyAuthorized(expenseId) \n        returns (uint256) \n    {\n        uint256 unpaidTotal = 0;\n        for (uint256 i = 0; i < expenses[expenseId].items.length; i++) {\n            if (!expenses[expenseId].items[i].paid) {\n                unpaidTotal += expenses[expenseId].items[i].amount;\n            }\n        }\n        return unpaidTotal;\n    }\n    \n    // Admin functions\n    function updateIAppPublicKey(address _newIAppPublicKey) external {\n        require(msg.sender == owner, \"Only owner can update iApp public key\");\n        iAppPublicKey = _newIAppPublicKey;\n    }\n    \n    function updateStableCoin(address _newStableCoinAddress) external {\n        require(msg.sender == owner, \"Only owner can update stable coin\");\n        stableCoin = IERC20(_newStableCoinAddress);\n    }\n    \n    function getExpenseCounter() external view returns (uint256) {\n        return expenseCounter;\n    }\n} "
      },
      "contracts/Storage.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\ncontract Storage {\n    // State variable to store our number\n    uint256 private number;\n\n    // Event to notify when the number changes\n    event NumberChanged(uint256 newNumber);\n\n    // Function to store a new number\n    function store(uint256 newNumber) public {\n        number = newNumber;\n        emit NumberChanged(newNumber);\n    }\n\n    // Function to retrieve the stored number\n    function retrieve() public view returns (uint256) {\n        return number;\n    }\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "parameters": "z"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "errors": [],
    "version": "0.8.28",
    "long_version": "0.8.28+commit.7893614a.Emscripten.clang",
    "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
    "sources": {
      "contracts/MockUSDStableCoin.sol": {
        "id": 0,
        "ast": {
          "absolutePath": "contracts/MockUSDStableCoin.sol",
          "exportedSymbols": {
            "MockUSDStableCoin": [
              779
            ]
          },
          "id": 780,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".19"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "MockUSDStableCoin",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 779,
              "linearizedBaseContracts": [
                779
              ],
              "name": "MockUSDStableCoin",
              "nameLocation": "67:17:0",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "functionSelector": "06fdde03",
                  "id": 4,
                  "mutability": "mutable",
                  "name": "name",
                  "nameLocation": "105:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "91:38:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "91:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "hexValue": "4d6f636b2055534420537461626c65",
                    "id": 3,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "112:17:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_95331b376c24ce7f1d43b78d75795b330ff37afb5c79f6b744d97cfdd689b4a6",
                      "typeString": "literal_string \"Mock USD Stable\""
                    },
                    "value": "Mock USD Stable"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "95d89b41",
                  "id": 7,
                  "mutability": "mutable",
                  "name": "symbol",
                  "nameLocation": "149:6:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "135:29:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 5,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "135:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": {
                    "hexValue": "4d555344",
                    "id": 6,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "158:6:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_3a58a680b64734755c290697a62955d87b960a06f032f7b0dca6521ba511b5c1",
                      "typeString": "literal_string \"MUSD\""
                    },
                    "value": "MUSD"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "313ce567",
                  "id": 10,
                  "mutability": "mutable",
                  "name": "decimals",
                  "nameLocation": "183:8:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "170:25:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 8,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "170:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": {
                    "hexValue": "36",
                    "id": 9,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "194:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_6_by_1",
                      "typeString": "int_const 6"
                    },
                    "value": "6"
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "18160ddd",
                  "id": 12,
                  "mutability": "mutable",
                  "name": "totalSupply",
                  "nameLocation": "255:11:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "240:26:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 11,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "240:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "70a08231",
                  "id": 16,
                  "mutability": "mutable",
                  "name": "balanceOf",
                  "nameLocation": "312:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "277:44:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "typeName": {
                    "id": 15,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 13,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "285:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "277:27:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 14,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "296:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "dd62ed3e",
                  "id": 22,
                  "mutability": "mutable",
                  "name": "allowance",
                  "nameLocation": "382:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "327:64:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "typeName": {
                    "id": 21,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 17,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "335:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "327:47:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                      "typeString": "mapping(address => mapping(address => uint256))"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 20,
                      "keyName": "",
                      "keyNameLocation": "-1:-1:-1",
                      "keyType": {
                        "id": 18,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "354:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "Mapping",
                      "src": "346:27:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                        "typeString": "mapping(address => uint256)"
                      },
                      "valueName": "",
                      "valueNameLocation": "-1:-1:-1",
                      "valueType": {
                        "id": 19,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "365:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 24,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "417:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 779,
                  "src": "402:20:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 23,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "402:7:0",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                  "id": 32,
                  "name": "Transfer",
                  "nameLocation": "439:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 26,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "464:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "448:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 25,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "448:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 28,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "486:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "470:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "470:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "498:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 32,
                        "src": "490:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "490:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "447:57:0"
                  },
                  "src": "433:72:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
                  "id": 40,
                  "name": "Approval",
                  "nameLocation": "516:8:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 39,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 34,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "541:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "525:21:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 33,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "525:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 36,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "564:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "548:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 35,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "548:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 38,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "581:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 40,
                        "src": "573:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 37,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "573:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "524:63:0"
                  },
                  "src": "510:78:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885",
                  "id": 46,
                  "name": "Mint",
                  "nameLocation": "599:4:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 45,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 42,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "620:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "604:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 41,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "604:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 44,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "632:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 46,
                        "src": "624:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 43,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "624:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "603:36:0"
                  },
                  "src": "593:47:0"
                },
                {
                  "anonymous": false,
                  "eventSelector": "cc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5",
                  "id": 52,
                  "name": "Burn",
                  "nameLocation": "651:4:0",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 51,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 48,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "672:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "656:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 47,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "656:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 50,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "686:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 52,
                        "src": "678:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 49,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "678:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "655:38:0"
                  },
                  "src": "645:49:0"
                },
                {
                  "body": {
                    "id": 89,
                    "nodeType": "Block",
                    "src": "718:299:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 58,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 55,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24,
                            "src": "728:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 56,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "736:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 57,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "740:6:0",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "736:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "728:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 59,
                        "nodeType": "ExpressionStatement",
                        "src": "728:18:0"
                      },
                      {
                        "assignments": [
                          61
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 61,
                            "mutability": "mutable",
                            "name": "initialSupply",
                            "nameLocation": "824:13:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 89,
                            "src": "816:21:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 60,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "816:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 67,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 66,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "hexValue": "315f3030305f303030",
                            "id": 62,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "840:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000000_by_1",
                              "typeString": "int_const 1000000"
                            },
                            "value": "1_000_000"
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 65,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 63,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "852:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "id": 64,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "856:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "852:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "840:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "816:48:0"
                      },
                      {
                        "expression": {
                          "id": 73,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 68,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "874:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 71,
                            "indexExpression": {
                              "expression": {
                                "id": 69,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "884:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 70,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "888:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "884:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "874:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 72,
                            "name": "initialSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61,
                            "src": "898:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "874:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 74,
                        "nodeType": "ExpressionStatement",
                        "src": "874:37:0"
                      },
                      {
                        "expression": {
                          "id": 77,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 75,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "921:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 76,
                            "name": "initialSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 61,
                            "src": "935:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "921:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 78,
                        "nodeType": "ExpressionStatement",
                        "src": "921:27:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 82,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "980:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 81,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "972:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 80,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "972:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 83,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "972:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 84,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "984:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 85,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "988:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "984:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 86,
                              "name": "initialSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 61,
                              "src": "996:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 79,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "963:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 87,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "963:47:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 88,
                        "nodeType": "EmitStatement",
                        "src": "958:52:0"
                      }
                    ]
                  },
                  "id": 90,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 53,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "715:2:0"
                  },
                  "returnParameters": {
                    "id": 54,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "718:0:0"
                  },
                  "scope": 779,
                  "src": "704:313:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 101,
                    "nodeType": "Block",
                    "src": "1048:94:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 96,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 93,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "1066:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 94,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "1070:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "1066:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 95,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 24,
                                "src": "1080:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1066:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c79206f776e65722063616e20706572666f726d207468697320616374696f6e",
                              "id": 97,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1087:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_f119838411d03f59dc56d2faa2be2f82662af64cf32d1b0a28c14abed827920a",
                                "typeString": "literal_string \"Only owner can perform this action\""
                              },
                              "value": "Only owner can perform this action"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_f119838411d03f59dc56d2faa2be2f82662af64cf32d1b0a28c14abed827920a",
                                "typeString": "literal_string \"Only owner can perform this action\""
                              }
                            ],
                            "id": 92,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1058:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 98,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1058:66:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 99,
                        "nodeType": "ExpressionStatement",
                        "src": "1058:66:0"
                      },
                      {
                        "id": 100,
                        "nodeType": "PlaceholderStatement",
                        "src": "1134:1:0"
                      }
                    ]
                  },
                  "id": 102,
                  "name": "onlyOwner",
                  "nameLocation": "1036:9:0",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 91,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1045:2:0"
                  },
                  "src": "1027:115:0",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 153,
                    "nodeType": "Block",
                    "src": "1222:311:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 117,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 112,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "1240:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 115,
                                "indexExpression": {
                                  "expression": {
                                    "id": 113,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1250:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 114,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1254:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1250:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1240:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 116,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 106,
                                "src": "1265:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1240:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e6365",
                              "id": 118,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1273:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              },
                              "value": "Insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              }
                            ],
                            "id": 111,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1232:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 119,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1232:64:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 120,
                        "nodeType": "ExpressionStatement",
                        "src": "1232:64:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 127,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 122,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 104,
                                "src": "1314:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 125,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1328:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 124,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1320:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 123,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1320:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 126,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1320:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1314:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "43616e6e6f74207472616e7366657220746f207a65726f2061646472657373",
                              "id": 128,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1332:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              },
                              "value": "Cannot transfer to zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              }
                            ],
                            "id": 121,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1306:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 129,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1306:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 130,
                        "nodeType": "ExpressionStatement",
                        "src": "1306:60:0"
                      },
                      {
                        "expression": {
                          "id": 136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 131,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "1385:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 134,
                            "indexExpression": {
                              "expression": {
                                "id": 132,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1395:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1399:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1395:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1385:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 135,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 106,
                            "src": "1410:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1385:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 137,
                        "nodeType": "ExpressionStatement",
                        "src": "1385:31:0"
                      },
                      {
                        "expression": {
                          "id": 142,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 138,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "1426:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 140,
                            "indexExpression": {
                              "id": 139,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 104,
                              "src": "1436:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1426:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 141,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 106,
                            "src": "1443:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1426:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 143,
                        "nodeType": "ExpressionStatement",
                        "src": "1426:23:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 145,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1482:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 146,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1486:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1482:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 147,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 104,
                              "src": "1494:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 148,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 106,
                              "src": "1498:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 144,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "1473:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 149,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1473:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 150,
                        "nodeType": "EmitStatement",
                        "src": "1468:37:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1522:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 110,
                        "id": 152,
                        "nodeType": "Return",
                        "src": "1515:11:0"
                      }
                    ]
                  },
                  "functionSelector": "a9059cbb",
                  "id": 154,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "1161:8:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 107,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 104,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1178:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 154,
                        "src": "1170:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 103,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1170:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 106,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1190:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 154,
                        "src": "1182:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 105,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1182:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1169:28:0"
                  },
                  "returnParameters": {
                    "id": 110,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 109,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 154,
                        "src": "1216:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 108,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1216:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1215:6:0"
                  },
                  "scope": 779,
                  "src": "1152:381:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 225,
                    "nodeType": "Block",
                    "src": "1631:422:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 170,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 166,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "1649:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 168,
                                "indexExpression": {
                                  "id": 167,
                                  "name": "from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 156,
                                  "src": "1659:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1649:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 169,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 160,
                                "src": "1668:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1649:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e6365",
                              "id": 171,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1676:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              },
                              "value": "Insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              }
                            ],
                            "id": 165,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1641:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1641:58:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 173,
                        "nodeType": "ExpressionStatement",
                        "src": "1641:58:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 182,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "baseExpression": {
                                    "id": 175,
                                    "name": "allowance",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 22,
                                    "src": "1717:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 177,
                                  "indexExpression": {
                                    "id": 176,
                                    "name": "from",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 156,
                                    "src": "1727:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1717:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 180,
                                "indexExpression": {
                                  "expression": {
                                    "id": 178,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "1733:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 179,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "1737:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "1733:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "1717:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 181,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 160,
                                "src": "1748:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "1717:37:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e7420616c6c6f77616e6365",
                              "id": 183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1756:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              },
                              "value": "Insufficient allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              }
                            ],
                            "id": 174,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1709:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1709:72:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 185,
                        "nodeType": "ExpressionStatement",
                        "src": "1709:72:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 192,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 187,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 158,
                                "src": "1799:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 190,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "1813:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 189,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "1805:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 188,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "1805:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 191,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "1805:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "1799:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "43616e6e6f74207472616e7366657220746f207a65726f2061646472657373",
                              "id": 193,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1817:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              },
                              "value": "Cannot transfer to zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              }
                            ],
                            "id": 186,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "1791:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 194,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1791:60:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 195,
                        "nodeType": "ExpressionStatement",
                        "src": "1791:60:0"
                      },
                      {
                        "expression": {
                          "id": 200,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 196,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "1870:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 198,
                            "indexExpression": {
                              "id": 197,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 156,
                              "src": "1880:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1870:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 199,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 160,
                            "src": "1889:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1870:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 201,
                        "nodeType": "ExpressionStatement",
                        "src": "1870:25:0"
                      },
                      {
                        "expression": {
                          "id": 206,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 202,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "1905:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 204,
                            "indexExpression": {
                              "id": 203,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 158,
                              "src": "1915:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1905:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 205,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 160,
                            "src": "1922:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1905:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 207,
                        "nodeType": "ExpressionStatement",
                        "src": "1905:23:0"
                      },
                      {
                        "expression": {
                          "id": 215,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 208,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "1938:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 212,
                              "indexExpression": {
                                "id": 209,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 156,
                                "src": "1948:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1938:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 213,
                            "indexExpression": {
                              "expression": {
                                "id": 210,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "1954:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 211,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "1958:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "1954:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "1938:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 214,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 160,
                            "src": "1969:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1938:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 216,
                        "nodeType": "ExpressionStatement",
                        "src": "1938:37:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 218,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 156,
                              "src": "2008:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 219,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 158,
                              "src": "2014:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 220,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 160,
                              "src": "2018:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 217,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "1999:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 221,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1999:26:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 222,
                        "nodeType": "EmitStatement",
                        "src": "1994:31:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 223,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2042:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 164,
                        "id": 224,
                        "nodeType": "Return",
                        "src": "2035:11:0"
                      }
                    ]
                  },
                  "functionSelector": "23b872dd",
                  "id": 226,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "1552:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 161,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 156,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "1573:4:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "1565:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 155,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1565:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 158,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "1587:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "1579:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 157,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1579:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 160,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1599:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "1591:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 159,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1591:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1564:42:0"
                  },
                  "returnParameters": {
                    "id": 164,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 163,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 226,
                        "src": "1625:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 162,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "1625:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1624:6:0"
                  },
                  "scope": 779,
                  "src": "1543:510:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 253,
                    "nodeType": "Block",
                    "src": "2137:129:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 242,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 235,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "2147:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 239,
                              "indexExpression": {
                                "expression": {
                                  "id": 236,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2157:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 237,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2161:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2157:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2147:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 240,
                            "indexExpression": {
                              "id": 238,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 228,
                              "src": "2169:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2147:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 241,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 230,
                            "src": "2180:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2147:39:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 243,
                        "nodeType": "ExpressionStatement",
                        "src": "2147:39:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 245,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2210:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 246,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2214:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2210:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 247,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 228,
                              "src": "2222:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 248,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 230,
                              "src": "2231:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 244,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "2201:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 249,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2201:37:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 250,
                        "nodeType": "EmitStatement",
                        "src": "2196:42:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 251,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2255:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 234,
                        "id": 252,
                        "nodeType": "Return",
                        "src": "2248:11:0"
                      }
                    ]
                  },
                  "functionSelector": "095ea7b3",
                  "id": 254,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "approve",
                  "nameLocation": "2072:7:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 231,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 228,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2088:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "2080:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 227,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2080:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 230,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "2105:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "2097:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 229,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2097:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2079:33:0"
                  },
                  "returnParameters": {
                    "id": 234,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 233,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 254,
                        "src": "2131:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 232,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2131:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2130:6:0"
                  },
                  "scope": 779,
                  "src": "2063:203:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 286,
                    "nodeType": "Block",
                    "src": "2430:158:0",
                    "statements": [
                      {
                        "expression": {
                          "id": 270,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 263,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "2440:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 267,
                              "indexExpression": {
                                "expression": {
                                  "id": 264,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2450:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 265,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2454:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2450:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2440:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 268,
                            "indexExpression": {
                              "id": 266,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 256,
                              "src": "2462:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2440:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 269,
                            "name": "addedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 258,
                            "src": "2474:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2440:44:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 271,
                        "nodeType": "ExpressionStatement",
                        "src": "2440:44:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 273,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2508:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 274,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2512:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2508:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 275,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 256,
                              "src": "2520:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 276,
                                  "name": "allowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 22,
                                  "src": "2529:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 279,
                                "indexExpression": {
                                  "expression": {
                                    "id": 277,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2539:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 278,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2543:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2539:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2529:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 281,
                              "indexExpression": {
                                "id": 280,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "2551:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2529:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 272,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "2499:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 282,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2499:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 283,
                        "nodeType": "EmitStatement",
                        "src": "2494:66:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 284,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2577:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 262,
                        "id": 285,
                        "nodeType": "Return",
                        "src": "2570:11:0"
                      }
                    ]
                  },
                  "functionSelector": "39509351",
                  "id": 287,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "increaseAllowance",
                  "nameLocation": "2351:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 259,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 256,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2377:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 287,
                        "src": "2369:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 255,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2369:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 258,
                        "mutability": "mutable",
                        "name": "addedValue",
                        "nameLocation": "2394:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 287,
                        "src": "2386:18:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 257,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2386:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2368:37:0"
                  },
                  "returnParameters": {
                    "id": 262,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 261,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 287,
                        "src": "2424:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 260,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2424:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2423:6:0"
                  },
                  "scope": 779,
                  "src": "2342:246:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 337,
                    "nodeType": "Block",
                    "src": "2691:336:0",
                    "statements": [
                      {
                        "assignments": [
                          297
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 297,
                            "mutability": "mutable",
                            "name": "currentAllowance",
                            "nameLocation": "2709:16:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 337,
                            "src": "2701:24:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 296,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "2701:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 304,
                        "initialValue": {
                          "baseExpression": {
                            "baseExpression": {
                              "id": 298,
                              "name": "allowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "2728:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 301,
                            "indexExpression": {
                              "expression": {
                                "id": 299,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2738:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 300,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2742:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2738:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "2728:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 303,
                          "indexExpression": {
                            "id": 302,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 289,
                            "src": "2750:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "2728:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "2701:57:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 308,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 306,
                                "name": "currentAllowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 297,
                                "src": "2776:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 307,
                                "name": "subtractedValue",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 291,
                                "src": "2796:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2776:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "44656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
                              "id": 309,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2813:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_83b52bee6e1cd556cad1222169d69019fbfb7ab968e78c01ee9904b37c8782f1",
                                "typeString": "literal_string \"Decreased allowance below zero\""
                              },
                              "value": "Decreased allowance below zero"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_83b52bee6e1cd556cad1222169d69019fbfb7ab968e78c01ee9904b37c8782f1",
                                "typeString": "literal_string \"Decreased allowance below zero\""
                              }
                            ],
                            "id": 305,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2768:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 310,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2768:78:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 311,
                        "nodeType": "ExpressionStatement",
                        "src": "2768:78:0"
                      },
                      {
                        "expression": {
                          "id": 321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "baseExpression": {
                                "id": 312,
                                "name": "allowance",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 22,
                                "src": "2856:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 316,
                              "indexExpression": {
                                "expression": {
                                  "id": 313,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2866:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 314,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2870:6:0",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2866:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2856:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 317,
                            "indexExpression": {
                              "id": 315,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "2878:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "2856:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 320,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "id": 318,
                              "name": "currentAllowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 297,
                              "src": "2889:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "id": 319,
                              "name": "subtractedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 291,
                              "src": "2908:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2889:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "2856:67:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 322,
                        "nodeType": "ExpressionStatement",
                        "src": "2856:67:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 324,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "2947:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 325,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "2951:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "2947:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 326,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 289,
                              "src": "2959:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "baseExpression": {
                                "baseExpression": {
                                  "id": 327,
                                  "name": "allowance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 22,
                                  "src": "2968:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 330,
                                "indexExpression": {
                                  "expression": {
                                    "id": 328,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2978:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 329,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2982:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2978:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "2968:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 332,
                              "indexExpression": {
                                "id": 331,
                                "name": "spender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 289,
                                "src": "2990:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "2968:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 323,
                            "name": "Approval",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "2938:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 333,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2938:61:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 334,
                        "nodeType": "EmitStatement",
                        "src": "2933:66:0"
                      },
                      {
                        "expression": {
                          "hexValue": "74727565",
                          "id": 335,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3016:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "functionReturnParameters": 295,
                        "id": 336,
                        "nodeType": "Return",
                        "src": "3009:11:0"
                      }
                    ]
                  },
                  "functionSelector": "a457c2d7",
                  "id": 338,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "decreaseAllowance",
                  "nameLocation": "2607:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 292,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 289,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "2633:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "2625:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 288,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2625:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 291,
                        "mutability": "mutable",
                        "name": "subtractedValue",
                        "nameLocation": "2650:15:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "2642:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 290,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2642:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2624:42:0"
                  },
                  "returnParameters": {
                    "id": 295,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 294,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 338,
                        "src": "2685:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 293,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "2685:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2684:6:0"
                  },
                  "scope": 779,
                  "src": "2598:429:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 381,
                    "nodeType": "Block",
                    "src": "3153:233:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 353,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 348,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 340,
                                "src": "3171:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 351,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3185:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 350,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "3177:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 349,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "3177:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 352,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "3177:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "3171:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "43616e6e6f74206d696e7420746f207a65726f2061646472657373",
                              "id": 354,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3189:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_2ee0416c341986fdecc3cbd81cd5d77b44e6537a4f9aa8afff73aa35a7384cb9",
                                "typeString": "literal_string \"Cannot mint to zero address\""
                              },
                              "value": "Cannot mint to zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_2ee0416c341986fdecc3cbd81cd5d77b44e6537a4f9aa8afff73aa35a7384cb9",
                                "typeString": "literal_string \"Cannot mint to zero address\""
                              }
                            ],
                            "id": 347,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3163:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3163:56:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 356,
                        "nodeType": "ExpressionStatement",
                        "src": "3163:56:0"
                      },
                      {
                        "expression": {
                          "id": 361,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 357,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "3238:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 359,
                            "indexExpression": {
                              "id": 358,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 340,
                              "src": "3248:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3238:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 360,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 342,
                            "src": "3255:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3238:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 362,
                        "nodeType": "ExpressionStatement",
                        "src": "3238:23:0"
                      },
                      {
                        "expression": {
                          "id": 365,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 363,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "3271:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 364,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 342,
                            "src": "3286:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3271:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 366,
                        "nodeType": "ExpressionStatement",
                        "src": "3271:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 368,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 340,
                              "src": "3321:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 369,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 342,
                              "src": "3325:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 367,
                            "name": "Mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "3316:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 370,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3316:16:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 371,
                        "nodeType": "EmitStatement",
                        "src": "3311:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 375,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3364:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 374,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3356:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 373,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3356:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 376,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3356:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 377,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 340,
                              "src": "3368:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 378,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 342,
                              "src": "3372:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 372,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "3347:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 379,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3347:32:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 380,
                        "nodeType": "EmitStatement",
                        "src": "3342:37:0"
                      }
                    ]
                  },
                  "functionSelector": "40c10f19",
                  "id": 382,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 345,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 344,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "3143:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 102,
                        "src": "3143:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3143:9:0"
                    }
                  ],
                  "name": "mint",
                  "nameLocation": "3101:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 343,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 340,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "3114:2:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 382,
                        "src": "3106:10:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 339,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3106:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 342,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3126:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 382,
                        "src": "3118:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 341,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3118:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3105:28:0"
                  },
                  "returnParameters": {
                    "id": 346,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3153:0:0"
                  },
                  "scope": 779,
                  "src": "3092:294:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 424,
                    "nodeType": "Block",
                    "src": "3468:273:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 393,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "baseExpression": {
                                  "id": 388,
                                  "name": "balanceOf",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 16,
                                  "src": "3486:9:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 391,
                                "indexExpression": {
                                  "expression": {
                                    "id": 389,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "3496:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 390,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "3500:6:0",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "3496:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3486:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 392,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 384,
                                "src": "3511:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3486:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e636520746f206275726e",
                              "id": 394,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3519:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eac0e9db12cd14c1c0291906654a3fa6bfacc1c08081fda717334bc66586bac5",
                                "typeString": "literal_string \"Insufficient balance to burn\""
                              },
                              "value": "Insufficient balance to burn"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eac0e9db12cd14c1c0291906654a3fa6bfacc1c08081fda717334bc66586bac5",
                                "typeString": "literal_string \"Insufficient balance to burn\""
                              }
                            ],
                            "id": 387,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3478:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 395,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3478:72:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 396,
                        "nodeType": "ExpressionStatement",
                        "src": "3478:72:0"
                      },
                      {
                        "expression": {
                          "id": 402,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 397,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "3569:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 400,
                            "indexExpression": {
                              "expression": {
                                "id": 398,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3579:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 399,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3583:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3579:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3569:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 401,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 384,
                            "src": "3594:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3569:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 403,
                        "nodeType": "ExpressionStatement",
                        "src": "3569:31:0"
                      },
                      {
                        "expression": {
                          "id": 406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 404,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "3610:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "-=",
                          "rightHandSide": {
                            "id": 405,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 384,
                            "src": "3625:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3610:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 407,
                        "nodeType": "ExpressionStatement",
                        "src": "3610:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 409,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3660:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 410,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3664:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3660:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 411,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "3672:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 408,
                            "name": "Burn",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 52,
                            "src": "3655:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 412,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3655:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 413,
                        "nodeType": "EmitStatement",
                        "src": "3650:29:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 415,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3703:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 416,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3707:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3703:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 419,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3723:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 418,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "3715:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 417,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "3715:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 420,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "3715:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 421,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 384,
                              "src": "3727:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 414,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "3694:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 422,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3694:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 423,
                        "nodeType": "EmitStatement",
                        "src": "3689:45:0"
                      }
                    ]
                  },
                  "functionSelector": "42966c68",
                  "id": 425,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "burn",
                  "nameLocation": "3438:4:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 385,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 384,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3451:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 425,
                        "src": "3443:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 383,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3443:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3442:16:0"
                  },
                  "returnParameters": {
                    "id": 386,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3468:0:0"
                  },
                  "scope": 779,
                  "src": "3429:312:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 468,
                    "nodeType": "Block",
                    "src": "3861:275:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 437,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 431,
                                "name": "amount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 427,
                                "src": "3879:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<=",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 436,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "hexValue": "31303030",
                                  "id": 432,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "3889:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1000_by_1",
                                    "typeString": "int_const 1000"
                                  },
                                  "value": "1000"
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "*",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 435,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "hexValue": "3130",
                                    "id": 433,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "3896:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10_by_1",
                                      "typeString": "int_const 10"
                                    },
                                    "value": "10"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "id": 434,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "3900:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "3896:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "3889:19:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3879:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "466175636574206c696d69743a2031303030204d555344207065722063616c6c",
                              "id": 438,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3910:34:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_608969089080ad582494b2dcd59f264ed483b8b06f42a267dee110ab8a43e7e0",
                                "typeString": "literal_string \"Faucet limit: 1000 MUSD per call\""
                              },
                              "value": "Faucet limit: 1000 MUSD per call"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_608969089080ad582494b2dcd59f264ed483b8b06f42a267dee110ab8a43e7e0",
                                "typeString": "literal_string \"Faucet limit: 1000 MUSD per call\""
                              }
                            ],
                            "id": 430,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3871:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 439,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3871:74:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 440,
                        "nodeType": "ExpressionStatement",
                        "src": "3871:74:0"
                      },
                      {
                        "expression": {
                          "id": 446,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "baseExpression": {
                              "id": 441,
                              "name": "balanceOf",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 16,
                              "src": "3964:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 444,
                            "indexExpression": {
                              "expression": {
                                "id": 442,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3974:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 443,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3978:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3974:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "nodeType": "IndexAccess",
                            "src": "3964:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 445,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "3989:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3964:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 447,
                        "nodeType": "ExpressionStatement",
                        "src": "3964:31:0"
                      },
                      {
                        "expression": {
                          "id": 450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 448,
                            "name": "totalSupply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 12,
                            "src": "4005:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 449,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 427,
                            "src": "4020:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4005:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 451,
                        "nodeType": "ExpressionStatement",
                        "src": "4005:21:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "expression": {
                                "id": 453,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4055:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 454,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4059:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4055:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 455,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "4067:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 452,
                            "name": "Mint",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 46,
                            "src": "4050:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 456,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4050:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 457,
                        "nodeType": "EmitStatement",
                        "src": "4045:29:0"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "hexValue": "30",
                                  "id": 461,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4106:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 460,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4098:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": {
                                  "id": 459,
                                  "name": "address",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "4098:7:0",
                                  "typeDescriptions": {}
                                }
                              },
                              "id": 462,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4098:10:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 463,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "4110:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 464,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4114:6:0",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "4110:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 465,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 427,
                              "src": "4122:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 458,
                            "name": "Transfer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 32,
                            "src": "4089:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,address,uint256)"
                            }
                          },
                          "id": 466,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4089:40:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 467,
                        "nodeType": "EmitStatement",
                        "src": "4084:45:0"
                      }
                    ]
                  },
                  "functionSelector": "57915897",
                  "id": 469,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "faucet",
                  "nameLocation": "3829:6:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 428,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 427,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "3844:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 469,
                        "src": "3836:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 426,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3836:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3835:16:0"
                  },
                  "returnParameters": {
                    "id": 429,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3861:0:0"
                  },
                  "scope": 779,
                  "src": "3820:316:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 552,
                    "nodeType": "Block",
                    "src": "4301:478:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 485,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 481,
                                  "name": "recipients",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 472,
                                  "src": "4319:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                    "typeString": "address[] memory"
                                  }
                                },
                                "id": 482,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4330:6:0",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4319:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "id": 483,
                                  "name": "amounts",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 475,
                                  "src": "4340:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 484,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4348:6:0",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4340:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "4319:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "417272617973206c656e677468206d69736d61746368",
                              "id": 486,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4356:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_582fd48f3876d7686bfeaaaa0db0589073271dedd50d66094f02fee2a3d2e01c",
                                "typeString": "literal_string \"Arrays length mismatch\""
                              },
                              "value": "Arrays length mismatch"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_582fd48f3876d7686bfeaaaa0db0589073271dedd50d66094f02fee2a3d2e01c",
                                "typeString": "literal_string \"Arrays length mismatch\""
                              }
                            ],
                            "id": 480,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4311:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 487,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4311:70:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 488,
                        "nodeType": "ExpressionStatement",
                        "src": "4311:70:0"
                      },
                      {
                        "body": {
                          "id": 550,
                          "nodeType": "Block",
                          "src": "4448:325:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    "id": 508,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "baseExpression": {
                                        "id": 501,
                                        "name": "recipients",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 472,
                                        "src": "4470:10:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                          "typeString": "address[] memory"
                                        }
                                      },
                                      "id": 503,
                                      "indexExpression": {
                                        "id": 502,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 490,
                                        "src": "4481:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4470:13:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "!=",
                                    "rightExpression": {
                                      "arguments": [
                                        {
                                          "hexValue": "30",
                                          "id": 506,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "number",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "4495:1:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          },
                                          "value": "0"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_rational_0_by_1",
                                            "typeString": "int_const 0"
                                          }
                                        ],
                                        "id": 505,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "4487:7:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 504,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "4487:7:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 507,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4487:10:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "src": "4470:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "43616e6e6f74206d696e7420746f207a65726f2061646472657373",
                                    "id": 509,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4499:29:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_2ee0416c341986fdecc3cbd81cd5d77b44e6537a4f9aa8afff73aa35a7384cb9",
                                      "typeString": "literal_string \"Cannot mint to zero address\""
                                    },
                                    "value": "Cannot mint to zero address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_2ee0416c341986fdecc3cbd81cd5d77b44e6537a4f9aa8afff73aa35a7384cb9",
                                      "typeString": "literal_string \"Cannot mint to zero address\""
                                    }
                                  ],
                                  "id": 500,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "4462:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 510,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4462:67:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 511,
                              "nodeType": "ExpressionStatement",
                              "src": "4462:67:0"
                            },
                            {
                              "expression": {
                                "id": 520,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 512,
                                    "name": "balanceOf",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 16,
                                    "src": "4556:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 516,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 513,
                                      "name": "recipients",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 472,
                                      "src": "4566:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 515,
                                    "indexExpression": {
                                      "id": 514,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 490,
                                      "src": "4577:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4566:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "4556:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 517,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 475,
                                    "src": "4584:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 519,
                                  "indexExpression": {
                                    "id": 518,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 490,
                                    "src": "4592:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4584:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4556:38:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 521,
                              "nodeType": "ExpressionStatement",
                              "src": "4556:38:0"
                            },
                            {
                              "expression": {
                                "id": 526,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 522,
                                  "name": "totalSupply",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 12,
                                  "src": "4608:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 523,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 475,
                                    "src": "4623:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 525,
                                  "indexExpression": {
                                    "id": 524,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 490,
                                    "src": "4631:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "4623:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "4608:25:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 527,
                              "nodeType": "ExpressionStatement",
                              "src": "4608:25:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "baseExpression": {
                                      "id": 529,
                                      "name": "recipients",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 472,
                                      "src": "4670:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 531,
                                    "indexExpression": {
                                      "id": 530,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 490,
                                      "src": "4681:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4670:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 532,
                                      "name": "amounts",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 475,
                                      "src": "4685:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 534,
                                    "indexExpression": {
                                      "id": 533,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 490,
                                      "src": "4693:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4685:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 528,
                                  "name": "Mint",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 46,
                                  "src": "4665:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,uint256)"
                                  }
                                },
                                "id": 535,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4665:31:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 536,
                              "nodeType": "EmitStatement",
                              "src": "4660:36:0"
                            },
                            {
                              "eventCall": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 540,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "4732:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        }
                                      ],
                                      "id": 539,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "4724:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 538,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "4724:7:0",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 541,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "4724:10:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 542,
                                      "name": "recipients",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 472,
                                      "src": "4736:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                        "typeString": "address[] memory"
                                      }
                                    },
                                    "id": 544,
                                    "indexExpression": {
                                      "id": 543,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 490,
                                      "src": "4747:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4736:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "baseExpression": {
                                      "id": 545,
                                      "name": "amounts",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 475,
                                      "src": "4751:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                        "typeString": "uint256[] memory"
                                      }
                                    },
                                    "id": 547,
                                    "indexExpression": {
                                      "id": 546,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 490,
                                      "src": "4759:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "4751:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 537,
                                  "name": "Transfer",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 32,
                                  "src": "4715:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                                    "typeString": "function (address,address,uint256)"
                                  }
                                },
                                "id": 548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4715:47:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 549,
                              "nodeType": "EmitStatement",
                              "src": "4710:52:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 493,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 490,
                            "src": "4420:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 494,
                              "name": "recipients",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 472,
                              "src": "4424:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                                "typeString": "address[] memory"
                              }
                            },
                            "id": 495,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4435:6:0",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4424:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4420:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 551,
                        "initializationExpression": {
                          "assignments": [
                            490
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 490,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "4413:1:0",
                              "nodeType": "VariableDeclaration",
                              "scope": 551,
                              "src": "4405:9:0",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 489,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4405:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 492,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 491,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4417:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4405:13:0"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 498,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "4443:3:0",
                            "subExpression": {
                              "id": 497,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 490,
                              "src": "4443:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 499,
                          "nodeType": "ExpressionStatement",
                          "src": "4443:3:0"
                        },
                        "nodeType": "ForStatement",
                        "src": "4400:373:0"
                      }
                    ]
                  },
                  "functionSelector": "68573107",
                  "id": 553,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 478,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 477,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "4291:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 102,
                        "src": "4291:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4291:9:0"
                    }
                  ],
                  "name": "batchMint",
                  "nameLocation": "4217:9:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 476,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 472,
                        "mutability": "mutable",
                        "name": "recipients",
                        "nameLocation": "4244:10:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 553,
                        "src": "4227:27:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                          "typeString": "address[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 470,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "4227:7:0",
                            "stateMutability": "nonpayable",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 471,
                          "nodeType": "ArrayTypeName",
                          "src": "4227:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                            "typeString": "address[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 475,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nameLocation": "4273:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 553,
                        "src": "4256:24:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 473,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "4256:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 474,
                          "nodeType": "ArrayTypeName",
                          "src": "4256:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4226:55:0"
                  },
                  "returnParameters": {
                    "id": 479,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4301:0:0"
                  },
                  "scope": 779,
                  "src": "4208:571:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 604,
                    "nodeType": "Block",
                    "src": "4925:263:0",
                    "statements": [
                      {
                        "assignments": [
                          561
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 561,
                            "mutability": "mutable",
                            "name": "balance",
                            "nameLocation": "4943:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 604,
                            "src": "4935:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 560,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4935:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 565,
                        "initialValue": {
                          "baseExpression": {
                            "id": 562,
                            "name": "balanceOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 16,
                            "src": "4953:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 564,
                          "indexExpression": {
                            "id": 563,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 555,
                            "src": "4963:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "4953:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4935:36:0"
                      },
                      {
                        "assignments": [
                          567
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 567,
                            "mutability": "mutable",
                            "name": "dollars",
                            "nameLocation": "4989:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 604,
                            "src": "4981:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 566,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4981:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 573,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 568,
                            "name": "balance",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 561,
                            "src": "4999:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 571,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 569,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5009:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "id": 570,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "5013:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5009:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4999:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4981:40:0"
                      },
                      {
                        "assignments": [
                          575
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 575,
                            "mutability": "mutable",
                            "name": "cents",
                            "nameLocation": "5039:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 604,
                            "src": "5031:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 574,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5031:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 589,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 588,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 580,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 576,
                                  "name": "balance",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 561,
                                  "src": "5048:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "%",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 579,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "hexValue": "3130",
                                    "id": 577,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5058:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10_by_1",
                                      "typeString": "int_const 10"
                                    },
                                    "value": "10"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "id": 578,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "5062:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "5058:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5048:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 581,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5047:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 587,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 582,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5074:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "id": 585,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 583,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "5079:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "32",
                                    "id": 584,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5088:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "5079:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "id": 586,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5078:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5074:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5047:43:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5031:59:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 595,
                                      "name": "dollars",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 567,
                                      "src": "5144:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 594,
                                    "name": "uintToString",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 728,
                                    "src": "5131:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 596,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5131:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2e",
                                  "id": 597,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5154:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                    "typeString": "literal_string \".\""
                                  },
                                  "value": "."
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 599,
                                      "name": "cents",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 575,
                                      "src": "5173:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 598,
                                    "name": "centsToString",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 756,
                                    "src": "5159:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 600,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5159:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                    "typeString": "literal_string \".\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 592,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967295,
                                  "src": "5114:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 593,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "5118:12:0",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "5114:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 601,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5114:66:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 591,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5107:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 590,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5107:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 602,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5107:74:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 559,
                        "id": 603,
                        "nodeType": "Return",
                        "src": "5100:81:0"
                      }
                    ]
                  },
                  "functionSelector": "14e7ee41",
                  "id": 605,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOfInUSD",
                  "nameLocation": "4855:14:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 556,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 555,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "4878:7:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 605,
                        "src": "4870:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 554,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "4870:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4869:17:0"
                  },
                  "returnParameters": {
                    "id": 559,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 558,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 605,
                        "src": "4910:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 557,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "4910:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4909:15:0"
                  },
                  "scope": 779,
                  "src": "4846:342:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 650,
                    "nodeType": "Block",
                    "src": "5273:215:0",
                    "statements": [
                      {
                        "assignments": [
                          613
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 613,
                            "mutability": "mutable",
                            "name": "dollars",
                            "nameLocation": "5291:7:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 650,
                            "src": "5283:15:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 612,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5283:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 619,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 618,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 614,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 607,
                            "src": "5301:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 617,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 615,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5310:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "id": 616,
                              "name": "decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10,
                              "src": "5314:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5310:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5301:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5283:39:0"
                      },
                      {
                        "assignments": [
                          621
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 621,
                            "mutability": "mutable",
                            "name": "cents",
                            "nameLocation": "5340:5:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 650,
                            "src": "5332:13:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 620,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5332:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 635,
                        "initialValue": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 634,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "components": [
                              {
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 626,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 622,
                                  "name": "amount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 607,
                                  "src": "5349:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "%",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 625,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "hexValue": "3130",
                                    "id": 623,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5358:2:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_10_by_1",
                                      "typeString": "int_const 10"
                                    },
                                    "value": "10"
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "**",
                                  "rightExpression": {
                                    "id": 624,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "5362:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "src": "5358:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5349:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "id": 627,
                            "isConstant": false,
                            "isInlineArray": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "TupleExpression",
                            "src": "5348:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "/",
                          "rightExpression": {
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 633,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "hexValue": "3130",
                              "id": 628,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5374:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "components": [
                                {
                                  "commonType": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  "id": 631,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "id": 629,
                                    "name": "decimals",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 10,
                                    "src": "5379:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint8",
                                      "typeString": "uint8"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "-",
                                  "rightExpression": {
                                    "hexValue": "32",
                                    "id": 630,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5388:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_2_by_1",
                                      "typeString": "int_const 2"
                                    },
                                    "value": "2"
                                  },
                                  "src": "5379:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "id": 632,
                              "isConstant": false,
                              "isInlineArray": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "TupleExpression",
                              "src": "5378:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            "src": "5374:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "5348:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5332:58:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "arguments": [
                                    {
                                      "id": 641,
                                      "name": "dollars",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 613,
                                      "src": "5444:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 640,
                                    "name": "uintToString",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 728,
                                    "src": "5431:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 642,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5431:21:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "2e",
                                  "id": 643,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5454:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                    "typeString": "literal_string \".\""
                                  },
                                  "value": "."
                                },
                                {
                                  "arguments": [
                                    {
                                      "id": 645,
                                      "name": "cents",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 621,
                                      "src": "5473:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    ],
                                    "id": 644,
                                    "name": "centsToString",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 756,
                                    "src": "5459:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                      "typeString": "function (uint256) pure returns (string memory)"
                                    }
                                  },
                                  "id": 646,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5459:20:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_stringliteral_6f010af653ebe3cb07d297a4ef13366103d392ceffa68dd48232e6e9ff2187bf",
                                    "typeString": "literal_string \".\""
                                  },
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                ],
                                "expression": {
                                  "id": 638,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967295,
                                  "src": "5414:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 639,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberLocation": "5418:12:0",
                                "memberName": "encodePacked",
                                "nodeType": "MemberAccess",
                                "src": "5414:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 647,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5414:66:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 637,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "5407:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 636,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "5407:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 648,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5407:74:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 611,
                        "id": 649,
                        "nodeType": "Return",
                        "src": "5400:81:0"
                      }
                    ]
                  },
                  "functionSelector": "c7b8ea74",
                  "id": 651,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "amountInUSD",
                  "nameLocation": "5207:11:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 608,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 607,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "5227:6:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 651,
                        "src": "5219:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 606,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5219:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5218:16:0"
                  },
                  "returnParameters": {
                    "id": 611,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 610,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 651,
                        "src": "5258:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 609,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5258:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5257:15:0"
                  },
                  "scope": 779,
                  "src": "5198:290:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 727,
                    "nodeType": "Block",
                    "src": "5619:447:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 660,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 658,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 653,
                            "src": "5633:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 659,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5642:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5633:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 663,
                        "nodeType": "IfStatement",
                        "src": "5629:26:0",
                        "trueBody": {
                          "expression": {
                            "hexValue": "30",
                            "id": 661,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5652:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                              "typeString": "literal_string \"0\""
                            },
                            "value": "0"
                          },
                          "functionReturnParameters": 657,
                          "id": 662,
                          "nodeType": "Return",
                          "src": "5645:10:0"
                        }
                      },
                      {
                        "assignments": [
                          665
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 665,
                            "mutability": "mutable",
                            "name": "temp",
                            "nameLocation": "5682:4:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 727,
                            "src": "5674:12:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 664,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5674:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 667,
                        "initialValue": {
                          "id": 666,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 653,
                          "src": "5689:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5674:20:0"
                      },
                      {
                        "assignments": [
                          669
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 669,
                            "mutability": "mutable",
                            "name": "digits",
                            "nameLocation": "5712:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 727,
                            "src": "5704:14:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 668,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "5704:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 670,
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5704:14:0"
                      },
                      {
                        "body": {
                          "id": 681,
                          "nodeType": "Block",
                          "src": "5746:57:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 675,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "++",
                                "prefix": false,
                                "src": "5760:8:0",
                                "subExpression": {
                                  "id": 674,
                                  "name": "digits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 669,
                                  "src": "5760:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 676,
                              "nodeType": "ExpressionStatement",
                              "src": "5760:8:0"
                            },
                            {
                              "expression": {
                                "id": 679,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 677,
                                  "name": "temp",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 665,
                                  "src": "5782:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 678,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5790:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "5782:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 680,
                              "nodeType": "ExpressionStatement",
                              "src": "5782:10:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 673,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 671,
                            "name": "temp",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 665,
                            "src": "5735:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 672,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5743:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5735:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 682,
                        "nodeType": "WhileStatement",
                        "src": "5728:75:0"
                      },
                      {
                        "assignments": [
                          684
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 684,
                            "mutability": "mutable",
                            "name": "buffer",
                            "nameLocation": "5834:6:0",
                            "nodeType": "VariableDeclaration",
                            "scope": 727,
                            "src": "5821:19:0",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes"
                            },
                            "typeName": {
                              "id": 683,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5821:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 689,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 687,
                              "name": "digits",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 669,
                              "src": "5853:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 686,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "5843:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 685,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "5847:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5843:17:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "5821:39:0"
                      },
                      {
                        "body": {
                          "id": 720,
                          "nodeType": "Block",
                          "src": "5889:131:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 695,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 693,
                                  "name": "digits",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 669,
                                  "src": "5903:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "-=",
                                "rightHandSide": {
                                  "hexValue": "31",
                                  "id": 694,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "5913:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_1_by_1",
                                    "typeString": "int_const 1"
                                  },
                                  "value": "1"
                                },
                                "src": "5903:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 696,
                              "nodeType": "ExpressionStatement",
                              "src": "5903:11:0"
                            },
                            {
                              "expression": {
                                "id": 714,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 697,
                                    "name": "buffer",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 684,
                                    "src": "5928:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  },
                                  "id": 699,
                                  "indexExpression": {
                                    "id": 698,
                                    "name": "digits",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 669,
                                    "src": "5935:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "5928:14:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 711,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "hexValue": "3438",
                                            "id": 704,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "kind": "number",
                                            "lValueRequested": false,
                                            "nodeType": "Literal",
                                            "src": "5958:2:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_rational_48_by_1",
                                              "typeString": "int_const 48"
                                            },
                                            "value": "48"
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "+",
                                          "rightExpression": {
                                            "arguments": [
                                              {
                                                "commonType": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                },
                                                "id": 709,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "leftExpression": {
                                                  "id": 707,
                                                  "name": "value",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 653,
                                                  "src": "5971:5:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                },
                                                "nodeType": "BinaryOperation",
                                                "operator": "%",
                                                "rightExpression": {
                                                  "hexValue": "3130",
                                                  "id": 708,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "kind": "number",
                                                  "lValueRequested": false,
                                                  "nodeType": "Literal",
                                                  "src": "5979:2:0",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_rational_10_by_1",
                                                    "typeString": "int_const 10"
                                                  },
                                                  "value": "10"
                                                },
                                                "src": "5971:10:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              ],
                                              "id": 706,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "5963:7:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_uint256_$",
                                                "typeString": "type(uint256)"
                                              },
                                              "typeName": {
                                                "id": 705,
                                                "name": "uint256",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "5963:7:0",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 710,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "nameLocations": [],
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5963:19:0",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "5958:24:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        ],
                                        "id": 703,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "5952:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_uint8_$",
                                          "typeString": "type(uint8)"
                                        },
                                        "typeName": {
                                          "id": 702,
                                          "name": "uint8",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "5952:5:0",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 712,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "nameLocations": [],
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "5952:31:0",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_uint8",
                                        "typeString": "uint8"
                                      }
                                    ],
                                    "id": 701,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "5945:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_bytes1_$",
                                      "typeString": "type(bytes1)"
                                    },
                                    "typeName": {
                                      "id": 700,
                                      "name": "bytes1",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "5945:6:0",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 713,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "nameLocations": [],
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "5945:39:0",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes1",
                                    "typeString": "bytes1"
                                  }
                                },
                                "src": "5928:56:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              "id": 715,
                              "nodeType": "ExpressionStatement",
                              "src": "5928:56:0"
                            },
                            {
                              "expression": {
                                "id": 718,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 716,
                                  "name": "value",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 653,
                                  "src": "5998:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "/=",
                                "rightHandSide": {
                                  "hexValue": "3130",
                                  "id": 717,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6007:2:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_10_by_1",
                                    "typeString": "int_const 10"
                                  },
                                  "value": "10"
                                },
                                "src": "5998:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 719,
                              "nodeType": "ExpressionStatement",
                              "src": "5998:11:0"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 690,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 653,
                            "src": "5877:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "!=",
                          "rightExpression": {
                            "hexValue": "30",
                            "id": 691,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5886:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "5877:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 721,
                        "nodeType": "WhileStatement",
                        "src": "5870:150:0"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 724,
                              "name": "buffer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 684,
                              "src": "6052:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 723,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "6045:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                              "typeString": "type(string storage pointer)"
                            },
                            "typeName": {
                              "id": 722,
                              "name": "string",
                              "nodeType": "ElementaryTypeName",
                              "src": "6045:6:0",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6045:14:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 657,
                        "id": 726,
                        "nodeType": "Return",
                        "src": "6038:21:0"
                      }
                    ]
                  },
                  "id": 728,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "uintToString",
                  "nameLocation": "5553:12:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 654,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 653,
                        "mutability": "mutable",
                        "name": "value",
                        "nameLocation": "5574:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "5566:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 652,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "5566:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5565:15:0"
                  },
                  "returnParameters": {
                    "id": 657,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 656,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 728,
                        "src": "5604:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 655,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "5604:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "5603:15:0"
                  },
                  "scope": 779,
                  "src": "5544:522:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 755,
                    "nodeType": "Block",
                    "src": "6152:150:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 737,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 735,
                            "name": "cents",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 730,
                            "src": "6166:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "hexValue": "3130",
                            "id": 736,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6174:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_10_by_1",
                              "typeString": "int_const 10"
                            },
                            "value": "10"
                          },
                          "src": "6166:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 750,
                        "nodeType": "IfStatement",
                        "src": "6162:98:0",
                        "trueBody": {
                          "id": 749,
                          "nodeType": "Block",
                          "src": "6178:82:0",
                          "statements": [
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "hexValue": "30",
                                        "id": 742,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "string",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6223:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                          "typeString": "literal_string \"0\""
                                        },
                                        "value": "0"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "id": 744,
                                            "name": "cents",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 730,
                                            "src": "6241:5:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          ],
                                          "id": 743,
                                          "name": "uintToString",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 728,
                                          "src": "6228:12:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                                            "typeString": "function (uint256) pure returns (string memory)"
                                          }
                                        },
                                        "id": 745,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "functionCall",
                                        "lValueRequested": false,
                                        "nameLocations": [],
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "6228:19:0",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_string_memory_ptr",
                                          "typeString": "string memory"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
                                          "typeString": "literal_string \"0\""
                                        },
                                        {
                                          "typeIdentifier": "t_string_memory_ptr",
                                          "typeString": "string memory"
                                        }
                                      ],
                                      "expression": {
                                        "id": 740,
                                        "name": "abi",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967295,
                                        "src": "6206:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_abi",
                                          "typeString": "abi"
                                        }
                                      },
                                      "id": 741,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "memberLocation": "6210:12:0",
                                      "memberName": "encodePacked",
                                      "nodeType": "MemberAccess",
                                      "src": "6206:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                        "typeString": "function () pure returns (bytes memory)"
                                      }
                                    },
                                    "id": 746,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "6206:42:0",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bytes_memory_ptr",
                                      "typeString": "bytes memory"
                                    }
                                  ],
                                  "id": 739,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6199:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_string_storage_ptr_$",
                                    "typeString": "type(string storage pointer)"
                                  },
                                  "typeName": {
                                    "id": 738,
                                    "name": "string",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6199:6:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 747,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6199:50:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "functionReturnParameters": 734,
                              "id": 748,
                              "nodeType": "Return",
                              "src": "6192:57:0"
                            }
                          ]
                        }
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 752,
                              "name": "cents",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 730,
                              "src": "6289:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 751,
                            "name": "uintToString",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 728,
                            "src": "6276:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (string memory)"
                            }
                          },
                          "id": 753,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6276:19:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "functionReturnParameters": 734,
                        "id": 754,
                        "nodeType": "Return",
                        "src": "6269:26:0"
                      }
                    ]
                  },
                  "id": 756,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "centsToString",
                  "nameLocation": "6085:13:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 731,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 730,
                        "mutability": "mutable",
                        "name": "cents",
                        "nameLocation": "6107:5:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 756,
                        "src": "6099:13:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 729,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6099:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6098:15:0"
                  },
                  "returnParameters": {
                    "id": 734,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 733,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 756,
                        "src": "6137:13:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 732,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6137:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6136:15:0"
                  },
                  "scope": 779,
                  "src": "6076:226:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 777,
                    "nodeType": "Block",
                    "src": "6402:109:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 769,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 764,
                                "name": "newOwner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 758,
                                "src": "6420:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 767,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "6440:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 766,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "6432:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 765,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "6432:7:0",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 768,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "6432:10:0",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "6420:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "43616e6e6f74207472616e7366657220746f207a65726f2061646472657373",
                              "id": 770,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "6444:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              },
                              "value": "Cannot transfer to zero address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bb6ef8259868f621162cf2269ec456fd6e3660c295ef634f53db3982172a569f",
                                "typeString": "literal_string \"Cannot transfer to zero address\""
                              }
                            ],
                            "id": 763,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "6412:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 771,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6412:66:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 772,
                        "nodeType": "ExpressionStatement",
                        "src": "6412:66:0"
                      },
                      {
                        "expression": {
                          "id": 775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 773,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24,
                            "src": "6488:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 774,
                            "name": "newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 758,
                            "src": "6496:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "6488:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 776,
                        "nodeType": "ExpressionStatement",
                        "src": "6488:16:0"
                      }
                    ]
                  },
                  "functionSelector": "f2fde38b",
                  "id": 778,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 761,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 760,
                        "name": "onlyOwner",
                        "nameLocations": [
                          "6392:9:0"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 102,
                        "src": "6392:9:0"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "6392:9:0"
                    }
                  ],
                  "name": "transferOwnership",
                  "nameLocation": "6347:17:0",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 759,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 758,
                        "mutability": "mutable",
                        "name": "newOwner",
                        "nameLocation": "6373:8:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 778,
                        "src": "6365:16:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 757,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6365:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6364:18:0"
                  },
                  "returnParameters": {
                    "id": 762,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "6402:0:0"
                  },
                  "scope": 779,
                  "src": "6338:173:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 780,
              "src": "58:6455:0",
              "usedErrors": [],
              "usedEvents": [
                32,
                40,
                46,
                52
              ]
            }
          ],
          "src": "32:6482:0"
        }
      },
      "contracts/OnChainExpenses.sol": {
        "id": 1,
        "ast": {
          "absolutePath": "contracts/OnChainExpenses.sol",
          "exportedSymbols": {
            "IERC20": [
              818
            ],
            "OnChainExpenses": [
              1891
            ]
          },
          "id": 1892,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 781,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".19"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:1"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "IERC20",
              "contractDependencies": [],
              "contractKind": "interface",
              "fullyImplemented": false,
              "id": 818,
              "linearizedBaseContracts": [
                818
              ],
              "name": "IERC20",
              "nameLocation": "68:6:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "functionSelector": "a9059cbb",
                  "id": 790,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transfer",
                  "nameLocation": "90:8:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 786,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 783,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "107:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 790,
                        "src": "99:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 782,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "99:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 785,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "119:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 790,
                        "src": "111:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 784,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "111:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "98:28:1"
                  },
                  "returnParameters": {
                    "id": 789,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 788,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 790,
                        "src": "145:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 787,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "145:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "144:6:1"
                  },
                  "scope": 818,
                  "src": "81:70:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "23b872dd",
                  "id": 801,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "transferFrom",
                  "nameLocation": "165:12:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 797,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 792,
                        "mutability": "mutable",
                        "name": "from",
                        "nameLocation": "186:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 801,
                        "src": "178:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 791,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "178:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 794,
                        "mutability": "mutable",
                        "name": "to",
                        "nameLocation": "200:2:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 801,
                        "src": "192:10:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 793,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "192:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 796,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "212:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 801,
                        "src": "204:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 795,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "204:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "177:42:1"
                  },
                  "returnParameters": {
                    "id": 800,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 799,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 801,
                        "src": "238:4:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 798,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "238:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "237:6:1"
                  },
                  "scope": 818,
                  "src": "156:88:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "70a08231",
                  "id": 808,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "balanceOf",
                  "nameLocation": "258:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 804,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 803,
                        "mutability": "mutable",
                        "name": "account",
                        "nameLocation": "276:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "268:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 802,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "268:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "267:17:1"
                  },
                  "returnParameters": {
                    "id": 807,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 806,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 808,
                        "src": "308:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 805,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "308:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "307:9:1"
                  },
                  "scope": 818,
                  "src": "249:68:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "functionSelector": "dd62ed3e",
                  "id": 817,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "allowance",
                  "nameLocation": "331:9:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 813,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 810,
                        "mutability": "mutable",
                        "name": "owner",
                        "nameLocation": "349:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 817,
                        "src": "341:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 809,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "341:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 812,
                        "mutability": "mutable",
                        "name": "spender",
                        "nameLocation": "364:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 817,
                        "src": "356:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 811,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "356:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "340:32:1"
                  },
                  "returnParameters": {
                    "id": 816,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 815,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 817,
                        "src": "396:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 814,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "396:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "395:9:1"
                  },
                  "scope": 818,
                  "src": "322:83:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1892,
              "src": "58:349:1",
              "usedErrors": [],
              "usedEvents": []
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "OnChainExpenses",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1891,
              "linearizedBaseContracts": [
                1891
              ],
              "name": "OnChainExpenses",
              "nameLocation": "418:15:1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "OnChainExpenses.ExpenseItem",
                  "id": 829,
                  "members": [
                    {
                      "constant": false,
                      "id": 820,
                      "mutability": "mutable",
                      "name": "ipfsHash",
                      "nameLocation": "544:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 829,
                      "src": "537:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 819,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "537:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 822,
                      "mutability": "mutable",
                      "name": "amount",
                      "nameLocation": "608:6:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 829,
                      "src": "600:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 821,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "600:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 824,
                      "mutability": "mutable",
                      "name": "category",
                      "nameLocation": "662:8:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 829,
                      "src": "655:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 823,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "655:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 826,
                      "mutability": "mutable",
                      "name": "paid",
                      "nameLocation": "685:4:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 829,
                      "src": "680:9:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 825,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "680:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 828,
                      "mutability": "mutable",
                      "name": "timestamp",
                      "nameLocation": "707:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 829,
                      "src": "699:17:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 827,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "699:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "ExpenseItem",
                  "nameLocation": "515:11:1",
                  "nodeType": "StructDefinition",
                  "scope": 1891,
                  "src": "508:215:1",
                  "visibility": "public"
                },
                {
                  "canonicalName": "OnChainExpenses.ExpenseRequest",
                  "id": 848,
                  "members": [
                    {
                      "constant": false,
                      "id": 831,
                      "mutability": "mutable",
                      "name": "title",
                      "nameLocation": "807:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "800:12:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 830,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "800:6:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 833,
                      "mutability": "mutable",
                      "name": "creator",
                      "nameLocation": "830:7:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "822:15:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 832,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "822:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 835,
                      "mutability": "mutable",
                      "name": "payer",
                      "nameLocation": "855:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "847:13:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 834,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "847:7:1",
                        "stateMutability": "nonpayable",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 837,
                      "mutability": "mutable",
                      "name": "timestamp",
                      "nameLocation": "878:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "870:17:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 836,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "870:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 839,
                      "mutability": "mutable",
                      "name": "readyToReview",
                      "nameLocation": "902:13:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "897:18:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 838,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "897:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 841,
                      "mutability": "mutable",
                      "name": "fullyPaid",
                      "nameLocation": "930:9:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "925:14:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 840,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "925:4:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 845,
                      "mutability": "mutable",
                      "name": "items",
                      "nameLocation": "963:5:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "949:19:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage_ptr",
                        "typeString": "struct OnChainExpenses.ExpenseItem[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 843,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 842,
                            "name": "ExpenseItem",
                            "nameLocations": [
                              "949:11:1"
                            ],
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 829,
                            "src": "949:11:1"
                          },
                          "referencedDeclaration": 829,
                          "src": "949:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                            "typeString": "struct OnChainExpenses.ExpenseItem"
                          }
                        },
                        "id": 844,
                        "nodeType": "ArrayTypeName",
                        "src": "949:13:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage_ptr",
                          "typeString": "struct OnChainExpenses.ExpenseItem[]"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 847,
                      "mutability": "mutable",
                      "name": "totalPaidAmount",
                      "nameLocation": "986:15:1",
                      "nodeType": "VariableDeclaration",
                      "scope": 848,
                      "src": "978:23:1",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 846,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "978:7:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "name": "ExpenseRequest",
                  "nameLocation": "775:14:1",
                  "nodeType": "StructDefinition",
                  "scope": 1891,
                  "src": "768:240:1",
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "id": 853,
                  "mutability": "mutable",
                  "name": "expenses",
                  "nameLocation": "1129:8:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1891,
                  "src": "1086:51:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                    "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest)"
                  },
                  "typeName": {
                    "id": 852,
                    "keyName": "",
                    "keyNameLocation": "-1:-1:-1",
                    "keyType": {
                      "id": 849,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1094:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "1086:34:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                      "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest)"
                    },
                    "valueName": "",
                    "valueNameLocation": "-1:-1:-1",
                    "valueType": {
                      "id": 851,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 850,
                        "name": "ExpenseRequest",
                        "nameLocations": [
                          "1105:14:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 848,
                        "src": "1105:14:1"
                      },
                      "referencedDeclaration": 848,
                      "src": "1105:14:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                        "typeString": "struct OnChainExpenses.ExpenseRequest"
                      }
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "id": 855,
                  "mutability": "mutable",
                  "name": "expenseCounter",
                  "nameLocation": "1159:14:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1891,
                  "src": "1143:30:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 854,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1143:7:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "constant": false,
                  "functionSelector": "ea34ffb1",
                  "id": 857,
                  "mutability": "mutable",
                  "name": "iAppPublicKey",
                  "nameLocation": "1239:13:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1891,
                  "src": "1224:28:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 856,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1224:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "8da5cb5b",
                  "id": 859,
                  "mutability": "mutable",
                  "name": "owner",
                  "nameLocation": "1273:5:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1891,
                  "src": "1258:20:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 858,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1258:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "constant": false,
                  "functionSelector": "992642e5",
                  "id": 862,
                  "mutability": "mutable",
                  "name": "stableCoin",
                  "nameLocation": "1341:10:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1891,
                  "src": "1327:24:1",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IERC20_$818",
                    "typeString": "contract IERC20"
                  },
                  "typeName": {
                    "id": 861,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 860,
                      "name": "IERC20",
                      "nameLocations": [
                        "1327:6:1"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 818,
                      "src": "1327:6:1"
                    },
                    "referencedDeclaration": 818,
                    "src": "1327:6:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IERC20_$818",
                      "typeString": "contract IERC20"
                    }
                  },
                  "visibility": "public"
                },
                {
                  "anonymous": false,
                  "eventSelector": "81d85dd113f54588522518b915cb1ff3f44f2c5802ce17c796a1b01c005190c7",
                  "id": 872,
                  "name": "ExpenseCreated",
                  "nameLocation": "1382:14:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 871,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 864,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "1413:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "1397:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 863,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1397:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 866,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "creator",
                        "nameLocation": "1440:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "1424:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 865,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1424:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 868,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "payer",
                        "nameLocation": "1465:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "1449:21:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 867,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1449:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 870,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "title",
                        "nameLocation": "1479:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 872,
                        "src": "1472:12:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 869,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1472:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1396:89:1"
                  },
                  "src": "1376:110:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "bc18b01a751588b7c9834ad436ed469cee2267c2bc4c407ba474b477e21666f6",
                  "id": 882,
                  "name": "ItemAdded",
                  "nameLocation": "1497:9:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 881,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 874,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "1523:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 882,
                        "src": "1507:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 873,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1507:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 876,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "ipfsHash",
                        "nameLocation": "1541:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 882,
                        "src": "1534:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 875,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1534:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 878,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "1559:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 882,
                        "src": "1551:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 877,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1551:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 880,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "category",
                        "nameLocation": "1574:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 882,
                        "src": "1567:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 879,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "1567:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1506:77:1"
                  },
                  "src": "1491:93:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "9d4440e839d2b8c50ff7601cd5743385d0186a9eed027d34a004606f5cd31ad6",
                  "id": 886,
                  "name": "ReadyForReview",
                  "nameLocation": "1595:14:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 885,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 884,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "1626:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 886,
                        "src": "1610:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 883,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1610:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1609:27:1"
                  },
                  "src": "1589:48:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "9b593c6508854bfce8a23310c01c7eca2ee5e37aa9b6c957cc614a1634a2b168",
                  "id": 895,
                  "name": "ItemsPaidBatch",
                  "nameLocation": "1648:14:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 894,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 888,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "1679:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "1663:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 887,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1663:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 891,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "itemIds",
                        "nameLocation": "1700:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "1690:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 889,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "1690:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 890,
                          "nodeType": "ArrayTypeName",
                          "src": "1690:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 893,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "totalAmount",
                        "nameLocation": "1717:11:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 895,
                        "src": "1709:19:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 892,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1709:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1662:67:1"
                  },
                  "src": "1642:88:1"
                },
                {
                  "anonymous": false,
                  "eventSelector": "804fbdce9b2b430341d671cd679f22ccb903e9db545bedbbc7da4e6230e2bdb9",
                  "id": 901,
                  "name": "PaymentCompleted",
                  "nameLocation": "1741:16:1",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 900,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 897,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "1774:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "1758:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 896,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1758:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 899,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "totalAmount",
                        "nameLocation": "1793:11:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 901,
                        "src": "1785:19:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 898,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1785:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1757:48:1"
                  },
                  "src": "1735:71:1"
                },
                {
                  "body": {
                    "id": 927,
                    "nodeType": "Block",
                    "src": "1880:152:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 911,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 908,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 859,
                            "src": "1890:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 909,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "1898:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 910,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "1902:6:1",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "1898:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1890:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 912,
                        "nodeType": "ExpressionStatement",
                        "src": "1890:18:1"
                      },
                      {
                        "expression": {
                          "id": 915,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 913,
                            "name": "iAppPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 857,
                            "src": "1918:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 914,
                            "name": "_iAppPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 903,
                            "src": "1934:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "1918:30:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 916,
                        "nodeType": "ExpressionStatement",
                        "src": "1918:30:1"
                      },
                      {
                        "expression": {
                          "id": 921,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 917,
                            "name": "stableCoin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 862,
                            "src": "1958:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$818",
                              "typeString": "contract IERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 919,
                                "name": "_stableCoinAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 905,
                                "src": "1978:18:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 918,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 818,
                              "src": "1971:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$818_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 920,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "1971:26:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$818",
                              "typeString": "contract IERC20"
                            }
                          },
                          "src": "1958:39:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$818",
                            "typeString": "contract IERC20"
                          }
                        },
                        "id": 922,
                        "nodeType": "ExpressionStatement",
                        "src": "1958:39:1"
                      },
                      {
                        "expression": {
                          "id": 925,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 923,
                            "name": "expenseCounter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 855,
                            "src": "2007:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 924,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2024:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "2007:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 926,
                        "nodeType": "ExpressionStatement",
                        "src": "2007:18:1"
                      }
                    ]
                  },
                  "id": 928,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 906,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 903,
                        "mutability": "mutable",
                        "name": "_iAppPublicKey",
                        "nameLocation": "1836:14:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 928,
                        "src": "1828:22:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 902,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1828:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 905,
                        "mutability": "mutable",
                        "name": "_stableCoinAddress",
                        "nameLocation": "1860:18:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 928,
                        "src": "1852:26:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 904,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1852:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1827:52:1"
                  },
                  "returnParameters": {
                    "id": 907,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1880:0:1"
                  },
                  "scope": 1891,
                  "src": "1816:216:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 962,
                    "nodeType": "Block",
                    "src": "2116:288:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 957,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 952,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 947,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    "id": 939,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 933,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "2147:3:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 934,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2151:6:1",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "2147:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 935,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "2161:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 937,
                                        "indexExpression": {
                                          "id": 936,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 930,
                                          "src": "2170:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2161:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 938,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2181:7:1",
                                      "memberName": "creator",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 833,
                                      "src": "2161:27:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "src": "2147:41:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "||",
                                  "rightExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    "id": 946,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "id": 940,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967281,
                                        "src": "2205:3:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 941,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2209:6:1",
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "src": "2205:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 942,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "2219:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 944,
                                        "indexExpression": {
                                          "id": 943,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 930,
                                          "src": "2228:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "2219:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 945,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "2239:5:1",
                                      "memberName": "payer",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 835,
                                      "src": "2219:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "src": "2205:39:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "2147:97:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "||",
                                "rightExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  "id": 951,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "expression": {
                                      "id": 948,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "2261:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 949,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "2265:6:1",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "2261:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "==",
                                  "rightExpression": {
                                    "id": 950,
                                    "name": "iAppPublicKey",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 857,
                                    "src": "2275:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "src": "2261:27:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "2147:141:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "||",
                              "rightExpression": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 956,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "id": 953,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "2304:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 954,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "2308:6:1",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "2304:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 955,
                                  "name": "owner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 859,
                                  "src": "2318:5:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "2304:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "2147:176:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f7420617574686f72697a656420746f20616363657373207468697320657870656e7365",
                              "id": 958,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2337:39:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_040622c1f852ab39b539e61300bb8a8f79749bdeb6e8d3393e49215ede48eb2e",
                                "typeString": "literal_string \"Not authorized to access this expense\""
                              },
                              "value": "Not authorized to access this expense"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_040622c1f852ab39b539e61300bb8a8f79749bdeb6e8d3393e49215ede48eb2e",
                                "typeString": "literal_string \"Not authorized to access this expense\""
                              }
                            ],
                            "id": 932,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2126:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 959,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2126:260:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 960,
                        "nodeType": "ExpressionStatement",
                        "src": "2126:260:1"
                      },
                      {
                        "id": 961,
                        "nodeType": "PlaceholderStatement",
                        "src": "2396:1:1"
                      }
                    ]
                  },
                  "id": 963,
                  "name": "onlyAuthorized",
                  "nameLocation": "2082:14:1",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 931,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 930,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "2105:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 963,
                        "src": "2097:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 929,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2097:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2096:19:1"
                  },
                  "src": "2073:331:1",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 979,
                    "nodeType": "Block",
                    "src": "2454:118:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 974,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 968,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2472:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 969,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2476:6:1",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2472:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 970,
                                    "name": "expenses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 853,
                                    "src": "2486:8:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                      "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                    }
                                  },
                                  "id": 972,
                                  "indexExpression": {
                                    "id": 971,
                                    "name": "expenseId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 965,
                                    "src": "2495:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2486:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                    "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                  }
                                },
                                "id": 973,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2506:7:1",
                                "memberName": "creator",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 833,
                                "src": "2486:27:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2472:41:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c792063726561746f722063616e20706572666f726d207468697320616374696f6e",
                              "id": 975,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2515:38:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_88d04f4884eaf6179fc96e6220ba298424906b4ddc32c2094d8e2e19f105dbf4",
                                "typeString": "literal_string \"Only creator can perform this action\""
                              },
                              "value": "Only creator can perform this action"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_88d04f4884eaf6179fc96e6220ba298424906b4ddc32c2094d8e2e19f105dbf4",
                                "typeString": "literal_string \"Only creator can perform this action\""
                              }
                            ],
                            "id": 967,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2464:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 976,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2464:90:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 977,
                        "nodeType": "ExpressionStatement",
                        "src": "2464:90:1"
                      },
                      {
                        "id": 978,
                        "nodeType": "PlaceholderStatement",
                        "src": "2564:1:1"
                      }
                    ]
                  },
                  "id": 980,
                  "name": "onlyCreator",
                  "nameLocation": "2423:11:1",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 966,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 965,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "2443:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 980,
                        "src": "2435:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 964,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2435:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2434:19:1"
                  },
                  "src": "2414:158:1",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 996,
                    "nodeType": "Block",
                    "src": "2620:114:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 991,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 985,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2638:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 986,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2642:6:1",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2638:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "expression": {
                                  "baseExpression": {
                                    "id": 987,
                                    "name": "expenses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 853,
                                    "src": "2652:8:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                      "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                    }
                                  },
                                  "id": 989,
                                  "indexExpression": {
                                    "id": 988,
                                    "name": "expenseId",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 982,
                                    "src": "2661:9:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "2652:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                    "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                  }
                                },
                                "id": 990,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2672:5:1",
                                "memberName": "payer",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 835,
                                "src": "2652:25:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2638:39:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c792070617965722063616e20706572666f726d207468697320616374696f6e",
                              "id": 992,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2679:36:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eab2e8fac07ed50892ba9fb35618dbb7a3dc2d7a318e272adcabacdce041feea",
                                "typeString": "literal_string \"Only payer can perform this action\""
                              },
                              "value": "Only payer can perform this action"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eab2e8fac07ed50892ba9fb35618dbb7a3dc2d7a318e272adcabacdce041feea",
                                "typeString": "literal_string \"Only payer can perform this action\""
                              }
                            ],
                            "id": 984,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2630:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 993,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2630:86:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 994,
                        "nodeType": "ExpressionStatement",
                        "src": "2630:86:1"
                      },
                      {
                        "id": 995,
                        "nodeType": "PlaceholderStatement",
                        "src": "2726:1:1"
                      }
                    ]
                  },
                  "id": 997,
                  "name": "onlyPayer",
                  "nameLocation": "2591:9:1",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 983,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 982,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "2609:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 997,
                        "src": "2601:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 981,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "2601:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2600:19:1"
                  },
                  "src": "2582:152:1",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1008,
                    "nodeType": "Block",
                    "src": "2764:101:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1003,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1000,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "2782:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1001,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "2786:6:1",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "2782:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1002,
                                "name": "iAppPublicKey",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 857,
                                "src": "2796:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "2782:27:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c7920694170702063616e20706572666f726d207468697320616374696f6e",
                              "id": 1004,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "2811:35:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_c3ceaeea3405f16ff0ace465466e93bd9b099022d4bf5bef354f87ff6426eaba",
                                "typeString": "literal_string \"Only iApp can perform this action\""
                              },
                              "value": "Only iApp can perform this action"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_c3ceaeea3405f16ff0ace465466e93bd9b099022d4bf5bef354f87ff6426eaba",
                                "typeString": "literal_string \"Only iApp can perform this action\""
                              }
                            ],
                            "id": 999,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "2774:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1005,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2774:73:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1006,
                        "nodeType": "ExpressionStatement",
                        "src": "2774:73:1"
                      },
                      {
                        "id": 1007,
                        "nodeType": "PlaceholderStatement",
                        "src": "2857:1:1"
                      }
                    ]
                  },
                  "id": 1009,
                  "name": "onlyIApp",
                  "nameLocation": "2753:8:1",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 998,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "2761:2:1"
                  },
                  "src": "2744:121:1",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 1084,
                    "nodeType": "Block",
                    "src": "3066:509:1",
                    "statements": [
                      {
                        "assignments": [
                          1019
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1019,
                            "mutability": "mutable",
                            "name": "expenseId",
                            "nameLocation": "3084:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1084,
                            "src": "3076:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1018,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "3076:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1022,
                        "initialValue": {
                          "id": 1021,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "3096:16:1",
                          "subExpression": {
                            "id": 1020,
                            "name": "expenseCounter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 855,
                            "src": "3096:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3076:36:1"
                      },
                      {
                        "assignments": [
                          1025
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1025,
                            "mutability": "mutable",
                            "name": "newExpense",
                            "nameLocation": "3154:10:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1084,
                            "src": "3131:33:1",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                              "typeString": "struct OnChainExpenses.ExpenseRequest"
                            },
                            "typeName": {
                              "id": 1024,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1023,
                                "name": "ExpenseRequest",
                                "nameLocations": [
                                  "3131:14:1"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 848,
                                "src": "3131:14:1"
                              },
                              "referencedDeclaration": 848,
                              "src": "3131:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1029,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1026,
                            "name": "expenses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 853,
                            "src": "3167:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                              "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                            }
                          },
                          "id": 1028,
                          "indexExpression": {
                            "id": 1027,
                            "name": "expenseId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1019,
                            "src": "3176:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3167:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                            "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3131:55:1"
                      },
                      {
                        "expression": {
                          "id": 1034,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1030,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3196:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1032,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3207:5:1",
                            "memberName": "title",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 831,
                            "src": "3196:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage",
                              "typeString": "string storage ref"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1033,
                            "name": "_title",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1011,
                            "src": "3215:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_memory_ptr",
                              "typeString": "string memory"
                            }
                          },
                          "src": "3196:25:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "id": 1035,
                        "nodeType": "ExpressionStatement",
                        "src": "3196:25:1"
                      },
                      {
                        "expression": {
                          "id": 1041,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1036,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3231:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1038,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3242:7:1",
                            "memberName": "creator",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 833,
                            "src": "3231:18:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1039,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967281,
                              "src": "3252:3:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1040,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3256:6:1",
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3252:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3231:31:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1042,
                        "nodeType": "ExpressionStatement",
                        "src": "3231:31:1"
                      },
                      {
                        "expression": {
                          "id": 1047,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1043,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3272:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1045,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3283:5:1",
                            "memberName": "payer",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 835,
                            "src": "3272:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1046,
                            "name": "_payer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1013,
                            "src": "3291:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "3272:25:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1048,
                        "nodeType": "ExpressionStatement",
                        "src": "3272:25:1"
                      },
                      {
                        "expression": {
                          "id": 1054,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1049,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3307:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1051,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3318:9:1",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 837,
                            "src": "3307:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "expression": {
                              "id": 1052,
                              "name": "block",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 4294967292,
                              "src": "3330:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_block",
                                "typeString": "block"
                              }
                            },
                            "id": 1053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "3336:9:1",
                            "memberName": "timestamp",
                            "nodeType": "MemberAccess",
                            "src": "3330:15:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3307:38:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1055,
                        "nodeType": "ExpressionStatement",
                        "src": "3307:38:1"
                      },
                      {
                        "expression": {
                          "id": 1060,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1056,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3355:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1058,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3366:13:1",
                            "memberName": "readyToReview",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 839,
                            "src": "3355:24:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 1059,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3382:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "3355:32:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1061,
                        "nodeType": "ExpressionStatement",
                        "src": "3355:32:1"
                      },
                      {
                        "expression": {
                          "id": 1066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1062,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3397:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1064,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3408:9:1",
                            "memberName": "fullyPaid",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 841,
                            "src": "3397:20:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "66616c7365",
                            "id": 1065,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3420:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          },
                          "src": "3397:28:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1067,
                        "nodeType": "ExpressionStatement",
                        "src": "3397:28:1"
                      },
                      {
                        "expression": {
                          "id": 1072,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "id": 1068,
                              "name": "newExpense",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1025,
                              "src": "3435:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                              }
                            },
                            "id": 1070,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "3446:15:1",
                            "memberName": "totalPaidAmount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 847,
                            "src": "3435:26:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "30",
                            "id": 1071,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3464:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "src": "3435:30:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1073,
                        "nodeType": "ExpressionStatement",
                        "src": "3435:30:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1075,
                              "name": "expenseId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1019,
                              "src": "3504:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1076,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967281,
                                "src": "3515:3:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1077,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "3519:6:1",
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "3515:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1078,
                              "name": "_payer",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1013,
                              "src": "3527:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "id": 1079,
                              "name": "_title",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1011,
                              "src": "3535:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1074,
                            "name": "ExpenseCreated",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 872,
                            "src": "3489:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_address_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,address,address,string memory)"
                            }
                          },
                          "id": 1080,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3489:53:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1081,
                        "nodeType": "EmitStatement",
                        "src": "3484:58:1"
                      },
                      {
                        "expression": {
                          "id": 1082,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1019,
                          "src": "3559:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1017,
                        "id": 1083,
                        "nodeType": "Return",
                        "src": "3552:16:1"
                      }
                    ]
                  },
                  "functionSelector": "114fe745",
                  "id": 1085,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "createExpenseRequest",
                  "nameLocation": "2958:20:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1014,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1011,
                        "mutability": "mutable",
                        "name": "_title",
                        "nameLocation": "3002:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "2988:20:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1010,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "2988:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1013,
                        "mutability": "mutable",
                        "name": "_payer",
                        "nameLocation": "3026:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "3018:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1012,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "3018:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "2978:60:1"
                  },
                  "returnParameters": {
                    "id": 1017,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1016,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1085,
                        "src": "3057:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1015,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3057:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3056:9:1"
                  },
                  "scope": 1891,
                  "src": "2949:626:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1132,
                    "nodeType": "Block",
                    "src": "3828:429:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1101,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1099,
                                "name": "expenseId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1087,
                                "src": "3846:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "id": 1100,
                                "name": "expenseCounter",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 855,
                                "src": "3858:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3846:26:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e76616c696420657870656e7365204944",
                              "id": 1102,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3874:20:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_eed166e3925f156db75254c2971934b0563186abe77ab75d9237f2931775ef9b",
                                "typeString": "literal_string \"Invalid expense ID\""
                              },
                              "value": "Invalid expense ID"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_eed166e3925f156db75254c2971934b0563186abe77ab75d9237f2931775ef9b",
                                "typeString": "literal_string \"Invalid expense ID\""
                              }
                            ],
                            "id": 1098,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "3838:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1103,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3838:57:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1104,
                        "nodeType": "ExpressionStatement",
                        "src": "3838:57:1"
                      },
                      {
                        "assignments": [
                          1107
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1107,
                            "mutability": "mutable",
                            "name": "newItem",
                            "nameLocation": "3933:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1132,
                            "src": "3914:26:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ExpenseItem_$829_memory_ptr",
                              "typeString": "struct OnChainExpenses.ExpenseItem"
                            },
                            "typeName": {
                              "id": 1106,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1105,
                                "name": "ExpenseItem",
                                "nameLocations": [
                                  "3914:11:1"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 829,
                                "src": "3914:11:1"
                              },
                              "referencedDeclaration": 829,
                              "src": "3914:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseItem"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1116,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1109,
                              "name": "_ipfsHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1089,
                              "src": "3979:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "id": 1110,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1091,
                              "src": "4010:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1111,
                              "name": "_category",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1093,
                              "src": "4041:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "hexValue": "66616c7365",
                              "id": 1112,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "bool",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4070:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "value": "false"
                            },
                            {
                              "expression": {
                                "id": 1113,
                                "name": "block",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967292,
                                "src": "4100:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_block",
                                  "typeString": "block"
                                }
                              },
                              "id": 1114,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4106:9:1",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "src": "4100:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1108,
                            "name": "ExpenseItem",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 829,
                            "src": "3943:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_struct$_ExpenseItem_$829_storage_ptr_$",
                              "typeString": "type(struct OnChainExpenses.ExpenseItem storage pointer)"
                            }
                          },
                          "id": 1115,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "structConstructorCall",
                          "lValueRequested": false,
                          "nameLocations": [
                            "3969:8:1",
                            "4002:6:1",
                            "4031:8:1",
                            "4064:4:1",
                            "4089:9:1"
                          ],
                          "names": [
                            "ipfsHash",
                            "amount",
                            "category",
                            "paid",
                            "timestamp"
                          ],
                          "nodeType": "FunctionCall",
                          "src": "3943:183:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExpenseItem_$829_memory_ptr",
                            "typeString": "struct OnChainExpenses.ExpenseItem memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "3914:212:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "id": 1122,
                              "name": "newItem",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1107,
                              "src": "4176:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseItem_$829_memory_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseItem memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_ExpenseItem_$829_memory_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseItem memory"
                              }
                            ],
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1117,
                                  "name": "expenses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 853,
                                  "src": "4145:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                    "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                  }
                                },
                                "id": 1119,
                                "indexExpression": {
                                  "id": 1118,
                                  "name": "expenseId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1087,
                                  "src": "4154:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4145:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                }
                              },
                              "id": 1120,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4165:5:1",
                              "memberName": "items",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 845,
                              "src": "4145:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                              }
                            },
                            "id": 1121,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "4171:4:1",
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "4145:30:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage_ptr_$_t_struct$_ExpenseItem_$829_storage_$returns$__$attached_to$_t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct OnChainExpenses.ExpenseItem storage ref[] storage pointer,struct OnChainExpenses.ExpenseItem storage ref)"
                            }
                          },
                          "id": 1123,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4145:39:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1124,
                        "nodeType": "ExpressionStatement",
                        "src": "4145:39:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1126,
                              "name": "expenseId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1087,
                              "src": "4209:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1127,
                              "name": "_ipfsHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1089,
                              "src": "4220:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            },
                            {
                              "id": 1128,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1091,
                              "src": "4231:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1129,
                              "name": "_category",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1093,
                              "src": "4240:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_string_memory_ptr",
                                "typeString": "string memory"
                              }
                            ],
                            "id": 1125,
                            "name": "ItemAdded",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 882,
                            "src": "4199:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_string_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (uint256,string memory,uint256,string memory)"
                            }
                          },
                          "id": 1130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4199:51:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1131,
                        "nodeType": "EmitStatement",
                        "src": "4194:56:1"
                      }
                    ]
                  },
                  "functionSelector": "d1528534",
                  "id": 1133,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "id": 1096,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1095,
                        "name": "onlyIApp",
                        "nameLocations": [
                          "3819:8:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1009,
                        "src": "3819:8:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "3819:8:1"
                    }
                  ],
                  "name": "addExpenseItem",
                  "nameLocation": "3671:14:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1094,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1087,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "3703:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1133,
                        "src": "3695:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1086,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3695:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1089,
                        "mutability": "mutable",
                        "name": "_ipfsHash",
                        "nameLocation": "3736:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1133,
                        "src": "3722:23:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1088,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3722:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1091,
                        "mutability": "mutable",
                        "name": "_amount",
                        "nameLocation": "3763:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1133,
                        "src": "3755:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1090,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "3755:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1093,
                        "mutability": "mutable",
                        "name": "_category",
                        "nameLocation": "3794:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1133,
                        "src": "3780:23:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1092,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "3780:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "3685:124:1"
                  },
                  "returnParameters": {
                    "id": 1097,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "3828:0:1"
                  },
                  "scope": 1891,
                  "src": "3662:595:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1152,
                    "nodeType": "Block",
                    "src": "4400:97:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 1146,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1141,
                                "name": "expenses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 853,
                                "src": "4410:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                  "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                }
                              },
                              "id": 1143,
                              "indexExpression": {
                                "id": 1142,
                                "name": "expenseId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1135,
                                "src": "4419:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4410:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                              }
                            },
                            "id": 1144,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "4430:13:1",
                            "memberName": "readyToReview",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 839,
                            "src": "4410:33:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "hexValue": "74727565",
                            "id": 1145,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4446:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "src": "4410:40:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1147,
                        "nodeType": "ExpressionStatement",
                        "src": "4410:40:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1149,
                              "name": "expenseId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1135,
                              "src": "4480:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1148,
                            "name": "ReadyForReview",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 886,
                            "src": "4465:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1150,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4465:25:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1151,
                        "nodeType": "EmitStatement",
                        "src": "4460:30:1"
                      }
                    ]
                  },
                  "functionSelector": "6646179a",
                  "id": 1153,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1138,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1135,
                          "src": "4389:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1139,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1137,
                        "name": "onlyCreator",
                        "nameLocations": [
                          "4377:11:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 980,
                        "src": "4377:11:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4377:22:1"
                    }
                  ],
                  "name": "setReadyForReview",
                  "nameLocation": "4331:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1136,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1135,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "4357:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1153,
                        "src": "4349:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1134,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4349:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4348:19:1"
                  },
                  "returnParameters": {
                    "id": 1140,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4400:0:1"
                  },
                  "scope": 1891,
                  "src": "4322:175:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1373,
                    "nodeType": "Block",
                    "src": "4717:2022:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "expression": {
                                "baseExpression": {
                                  "id": 1167,
                                  "name": "expenses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 853,
                                  "src": "4735:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                    "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                  }
                                },
                                "id": 1169,
                                "indexExpression": {
                                  "id": 1168,
                                  "name": "expenseId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1155,
                                  "src": "4744:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "4735:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                }
                              },
                              "id": 1170,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "4755:13:1",
                              "memberName": "readyToReview",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 839,
                              "src": "4735:33:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "457870656e7365206e6f7420726561647920666f7220726576696577",
                              "id": 1171,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4770:30:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_cc76d27343f6feacd56b4fbacd0faf23108908d201efffb8bf7da02bf309525d",
                                "typeString": "literal_string \"Expense not ready for review\""
                              },
                              "value": "Expense not ready for review"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_cc76d27343f6feacd56b4fbacd0faf23108908d201efffb8bf7da02bf309525d",
                                "typeString": "literal_string \"Expense not ready for review\""
                              }
                            ],
                            "id": 1166,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4727:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1172,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4727:74:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1173,
                        "nodeType": "ExpressionStatement",
                        "src": "4727:74:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1178,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1175,
                                  "name": "itemIds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1158,
                                  "src": "4819:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 1176,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "4827:6:1",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "4819:14:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "hexValue": "30",
                                "id": 1177,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "4836:1:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "4819:18:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4e6f206974656d732073656c6563746564",
                              "id": 1179,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4839:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_dbcf7d8c3bb43b168aad5030ebbb7164e6dc0cf764986a4fea73e4947128e48f",
                                "typeString": "literal_string \"No items selected\""
                              },
                              "value": "No items selected"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_dbcf7d8c3bb43b168aad5030ebbb7164e6dc0cf764986a4fea73e4947128e48f",
                                "typeString": "literal_string \"No items selected\""
                              }
                            ],
                            "id": 1174,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "4811:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1180,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4811:48:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1181,
                        "nodeType": "ExpressionStatement",
                        "src": "4811:48:1"
                      },
                      {
                        "assignments": [
                          1183
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1183,
                            "mutability": "mutable",
                            "name": "calculatedTotal",
                            "nameLocation": "4886:15:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1373,
                            "src": "4878:23:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1182,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "4878:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1185,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1184,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "4904:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4878:27:1"
                      },
                      {
                        "body": {
                          "id": 1236,
                          "nodeType": "Block",
                          "src": "5015:304:1",
                          "statements": [
                            {
                              "assignments": [
                                1198
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1198,
                                  "mutability": "mutable",
                                  "name": "itemId",
                                  "nameLocation": "5037:6:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1236,
                                  "src": "5029:14:1",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "typeName": {
                                    "id": 1197,
                                    "name": "uint256",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "5029:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1202,
                              "initialValue": {
                                "baseExpression": {
                                  "id": 1199,
                                  "name": "itemIds",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1158,
                                  "src": "5046:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 1201,
                                "indexExpression": {
                                  "id": 1200,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1187,
                                  "src": "5054:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "5046:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "5029:27:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 1210,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "id": 1204,
                                      "name": "itemId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1198,
                                      "src": "5078:6:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "expression": {
                                        "expression": {
                                          "baseExpression": {
                                            "id": 1205,
                                            "name": "expenses",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 853,
                                            "src": "5087:8:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                              "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                            }
                                          },
                                          "id": 1207,
                                          "indexExpression": {
                                            "id": 1206,
                                            "name": "expenseId",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1155,
                                            "src": "5096:9:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "5087:19:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                            "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                          }
                                        },
                                        "id": 1208,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "5107:5:1",
                                        "memberName": "items",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 845,
                                        "src": "5087:25:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                        }
                                      },
                                      "id": 1209,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "5113:6:1",
                                      "memberName": "length",
                                      "nodeType": "MemberAccess",
                                      "src": "5087:32:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "5078:41:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "496e76616c6964206974656d204944",
                                    "id": 1211,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5121:17:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_1f36b5dd1a75028dc73b151fc4f4b97db1d9a2ddcff5d82e6c15c93afc0265a0",
                                      "typeString": "literal_string \"Invalid item ID\""
                                    },
                                    "value": "Invalid item ID"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_1f36b5dd1a75028dc73b151fc4f4b97db1d9a2ddcff5d82e6c15c93afc0265a0",
                                      "typeString": "literal_string \"Invalid item ID\""
                                    }
                                  ],
                                  "id": 1203,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "5070:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1212,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5070:69:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1213,
                              "nodeType": "ExpressionStatement",
                              "src": "5070:69:1"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "id": 1222,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "UnaryOperation",
                                    "operator": "!",
                                    "prefix": true,
                                    "src": "5161:39:1",
                                    "subExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "expression": {
                                            "baseExpression": {
                                              "id": 1215,
                                              "name": "expenses",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 853,
                                              "src": "5162:8:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                                "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                              }
                                            },
                                            "id": 1217,
                                            "indexExpression": {
                                              "id": 1216,
                                              "name": "expenseId",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 1155,
                                              "src": "5171:9:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "5162:19:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                              "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                            }
                                          },
                                          "id": 1218,
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberLocation": "5182:5:1",
                                          "memberName": "items",
                                          "nodeType": "MemberAccess",
                                          "referencedDeclaration": 845,
                                          "src": "5162:25:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                            "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                          }
                                        },
                                        "id": 1220,
                                        "indexExpression": {
                                          "id": 1219,
                                          "name": "itemId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1198,
                                          "src": "5188:6:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "5162:33:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                        }
                                      },
                                      "id": 1221,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "5196:4:1",
                                      "memberName": "paid",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 826,
                                      "src": "5162:38:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  {
                                    "hexValue": "4974656d20616c72656164792070616964",
                                    "id": 1223,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "5202:19:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_30c4dff284a7b3f85280d5f8c10d041df9c9fcda44e397382d9fc5b80004ecde",
                                      "typeString": "literal_string \"Item already paid\""
                                    },
                                    "value": "Item already paid"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    {
                                      "typeIdentifier": "t_stringliteral_30c4dff284a7b3f85280d5f8c10d041df9c9fcda44e397382d9fc5b80004ecde",
                                      "typeString": "literal_string \"Item already paid\""
                                    }
                                  ],
                                  "id": 1214,
                                  "name": "require",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [
                                    4294967278,
                                    4294967278,
                                    4294967278
                                  ],
                                  "referencedDeclaration": 4294967278,
                                  "src": "5153:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                                    "typeString": "function (bool,string memory) pure"
                                  }
                                },
                                "id": 1224,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5153:69:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$__$",
                                  "typeString": "tuple()"
                                }
                              },
                              "id": 1225,
                              "nodeType": "ExpressionStatement",
                              "src": "5153:69:1"
                            },
                            {
                              "expression": {
                                "id": 1234,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 1226,
                                  "name": "calculatedTotal",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1183,
                                  "src": "5249:15:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "+=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 1227,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "5268:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 1229,
                                        "indexExpression": {
                                          "id": 1228,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1155,
                                          "src": "5277:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "5268:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 1230,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "5288:5:1",
                                      "memberName": "items",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 845,
                                      "src": "5268:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                      }
                                    },
                                    "id": 1232,
                                    "indexExpression": {
                                      "id": 1231,
                                      "name": "itemId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1198,
                                      "src": "5294:6:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5268:33:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                    }
                                  },
                                  "id": 1233,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5302:6:1",
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 822,
                                  "src": "5268:40:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "5249:59:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1235,
                              "nodeType": "ExpressionStatement",
                              "src": "5249:59:1"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1193,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1190,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1187,
                            "src": "4990:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1191,
                              "name": "itemIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1158,
                              "src": "4994:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1192,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "5002:6:1",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "4994:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4990:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1237,
                        "initializationExpression": {
                          "assignments": [
                            1187
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1187,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "4983:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1237,
                              "src": "4975:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1186,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "4975:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1189,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1188,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4987:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "4975:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1195,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "5010:3:1",
                            "subExpression": {
                              "id": 1194,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "5010:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1196,
                          "nodeType": "ExpressionStatement",
                          "src": "5010:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "4970:349:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1241,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1239,
                                "name": "totalAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1160,
                                "src": "5403:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1240,
                                "name": "calculatedTotal",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1183,
                                "src": "5418:15:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5403:30:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "546f74616c20616d6f756e74206d69736d61746368",
                              "id": 1242,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5435:23:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_360f34a25996165327379e4686447236b018300ff3a73fe57b0939743de03f0c",
                                "typeString": "literal_string \"Total amount mismatch\""
                              },
                              "value": "Total amount mismatch"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_360f34a25996165327379e4686447236b018300ff3a73fe57b0939743de03f0c",
                                "typeString": "literal_string \"Total amount mismatch\""
                              }
                            ],
                            "id": 1238,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "5395:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1243,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5395:64:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1244,
                        "nodeType": "ExpressionStatement",
                        "src": "5395:64:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1256,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1248,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "5559:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1249,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5563:6:1",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "5559:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "id": 1252,
                                        "name": "this",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 4294967268,
                                        "src": "5579:4:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_contract$_OnChainExpenses_$1891",
                                          "typeString": "contract OnChainExpenses"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_contract$_OnChainExpenses_$1891",
                                          "typeString": "contract OnChainExpenses"
                                        }
                                      ],
                                      "id": 1251,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "lValueRequested": false,
                                      "nodeType": "ElementaryTypeNameExpression",
                                      "src": "5571:7:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_type$_t_address_$",
                                        "typeString": "type(address)"
                                      },
                                      "typeName": {
                                        "id": 1250,
                                        "name": "address",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "5571:7:1",
                                        "typeDescriptions": {}
                                      }
                                    },
                                    "id": 1253,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "typeConversion",
                                    "lValueRequested": false,
                                    "nameLocations": [],
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "5571:13:1",
                                    "tryCall": false,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1246,
                                    "name": "stableCoin",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 862,
                                    "src": "5538:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$818",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 1247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5549:9:1",
                                  "memberName": "allowance",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 817,
                                  "src": "5538:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address,address) view external returns (uint256)"
                                  }
                                },
                                "id": 1254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5538:47:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1255,
                                "name": "totalAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1160,
                                "src": "5589:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5538:62:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e7420616c6c6f77616e6365",
                              "id": 1257,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5614:24:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              },
                              "value": "Insufficient allowance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_45e3d26e36c3151c7f92a1eee9add9658cbb8e14605ee2452ec007389b9744bc",
                                "typeString": "literal_string \"Insufficient allowance\""
                              }
                            ],
                            "id": 1245,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "5517:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5517:131:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1259,
                        "nodeType": "ExpressionStatement",
                        "src": "5517:131:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1267,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "arguments": [
                                  {
                                    "expression": {
                                      "id": 1263,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 4294967281,
                                      "src": "5700:3:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1264,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "5704:6:1",
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "src": "5700:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  ],
                                  "expression": {
                                    "id": 1261,
                                    "name": "stableCoin",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 862,
                                    "src": "5679:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_IERC20_$818",
                                      "typeString": "contract IERC20"
                                    }
                                  },
                                  "id": 1262,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5690:9:1",
                                  "memberName": "balanceOf",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 808,
                                  "src": "5679:20:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                    "typeString": "function (address) view external returns (uint256)"
                                  }
                                },
                                "id": 1265,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "5679:32:1",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">=",
                              "rightExpression": {
                                "id": 1266,
                                "name": "totalAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1160,
                                "src": "5715:11:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "5679:47:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e73756666696369656e742062616c616e6365",
                              "id": 1268,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5740:22:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              },
                              "value": "Insufficient balance"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_47533c3652efd02135ecc34b3fac8efc7b14bf0618b9392fd6e044a3d8a6eef5",
                                "typeString": "literal_string \"Insufficient balance\""
                              }
                            ],
                            "id": 1260,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "5658:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1269,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5658:114:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1270,
                        "nodeType": "ExpressionStatement",
                        "src": "5658:114:1"
                      },
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "expression": {
                                    "id": 1274,
                                    "name": "msg",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967281,
                                    "src": "5885:3:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_magic_message",
                                      "typeString": "msg"
                                    }
                                  },
                                  "id": 1275,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5889:6:1",
                                  "memberName": "sender",
                                  "nodeType": "MemberAccess",
                                  "src": "5885:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1276,
                                      "name": "expenses",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 853,
                                      "src": "5897:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                        "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                      }
                                    },
                                    "id": 1278,
                                    "indexExpression": {
                                      "id": 1277,
                                      "name": "expenseId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1155,
                                      "src": "5906:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5897:19:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                    }
                                  },
                                  "id": 1279,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "5917:7:1",
                                  "memberName": "creator",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 833,
                                  "src": "5897:27:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                {
                                  "id": 1280,
                                  "name": "totalAmount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1160,
                                  "src": "5926:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  },
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "id": 1272,
                                  "name": "stableCoin",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 862,
                                  "src": "5861:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_IERC20_$818",
                                    "typeString": "contract IERC20"
                                  }
                                },
                                "id": 1273,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "5872:12:1",
                                "memberName": "transferFrom",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 801,
                                "src": "5861:23:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                                  "typeString": "function (address,address,uint256) external returns (bool)"
                                }
                              },
                              "id": 1281,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "nameLocations": [],
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "5861:77:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "5472616e73666572206661696c6564",
                              "id": 1282,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "5952:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                "typeString": "literal_string \"Transfer failed\""
                              },
                              "value": "Transfer failed"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_25adaa6d082ce15f901e0d8a3d393e7462ef9edf2e6bc8321fa14d1615b6fc51",
                                "typeString": "literal_string \"Transfer failed\""
                              }
                            ],
                            "id": 1271,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "5840:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1283,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "5840:139:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1284,
                        "nodeType": "ExpressionStatement",
                        "src": "5840:139:1"
                      },
                      {
                        "body": {
                          "id": 1308,
                          "nodeType": "Block",
                          "src": "6073:74:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 1306,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 1296,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "6087:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 1298,
                                        "indexExpression": {
                                          "id": 1297,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1155,
                                          "src": "6096:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "6087:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 1299,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "6107:5:1",
                                      "memberName": "items",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 845,
                                      "src": "6087:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                      }
                                    },
                                    "id": 1303,
                                    "indexExpression": {
                                      "baseExpression": {
                                        "id": 1300,
                                        "name": "itemIds",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1158,
                                        "src": "6113:7:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                          "typeString": "uint256[] memory"
                                        }
                                      },
                                      "id": 1302,
                                      "indexExpression": {
                                        "id": 1301,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1286,
                                        "src": "6121:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "6113:10:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6087:37:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                    }
                                  },
                                  "id": 1304,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "6125:4:1",
                                  "memberName": "paid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 826,
                                  "src": "6087:42:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 1305,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6132:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "6087:49:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1307,
                              "nodeType": "ExpressionStatement",
                              "src": "6087:49:1"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1289,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1286,
                            "src": "6048:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "id": 1290,
                              "name": "itemIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1158,
                              "src": "6052:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 1291,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6060:6:1",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "6052:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6048:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1309,
                        "initializationExpression": {
                          "assignments": [
                            1286
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1286,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "6041:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1309,
                              "src": "6033:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1285,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "6033:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1288,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1287,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6045:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "6033:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "6068:3:1",
                            "subExpression": {
                              "id": 1293,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1286,
                              "src": "6068:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1295,
                          "nodeType": "ExpressionStatement",
                          "src": "6068:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "6028:119:1"
                      },
                      {
                        "expression": {
                          "id": 1315,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "expression": {
                              "baseExpression": {
                                "id": 1310,
                                "name": "expenses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 853,
                                "src": "6165:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                  "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                }
                              },
                              "id": 1312,
                              "indexExpression": {
                                "id": 1311,
                                "name": "expenseId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1155,
                                "src": "6174:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6165:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                              }
                            },
                            "id": 1313,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": true,
                            "memberLocation": "6185:15:1",
                            "memberName": "totalPaidAmount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 847,
                            "src": "6165:35:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "+=",
                          "rightHandSide": {
                            "id": 1314,
                            "name": "totalAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1160,
                            "src": "6204:11:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6165:50:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1316,
                        "nodeType": "ExpressionStatement",
                        "src": "6165:50:1"
                      },
                      {
                        "assignments": [
                          1318
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1318,
                            "mutability": "mutable",
                            "name": "allItemsPaid",
                            "nameLocation": "6278:12:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1373,
                            "src": "6273:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "typeName": {
                              "id": 1317,
                              "name": "bool",
                              "nodeType": "ElementaryTypeName",
                              "src": "6273:4:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1320,
                        "initialValue": {
                          "hexValue": "74727565",
                          "id": 1319,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "6293:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "6273:24:1"
                      },
                      {
                        "body": {
                          "id": 1350,
                          "nodeType": "Block",
                          "src": "6370:140:1",
                          "statements": [
                            {
                              "condition": {
                                "id": 1342,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "6388:34:1",
                                "subExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 1335,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "6389:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 1337,
                                        "indexExpression": {
                                          "id": 1336,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1155,
                                          "src": "6398:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "6389:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 1338,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "6409:5:1",
                                      "memberName": "items",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 845,
                                      "src": "6389:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                      }
                                    },
                                    "id": 1340,
                                    "indexExpression": {
                                      "id": 1339,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1322,
                                      "src": "6415:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6389:28:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                    }
                                  },
                                  "id": 1341,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "6418:4:1",
                                  "memberName": "paid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 826,
                                  "src": "6389:33:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1349,
                              "nodeType": "IfStatement",
                              "src": "6384:116:1",
                              "trueBody": {
                                "id": 1348,
                                "nodeType": "Block",
                                "src": "6424:76:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1345,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1343,
                                        "name": "allItemsPaid",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1318,
                                        "src": "6442:12:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "hexValue": "66616c7365",
                                        "id": 1344,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "bool",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "6457:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "value": "false"
                                      },
                                      "src": "6442:20:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 1346,
                                    "nodeType": "ExpressionStatement",
                                    "src": "6442:20:1"
                                  },
                                  {
                                    "id": 1347,
                                    "nodeType": "Break",
                                    "src": "6480:5:1"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1331,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1325,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1322,
                            "src": "6327:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1326,
                                  "name": "expenses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 853,
                                  "src": "6331:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                    "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                  }
                                },
                                "id": 1328,
                                "indexExpression": {
                                  "id": 1327,
                                  "name": "expenseId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1155,
                                  "src": "6340:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6331:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                }
                              },
                              "id": 1329,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "6351:5:1",
                              "memberName": "items",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 845,
                              "src": "6331:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                              }
                            },
                            "id": 1330,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "6357:6:1",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "6331:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "6327:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1351,
                        "initializationExpression": {
                          "assignments": [
                            1322
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1322,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "6320:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1351,
                              "src": "6312:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1321,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "6312:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1324,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1323,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "6324:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "6312:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "6365:3:1",
                            "subExpression": {
                              "id": 1332,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1322,
                              "src": "6365:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1334,
                          "nodeType": "ExpressionStatement",
                          "src": "6365:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "6307:203:1"
                      },
                      {
                        "condition": {
                          "id": 1352,
                          "name": "allItemsPaid",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1318,
                          "src": "6532:12:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1361,
                        "nodeType": "IfStatement",
                        "src": "6528:79:1",
                        "trueBody": {
                          "id": 1360,
                          "nodeType": "Block",
                          "src": "6546:61:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 1358,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1353,
                                      "name": "expenses",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 853,
                                      "src": "6560:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                        "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                      }
                                    },
                                    "id": 1355,
                                    "indexExpression": {
                                      "id": 1354,
                                      "name": "expenseId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1155,
                                      "src": "6569:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "6560:19:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                    }
                                  },
                                  "id": 1356,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "memberLocation": "6580:9:1",
                                  "memberName": "fullyPaid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 841,
                                  "src": "6560:29:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "hexValue": "74727565",
                                  "id": 1357,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "bool",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6592:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "value": "true"
                                },
                                "src": "6560:36:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1359,
                              "nodeType": "ExpressionStatement",
                              "src": "6560:36:1"
                            }
                          ]
                        }
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1363,
                              "name": "expenseId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1155,
                              "src": "6645:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1364,
                              "name": "itemIds",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1158,
                              "src": "6656:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            {
                              "id": 1365,
                              "name": "totalAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1160,
                              "src": "6665:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1362,
                            "name": "ItemsPaidBatch",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 895,
                            "src": "6630:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256[] memory,uint256)"
                            }
                          },
                          "id": 1366,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6630:47:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1367,
                        "nodeType": "EmitStatement",
                        "src": "6625:52:1"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1369,
                              "name": "expenseId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1155,
                              "src": "6709:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "id": 1370,
                              "name": "totalAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1160,
                              "src": "6720:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1368,
                            "name": "PaymentCompleted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 901,
                            "src": "6692:16:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
                              "typeString": "function (uint256,uint256)"
                            }
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6692:40:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1372,
                        "nodeType": "EmitStatement",
                        "src": "6687:45:1"
                      }
                    ]
                  },
                  "functionSelector": "7faedbef",
                  "id": 1374,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1163,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1155,
                          "src": "4706:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1164,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1162,
                        "name": "onlyPayer",
                        "nameLocations": [
                          "4696:9:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 997,
                        "src": "4696:9:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "4696:20:1"
                    }
                  ],
                  "name": "batchPayItems",
                  "nameLocation": "4577:13:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1161,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1155,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "4608:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1374,
                        "src": "4600:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1154,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4600:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1158,
                        "mutability": "mutable",
                        "name": "itemIds",
                        "nameLocation": "4644:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1374,
                        "src": "4627:24:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1156,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "4627:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1157,
                          "nodeType": "ArrayTypeName",
                          "src": "4627:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1160,
                        "mutability": "mutable",
                        "name": "totalAmount",
                        "nameLocation": "4669:11:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1374,
                        "src": "4661:19:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1159,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "4661:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "4590:96:1"
                  },
                  "returnParameters": {
                    "id": 1165,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "4717:0:1"
                  },
                  "scope": 1891,
                  "src": "4568:2171:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1424,
                    "nodeType": "Block",
                    "src": "7187:347:1",
                    "statements": [
                      {
                        "assignments": [
                          1400
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1400,
                            "mutability": "mutable",
                            "name": "expense",
                            "nameLocation": "7220:7:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1424,
                            "src": "7197:30:1",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                              "typeString": "struct OnChainExpenses.ExpenseRequest"
                            },
                            "typeName": {
                              "id": 1399,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1398,
                                "name": "ExpenseRequest",
                                "nameLocations": [
                                  "7197:14:1"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 848,
                                "src": "7197:14:1"
                              },
                              "referencedDeclaration": 848,
                              "src": "7197:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseRequest"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1404,
                        "initialValue": {
                          "baseExpression": {
                            "id": 1401,
                            "name": "expenses",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 853,
                            "src": "7230:8:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                              "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                            }
                          },
                          "id": 1403,
                          "indexExpression": {
                            "id": 1402,
                            "name": "expenseId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1376,
                            "src": "7239:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7230:19:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                            "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7197:52:1"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "expression": {
                                "id": 1405,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7280:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1406,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7288:5:1",
                              "memberName": "title",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 831,
                              "src": "7280:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "expression": {
                                "id": 1407,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7307:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1408,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7315:7:1",
                              "memberName": "creator",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 833,
                              "src": "7307:15:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 1409,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7336:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1410,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7344:5:1",
                              "memberName": "payer",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 835,
                              "src": "7336:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "expression": {
                                "id": 1411,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7363:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1412,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7371:9:1",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 837,
                              "src": "7363:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1413,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7394:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1414,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7402:13:1",
                              "memberName": "readyToReview",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 839,
                              "src": "7394:21:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "id": 1415,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7429:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1416,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7437:9:1",
                              "memberName": "fullyPaid",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 841,
                              "src": "7429:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "id": 1417,
                                "name": "expense",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1400,
                                "src": "7460:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                }
                              },
                              "id": 1418,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7468:15:1",
                              "memberName": "totalPaidAmount",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 847,
                              "src": "7460:23:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "expression": {
                                  "id": 1419,
                                  "name": "expense",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1400,
                                  "src": "7497:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage_ptr",
                                    "typeString": "struct OnChainExpenses.ExpenseRequest storage pointer"
                                  }
                                },
                                "id": 1420,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7505:5:1",
                                "memberName": "items",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 845,
                                "src": "7497:13:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                }
                              },
                              "id": 1421,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "7511:6:1",
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "src": "7497:20:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 1422,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "7266:261:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_string_storage_$_t_address_$_t_address_$_t_uint256_$_t_bool_$_t_bool_$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(string storage ref,address,address,uint256,bool,bool,uint256,uint256)"
                          }
                        },
                        "functionReturnParameters": 1397,
                        "id": 1423,
                        "nodeType": "Return",
                        "src": "7259:268:1"
                      }
                    ]
                  },
                  "functionSelector": "59104836",
                  "id": 1425,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1379,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1376,
                          "src": "6895:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1380,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1378,
                        "name": "onlyAuthorized",
                        "nameLocations": [
                          "6880:14:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 963,
                        "src": "6880:14:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "6880:25:1"
                    }
                  ],
                  "name": "getExpenseRequest",
                  "nameLocation": "6802:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1377,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1376,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "6828:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "6820:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1375,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "6820:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6819:19:1"
                  },
                  "returnParameters": {
                    "id": 1397,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1382,
                        "mutability": "mutable",
                        "name": "title",
                        "nameLocation": "6951:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "6937:19:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1381,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "6937:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1384,
                        "mutability": "mutable",
                        "name": "creator",
                        "nameLocation": "6978:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "6970:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1383,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6970:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1386,
                        "mutability": "mutable",
                        "name": "payer",
                        "nameLocation": "7007:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "6999:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1385,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "6999:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1388,
                        "mutability": "mutable",
                        "name": "timestamp",
                        "nameLocation": "7034:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "7026:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1387,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7026:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1390,
                        "mutability": "mutable",
                        "name": "readyToReview",
                        "nameLocation": "7062:13:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "7057:18:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1389,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7057:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1392,
                        "mutability": "mutable",
                        "name": "fullyPaid",
                        "nameLocation": "7094:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "7089:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1391,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7089:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1394,
                        "mutability": "mutable",
                        "name": "totalPaidAmount",
                        "nameLocation": "7125:15:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "7117:23:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1393,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7117:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1396,
                        "mutability": "mutable",
                        "name": "itemCount",
                        "nameLocation": "7162:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1425,
                        "src": "7154:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1395,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7154:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "6923:258:1"
                  },
                  "scope": 1891,
                  "src": "6793:741:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1478,
                    "nodeType": "Block",
                    "src": "7857:243:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1452,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "id": 1446,
                                "name": "itemId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1429,
                                "src": "7875:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "expression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1447,
                                      "name": "expenses",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 853,
                                      "src": "7884:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                        "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                      }
                                    },
                                    "id": 1449,
                                    "indexExpression": {
                                      "id": 1448,
                                      "name": "expenseId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1427,
                                      "src": "7893:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "7884:19:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                    }
                                  },
                                  "id": 1450,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "7904:5:1",
                                  "memberName": "items",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 845,
                                  "src": "7884:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                    "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                  }
                                },
                                "id": 1451,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "7910:6:1",
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "src": "7884:32:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7875:41:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "496e76616c6964206974656d204944",
                              "id": 1453,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "7918:17:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_1f36b5dd1a75028dc73b151fc4f4b97db1d9a2ddcff5d82e6c15c93afc0265a0",
                                "typeString": "literal_string \"Invalid item ID\""
                              },
                              "value": "Invalid item ID"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_1f36b5dd1a75028dc73b151fc4f4b97db1d9a2ddcff5d82e6c15c93afc0265a0",
                                "typeString": "literal_string \"Invalid item ID\""
                              }
                            ],
                            "id": 1445,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "7867:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1454,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7867:69:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1455,
                        "nodeType": "ExpressionStatement",
                        "src": "7867:69:1"
                      },
                      {
                        "assignments": [
                          1458
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1458,
                            "mutability": "mutable",
                            "name": "item",
                            "nameLocation": "7966:4:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1478,
                            "src": "7946:24:1",
                            "stateVariable": false,
                            "storageLocation": "storage",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                              "typeString": "struct OnChainExpenses.ExpenseItem"
                            },
                            "typeName": {
                              "id": 1457,
                              "nodeType": "UserDefinedTypeName",
                              "pathNode": {
                                "id": 1456,
                                "name": "ExpenseItem",
                                "nameLocations": [
                                  "7946:11:1"
                                ],
                                "nodeType": "IdentifierPath",
                                "referencedDeclaration": 829,
                                "src": "7946:11:1"
                              },
                              "referencedDeclaration": 829,
                              "src": "7946:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                "typeString": "struct OnChainExpenses.ExpenseItem"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1465,
                        "initialValue": {
                          "baseExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 1459,
                                "name": "expenses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 853,
                                "src": "7973:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                  "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                }
                              },
                              "id": 1461,
                              "indexExpression": {
                                "id": 1460,
                                "name": "expenseId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1427,
                                "src": "7982:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7973:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                              }
                            },
                            "id": 1462,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "7993:5:1",
                            "memberName": "items",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 845,
                            "src": "7973:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                              "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                            }
                          },
                          "id": 1464,
                          "indexExpression": {
                            "id": 1463,
                            "name": "itemId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1429,
                            "src": "7999:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7973:33:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                            "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7946:60:1"
                      },
                      {
                        "expression": {
                          "components": [
                            {
                              "expression": {
                                "id": 1466,
                                "name": "item",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "8024:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                }
                              },
                              "id": 1467,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8029:8:1",
                              "memberName": "ipfsHash",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 820,
                              "src": "8024:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "expression": {
                                "id": 1468,
                                "name": "item",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "8039:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                }
                              },
                              "id": 1469,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8044:6:1",
                              "memberName": "amount",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 822,
                              "src": "8039:11:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "expression": {
                                "id": 1470,
                                "name": "item",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "8052:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                }
                              },
                              "id": 1471,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8057:8:1",
                              "memberName": "category",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 824,
                              "src": "8052:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_string_storage",
                                "typeString": "string storage ref"
                              }
                            },
                            {
                              "expression": {
                                "id": 1472,
                                "name": "item",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "8067:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                }
                              },
                              "id": 1473,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8072:4:1",
                              "memberName": "paid",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 826,
                              "src": "8067:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "expression": {
                                "id": 1474,
                                "name": "item",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1458,
                                "src": "8078:4:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                }
                              },
                              "id": 1475,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "8083:9:1",
                              "memberName": "timestamp",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 828,
                              "src": "8078:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 1476,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "8023:70:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_string_storage_$_t_uint256_$_t_string_storage_$_t_bool_$_t_uint256_$",
                            "typeString": "tuple(string storage ref,uint256,string storage ref,bool,uint256)"
                          }
                        },
                        "functionReturnParameters": 1444,
                        "id": 1477,
                        "nodeType": "Return",
                        "src": "8016:77:1"
                      }
                    ]
                  },
                  "functionSelector": "ceecd1a6",
                  "id": 1479,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1432,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1427,
                          "src": "7659:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1433,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1431,
                        "name": "onlyAuthorized",
                        "nameLocations": [
                          "7644:14:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 963,
                        "src": "7644:14:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "7644:25:1"
                    }
                  ],
                  "name": "getExpenseItem",
                  "nameLocation": "7553:14:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1430,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1427,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "7576:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7568:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1426,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7568:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1429,
                        "mutability": "mutable",
                        "name": "itemId",
                        "nameLocation": "7595:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7587:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1428,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7587:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7567:35:1"
                  },
                  "returnParameters": {
                    "id": 1444,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1435,
                        "mutability": "mutable",
                        "name": "ipfsHash",
                        "nameLocation": "7715:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7701:22:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1434,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7701:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1437,
                        "mutability": "mutable",
                        "name": "amount",
                        "nameLocation": "7745:6:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7737:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1436,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7737:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1439,
                        "mutability": "mutable",
                        "name": "category",
                        "nameLocation": "7779:8:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7765:22:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string"
                        },
                        "typeName": {
                          "id": 1438,
                          "name": "string",
                          "nodeType": "ElementaryTypeName",
                          "src": "7765:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage_ptr",
                            "typeString": "string"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1441,
                        "mutability": "mutable",
                        "name": "paid",
                        "nameLocation": "7806:4:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7801:9:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 1440,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "7801:4:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1443,
                        "mutability": "mutable",
                        "name": "timestamp",
                        "nameLocation": "7832:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1479,
                        "src": "7824:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1442,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7824:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "7687:164:1"
                  },
                  "scope": 1891,
                  "src": "7544:556:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1607,
                    "nodeType": "Block",
                    "src": "8519:650:1",
                    "statements": [
                      {
                        "assignments": [
                          1503
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1503,
                            "mutability": "mutable",
                            "name": "itemCount",
                            "nameLocation": "8537:9:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1607,
                            "src": "8529:17:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1502,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "8529:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1509,
                        "initialValue": {
                          "expression": {
                            "expression": {
                              "baseExpression": {
                                "id": 1504,
                                "name": "expenses",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 853,
                                "src": "8549:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                  "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                }
                              },
                              "id": 1506,
                              "indexExpression": {
                                "id": 1505,
                                "name": "expenseId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1481,
                                "src": "8558:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8549:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                              }
                            },
                            "id": 1507,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "8569:5:1",
                            "memberName": "items",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 845,
                            "src": "8549:25:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                              "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                            }
                          },
                          "id": 1508,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberLocation": "8575:6:1",
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "src": "8549:32:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "8529:52:1"
                      },
                      {
                        "expression": {
                          "id": 1516,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1510,
                            "name": "ipfsHashes",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1488,
                            "src": "8600:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1514,
                                "name": "itemCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1503,
                                "src": "8626:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1513,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "8613:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1511,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8617:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "id": 1512,
                                "nodeType": "ArrayTypeName",
                                "src": "8617:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                  "typeString": "string[]"
                                }
                              }
                            },
                            "id": 1515,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8613:23:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "src": "8600:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        },
                        "id": 1517,
                        "nodeType": "ExpressionStatement",
                        "src": "8600:36:1"
                      },
                      {
                        "expression": {
                          "id": 1524,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1518,
                            "name": "amounts",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1491,
                            "src": "8646:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1522,
                                "name": "itemCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1503,
                                "src": "8670:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1521,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "8656:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1519,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8660:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1520,
                                "nodeType": "ArrayTypeName",
                                "src": "8660:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1523,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8656:24:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "8646:34:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1525,
                        "nodeType": "ExpressionStatement",
                        "src": "8646:34:1"
                      },
                      {
                        "expression": {
                          "id": 1532,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1526,
                            "name": "categories",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1494,
                            "src": "8690:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1530,
                                "name": "itemCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1503,
                                "src": "8716:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1529,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "8703:12:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (string memory[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1527,
                                  "name": "string",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8707:6:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage_ptr",
                                    "typeString": "string"
                                  }
                                },
                                "id": 1528,
                                "nodeType": "ArrayTypeName",
                                "src": "8707:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                                  "typeString": "string[]"
                                }
                              }
                            },
                            "id": 1531,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8703:23:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                              "typeString": "string memory[] memory"
                            }
                          },
                          "src": "8690:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                            "typeString": "string memory[] memory"
                          }
                        },
                        "id": 1533,
                        "nodeType": "ExpressionStatement",
                        "src": "8690:36:1"
                      },
                      {
                        "expression": {
                          "id": 1540,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1534,
                            "name": "paidStatus",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1497,
                            "src": "8736:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                              "typeString": "bool[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1538,
                                "name": "itemCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1503,
                                "src": "8760:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1537,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "8749:10:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (bool[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1535,
                                  "name": "bool",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8753:4:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "id": 1536,
                                "nodeType": "ArrayTypeName",
                                "src": "8753:6:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                                  "typeString": "bool[]"
                                }
                              }
                            },
                            "id": 1539,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8749:21:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                              "typeString": "bool[] memory"
                            }
                          },
                          "src": "8736:34:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                            "typeString": "bool[] memory"
                          }
                        },
                        "id": 1541,
                        "nodeType": "ExpressionStatement",
                        "src": "8736:34:1"
                      },
                      {
                        "expression": {
                          "id": 1548,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1542,
                            "name": "timestamps",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1500,
                            "src": "8780:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1546,
                                "name": "itemCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1503,
                                "src": "8807:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 1545,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "8793:13:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                                "typeString": "function (uint256) pure returns (uint256[] memory)"
                              },
                              "typeName": {
                                "baseType": {
                                  "id": 1543,
                                  "name": "uint256",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "8797:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 1544,
                                "nodeType": "ArrayTypeName",
                                "src": "8797:9:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                  "typeString": "uint256[]"
                                }
                              }
                            },
                            "id": 1547,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "8793:24:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          },
                          "src": "8780:37:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "id": 1549,
                        "nodeType": "ExpressionStatement",
                        "src": "8780:37:1"
                      },
                      {
                        "body": {
                          "id": 1605,
                          "nodeType": "Block",
                          "src": "8876:287:1",
                          "statements": [
                            {
                              "assignments": [
                                1562
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 1562,
                                  "mutability": "mutable",
                                  "name": "item",
                                  "nameLocation": "8910:4:1",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 1605,
                                  "src": "8890:24:1",
                                  "stateVariable": false,
                                  "storageLocation": "storage",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                    "typeString": "struct OnChainExpenses.ExpenseItem"
                                  },
                                  "typeName": {
                                    "id": 1561,
                                    "nodeType": "UserDefinedTypeName",
                                    "pathNode": {
                                      "id": 1560,
                                      "name": "ExpenseItem",
                                      "nameLocations": [
                                        "8890:11:1"
                                      ],
                                      "nodeType": "IdentifierPath",
                                      "referencedDeclaration": 829,
                                      "src": "8890:11:1"
                                    },
                                    "referencedDeclaration": 829,
                                    "src": "8890:11:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem"
                                    }
                                  },
                                  "visibility": "internal"
                                }
                              ],
                              "id": 1569,
                              "initialValue": {
                                "baseExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1563,
                                      "name": "expenses",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 853,
                                      "src": "8917:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                        "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                      }
                                    },
                                    "id": 1565,
                                    "indexExpression": {
                                      "id": 1564,
                                      "name": "expenseId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1481,
                                      "src": "8926:9:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "8917:19:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                    }
                                  },
                                  "id": 1566,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8937:5:1",
                                  "memberName": "items",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 845,
                                  "src": "8917:25:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                    "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                  }
                                },
                                "id": 1568,
                                "indexExpression": {
                                  "id": 1567,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1551,
                                  "src": "8943:1:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8917:28:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "8890:55:1"
                            },
                            {
                              "expression": {
                                "id": 1575,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1570,
                                    "name": "ipfsHashes",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1488,
                                    "src": "8959:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 1572,
                                  "indexExpression": {
                                    "id": 1571,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "8970:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "8959:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1573,
                                    "name": "item",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1562,
                                    "src": "8975:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                    }
                                  },
                                  "id": 1574,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "8980:8:1",
                                  "memberName": "ipfsHash",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 820,
                                  "src": "8975:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                "src": "8959:29:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "id": 1576,
                              "nodeType": "ExpressionStatement",
                              "src": "8959:29:1"
                            },
                            {
                              "expression": {
                                "id": 1582,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1577,
                                    "name": "amounts",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1491,
                                    "src": "9002:7:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1579,
                                  "indexExpression": {
                                    "id": 1578,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "9010:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "9002:10:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1580,
                                    "name": "item",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1562,
                                    "src": "9015:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                    }
                                  },
                                  "id": 1581,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "9020:6:1",
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 822,
                                  "src": "9015:11:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9002:24:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1583,
                              "nodeType": "ExpressionStatement",
                              "src": "9002:24:1"
                            },
                            {
                              "expression": {
                                "id": 1589,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1584,
                                    "name": "categories",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1494,
                                    "src": "9040:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 1586,
                                  "indexExpression": {
                                    "id": 1585,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "9051:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "9040:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1587,
                                    "name": "item",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1562,
                                    "src": "9056:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                    }
                                  },
                                  "id": 1588,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "9061:8:1",
                                  "memberName": "category",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 824,
                                  "src": "9056:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_storage",
                                    "typeString": "string storage ref"
                                  }
                                },
                                "src": "9040:29:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory_ptr",
                                  "typeString": "string memory"
                                }
                              },
                              "id": 1590,
                              "nodeType": "ExpressionStatement",
                              "src": "9040:29:1"
                            },
                            {
                              "expression": {
                                "id": 1596,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1591,
                                    "name": "paidStatus",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1497,
                                    "src": "9083:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                                      "typeString": "bool[] memory"
                                    }
                                  },
                                  "id": 1593,
                                  "indexExpression": {
                                    "id": 1592,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "9094:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "9083:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1594,
                                    "name": "item",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1562,
                                    "src": "9099:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                    }
                                  },
                                  "id": 1595,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "9104:4:1",
                                  "memberName": "paid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 826,
                                  "src": "9099:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "9083:25:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1597,
                              "nodeType": "ExpressionStatement",
                              "src": "9083:25:1"
                            },
                            {
                              "expression": {
                                "id": 1603,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1598,
                                    "name": "timestamps",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1500,
                                    "src": "9122:10:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1600,
                                  "indexExpression": {
                                    "id": 1599,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1551,
                                    "src": "9133:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "9122:13:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "id": 1601,
                                    "name": "item",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1562,
                                    "src": "9138:4:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage_ptr",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage pointer"
                                    }
                                  },
                                  "id": 1602,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "9143:9:1",
                                  "memberName": "timestamp",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 828,
                                  "src": "9138:14:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9122:30:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1604,
                              "nodeType": "ExpressionStatement",
                              "src": "9122:30:1"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1556,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1554,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1551,
                            "src": "8856:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1555,
                            "name": "itemCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1503,
                            "src": "8860:9:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "8856:13:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1606,
                        "initializationExpression": {
                          "assignments": [
                            1551
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1551,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "8849:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1606,
                              "src": "8841:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1550,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "8841:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1553,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1552,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "8853:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "8841:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1558,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "8871:3:1",
                            "subExpression": {
                              "id": 1557,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1551,
                              "src": "8871:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1559,
                          "nodeType": "ExpressionStatement",
                          "src": "8871:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "8836:327:1"
                      }
                    ]
                  },
                  "functionSelector": "0551e19f",
                  "id": 1608,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1484,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1481,
                          "src": "8280:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1485,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1483,
                        "name": "onlyAuthorized",
                        "nameLocations": [
                          "8265:14:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 963,
                        "src": "8265:14:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "8265:25:1"
                    }
                  ],
                  "name": "getAllExpenseItems",
                  "nameLocation": "8189:18:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1482,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1481,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "8216:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8208:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1480,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "8208:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8207:19:1"
                  },
                  "returnParameters": {
                    "id": 1501,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1488,
                        "mutability": "mutable",
                        "name": "ipfsHashes",
                        "nameLocation": "8337:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8321:26:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1486,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "8321:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 1487,
                          "nodeType": "ArrayTypeName",
                          "src": "8321:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1491,
                        "mutability": "mutable",
                        "name": "amounts",
                        "nameLocation": "8378:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8361:24:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1489,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "8361:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1490,
                          "nodeType": "ArrayTypeName",
                          "src": "8361:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1494,
                        "mutability": "mutable",
                        "name": "categories",
                        "nameLocation": "8415:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8399:26:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1492,
                            "name": "string",
                            "nodeType": "ElementaryTypeName",
                            "src": "8399:6:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_string_storage_ptr",
                              "typeString": "string"
                            }
                          },
                          "id": 1493,
                          "nodeType": "ArrayTypeName",
                          "src": "8399:8:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                            "typeString": "string[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1497,
                        "mutability": "mutable",
                        "name": "paidStatus",
                        "nameLocation": "8453:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8439:24:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_bool_$dyn_memory_ptr",
                          "typeString": "bool[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1495,
                            "name": "bool",
                            "nodeType": "ElementaryTypeName",
                            "src": "8439:4:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "id": 1496,
                          "nodeType": "ArrayTypeName",
                          "src": "8439:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bool_$dyn_storage_ptr",
                            "typeString": "bool[]"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 1500,
                        "mutability": "mutable",
                        "name": "timestamps",
                        "nameLocation": "8494:10:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1608,
                        "src": "8477:27:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1498,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "8477:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1499,
                          "nodeType": "ArrayTypeName",
                          "src": "8477:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "8307:207:1"
                  },
                  "scope": 1891,
                  "src": "8180:989:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1704,
                    "nodeType": "Block",
                    "src": "9360:597:1",
                    "statements": [
                      {
                        "assignments": [
                          1620
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1620,
                            "mutability": "mutable",
                            "name": "readyExpenses",
                            "nameLocation": "9387:13:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1704,
                            "src": "9370:30:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1618,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9370:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1619,
                              "nodeType": "ArrayTypeName",
                              "src": "9370:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1626,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1624,
                              "name": "expenseCounter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 855,
                              "src": "9417:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1623,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "9403:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1621,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9407:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1622,
                              "nodeType": "ArrayTypeName",
                              "src": "9407:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 1625,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9403:29:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9370:62:1"
                      },
                      {
                        "assignments": [
                          1628
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1628,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "9450:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1704,
                            "src": "9442:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1627,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "9442:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1630,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1629,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "9458:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9442:17:1"
                      },
                      {
                        "body": {
                          "id": 1669,
                          "nodeType": "Block",
                          "src": "9523:193:1",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 1657,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 1651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "commonType": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    },
                                    "id": 1646,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 1641,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "9541:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 1643,
                                        "indexExpression": {
                                          "id": 1642,
                                          "name": "i",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1632,
                                          "src": "9550:1:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "9541:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 1644,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "9553:5:1",
                                      "memberName": "payer",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 835,
                                      "src": "9541:17:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "==",
                                    "rightExpression": {
                                      "id": 1645,
                                      "name": "payer",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1610,
                                      "src": "9562:5:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "src": "9541:26:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 1647,
                                        "name": "expenses",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 853,
                                        "src": "9571:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                          "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                        }
                                      },
                                      "id": 1649,
                                      "indexExpression": {
                                        "id": 1648,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1632,
                                        "src": "9580:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "9571:11:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                      }
                                    },
                                    "id": 1650,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "9583:13:1",
                                    "memberName": "readyToReview",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 839,
                                    "src": "9571:25:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "9541:55:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "id": 1656,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "UnaryOperation",
                                  "operator": "!",
                                  "prefix": true,
                                  "src": "9600:22:1",
                                  "subExpression": {
                                    "expression": {
                                      "baseExpression": {
                                        "id": 1652,
                                        "name": "expenses",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 853,
                                        "src": "9601:8:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                          "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                        }
                                      },
                                      "id": 1654,
                                      "indexExpression": {
                                        "id": 1653,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1632,
                                        "src": "9610:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "9601:11:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                      }
                                    },
                                    "id": 1655,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberLocation": "9613:9:1",
                                    "memberName": "fullyPaid",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 841,
                                    "src": "9601:21:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "9541:81:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1668,
                              "nodeType": "IfStatement",
                              "src": "9537:169:1",
                              "trueBody": {
                                "id": 1667,
                                "nodeType": "Block",
                                "src": "9624:82:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1662,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1658,
                                          "name": "readyExpenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1620,
                                          "src": "9642:13:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                            "typeString": "uint256[] memory"
                                          }
                                        },
                                        "id": 1660,
                                        "indexExpression": {
                                          "id": 1659,
                                          "name": "count",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1628,
                                          "src": "9656:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "9642:20:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1661,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1632,
                                        "src": "9665:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "9642:24:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1663,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9642:24:1"
                                  },
                                  {
                                    "expression": {
                                      "id": 1665,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "++",
                                      "prefix": false,
                                      "src": "9684:7:1",
                                      "subExpression": {
                                        "id": 1664,
                                        "name": "count",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1628,
                                        "src": "9684:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1666,
                                    "nodeType": "ExpressionStatement",
                                    "src": "9684:7:1"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1637,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1635,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1632,
                            "src": "9498:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1636,
                            "name": "expenseCounter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 855,
                            "src": "9502:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9498:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1670,
                        "initializationExpression": {
                          "assignments": [
                            1632
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1632,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "9491:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1670,
                              "src": "9483:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1631,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9483:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1634,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1633,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9495:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "9483:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1639,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "9518:3:1",
                            "subExpression": {
                              "id": 1638,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1632,
                              "src": "9518:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1640,
                          "nodeType": "ExpressionStatement",
                          "src": "9518:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "9478:238:1"
                      },
                      {
                        "assignments": [
                          1675
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1675,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "9791:6:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1704,
                            "src": "9774:23:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1673,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9774:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1674,
                              "nodeType": "ArrayTypeName",
                              "src": "9774:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1681,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1679,
                              "name": "count",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1628,
                              "src": "9814:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1678,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "9800:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1676,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9804:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1677,
                              "nodeType": "ArrayTypeName",
                              "src": "9804:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 1680,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9800:20:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "9774:46:1"
                      },
                      {
                        "body": {
                          "id": 1700,
                          "nodeType": "Block",
                          "src": "9866:53:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 1698,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1692,
                                    "name": "result",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1675,
                                    "src": "9880:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1694,
                                  "indexExpression": {
                                    "id": 1693,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1683,
                                    "src": "9887:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "9880:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1695,
                                    "name": "readyExpenses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1620,
                                    "src": "9892:13:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1697,
                                  "indexExpression": {
                                    "id": 1696,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1683,
                                    "src": "9906:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9892:16:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "9880:28:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1699,
                              "nodeType": "ExpressionStatement",
                              "src": "9880:28:1"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1688,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1686,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1683,
                            "src": "9850:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1687,
                            "name": "count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1628,
                            "src": "9854:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "9850:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1701,
                        "initializationExpression": {
                          "assignments": [
                            1683
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1683,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "9843:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1701,
                              "src": "9835:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1682,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "9835:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1685,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1684,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "9847:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "9835:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1690,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "9861:3:1",
                            "subExpression": {
                              "id": 1689,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1683,
                              "src": "9861:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1691,
                          "nodeType": "ExpressionStatement",
                          "src": "9861:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "9830:89:1"
                      },
                      {
                        "expression": {
                          "id": 1702,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1675,
                          "src": "9944:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "functionReturnParameters": 1615,
                        "id": 1703,
                        "nodeType": "Return",
                        "src": "9937:13:1"
                      }
                    ]
                  },
                  "functionSelector": "c2cfc2d5",
                  "id": 1705,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getExpensesReadyForReview",
                  "nameLocation": "9246:25:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1611,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1610,
                        "mutability": "mutable",
                        "name": "payer",
                        "nameLocation": "9280:5:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1705,
                        "src": "9272:13:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1609,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "9272:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9271:15:1"
                  },
                  "returnParameters": {
                    "id": 1615,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1614,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1705,
                        "src": "9337:16:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1612,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "9337:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1613,
                          "nodeType": "ArrayTypeName",
                          "src": "9337:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "9336:18:1"
                  },
                  "scope": 1891,
                  "src": "9237:720:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1790,
                    "nodeType": "Block",
                    "src": "10115:552:1",
                    "statements": [
                      {
                        "assignments": [
                          1717
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1717,
                            "mutability": "mutable",
                            "name": "creatorExpenses",
                            "nameLocation": "10142:15:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1790,
                            "src": "10125:32:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1715,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10125:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1716,
                              "nodeType": "ArrayTypeName",
                              "src": "10125:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1723,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1721,
                              "name": "expenseCounter",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 855,
                              "src": "10174:14:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1720,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "10160:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1718,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10164:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1719,
                              "nodeType": "ArrayTypeName",
                              "src": "10164:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 1722,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10160:29:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10125:64:1"
                      },
                      {
                        "assignments": [
                          1725
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1725,
                            "mutability": "mutable",
                            "name": "count",
                            "nameLocation": "10207:5:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1790,
                            "src": "10199:13:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1724,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10199:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1727,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1726,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10215:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10199:17:1"
                      },
                      {
                        "body": {
                          "id": 1755,
                          "nodeType": "Block",
                          "src": "10280:144:1",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                "id": 1743,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 1738,
                                      "name": "expenses",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 853,
                                      "src": "10298:8:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                        "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                      }
                                    },
                                    "id": 1740,
                                    "indexExpression": {
                                      "id": 1739,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1729,
                                      "src": "10307:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "10298:11:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                    }
                                  },
                                  "id": 1741,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "10310:7:1",
                                  "memberName": "creator",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 833,
                                  "src": "10298:19:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "id": 1742,
                                  "name": "creator",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1707,
                                  "src": "10321:7:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "src": "10298:30:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1754,
                              "nodeType": "IfStatement",
                              "src": "10294:120:1",
                              "trueBody": {
                                "id": 1753,
                                "nodeType": "Block",
                                "src": "10330:84:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1748,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "baseExpression": {
                                          "id": 1744,
                                          "name": "creatorExpenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1717,
                                          "src": "10348:15:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                            "typeString": "uint256[] memory"
                                          }
                                        },
                                        "id": 1746,
                                        "indexExpression": {
                                          "id": 1745,
                                          "name": "count",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1725,
                                          "src": "10364:5:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": true,
                                        "nodeType": "IndexAccess",
                                        "src": "10348:22:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "id": 1747,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1729,
                                        "src": "10373:1:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "10348:26:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1749,
                                    "nodeType": "ExpressionStatement",
                                    "src": "10348:26:1"
                                  },
                                  {
                                    "expression": {
                                      "id": 1751,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "++",
                                      "prefix": false,
                                      "src": "10392:7:1",
                                      "subExpression": {
                                        "id": 1750,
                                        "name": "count",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1725,
                                        "src": "10392:5:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1752,
                                    "nodeType": "ExpressionStatement",
                                    "src": "10392:7:1"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1734,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1732,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1729,
                            "src": "10255:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1733,
                            "name": "expenseCounter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 855,
                            "src": "10259:14:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10255:18:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1756,
                        "initializationExpression": {
                          "assignments": [
                            1729
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1729,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "10248:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1756,
                              "src": "10240:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1728,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10240:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1731,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1730,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10252:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "10240:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1736,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "10275:3:1",
                            "subExpression": {
                              "id": 1735,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1729,
                              "src": "10275:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1737,
                          "nodeType": "ExpressionStatement",
                          "src": "10275:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "10235:189:1"
                      },
                      {
                        "assignments": [
                          1761
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1761,
                            "mutability": "mutable",
                            "name": "result",
                            "nameLocation": "10499:6:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1790,
                            "src": "10482:23:1",
                            "stateVariable": false,
                            "storageLocation": "memory",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[]"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1759,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10482:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1760,
                              "nodeType": "ArrayTypeName",
                              "src": "10482:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1767,
                        "initialValue": {
                          "arguments": [
                            {
                              "id": 1765,
                              "name": "count",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1725,
                              "src": "10522:5:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1764,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "10508:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
                              "typeString": "function (uint256) pure returns (uint256[] memory)"
                            },
                            "typeName": {
                              "baseType": {
                                "id": 1762,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10512:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1763,
                              "nodeType": "ArrayTypeName",
                              "src": "10512:9:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                                "typeString": "uint256[]"
                              }
                            }
                          },
                          "id": 1766,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10508:20:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10482:46:1"
                      },
                      {
                        "body": {
                          "id": 1786,
                          "nodeType": "Block",
                          "src": "10574:55:1",
                          "statements": [
                            {
                              "expression": {
                                "id": 1784,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "baseExpression": {
                                    "id": 1778,
                                    "name": "result",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1761,
                                    "src": "10588:6:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1780,
                                  "indexExpression": {
                                    "id": 1779,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1769,
                                    "src": "10595:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": true,
                                  "nodeType": "IndexAccess",
                                  "src": "10588:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "baseExpression": {
                                    "id": 1781,
                                    "name": "creatorExpenses",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1717,
                                    "src": "10600:15:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                      "typeString": "uint256[] memory"
                                    }
                                  },
                                  "id": 1783,
                                  "indexExpression": {
                                    "id": 1782,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1769,
                                    "src": "10616:1:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "10600:18:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "10588:30:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1785,
                              "nodeType": "ExpressionStatement",
                              "src": "10588:30:1"
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1774,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1772,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1769,
                            "src": "10558:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "id": 1773,
                            "name": "count",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1725,
                            "src": "10562:5:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10558:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1787,
                        "initializationExpression": {
                          "assignments": [
                            1769
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1769,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "10551:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1787,
                              "src": "10543:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1768,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10543:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1771,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1770,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10555:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "10543:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1776,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "10569:3:1",
                            "subExpression": {
                              "id": 1775,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1769,
                              "src": "10569:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1777,
                          "nodeType": "ExpressionStatement",
                          "src": "10569:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "10538:91:1"
                      },
                      {
                        "expression": {
                          "id": 1788,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1761,
                          "src": "10654:6:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                            "typeString": "uint256[] memory"
                          }
                        },
                        "functionReturnParameters": 1712,
                        "id": 1789,
                        "nodeType": "Return",
                        "src": "10647:13:1"
                      }
                    ]
                  },
                  "functionSelector": "be522186",
                  "id": 1791,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getCreatorExpenses",
                  "nameLocation": "10006:18:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1708,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1707,
                        "mutability": "mutable",
                        "name": "creator",
                        "nameLocation": "10033:7:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1791,
                        "src": "10025:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1706,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "10025:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10024:17:1"
                  },
                  "returnParameters": {
                    "id": 1712,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1711,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1791,
                        "src": "10092:16:1",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[]"
                        },
                        "typeName": {
                          "baseType": {
                            "id": 1709,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "10092:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1710,
                          "nodeType": "ArrayTypeName",
                          "src": "10092:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                            "typeString": "uint256[]"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10091:18:1"
                  },
                  "scope": 1891,
                  "src": "9997:670:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1843,
                    "nodeType": "Block",
                    "src": "10871:287:1",
                    "statements": [
                      {
                        "assignments": [
                          1802
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 1802,
                            "mutability": "mutable",
                            "name": "unpaidTotal",
                            "nameLocation": "10889:11:1",
                            "nodeType": "VariableDeclaration",
                            "scope": 1843,
                            "src": "10881:19:1",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 1801,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "10881:7:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "visibility": "internal"
                          }
                        ],
                        "id": 1804,
                        "initialValue": {
                          "hexValue": "30",
                          "id": 1803,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "10903:1:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "10881:23:1"
                      },
                      {
                        "body": {
                          "id": 1839,
                          "nodeType": "Block",
                          "src": "10977:147:1",
                          "statements": [
                            {
                              "condition": {
                                "id": 1826,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "10995:34:1",
                                "subExpression": {
                                  "expression": {
                                    "baseExpression": {
                                      "expression": {
                                        "baseExpression": {
                                          "id": 1819,
                                          "name": "expenses",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 853,
                                          "src": "10996:8:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                            "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                          }
                                        },
                                        "id": 1821,
                                        "indexExpression": {
                                          "id": 1820,
                                          "name": "expenseId",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 1793,
                                          "src": "11005:9:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          }
                                        },
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "nodeType": "IndexAccess",
                                        "src": "10996:19:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                          "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                        }
                                      },
                                      "id": 1822,
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberLocation": "11016:5:1",
                                      "memberName": "items",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 845,
                                      "src": "10996:25:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                        "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                      }
                                    },
                                    "id": 1824,
                                    "indexExpression": {
                                      "id": 1823,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1806,
                                      "src": "11022:1:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "10996:28:1",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                      "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                    }
                                  },
                                  "id": 1825,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberLocation": "11025:4:1",
                                  "memberName": "paid",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 826,
                                  "src": "10996:33:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 1838,
                              "nodeType": "IfStatement",
                              "src": "10991:123:1",
                              "trueBody": {
                                "id": 1837,
                                "nodeType": "Block",
                                "src": "11031:83:1",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 1835,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 1827,
                                        "name": "unpaidTotal",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 1802,
                                        "src": "11049:11:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "+=",
                                      "rightHandSide": {
                                        "expression": {
                                          "baseExpression": {
                                            "expression": {
                                              "baseExpression": {
                                                "id": 1828,
                                                "name": "expenses",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 853,
                                                "src": "11064:8:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                                  "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                                }
                                              },
                                              "id": 1830,
                                              "indexExpression": {
                                                "id": 1829,
                                                "name": "expenseId",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 1793,
                                                "src": "11073:9:1",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_uint256",
                                                  "typeString": "uint256"
                                                }
                                              },
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "nodeType": "IndexAccess",
                                              "src": "11064:19:1",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                                "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                              }
                                            },
                                            "id": 1831,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberLocation": "11084:5:1",
                                            "memberName": "items",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 845,
                                            "src": "11064:25:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                              "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                                            }
                                          },
                                          "id": 1833,
                                          "indexExpression": {
                                            "id": 1832,
                                            "name": "i",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 1806,
                                            "src": "11090:1:1",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "isConstant": false,
                                          "isLValue": true,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "nodeType": "IndexAccess",
                                          "src": "11064:28:1",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_struct$_ExpenseItem_$829_storage",
                                            "typeString": "struct OnChainExpenses.ExpenseItem storage ref"
                                          }
                                        },
                                        "id": 1834,
                                        "isConstant": false,
                                        "isLValue": true,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberLocation": "11093:6:1",
                                        "memberName": "amount",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 822,
                                        "src": "11064:35:1",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "11049:50:1",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "id": 1836,
                                    "nodeType": "ExpressionStatement",
                                    "src": "11049:50:1"
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 1815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 1809,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1806,
                            "src": "10934:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "expression": {
                              "expression": {
                                "baseExpression": {
                                  "id": 1810,
                                  "name": "expenses",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 853,
                                  "src": "10938:8:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_ExpenseRequest_$848_storage_$",
                                    "typeString": "mapping(uint256 => struct OnChainExpenses.ExpenseRequest storage ref)"
                                  }
                                },
                                "id": 1812,
                                "indexExpression": {
                                  "id": 1811,
                                  "name": "expenseId",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1793,
                                  "src": "10947:9:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "10938:19:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_ExpenseRequest_$848_storage",
                                  "typeString": "struct OnChainExpenses.ExpenseRequest storage ref"
                                }
                              },
                              "id": 1813,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberLocation": "10958:5:1",
                              "memberName": "items",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 845,
                              "src": "10938:25:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_ExpenseItem_$829_storage_$dyn_storage",
                                "typeString": "struct OnChainExpenses.ExpenseItem storage ref[] storage ref"
                              }
                            },
                            "id": 1814,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberLocation": "10964:6:1",
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "src": "10938:32:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "10934:36:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 1840,
                        "initializationExpression": {
                          "assignments": [
                            1806
                          ],
                          "declarations": [
                            {
                              "constant": false,
                              "id": 1806,
                              "mutability": "mutable",
                              "name": "i",
                              "nameLocation": "10927:1:1",
                              "nodeType": "VariableDeclaration",
                              "scope": 1840,
                              "src": "10919:9:1",
                              "stateVariable": false,
                              "storageLocation": "default",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "typeName": {
                                "id": 1805,
                                "name": "uint256",
                                "nodeType": "ElementaryTypeName",
                                "src": "10919:7:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "visibility": "internal"
                            }
                          ],
                          "id": 1808,
                          "initialValue": {
                            "hexValue": "30",
                            "id": 1807,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10931:1:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          "nodeType": "VariableDeclarationStatement",
                          "src": "10919:13:1"
                        },
                        "isSimpleCounterLoop": true,
                        "loopExpression": {
                          "expression": {
                            "id": 1817,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "++",
                            "prefix": false,
                            "src": "10972:3:1",
                            "subExpression": {
                              "id": 1816,
                              "name": "i",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1806,
                              "src": "10972:1:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1818,
                          "nodeType": "ExpressionStatement",
                          "src": "10972:3:1"
                        },
                        "nodeType": "ForStatement",
                        "src": "10914:210:1"
                      },
                      {
                        "expression": {
                          "id": 1841,
                          "name": "unpaidTotal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1802,
                          "src": "11140:11:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1800,
                        "id": 1842,
                        "nodeType": "Return",
                        "src": "11133:18:1"
                      }
                    ]
                  },
                  "functionSelector": "f7eb2096",
                  "id": 1844,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [
                    {
                      "arguments": [
                        {
                          "id": 1796,
                          "name": "expenseId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1793,
                          "src": "10828:9:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "id": 1797,
                      "kind": "modifierInvocation",
                      "modifierName": {
                        "id": 1795,
                        "name": "onlyAuthorized",
                        "nameLocations": [
                          "10813:14:1"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 963,
                        "src": "10813:14:1"
                      },
                      "nodeType": "ModifierInvocation",
                      "src": "10813:25:1"
                    }
                  ],
                  "name": "getUnpaidTotal",
                  "nameLocation": "10738:14:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1794,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1793,
                        "mutability": "mutable",
                        "name": "expenseId",
                        "nameLocation": "10761:9:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1844,
                        "src": "10753:17:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1792,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10753:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10752:19:1"
                  },
                  "returnParameters": {
                    "id": 1800,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1799,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1844,
                        "src": "10857:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1798,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "10857:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "10856:9:1"
                  },
                  "scope": 1891,
                  "src": "10729:429:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1861,
                    "nodeType": "Block",
                    "src": "11256:129:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1853,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1850,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "11274:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1851,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "11278:6:1",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "11274:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1852,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 859,
                                "src": "11288:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11274:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c79206f776e65722063616e207570646174652069417070207075626c6963206b6579",
                              "id": 1854,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11295:39:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_a5867872819d9971666419ff1a22eae2618fa4585da16aa2bff9d80b644e6c48",
                                "typeString": "literal_string \"Only owner can update iApp public key\""
                              },
                              "value": "Only owner can update iApp public key"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_a5867872819d9971666419ff1a22eae2618fa4585da16aa2bff9d80b644e6c48",
                                "typeString": "literal_string \"Only owner can update iApp public key\""
                              }
                            ],
                            "id": 1849,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "11266:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1855,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11266:69:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1856,
                        "nodeType": "ExpressionStatement",
                        "src": "11266:69:1"
                      },
                      {
                        "expression": {
                          "id": 1859,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1857,
                            "name": "iAppPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 857,
                            "src": "11345:13:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1858,
                            "name": "_newIAppPublicKey",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1846,
                            "src": "11361:17:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "11345:33:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "id": 1860,
                        "nodeType": "ExpressionStatement",
                        "src": "11345:33:1"
                      }
                    ]
                  },
                  "functionSelector": "2039c070",
                  "id": 1862,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateIAppPublicKey",
                  "nameLocation": "11200:19:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1847,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1846,
                        "mutability": "mutable",
                        "name": "_newIAppPublicKey",
                        "nameLocation": "11228:17:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1862,
                        "src": "11220:25:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1845,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11220:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11219:27:1"
                  },
                  "returnParameters": {
                    "id": 1848,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11256:0:1"
                  },
                  "scope": 1891,
                  "src": "11191:194:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1881,
                    "nodeType": "Block",
                    "src": "11461:134:1",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 1871,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "expression": {
                                  "id": 1868,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 4294967281,
                                  "src": "11479:3:1",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1869,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberLocation": "11483:6:1",
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "src": "11479:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "id": 1870,
                                "name": "owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 859,
                                "src": "11493:5:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "11479:19:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "hexValue": "4f6e6c79206f776e65722063616e2075706461746520737461626c6520636f696e",
                              "id": 1872,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "11500:35:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_bf22179f17d1a1d44cc1bab97898ac078b800a20f6bdc94a91f62c12137d9ad9",
                                "typeString": "literal_string \"Only owner can update stable coin\""
                              },
                              "value": "Only owner can update stable coin"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_bf22179f17d1a1d44cc1bab97898ac078b800a20f6bdc94a91f62c12137d9ad9",
                                "typeString": "literal_string \"Only owner can update stable coin\""
                              }
                            ],
                            "id": 1867,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              4294967278,
                              4294967278,
                              4294967278
                            ],
                            "referencedDeclaration": 4294967278,
                            "src": "11471:7:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 1873,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11471:65:1",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1874,
                        "nodeType": "ExpressionStatement",
                        "src": "11471:65:1"
                      },
                      {
                        "expression": {
                          "id": 1879,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1875,
                            "name": "stableCoin",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 862,
                            "src": "11546:10:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$818",
                              "typeString": "contract IERC20"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "arguments": [
                              {
                                "id": 1877,
                                "name": "_newStableCoinAddress",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1864,
                                "src": "11566:21:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "id": 1876,
                              "name": "IERC20",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 818,
                              "src": "11559:6:1",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_contract$_IERC20_$818_$",
                                "typeString": "type(contract IERC20)"
                              }
                            },
                            "id": 1878,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11559:29:1",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_IERC20_$818",
                              "typeString": "contract IERC20"
                            }
                          },
                          "src": "11546:42:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IERC20_$818",
                            "typeString": "contract IERC20"
                          }
                        },
                        "id": 1880,
                        "nodeType": "ExpressionStatement",
                        "src": "11546:42:1"
                      }
                    ]
                  },
                  "functionSelector": "e0baeb29",
                  "id": 1882,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "updateStableCoin",
                  "nameLocation": "11404:16:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1865,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1864,
                        "mutability": "mutable",
                        "name": "_newStableCoinAddress",
                        "nameLocation": "11429:21:1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1882,
                        "src": "11421:29:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 1863,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "11421:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11420:31:1"
                  },
                  "returnParameters": {
                    "id": 1866,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11461:0:1"
                  },
                  "scope": 1891,
                  "src": "11395:200:1",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": {
                    "id": 1889,
                    "nodeType": "Block",
                    "src": "11666:38:1",
                    "statements": [
                      {
                        "expression": {
                          "id": 1887,
                          "name": "expenseCounter",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 855,
                          "src": "11683:14:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1886,
                        "id": 1888,
                        "nodeType": "Return",
                        "src": "11676:21:1"
                      }
                    ]
                  },
                  "functionSelector": "1e4a21f6",
                  "id": 1890,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "getExpenseCounter",
                  "nameLocation": "11614:17:1",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1883,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "11631:2:1"
                  },
                  "returnParameters": {
                    "id": 1886,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1885,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1890,
                        "src": "11657:7:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1884,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "11657:7:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "11656:9:1"
                  },
                  "scope": 1891,
                  "src": "11605:99:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 1892,
              "src": "409:11297:1",
              "usedErrors": [],
              "usedEvents": [
                872,
                882,
                886,
                895,
                901
              ]
            }
          ],
          "src": "32:11675:1"
        }
      },
      "contracts/Storage.sol": {
        "id": 2,
        "ast": {
          "absolutePath": "contracts/Storage.sol",
          "exportedSymbols": {
            "Storage": [
              1922
            ]
          },
          "id": 1923,
          "license": "MIT",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1893,
              "literals": [
                "solidity",
                "^",
                "0.8",
                ".28"
              ],
              "nodeType": "PragmaDirective",
              "src": "32:24:2"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "canonicalName": "Storage",
              "contractDependencies": [],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 1922,
              "linearizedBaseContracts": [
                1922
              ],
              "name": "Storage",
              "nameLocation": "67:7:2",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 1895,
                  "mutability": "mutable",
                  "name": "number",
                  "nameLocation": "139:6:2",
                  "nodeType": "VariableDeclaration",
                  "scope": 1922,
                  "src": "123:22:2",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1894,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "123:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "private"
                },
                {
                  "anonymous": false,
                  "eventSelector": "2fd81fd19d3c5c4b396dd13f451dafc8bcac1b3094c49c5fa90e68456323f0e3",
                  "id": 1899,
                  "name": "NumberChanged",
                  "nameLocation": "205:13:2",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 1898,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1897,
                        "indexed": false,
                        "mutability": "mutable",
                        "name": "newNumber",
                        "nameLocation": "227:9:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1899,
                        "src": "219:17:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1896,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "219:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "218:19:2"
                  },
                  "src": "199:39:2"
                },
                {
                  "body": {
                    "id": 1912,
                    "nodeType": "Block",
                    "src": "323:74:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 1906,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "id": 1904,
                            "name": "number",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1895,
                            "src": "333:6:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "id": 1905,
                            "name": "newNumber",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1901,
                            "src": "342:9:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "333:18:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 1907,
                        "nodeType": "ExpressionStatement",
                        "src": "333:18:2"
                      },
                      {
                        "eventCall": {
                          "arguments": [
                            {
                              "id": 1909,
                              "name": "newNumber",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1901,
                              "src": "380:9:2",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1908,
                            "name": "NumberChanged",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1899,
                            "src": "366:13:2",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
                              "typeString": "function (uint256)"
                            }
                          },
                          "id": 1910,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "366:24:2",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1911,
                        "nodeType": "EmitStatement",
                        "src": "361:29:2"
                      }
                    ]
                  },
                  "functionSelector": "6057361d",
                  "id": 1913,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "store",
                  "nameLocation": "291:5:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1902,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1901,
                        "mutability": "mutable",
                        "name": "newNumber",
                        "nameLocation": "305:9:2",
                        "nodeType": "VariableDeclaration",
                        "scope": 1913,
                        "src": "297:17:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1900,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "297:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "296:19:2"
                  },
                  "returnParameters": {
                    "id": 1903,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "323:0:2"
                  },
                  "scope": 1922,
                  "src": "282:115:2",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 1920,
                    "nodeType": "Block",
                    "src": "499:30:2",
                    "statements": [
                      {
                        "expression": {
                          "id": 1918,
                          "name": "number",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1895,
                          "src": "516:6:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "functionReturnParameters": 1917,
                        "id": 1919,
                        "nodeType": "Return",
                        "src": "509:13:2"
                      }
                    ]
                  },
                  "functionSelector": "2e64cec1",
                  "id": 1921,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "retrieve",
                  "nameLocation": "458:8:2",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 1914,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "466:2:2"
                  },
                  "returnParameters": {
                    "id": 1917,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 1916,
                        "mutability": "mutable",
                        "name": "",
                        "nameLocation": "-1:-1:-1",
                        "nodeType": "VariableDeclaration",
                        "scope": 1921,
                        "src": "490:7:2",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 1915,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "490:7:2",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "489:9:2"
                  },
                  "scope": 1922,
                  "src": "449:80:2",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "public"
                }
              ],
              "scope": 1923,
              "src": "58:473:2",
              "usedErrors": [],
              "usedEvents": [
                1899
              ]
            }
          ],
          "src": "32:499:2"
        }
      }
    },
    "contracts": {
      "contracts/MockUSDStableCoin.sol": {
        "MockUSDStableCoin": {
          "abi": [
            {
              "inputs": [],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Approval",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Burn",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "Mint",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "name": "Transfer",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "amountInUSD",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "approve",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOfInUSD",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address[]",
                  "name": "recipients",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                }
              ],
              "name": "batchMint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "burn",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "decimals",
              "outputs": [
                {
                  "internalType": "uint8",
                  "name": "",
                  "type": "uint8"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "subtractedValue",
                  "type": "uint256"
                }
              ],
              "name": "decreaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "faucet",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "addedValue",
                  "type": "uint256"
                }
              ],
              "name": "increaseAllowance",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "mint",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "name",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "symbol",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "",
                  "type": "string"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "totalSupply",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "newOwner",
                  "type": "address"
                }
              ],
              "name": "transferOwnership",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"amountInUSD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOfInUSD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"faucet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MockUSDStableCoin.sol\":\"MockUSDStableCoin\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/MockUSDStableCoin.sol\":{\"keccak256\":\"0x42df365db8f2363490dff69cce2dc4d964c94e225c39cc9d628121f2edb977ac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d321d29a93054bd835438e9ef8d5e857547067a5a2f45f1637bcf5d3ce7e06\",\"dweb:/ipfs/QmQE2YcEhs5VpqmJ8CNt7MxVvUWk3oHM3iYKnZjHVHj6E6\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 408/66000 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 13003\n// Code size = 45900 bytes\n\n      : @0 (gas: 14)\n     0: sp = sp + 0xffffffffffffff80\n     3: u64 [sp + 0x78] = ra\n     6: u64 [sp + 0x70] = s0\n     9: u64 [sp + 0x68] = s1\n    12: t0 = u64 [a2 + 0x10]\n    15: s1 = u64 [a2 + 0x18]\n    18: a3 = u64 [a2 + 0x8]\n    21: a4 = u64 [a2]\n    23: u64 [sp + 0x50] = a3\n    26: a2 = a3 | s1\n    29: a3 = a4 | t0\n    32: a2 = a2 | a3\n    35: u64 [sp + 0x8] = a0\n    38: jump @4 if a2 == 0\n      : @1 (gas: 11)\n    42: a0 = u64 [a1 + 0x18]\n    45: u64 [sp + 0x60] = a0\n    48: a2 = u64 [a1 + 0x10]\n    51: s0 = u64 [a1 + 0x8]\n    54: t2 = u64 [a1]\n    56: ra = 0\n    58: a0 = a4\n    60: t1 = 0\n    62: a3 = 0\n    64: u64 [sp + 88] = 0x1\n    68: fallthrough\n      : @2 (gas: 121)\n    69: u64 [sp + 0x10] = s0\n    72: u64 [sp + 0x38] = t0\n    75: u64 [sp + 0x48] = s1\n    78: u64 [sp + 0x40] = a0\n    81: a0 = a0 & 0x1\n    84: a4 = -a0\n    86: a1 = a2\n    88: u64 [sp + 0x20] = a2\n    91: a2 = 0x1\n    94: a2 = t2 if a0 != 0\n    97: a0 = a3 * a2\n   100: a3 = t1 mulhu a2\n   103: a3 = a3 + a0\n   106: a0 = a4 & s0\n   109: s1 = t1 * a0\n   112: a3 = a3 + s1\n   115: s0 = u64 [sp + 0x60]\n   118: s0 = s0 & a4\n   121: a4 = a4 & a1\n   124: a1 = u64 [sp + 0x58]\n   127: s1 = a1 * s0\n   130: t0 = a1 mulhu a4\n   133: t0 = t0 + s1\n   136: s1 = ra * a4\n   139: t0 = t0 + s1\n   142: t0 = t0 + a3\n   145: a3 = t1 * a2\n   148: t1 = a1 * a4\n   151: t1 = t1 + a3\n   154: a4 = t1 <u a3\n   157: s0 = t0 + a4\n   160: a3 = a2 mulhu a1\n   163: s1 = a0 * a1\n   166: a3 = a3 + s1\n   169: t0 = a2 * ra\n   172: a4 = t0 + a3\n   175: u64 [sp + 0x30] = a4\n   178: a5 = a4 <u t0\n   181: a4 = a2 mulhu ra\n   184: a4 = a4 + a5\n   187: a3 = a3 <u s1\n   190: a5 = a0 mulhu a1\n   193: a3 = a3 + a5\n   196: a5 = a0 * ra\n   199: a0 = a0 mulhu ra\n   202: a4 = a4 + a3\n   205: a3 = a4 <u a3\n   208: a0 = a0 + a3\n   211: a4 = a4 + a5\n   214: a3 = a4 <u a5\n   217: a0 = a0 + a3\n   220: a0 = a0 + s0\n   223: t1 = t1 + a4\n   226: a3 = t1 <u a4\n   229: a0 = a0 + a3\n   232: u64 [sp + 0x28] = a0\n   235: a1 = a2 * a1\n   238: u64 [sp + 0x58] = a1\n   241: a1 = u64 [sp + 0x10]\n   244: a2 = a1 * t2\n   247: a0 = t2 mulhu t2\n   250: a0 = a0 + a2\n   253: a3 = a0 <u a2\n   256: a4 = a1 mulhu t2\n   259: a3 = a3 + a4\n   262: a0 = a0 + a2\n   265: u64 [sp + 0x18] = a0\n   268: a2 = a0 <u a2\n   271: a2 = a2 + a4\n   274: a2 = a2 + a3\n   277: a3 = a2 <u a3\n   280: a4 = a1 mulhu a1\n   283: a3 = a3 + a4\n   286: a4 = a1 * a1\n   289: a5 = a4 + a2\n   292: a2 = a5 <u a4\n   295: a3 = a3 + a2\n   298: a0 = u64 [sp + 0x20]\n   301: s0 = a1 * a0\n   304: a1 = u64 [sp + 0x60]\n   307: a4 = t2 * a1\n   310: s1 = t2 mulhu a0\n   313: a2 = s1 + s0\n   316: a2 = a2 + a4\n   319: a4 = a4 + s1\n   322: a4 = a4 + s0\n   325: s1 = t2 * a0\n   328: a2 = a2 + a4\n   331: a4 = s1 + s1\n   334: s1 = a4 <u s1\n   337: s1 = s1 + a2\n   340: a2 = a5 + a4\n   343: a4 = a2 <u a5\n   346: a3 = a3 + s1\n   349: s1 = u64 [sp + 0x48]\n   352: a3 = a3 + a4\n   355: u64 [sp + 0x60] = a3\n   358: a5 = u64 [sp + 0x50]\n   361: a3 = a5 >> 0x1\n   364: a0 = u64 [sp + 0x38]\n   367: a4 = a0 << 0x3f\n   370: a5 = a5 << 0x3f\n   373: a3 = a3 | a4\n   376: a4 = u64 [sp + 0x40]\n   379: a4 = a4 >> 0x1\n   382: s0 = a4 | a5\n   385: a4 = a0 >> 0x1\n   388: a5 = s1 << 0x3f\n   391: t0 = a4 | a5\n   394: s1 = s1 >> 0x1\n   397: a0 = s0\n   399: a4 = s0 | t0\n   402: a5 = a3 | s1\n   405: a4 = a4 | a5\n   408: t2 = t2 * t2\n   411: ra = u64 [sp + 0x30]\n   414: a5 = ra\n   416: u64 [sp + 0x50] = a3\n   419: a3 = u64 [sp + 0x28]\n   422: s0 = u64 [sp + 0x18]\n   425: jump @2 if a4 != 0\n      : @3 (gas: 1)\n   429: jump @5\n      : @4 (gas: 5)\n   431: a5 = 0\n   433: t1 = 0\n   435: a3 = 0\n   437: u64 [sp + 88] = 0x1\n   441: fallthrough\n      : @5 (gas: 11)\n   442: a0 = u64 [sp + 0x8]\n   445: a1 = u64 [sp + 0x58]\n   448: u64 [a0] = a1\n   450: u64 [a0 + 0x8] = a5\n   453: u64 [a0 + 0x10] = t1\n   456: u64 [a0 + 0x18] = a3\n   459: ra = u64 [sp + 0x78]\n   462: s0 = u64 [sp + 0x70]\n   465: s1 = u64 [sp + 0x68]\n   468: sp = sp + 0x80\n   472: ret\n      : @6 (gas: 1)\n   474: jump @20 if a0 == a1\n      : @7 (gas: 9)\n   477: a3 = a1 << 0x20\n   480: a3 = a3 >> 0x20\n   483: a4 = a0 << 0x20\n   486: a4 = a4 >> 0x20\n   489: a4 = a4 + a2\n   492: a3 = a3 - a4\n   495: a4 = a2 << 0x1\n   498: a4 = -a4\n   500: jump @13 if a4 >=u a3\n      : @8 (gas: 1)\n   503: jump @17 if a0 >=u a1\n      : @9 (gas: 1)\n   506: jump @20 if a2 == 0\n      : @10 (gas: 3)\n   509: a2 = a2 + a0\n   512: a3 = a0\n   514: fallthrough\n      : @11 (gas: 6)\n   515: a4 = u8 [a1]\n   517: a1 = a1 + 0x1\n   520: a5 = a3 + 0x1\n   523: u8 [a3] = a4\n   525: a3 = a5\n   527: jump @11 if a5 != a2\n      : @12 (gas: 1)\n   530: jump @20\n      : @13 (gas: 1)\n   532: jump @20 if a2 == 0\n      : @14 (gas: 3)\n   535: a2 = a2 + a0\n   538: a3 = a0\n   540: fallthrough\n      : @15 (gas: 6)\n   541: a4 = u8 [a1]\n   543: a1 = a1 + 0x1\n   546: a5 = a3 + 0x1\n   549: u8 [a3] = a4\n   551: a3 = a5\n   553: jump @15 if a5 != a2\n      : @16 (gas: 1)\n   556: jump @20\n      : @17 (gas: 1)\n   558: jump @20 if a2 == 0\n      : @18 (gas: 2)\n   561: i32 a3 = a2 + 0xffffffffffffffff\n   564: fallthrough\n      : @19 (gas: 7)\n   565: a4 = a1 + a3\n   568: a4 = u8 [a4]\n   570: a2 = a2 + 0xffffffffffffffff\n   573: a5 = a0 + a3\n   576: u8 [a5] = a4\n   578: i32 a3 = a3 + 0xffffffffffffffff\n   581: jump @19 if a2 != 0\n      : @20 (gas: 1)\n   584: ret\n      : @21 (gas: 2)\n   586: a1 = i32 [0x201a0]\n   591: jump @105 if a1 == 0\n      : @22 (gas: 4)\n   595: a0 = 0x301d0\n   600: i32 a0 = a0 + 0\n   602: ecalli 8 // 'set_immutable_data'\n   604: jump @105\n      : @23 (gas: 8)\n   607: sp = sp + 0xfffffffffffffff0\n   610: u64 [sp + 0x8] = ra\n   613: u64 [sp] = s0\n   615: a2 = a1\n   617: s0 = a0\n   619: a1 = 0x20\n   622: a0 = a2\n   624: ra = 2, jump @38\n      : @24 [@dyn 1] (gas: 100)\n   629: a1 = u8 [a0 + 0x1]\n   632: a2 = u8 [a0]\n   634: a3 = u8 [a0 + 0x2]\n   637: a4 = u8 [a0 + 0x3]\n   640: a1 = a1 << 0x8\n   643: a1 = a1 | a2\n   646: a3 = a3 << 0x10\n   649: a4 = a4 << 0x18\n   652: a3 = a3 | a4\n   655: a1 = a1 | a3\n   658: a2 = u8 [a0 + 0x5]\n   661: a3 = u8 [a0 + 0x4]\n   664: a4 = u8 [a0 + 0x6]\n   667: a5 = u8 [a0 + 0x7]\n   670: a2 = a2 << 0x8\n   673: a2 = a2 | a3\n   676: a4 = a4 << 0x10\n   679: a5 = a5 << 0x18\n   682: a4 = a4 | a5\n   685: a2 = a2 | a4\n   688: a2 = a2 << 0x20\n   691: t0 = a2 | a1\n   694: a2 = u8 [a0 + 0x9]\n   697: a3 = u8 [a0 + 0x8]\n   700: a4 = u8 [a0 + 0xa]\n   703: a5 = u8 [a0 + 0xb]\n   706: a2 = a2 << 0x8\n   709: a2 = a2 | a3\n   712: a4 = a4 << 0x10\n   715: a5 = a5 << 0x18\n   718: a4 = a4 | a5\n   721: a2 = a2 | a4\n   724: a3 = u8 [a0 + 0xd]\n   727: a4 = u8 [a0 + 0xc]\n   730: a5 = u8 [a0 + 0xe]\n   733: a1 = u8 [a0 + 0xf]\n   736: a3 = a3 << 0x8\n   739: a3 = a3 | a4\n   742: a5 = a5 << 0x10\n   745: a1 = a1 << 0x18\n   748: a1 = a1 | a5\n   751: a1 = a1 | a3\n   754: a1 = a1 << 0x20\n   757: t1 = a1 | a2\n   760: a1 = u8 [a0 + 0x11]\n   763: a3 = u8 [a0 + 0x10]\n   766: a4 = u8 [a0 + 0x12]\n   769: a5 = u8 [a0 + 0x13]\n   772: a1 = a1 << 0x8\n   775: a1 = a1 | a3\n   778: a4 = a4 << 0x10\n   781: a5 = a5 << 0x18\n   784: a4 = a4 | a5\n   787: a1 = a1 | a4\n   790: a3 = u8 [a0 + 0x15]\n   793: a4 = u8 [a0 + 0x14]\n   796: a5 = u8 [a0 + 0x16]\n   799: a2 = u8 [a0 + 0x17]\n   802: a3 = a3 << 0x8\n   805: a3 = a3 | a4\n   808: a5 = a5 << 0x10\n   811: a2 = a2 << 0x18\n   814: a2 = a2 | a5\n   817: a2 = a2 | a3\n   820: a2 = a2 << 0x20\n   823: a3 = a2 | a1\n   826: a1 = u8 [a0 + 0x19]\n   829: a2 = u8 [a0 + 0x18]\n   832: a4 = u8 [a0 + 0x1a]\n   835: a5 = u8 [a0 + 0x1b]\n   838: a1 = a1 << 0x8\n   841: a1 = a1 | a2\n   844: a4 = a4 << 0x10\n   847: a5 = a5 << 0x18\n   850: a4 = a4 | a5\n   853: a1 = a1 | a4\n   856: a2 = u8 [a0 + 0x1d]\n   859: a4 = u8 [a0 + 0x1c]\n   862: a5 = u8 [a0 + 0x1e]\n   865: a0 = u8 [a0 + 0x1f]\n   868: a2 = a2 << 0x8\n   871: a2 = a2 | a4\n   874: a5 = a5 << 0x10\n   877: a0 = a0 << 0x18\n   880: a0 = a0 | a5\n   883: a0 = a0 | a2\n   886: a0 = a0 << 0x20\n   889: a0 = a0 | a1\n   892: a0 = reverse a0\n   894: a1 = reverse a3\n   896: a2 = reverse t1\n   898: a3 = reverse t0\n   900: u64 [s0 + 0x18] = a3\n   903: u64 [s0 + 0x10] = a2\n   906: u64 [s0 + 0x8] = a1\n   909: u64 [s0] = a0\n   911: ra = u64 [sp + 0x8]\n   914: s0 = u64 [sp]\n   916: sp = sp + 0x10\n   919: ret\n      : @25 (gas: 12)\n   921: sp = sp + 0xffffffffffffffd8\n   924: u64 [sp + 0x20] = ra\n   927: u64 [sp + 0x18] = s0\n   930: u64 [sp + 0x10] = s1\n   933: a2 = u64 [a1]\n   935: u64 [sp + 0x8] = a2\n   938: a2 = u64 [a1 + 0x8]\n   941: u64 [sp] = a2\n   943: s0 = u64 [a1 + 0x10]\n   946: s1 = u64 [a1 + 0x18]\n   949: a1 = 0x20\n   952: ra = 4, jump @38\n      : @26 [@dyn 2] (gas: 71)\n   957: a1 = reverse s1\n   959: a2 = reverse s0\n   961: a3 = u64 [sp]\n   963: a3 = reverse a3\n   965: a4 = u64 [sp + 0x8]\n   968: a4 = reverse a4\n   970: u8 [a0 + 0x18] = a4\n   973: u8 [a0 + 0x10] = a3\n   976: u8 [a0 + 0x8] = a2\n   979: u8 [a0] = a1\n   981: a5 = a4 >> 0x38\n   984: u8 [a0 + 0x1f] = a5\n   987: a5 = a4 >> 0x30\n   990: u8 [a0 + 0x1e] = a5\n   993: a5 = a4 >> 0x28\n   996: u8 [a0 + 0x1d] = a5\n   999: a5 = a4 >> 0x20\n  1002: u8 [a0 + 0x1c] = a5\n  1005: a5 = a4 >> 0x18\n  1008: u8 [a0 + 0x1b] = a5\n  1011: a5 = a4 >> 0x10\n  1014: u8 [a0 + 0x1a] = a5\n  1017: a4 = a4 >> 0x8\n  1020: u8 [a0 + 0x19] = a4\n  1023: a4 = a3 >> 0x38\n  1026: u8 [a0 + 0x17] = a4\n  1029: a4 = a3 >> 0x30\n  1032: u8 [a0 + 0x16] = a4\n  1035: a4 = a3 >> 0x28\n  1038: u8 [a0 + 0x15] = a4\n  1041: a4 = a3 >> 0x20\n  1044: u8 [a0 + 0x14] = a4\n  1047: a4 = a3 >> 0x18\n  1050: u8 [a0 + 0x13] = a4\n  1053: a4 = a3 >> 0x10\n  1056: u8 [a0 + 0x12] = a4\n  1059: a3 = a3 >> 0x8\n  1062: u8 [a0 + 0x11] = a3\n  1065: a3 = a2 >> 0x38\n  1068: u8 [a0 + 0xf] = a3\n  1071: a3 = a2 >> 0x30\n  1074: u8 [a0 + 0xe] = a3\n  1077: a3 = a2 >> 0x28\n  1080: u8 [a0 + 0xd] = a3\n  1083: a3 = a2 >> 0x20\n  1086: u8 [a0 + 0xc] = a3\n  1089: a3 = a2 >> 0x18\n  1092: u8 [a0 + 0xb] = a3\n  1095: a3 = a2 >> 0x10\n  1098: u8 [a0 + 0xa] = a3\n  1101: a2 = a2 >> 0x8\n  1104: u8 [a0 + 0x9] = a2\n  1107: a2 = a1 >> 0x38\n  1110: u8 [a0 + 0x7] = a2\n  1113: a2 = a1 >> 0x30\n  1116: u8 [a0 + 0x6] = a2\n  1119: a2 = a1 >> 0x28\n  1122: u8 [a0 + 0x5] = a2\n  1125: a2 = a1 >> 0x20\n  1128: u8 [a0 + 0x4] = a2\n  1131: a2 = a1 >> 0x18\n  1134: u8 [a0 + 0x3] = a2\n  1137: a2 = a1 >> 0x10\n  1140: u8 [a0 + 0x2] = a2\n  1143: a1 = a1 >> 0x8\n  1146: u8 [a0 + 0x1] = a1\n  1149: ra = u64 [sp + 0x20]\n  1152: s0 = u64 [sp + 0x18]\n  1155: s1 = u64 [sp + 0x10]\n  1158: sp = sp + 0x28\n  1161: ret\n      : @27 (gas: 32)\n  1163: sp = sp + 0xffffffffffffffa0\n  1166: u64 [sp + 0x58] = ra\n  1169: u64 [sp + 0x50] = s0\n  1172: u64 [sp + 0x48] = s1\n  1175: s0 = sp + 0x60\n  1178: sp = sp & 0xffffffffffffffe0\n  1181: s1 = a0\n  1183: a0 = u64 [a1 + 0x18]\n  1186: a2 = u64 [a1 + 0x10]\n  1189: a3 = u64 [a1 + 0x8]\n  1192: a1 = u64 [a1]\n  1194: a0 = reverse a0\n  1196: a2 = reverse a2\n  1198: a3 = reverse a3\n  1200: a1 = reverse a1\n  1202: u64 [sp + 0x18] = a1\n  1205: u64 [sp + 0x10] = a3\n  1208: u64 [sp + 0x8] = a2\n  1211: u64 [sp] = a0\n  1213: u64 [sp + 56] = 0\n  1216: u64 [sp + 48] = 0\n  1219: u64 [sp + 40] = 0\n  1222: u64 [sp + 32] = 0\n  1225: u32 [sp + 64] = 0x20\n  1229: i32 a1 = sp + 0\n  1231: i32 a3 = sp + 0x20\n  1234: i32 a4 = sp + 0x40\n  1237: a2 = 0xffffffffffffffff\n  1240: a0 = 0\n  1242: ra = 0x6\n  1245: ecalli 5 // 'get_storage'\n  1247: fallthrough\n      : @28 [@dyn 3] (gas: 6)\n  1248: a0 = u64 [sp + 0x38]\n  1251: a1 = u64 [sp + 0x30]\n  1254: a2 = u64 [sp + 0x28]\n  1257: a3 = u64 [sp + 0x20]\n  1260: a0 = reverse a0\n  1262: t0 = 8, jump @1558\n      : @29 [@dyn 4] (gas: 5)\n  1268: u64 [s1 + 0x18] = a3\n  1271: u64 [s1 + 0x10] = a2\n  1274: u64 [s1 + 0x8] = a1\n  1277: u64 [s1] = a0\n  1279: t0 = 10, jump @1572\n      : @30 [@dyn 5] (gas: 1)\n  1285: ret\n      : @31 (gas: 40)\n  1287: sp = sp + 0xffffffffffffffa0\n  1290: u64 [sp + 0x58] = ra\n  1293: u64 [sp + 0x50] = s0\n  1296: s0 = sp + 0x60\n  1299: sp = sp & 0xffffffffffffffe0\n  1302: t0 = u64 [a0]\n  1304: a3 = u64 [a0 + 0x8]\n  1307: a4 = u64 [a0 + 0x10]\n  1310: a0 = u64 [a0 + 0x18]\n  1313: t1 = u64 [a1]\n  1315: a2 = u64 [a1 + 0x8]\n  1318: a5 = u64 [a1 + 0x10]\n  1321: a1 = u64 [a1 + 0x18]\n  1324: t2 = reverse a0\n  1326: a4 = reverse a4\n  1328: a3 = reverse a3\n  1330: a0 = reverse t0\n  1332: t0 = reverse a1\n  1334: a5 = reverse a5\n  1336: a2 = reverse a2\n  1338: a1 = reverse t1\n  1340: u64 [sp + 0x18] = a0\n  1343: u64 [sp + 0x10] = a3\n  1346: u64 [sp + 0x8] = a4\n  1349: u64 [sp] = t2\n  1351: u64 [sp + 0x38] = a1\n  1354: u64 [sp + 0x30] = a2\n  1357: u64 [sp + 0x28] = a5\n  1360: u64 [sp + 0x20] = t0\n  1363: i32 a1 = sp + 0\n  1365: i32 a3 = sp + 0x20\n  1368: a2 = 0xffffffffffffffff\n  1371: a4 = 0x20\n  1374: a0 = 0\n  1376: ecalli 9 // 'set_storage'\n  1378: sp = s0 + 0xffffffffffffffa0\n  1381: ra = u64 [sp + 0x58]\n  1384: s0 = u64 [sp + 0x50]\n  1387: sp = sp + 0x60\n  1390: ret\n      : @32 (gas: 24)\n  1392: sp = sp + 0xffffffffffffff60\n  1396: u64 [sp + 0x98] = ra\n  1400: u64 [sp + 0x90] = s0\n  1404: u64 [sp + 0x88] = s1\n  1408: s0 = sp + 0xa0\n  1412: sp = sp & 0xffffffffffffffe0\n  1415: a4 = u64 [a3]\n  1417: u64 [sp + 0x38] = a4\n  1420: a4 = u64 [a3 + 0x8]\n  1423: u64 [sp + 0x30] = a4\n  1426: a4 = u64 [a3 + 0x10]\n  1429: u64 [sp + 0x28] = a4\n  1432: a3 = u64 [a3 + 0x18]\n  1435: u64 [sp + 0x20] = a3\n  1438: a3 = u64 [a2]\n  1440: u64 [sp + 0x18] = a3\n  1443: a3 = u64 [a2 + 0x8]\n  1446: u64 [sp + 0x10] = a3\n  1449: a3 = u64 [a2 + 0x10]\n  1452: u64 [sp + 0x8] = a3\n  1455: a2 = u64 [a2 + 0x18]\n  1458: u64 [sp] = a2\n  1460: s1 = a1\n  1462: ra = 12, jump @38\n      : @33 [@dyn 6] (gas: 35)\n  1467: a1 = u64 [sp]\n  1469: a1 = reverse a1\n  1471: a2 = u64 [sp + 0x8]\n  1474: a2 = reverse a2\n  1476: a3 = u64 [sp + 0x10]\n  1479: a3 = reverse a3\n  1481: a4 = u64 [sp + 0x18]\n  1484: a4 = reverse a4\n  1486: u64 [sp + 0x58] = a4\n  1489: u64 [sp + 0x50] = a3\n  1492: u64 [sp + 0x48] = a2\n  1495: u64 [sp + 0x40] = a1\n  1498: a1 = u64 [sp + 0x20]\n  1501: a1 = reverse a1\n  1503: a2 = u64 [sp + 0x28]\n  1506: a2 = reverse a2\n  1508: a3 = u64 [sp + 0x30]\n  1511: a3 = reverse a3\n  1513: a4 = u64 [sp + 0x38]\n  1516: a4 = reverse a4\n  1518: u64 [sp + 0x78] = a4\n  1521: u64 [sp + 0x70] = a3\n  1524: u64 [sp + 0x68] = a2\n  1527: u64 [sp + 0x60] = a1\n  1530: i32 a2 = a0 + 0\n  1532: i32 a3 = s1 + 0\n  1534: i32 a0 = sp + 0x40\n  1537: a1 = 0x2\n  1540: ecalli 4 // 'deposit_event'\n  1542: sp = s0 + 0xffffffffffffff60\n  1546: ra = u64 [sp + 0x98]\n  1550: s0 = u64 [sp + 0x90]\n  1554: s1 = u64 [sp + 0x88]\n  1558: sp = sp + 0xa0\n  1562: ret\n      : @34 (gas: 33)\n  1564: sp = sp + 0xffffffffffffff20\n  1568: u64 [sp + 0xd8] = ra\n  1572: u64 [sp + 0xd0] = s0\n  1576: u64 [sp + 0xc8] = s1\n  1580: s0 = sp + 0xe0\n  1584: sp = sp & 0xffffffffffffffe0\n  1587: a5 = u64 [a4]\n  1589: u64 [sp + 0x40] = a5\n  1592: a5 = u64 [a4 + 0x8]\n  1595: u64 [sp + 0x48] = a5\n  1598: a5 = u64 [a4 + 0x10]\n  1601: u64 [sp + 0x50] = a5\n  1604: a4 = u64 [a4 + 0x18]\n  1607: u64 [sp + 0x58] = a4\n  1610: t0 = 0xe\n  1613: a4 = u64 [a3]\n  1615: u64 [sp + 0x18] = a4\n  1618: a4 = u64 [a3 + 0x8]\n  1621: u64 [sp + 0x20] = a4\n  1624: a4 = u64 [a3 + 0x10]\n  1627: u64 [sp + 0x28] = a4\n  1630: a3 = u64 [a3 + 0x18]\n  1633: u64 [sp + 0x30] = a3\n  1636: s1 = u64 [a2]\n  1638: a3 = u64 [a2 + 0x8]\n  1641: u64 [sp] = a3\n  1643: a3 = u64 [a2 + 0x10]\n  1646: u64 [sp + 0x8] = a3\n  1649: a2 = u64 [a2 + 0x18]\n  1652: u64 [sp + 0x10] = a2\n  1655: u64 [sp + 56] = 0x20\n  1659: ra = 0x10\n  1662: jump @38\n      : @35 [@dyn 7] (gas: 2)\n  1665: u64 [sp + 0x38] = a1\n  1668: ra = 16, jump @38\n      : @36 [@dyn 8] (gas: 41)\n  1672: a1 = reverse s1\n  1674: u64 [sp + 0x78] = a1\n  1677: a1 = u64 [sp]\n  1679: a1 = reverse a1\n  1681: u64 [sp + 0x70] = a1\n  1684: a1 = u64 [sp + 0x8]\n  1687: a1 = reverse a1\n  1689: u64 [sp + 0x68] = a1\n  1692: a1 = u64 [sp + 0x10]\n  1695: a1 = reverse a1\n  1697: u64 [sp + 0x60] = a1\n  1700: a1 = u64 [sp + 0x18]\n  1703: a1 = reverse a1\n  1705: u64 [sp + 0x98] = a1\n  1709: a1 = u64 [sp + 0x20]\n  1712: a1 = reverse a1\n  1714: u64 [sp + 0x90] = a1\n  1718: a1 = u64 [sp + 0x28]\n  1721: a1 = reverse a1\n  1723: u64 [sp + 0x88] = a1\n  1727: a1 = u64 [sp + 0x30]\n  1730: a1 = reverse a1\n  1732: u64 [sp + 0x80] = a1\n  1736: a1 = u64 [sp + 0x40]\n  1739: a1 = reverse a1\n  1741: u64 [sp + 0xb8] = a1\n  1745: a1 = u64 [sp + 0x48]\n  1748: a1 = reverse a1\n  1750: u64 [sp + 0xb0] = a1\n  1754: a1 = u64 [sp + 0x50]\n  1757: a1 = reverse a1\n  1759: u64 [sp + 0xa8] = a1\n  1763: a1 = u64 [sp + 0x58]\n  1766: a1 = reverse a1\n  1768: u64 [sp + 0xa0] = a1\n  1772: i32 a2 = a0 + 0\n  1774: a3 = i32 [sp + 0x38]\n  1777: i32 a0 = sp + 0x60\n  1780: a1 = 0x3\n  1783: ecalli 4 // 'deposit_event'\n  1785: t0 = 18, jump @1578\n      : @37 [@dyn 9] (gas: 1)\n  1791: ret\n      : @38 (gas: 2)\n  1793: i32 a2 = a0 >> 0x10\n  1796: jump @43 if a2 != 0\n      : @39 (gas: 4)\n  1799: a1 = a1 + a0\n  1802: i32 a1 = a1 + 0x1f\n  1805: a1 = a1 & 0xffffffffffffffe0\n  1808: jump @43 if a1 >u 65536\n      : @40 (gas: 3)\n  1814: a2 = 0x2019c\n  1819: a3 = i32 [0x2019c]\n  1824: jump @42 if a3 >=u a1\n      : @41 (gas: 2)\n  1827: u32 [0x2019c] = a1\n  1832: fallthrough\n      : @42 (gas: 4)\n  1833: a1 = 0x201b0\n  1838: i32 a0 = a0 + 0\n  1840: a0 = a0 + a1\n  1843: ret\n      : @43 (gas: 1)\n  1845: trap\n      : @44 (gas: 6)\n  1846: sp = sp + 0xfffffffffffffff0\n  1849: u64 [sp + 0x8] = ra\n  1852: u64 [sp] = s0\n  1854: s0 = a0 & 0x1\n  1857: ecalli 2 // 'call_data_size'\n  1859: fallthrough\n      : @45 (gas: 2)\n  1860: u32 [0x20198] = a0\n  1865: jump @47 if s0 == 0\n      : @46 (gas: 1)\n  1868: ra = 20, jump @48\n      : @47 [@dyn 10] (gas: 1)\n  1872: ra = 22, jump @107\n      : @48 [@dyn 11] (gas: 15)\n  1877: sp = sp + 0xfffffffffffffac0\n  1881: a0 = sp + 0x500\n  1885: u64 [a0 + 0x38] = ra\n  1888: u64 [a0 + 0x30] = s0\n  1891: u64 [a0 + 0x28] = s1\n  1894: s0 = sp + 0x540\n  1898: sp = sp & 0xffffffffffffffe0\n  1901: s1 = sp\n  1903: u64 [s1 + 696] = 0\n  1907: u64 [s1 + 688] = 0\n  1911: u64 [s1 + 672] = 0x80\n  1917: a0 = 0x40\n  1920: a1 = s1 + 0x2a0\n  1924: u64 [s1 + 680] = 0\n  1928: ra = 24, jump @25\n      : @49 [@dyn 12] (gas: 7)\n  1933: u64 [s1 + 728] = 0\n  1937: u64 [s1 + 720] = 0\n  1941: u64 [s1 + 712] = 0\n  1945: u64 [s1 + 704] = 0\n  1949: i32 a0 = s1 + 0x2c0\n  1953: ecalli 10 // 'value_transferred'\n  1955: fallthrough\n      : @50 (gas: 9)\n  1956: a4 = s1 + 0x200\n  1960: a0 = u64 [a4 + 0xd0]\n  1964: a1 = u64 [a4 + 0xd8]\n  1968: a2 = u64 [a4 + 0xc8]\n  1972: a3 = u64 [a4 + 0xc0]\n  1976: a1 = a1 | a2\n  1979: a0 = a0 | a3\n  1982: a0 = a0 | a1\n  1985: jump @102 if a0 != 0\n      : @51 (gas: 7)\n  1989: u64 [s1 + 760] = 0\n  1993: u64 [s1 + 752] = 0\n  1997: u64 [s1 + 744] = 0\n  2001: u64 [s1 + 736] = 0\n  2005: a0 = s1 + 0x280\n  2009: a1 = s1 + 0x2e0\n  2013: ra = 26, jump @27\n      : @52 [@dyn 13] (gas: 11)\n  2018: a2 = u64 [s1 + 0x280]\n  2022: a0 = u64 [s1 + 0x288]\n  2026: a1 = u64 [s1 + 0x290]\n  2030: a3 = u64 [s1 + 0x298]\n  2034: u64 [s1 + 0x258] = a3\n  2038: u64 [s1 + 0x250] = a1\n  2042: u64 [s1 + 0x248] = a0\n  2046: a0 = s1 + 0x260\n  2050: a1 = s1 + 0x240\n  2054: u64 [s1 + 0x240] = a2\n  2058: ra = 28, jump @1168\n      : @53 [@dyn 14] (gas: 10)\n  2063: a0 = s1 + 0x200\n  2067: a2 = u64 [a0 + 0x78]\n  2070: a3 = u64 [a0 + 0x70]\n  2073: a5 = u64 [a0 + 0x60]\n  2076: a4 = u64 [a0 + 0x68]\n  2079: a0 = a3 | a2\n  2082: a1 = a5 <u 0x20\n  2085: a1 = 0 if a4 != 0\n  2087: a1 = 0 if a0 != 0\n  2089: jump @63 if a1 != 0\n      : @54 (gas: 11)\n  2093: u64 [s1 + 0x40] = a5\n  2096: u64 [s1 + 0x48] = a4\n  2099: u64 [s1 + 0x50] = a3\n  2102: u64 [s1 + 0x58] = a2\n  2105: u64 [s1 + 568] = 0\n  2109: u64 [s1 + 560] = 0\n  2113: u64 [s1 + 552] = 0\n  2117: a1 = s1 + 0x220\n  2121: u64 [s1 + 544] = 0\n  2125: a0 = 0\n  2127: ra = 30, jump @25\n      : @55 [@dyn 15] (gas: 2)\n  2132: a1 = i32 [0x2019c]\n  2137: jump @57 if a1 >u 31\n      : @56 (gas: 2)\n  2141: u32 [0x2019c] = 0x20\n  2147: fallthrough\n      : @57 (gas: 10)\n  2148: a0 = sp + 0xffffffffffffffe0\n  2151: a2 = a0 & 0xffffffffffffffe0\n  2154: u64 [s1 + 0x30] = a2\n  2157: sp = a2\n  2159: a0 = 0x201b0\n  2164: i32 a0 = a0 + 0\n  2166: i32 a2 = a2 + 0\n  2168: a1 = 0x20\n  2171: ecalli 6 // 'hash_keccak_256'\n  2173: t0 = 32, jump @1525\n      : @58 [@dyn 16] (gas: 29)\n  2179: t0 = u64 [t2 + 0x8]\n  2182: a2 = u64 [t2]\n  2184: a4 = a3 ^ ra\n  2187: u64 [s1 + 0x30] = a3\n  2190: a3 = a3 <u ra\n  2193: a3 = a1 if a4 == 0\n  2196: t2 = reverse a2\n  2198: t0 = reverse t0\n  2200: a1 = a0 <u a5\n  2203: a2 = u64 [s1 + 0x58]\n  2206: a1 = a1 + a2\n  2209: a0 = a0 >> 0x5\n  2212: a2 = a1 << 0x3b\n  2215: a0 = a0 | a2\n  2218: a1 = a1 >> 0x5\n  2221: a0 = a0 + t0\n  2224: a2 = a0 <u t0\n  2227: a1 = a1 + t2\n  2230: a1 = a1 + a2\n  2233: a3 = a3 + a0\n  2236: u64 [s1 + 0x28] = a3\n  2239: a0 = a3 <u a0\n  2242: a0 = a0 + a1\n  2245: u64 [s1 + 0x20] = a0\n  2248: a0 = sp + 0xffffffffffffffe0\n  2251: a4 = a0 & 0xffffffffffffffe0\n  2254: sp = a4\n  2256: u64 [s1 + 0x18] = a4\n  2259: fallthrough\n      : @59 (gas: 20)\n  2260: a0 = u64 [s1 + 0x38]\n  2263: a0 = t1 <u a0\n  2266: a2 = u64 [s1 + 0x30]\n  2269: a1 = ra ^ a2\n  2272: a2 = ra <u a2\n  2275: a2 = a0 if a1 == 0\n  2278: a5 = u64 [s1 + 0x28]\n  2281: a0 = t0 <u a5\n  2284: a3 = u64 [s1 + 0x20]\n  2287: a1 = t2 ^ a3\n  2290: a3 = t2 <u a3\n  2293: a3 = a0 if a1 == 0\n  2296: a0 = t0 ^ a5\n  2299: a0 = a0 | a1\n  2302: a3 = a2 if a0 == 0\n  2305: u64 [a4] = t1\n  2307: u64 [a4 + 0x8] = ra\n  2310: u64 [a4 + 0x10] = t0\n  2313: u64 [a4 + 0x18] = t2\n  2316: jump @63 if a3 == 0\n      : @60 (gas: 11)\n  2319: u64 [s1 + 792] = 0\n  2323: u64 [s1 + 784] = 0\n  2327: u64 [s1 + 776] = 0\n  2331: u64 [s1 + 768] = 0\n  2335: a1 = s1 + 0x300\n  2339: a0 = a4\n  2341: u64 [s1 + 0x58] = t1\n  2344: u64 [s1 + 0x50] = ra\n  2347: u64 [s1 + 0x48] = t2\n  2350: u64 [s1 + 0x40] = t0\n  2353: ra = 34, jump @31\n      : @61 [@dyn 17] (gas: 1)\n  2358: t0 = 36, jump @1548\n      : @62 [@dyn 18] (gas: 2)\n  2364: t0 = a0\n  2366: jump @59\n      : @63 (gas: 13)\n  2368: a1 = u64 [0x20000]\n  2373: u64 [s1 + 832] = 0x1e\n  2378: u64 [s1 + 824] = 0\n  2382: u64 [s1 + 816] = 0\n  2386: u64 [s1 + 0x358] = a1\n  2390: a0 = u64 [0x20008]\n  2395: u64 [s1 + 808] = 0\n  2399: u64 [s1 + 800] = 0\n  2403: u64 [s1 + 840] = 0\n  2407: u64 [s1 + 0x350] = a0\n  2411: a0 = s1 + 0x320\n  2415: a1 = s1 + 0x340\n  2419: ra = 38, jump @31\n      : @64 [@dyn 19] (gas: 7)\n  2424: u64 [s1 + 888] = 0\n  2428: u64 [s1 + 880] = 0\n  2432: u64 [s1 + 872] = 0\n  2436: u64 [s1 + 864] = 0x1\n  2441: a0 = s1 + 0x200\n  2445: a1 = s1 + 0x360\n  2449: ra = 40, jump @27\n      : @65 [@dyn 20] (gas: 12)\n  2454: a4 = s1 + 0x200\n  2458: a2 = u64 [a4]\n  2460: a0 = u64 [a4 + 0x8]\n  2463: a1 = u64 [a4 + 0x10]\n  2466: a3 = u64 [a4 + 0x18]\n  2469: u64 [s1 + 0x1d8] = a3\n  2473: u64 [s1 + 0x1d0] = a1\n  2477: u64 [s1 + 0x1c8] = a0\n  2481: a0 = s1 + 0x1e0\n  2485: a1 = s1 + 0x1c0\n  2489: u64 [s1 + 0x1c0] = a2\n  2493: ra = 42, jump @1168\n      : @66 [@dyn 21] (gas: 15)\n  2498: a0 = s1 + 0x100\n  2502: a3 = u64 [a0 + 0xf8]\n  2506: a4 = u64 [a0 + 0xf0]\n  2510: a5 = u64 [a0 + 0xe8]\n  2514: t0 = u64 [s1 + 0x1e0]\n  2518: a0 = a3 >u 0\n  2520: a1 = a4 >u 0\n  2522: a1 = a0 if a3 != 0\n  2525: a0 = a5 >u 0\n  2527: a2 = t0 <u 0x20\n  2530: a2 = a2 ^ 0x1\n  2533: a2 = a0 if a5 != 0\n  2536: a0 = a4 | a3\n  2539: a2 = a1 if a0 != 0\n  2542: jump @76 if a2 == 0\n      : @67 (gas: 11)\n  2546: u64 [s1 + 0x40] = t0\n  2549: u64 [s1 + 0x48] = a5\n  2552: u64 [s1 + 0x50] = a4\n  2555: u64 [s1 + 0x58] = a3\n  2558: u64 [s1 + 440] = 0\n  2562: u64 [s1 + 432] = 0\n  2566: u64 [s1 + 424] = 0\n  2570: a1 = s1 + 0x1a0\n  2574: u64 [s1 + 416] = 0x1\n  2579: a0 = 0\n  2581: ra = 44, jump @25\n      : @68 [@dyn 22] (gas: 2)\n  2586: a1 = i32 [0x2019c]\n  2591: jump @70 if a1 >u 31\n      : @69 (gas: 2)\n  2595: u32 [0x2019c] = 0x20\n  2601: fallthrough\n      : @70 (gas: 10)\n  2602: a0 = sp + 0xffffffffffffffe0\n  2605: a2 = a0 & 0xffffffffffffffe0\n  2608: u64 [s1 + 0x30] = a2\n  2611: sp = a2\n  2613: a0 = 0x201b0\n  2618: i32 a0 = a0 + 0\n  2620: i32 a2 = a2 + 0\n  2622: a1 = 0x20\n  2625: ecalli 6 // 'hash_keccak_256'\n  2627: t0 = 46, jump @1525\n      : @71 [@dyn 23] (gas: 29)\n  2633: t0 = u64 [t2 + 0x8]\n  2636: a2 = u64 [t2]\n  2638: a4 = a3 ^ ra\n  2641: u64 [s1 + 0x30] = a3\n  2644: a3 = a3 <u ra\n  2647: a3 = a1 if a4 == 0\n  2650: t2 = reverse a2\n  2652: t0 = reverse t0\n  2654: a1 = a0 <u a5\n  2657: a2 = u64 [s1 + 0x58]\n  2660: a1 = a1 + a2\n  2663: a0 = a0 >> 0x5\n  2666: a2 = a1 << 0x3b\n  2669: a0 = a0 | a2\n  2672: a1 = a1 >> 0x5\n  2675: a0 = a0 + t0\n  2678: a2 = a0 <u t0\n  2681: a1 = a1 + t2\n  2684: a1 = a1 + a2\n  2687: a3 = a3 + a0\n  2690: u64 [s1 + 0x28] = a3\n  2693: a0 = a3 <u a0\n  2696: a0 = a0 + a1\n  2699: u64 [s1 + 0x20] = a0\n  2702: a0 = sp + 0xffffffffffffffe0\n  2705: a4 = a0 & 0xffffffffffffffe0\n  2708: sp = a4\n  2710: u64 [s1 + 0x18] = a4\n  2713: fallthrough\n      : @72 (gas: 20)\n  2714: a0 = u64 [s1 + 0x38]\n  2717: a0 = t1 <u a0\n  2720: a2 = u64 [s1 + 0x30]\n  2723: a1 = ra ^ a2\n  2726: a2 = ra <u a2\n  2729: a2 = a0 if a1 == 0\n  2732: a5 = u64 [s1 + 0x28]\n  2735: a0 = t0 <u a5\n  2738: a3 = u64 [s1 + 0x20]\n  2741: a1 = t2 ^ a3\n  2744: a3 = t2 <u a3\n  2747: a3 = a0 if a1 == 0\n  2750: a0 = t0 ^ a5\n  2753: a0 = a0 | a1\n  2756: a3 = a2 if a0 == 0\n  2759: u64 [a4] = t1\n  2761: u64 [a4 + 0x8] = ra\n  2764: u64 [a4 + 0x10] = t0\n  2767: u64 [a4 + 0x18] = t2\n  2770: jump @76 if a3 == 0\n      : @73 (gas: 11)\n  2773: u64 [s1 + 920] = 0\n  2777: u64 [s1 + 912] = 0\n  2781: u64 [s1 + 904] = 0\n  2785: u64 [s1 + 896] = 0\n  2789: a1 = s1 + 0x380\n  2793: a0 = a4\n  2795: u64 [s1 + 0x58] = t1\n  2798: u64 [s1 + 0x50] = ra\n  2801: u64 [s1 + 0x48] = t2\n  2804: u64 [s1 + 0x40] = t0\n  2807: ra = 48, jump @31\n      : @74 [@dyn 24] (gas: 1)\n  2812: t0 = 50, jump @1548\n      : @75 [@dyn 25] (gas: 2)\n  2818: t0 = a0\n  2820: jump @72\n      : @76 (gas: 12)\n  2822: u64 [s1 + 952] = 0\n  2826: u64 [s1 + 944] = 0\n  2830: u64 [s1 + 936] = 0\n  2834: u64 [s1 + 928] = 0x1\n  2839: u64 [s1 + 976] = 0\n  2843: u64 [s1 + 968] = 0\n  2847: u64 [s1 + 960] = 0x8\n  2852: a0 = 0x4d55534400000000\n  2862: u64 [s1 + 0x3d8] = a0\n  2866: a0 = s1 + 0x3a0\n  2870: a1 = s1 + 0x3c0\n  2874: ra = 52, jump @31\n      : @77 [@dyn 26] (gas: 7)\n  2879: u64 [s1 + 1016] = 0\n  2883: u64 [s1 + 1008] = 0\n  2887: u64 [s1 + 1000] = 0\n  2891: u64 [s1 + 992] = 0x2\n  2896: a0 = s1 + 0x180\n  2900: a1 = s1 + 0x3e0\n  2904: ra = 54, jump @27\n      : @78 [@dyn 27] (gas: 17)\n  2909: a0 = u64 [s1 + 0x180]\n  2913: a1 = u64 [s1 + 0x188]\n  2917: a2 = u64 [s1 + 0x190]\n  2921: a3 = u64 [s1 + 0x198]\n  2925: a0 = a0 & 0xffffffffffffff00\n  2929: a0 = a0 | 0x6\n  2932: u64 [s1 + 1048] = 0\n  2936: u64 [s1 + 1040] = 0\n  2940: u64 [s1 + 1032] = 0\n  2944: u64 [s1 + 1024] = 0x2\n  2949: u64 [s1 + 0x438] = a3\n  2953: u64 [s1 + 0x430] = a2\n  2957: u64 [s1 + 0x428] = a1\n  2961: u64 [s1 + 0x420] = a0\n  2965: a0 = s1 + 0x400\n  2969: a1 = s1 + 0x420\n  2973: ra = 56, jump @31\n      : @79 [@dyn 28] (gas: 29)\n  2978: a0 = 0x301b0\n  2983: u64 [s1 + 0x58] = a0\n  2986: i32 a0 = a0 + 0\n  2988: u64 [s1 + 0x50] = a0\n  2991: ecalli 3 // 'caller'\n  2993: a2 = u64 [s1 + 0x58]\n  2996: a0 = u64 [a2 + 0x8]\n  2999: a1 = i32 [a2 + 0x10]\n  3002: a2 = u64 [a2]\n  3004: a0 = reverse a0\n  3006: a3 = a0 << 0x20\n  3009: a1 = reverse a1\n  3011: a1 = a1 >> 0x20\n  3014: a1 = a1 | a3\n  3017: u64 [s1 + 0x48] = a1\n  3020: a0 = a0 >> 0x20\n  3023: a1 = reverse a2\n  3025: a2 = a1 << 0x20\n  3028: a0 = a0 | a2\n  3031: u64 [s1 + 0x40] = a0\n  3034: a1 = a1 >> 0x20\n  3037: u64 [s1 + 0x38] = a1\n  3040: u64 [s1 + 1112] = 0\n  3044: u64 [s1 + 1104] = 0\n  3048: u64 [s1 + 1096] = 0\n  3052: u64 [s1 + 1088] = 0x6\n  3057: a0 = s1 + 0x160\n  3061: a1 = s1 + 0x440\n  3065: ra = 58, jump @27\n      : @80 [@dyn 29] (gas: 19)\n  3070: a0 = u32 [s1 + 0x174]\n  3074: a0 = a0 << 0x20\n  3077: a1 = u64 [s1 + 0x178]\n  3081: a2 = u64 [s1 + 0x38]\n  3084: a0 = a0 | a2\n  3087: u64 [s1 + 1144] = 0\n  3091: u64 [s1 + 1136] = 0\n  3095: u64 [s1 + 1128] = 0\n  3099: a3 = s1 + 0x400\n  3103: u64 [a3 + 96] = 0x6\n  3107: u64 [a3 + 0x98] = a1\n  3111: a1 = u64 [s1 + 0x40]\n  3114: u64 [a3 + 0x88] = a1\n  3118: a1 = u64 [s1 + 0x48]\n  3121: u64 [a3 + 0x80] = a1\n  3125: u64 [a3 + 0x90] = a0\n  3129: a0 = s1 + 0x460\n  3133: a1 = s1 + 0x480\n  3137: ra = 60, jump @31\n      : @81 [@dyn 30] (gas: 6)\n  3142: a0 = u64 [s1 + 0x50]\n  3145: ra = 0x3e\n  3148: ecalli 3 // 'caller'\n  3150: a2 = u64 [s1 + 0x58]\n  3153: t0 = 0x40\n  3156: jump @1531\n      : @82 [@dyn 31] (gas: 2)\n  3160: a2 = u64 [s1 + 0x58]\n  3163: t0 = 64, jump @1531\n      : @83 [@dyn 32] (gas: 7)\n  3169: u64 [s1 + 344] = 0\n  3173: u64 [s1 + 0x150] = a1\n  3177: u64 [s1 + 0x148] = a0\n  3181: a1 = s1 + 0x140\n  3185: u64 [s1 + 0x140] = a3\n  3189: a0 = 0\n  3191: ra = 66, jump @25\n      : @84 [@dyn 33] (gas: 7)\n  3196: u64 [s1 + 312] = 0\n  3200: u64 [s1 + 304] = 0\n  3204: u64 [s1 + 288] = 0x4\n  3209: a0 = 0x20\n  3212: a1 = s1 + 0x120\n  3216: u64 [s1 + 296] = 0\n  3220: ra = 68, jump @25\n      : @85 [@dyn 34] (gas: 2)\n  3225: a1 = i32 [0x2019c]\n  3230: jump @87 if a1 >u 63\n      : @86 (gas: 2)\n  3234: u32 [0x2019c] = 0x40\n  3240: fallthrough\n      : @87 (gas: 11)\n  3241: a0 = sp + 0xffffffffffffffe0\n  3244: a2 = a0 & 0xffffffffffffffe0\n  3247: u64 [s1 + 0x48] = a2\n  3250: sp = a2\n  3252: a0 = 0x201b0\n  3257: i32 a0 = a0 + 0\n  3259: i32 a2 = a2 + 0\n  3261: a1 = 0x40\n  3264: ra = 0x46\n  3267: ecalli 6 // 'hash_keccak_256'\n  3269: fallthrough\n      : @88 [@dyn 35] (gas: 7)\n  3270: a3 = u64 [s1 + 0x48]\n  3273: a0 = u64 [a3 + 0x18]\n  3276: a1 = u64 [a3 + 0x10]\n  3279: a2 = u64 [a3 + 0x8]\n  3282: a3 = u64 [a3]\n  3284: a0 = reverse a0\n  3286: t0 = 72, jump @1558\n      : @89 [@dyn 36] (gas: 13)\n  3292: u64 [s1 + 0x4b8] = a3\n  3296: u64 [s1 + 0x4b0] = a2\n  3300: u64 [s1 + 0x4a8] = a1\n  3304: u64 [s1 + 0x4a0] = a0\n  3308: u64 [s1 + 1240] = 0\n  3312: u64 [s1 + 1232] = 0\n  3316: u64 [s1 + 1224] = 0\n  3320: a0 = 0xe8d4a51000\n  3330: u64 [s1 + 0x48] = a0\n  3333: u64 [s1 + 0x4c0] = a0\n  3337: a0 = s1 + 0x4a0\n  3341: a1 = s1 + 0x4c0\n  3345: ra = 74, jump @31\n      : @90 [@dyn 37] (gas: 12)\n  3350: u64 [s1 + 1272] = 0\n  3354: u64 [s1 + 1264] = 0\n  3358: u64 [s1 + 1256] = 0\n  3362: u64 [s1 + 1248] = 0x3\n  3367: u64 [s1 + 1304] = 0\n  3371: u64 [s1 + 1296] = 0\n  3375: u64 [s1 + 1288] = 0\n  3379: a0 = u64 [s1 + 0x48]\n  3382: u64 [s1 + 0x500] = a0\n  3386: a0 = s1 + 0x4e0\n  3390: a1 = s1 + 0x500\n  3394: ra = 76, jump @31\n      : @91 [@dyn 38] (gas: 3)\n  3399: a0 = s1 + 0x100\n  3403: a1 = 0x40\n  3406: ra = 78, jump @23\n      : @92 [@dyn 39] (gas: 6)\n  3411: a4 = s1 + 0x100\n  3415: a3 = u64 [a4 + 0x18]\n  3418: a1 = u64 [a4 + 0x10]\n  3421: a2 = u64 [a4 + 0x8]\n  3424: a0 = u64 [a4]\n  3426: t0 = 80, jump @1562\n      : @93 [@dyn 40] (gas: 1)\n  3432: jump @101 if a1 != 0\n      : @94 (gas: 8)\n  3436: u64 [s1 + 248] = 0\n  3440: u64 [s1 + 240] = 0\n  3444: u64 [s1 + 232] = 0\n  3448: a1 = s1 + 0xe0\n  3452: a2 = u64 [s1 + 0x48]\n  3455: u64 [s1 + 0xe0] = a2\n  3459: u64 [s1 + 0x48] = a0\n  3462: ra = 82, jump @25\n      : @95 [@dyn 41] (gas: 6)\n  3467: a0 = u64 [s1 + 0x50]\n  3470: ra = 0x54\n  3473: ecalli 3 // 'caller'\n  3475: a2 = u64 [s1 + 0x58]\n  3478: t0 = 0x56\n  3481: jump @1522\n      : @96 [@dyn 42] (gas: 2)\n  3485: a2 = u64 [s1 + 0x58]\n  3488: t0 = 86, jump @1522\n      : @97 [@dyn 43] (gas: 28)\n  3494: t0 = a1 | a0\n  3497: a3 = a3 >> 0x20\n  3500: a2 = reverse a2\n  3502: a1 = a2 << 0x20\n  3505: a1 = a1 | a3\n  3508: a2 = a2 >> 0x20\n  3511: u64 [s1 + 152] = 0\n  3515: u64 [s1 + 184] = 0\n  3519: u64 [s1 + 176] = 0\n  3523: u64 [s1 + 168] = 0\n  3527: u64 [s1 + 160] = 0\n  3531: a3 = u64 [0x20010]\n  3536: a4 = u64 [0x20018]\n  3541: a5 = u64 [0x20020]\n  3546: a0 = u64 [0x20028]\n  3551: u64 [s1 + 0xd8] = a3\n  3555: u64 [s1 + 0xd0] = a4\n  3559: u64 [s1 + 0xc8] = a5\n  3563: u64 [s1 + 0xc0] = a0\n  3567: u64 [s1 + 0x90] = a2\n  3571: u64 [s1 + 0x88] = a1\n  3575: a1 = 0x20\n  3578: a2 = s1 + 0xc0\n  3582: a3 = s1 + 0xa0\n  3586: a4 = s1 + 0x80\n  3590: u64 [s1 + 0x80] = t0\n  3594: a0 = u64 [s1 + 0x48]\n  3597: ra = 88, jump @34\n      : @98 [@dyn 44] (gas: 3)\n  3602: a0 = s1 + 0x60\n  3605: a1 = 0x40\n  3608: ra = 90, jump @23\n      : @99 [@dyn 45] (gas: 5)\n  3613: a3 = u64 [s1 + 0x78]\n  3616: a1 = u64 [s1 + 0x70]\n  3619: a2 = u64 [s1 + 0x68]\n  3622: a0 = u64 [s1 + 0x60]\n  3625: t0 = 92, jump @1562\n      : @100 [@dyn 46] (gas: 1)\n  3631: jump @103 if a1 == 0\n      : @101 (gas: 1)\n  3634: trap\n      : @102 (gas: 7)\n  3635: a1 = 0x201b0\n  3640: i32 a1 = a1 + 0\n  3642: a0 = 0x1\n  3645: a2 = 0\n  3647: ra = 0x62\n  3650: ecalli 7 // 'seal_return'\n  3652: jump @107\n      : @103 (gas: 2)\n  3654: u64 [s1 + 0x58] = a0\n  3657: ra = 94, jump @38\n      : @104 [@dyn 47] (gas: 5)\n  3662: i32 a0 = a0 + 0\n  3664: a1 = 0\n  3666: a2 = 0\n  3668: ecalli 0 // 'call_data_copy'\n  3669: jump @21\n      : @105 (gas: 3)\n  3672: a0 = u64 [s1 + 0x58]\n  3675: a1 = 0\n  3677: ra = 96, jump @38\n      : @106 [@dyn 48] (gas: 6)\n  3682: i32 a1 = a0 + 0\n  3684: a0 = 0\n  3686: a2 = 0\n  3688: ra = 0x62\n  3691: ecalli 7 // 'seal_return'\n  3693: fallthrough\n      : @107 [@dyn 49] (gas: 16)\n  3694: sp = sp + 0xfffffffffffffe10\n  3698: u64 [sp + 0x1e8] = ra\n  3702: u64 [sp + 0x1e0] = s0\n  3706: u64 [sp + 0x1d8] = s1\n  3710: s0 = sp + 0x1f0\n  3714: sp = sp + 0xffffffffffffc350\n  3718: sp = sp & 0xffffffffffffffe0\n  3721: s1 = sp\n  3723: a2 = s1 + 0x3058\n  3727: u64 [a2 + 1216] = 0\n  3731: u64 [a2 + 1208] = 0\n  3735: u64 [a2 + 1192] = 0x80\n  3741: a0 = 0x40\n  3744: a1 = s1 + 0x3500\n  3748: u64 [a2 + 1200] = 0\n  3752: ra = 100, jump @25\n      : @108 [@dyn 50] (gas: 4)\n  3757: a0 = 0x20198\n  3762: u64 [s1 + 0x18] = a0\n  3765: a0 = i32 [0x20198]\n  3770: jump @110 if a0 >=u 4\n      : @109 (gas: 1)\n  3774: jump @1137\n      : @110 (gas: 6)\n  3777: a0 = s1 + 0x3000\n  3781: i32 a0 = a0 + 0x520\n  3785: a1 = 0\n  3787: ra = 0x66\n  3790: ecalli 1 // 'call_data_load'\n  3792: fallthrough\n      : @111 [@dyn 51] (gas: 3)\n  3793: a3 = s1 + 0x3058\n  3797: a0 = i32 [a3 + 0x4e4]\n  3801: jump @113 if a0 != 2376452955\n      : @112 (gas: 1)\n  3808: jump @582\n      : @113 (gas: 1)\n  3811: jump @175 if a0 == 2514000705\n      : @114 (gas: 2)\n  3819: a2 = s1 + 0x3858\n  3823: jump @116 if a0 != 2757214935\n      : @115 (gas: 1)\n  3830: jump @433\n      : @116 (gas: 1)\n  3833: jump @196 if a0 == 2835717307\n      : @117 (gas: 1)\n  3841: jump @119 if a0 != 3350784628\n      : @118 (gas: 1)\n  3848: jump @650\n      : @119 (gas: 1)\n  3851: jump @121 if a0 != 3714247998\n      : @120 (gas: 1)\n  3858: jump @307\n      : @121 (gas: 1)\n  3861: jump @251 if a0 == 117300739\n      : @122 (gas: 1)\n  3869: jump @124 if a0 != 157198259\n      : @123 (gas: 1)\n  3876: jump @730\n      : @124 (gas: 1)\n  3879: jump @126 if a0 != 350744129\n      : @125 (gas: 1)\n  3886: jump @334\n      : @126 (gas: 1)\n  3889: jump @128 if a0 != 404098525\n      : @127 (gas: 1)\n  3896: jump @765\n      : @128 (gas: 1)\n  3899: jump @130 if a0 != 599290589\n      : @129 (gas: 1)\n  3906: jump @510\n      : @130 (gas: 1)\n  3909: jump @132 if a0 != 826074471\n      : @131 (gas: 1)\n  3916: jump @719\n      : @132 (gas: 1)\n  3919: jump @134 if a0 != 961581905\n      : @133 (gas: 1)\n  3926: jump @593\n      : @134 (gas: 1)\n  3929: jump @136 if a0 != 1086394137\n      : @135 (gas: 1)\n  3936: jump @270\n      : @136 (gas: 1)\n  3939: jump @138 if a0 != 1117154408\n      : @137 (gas: 1)\n  3946: jump @475\n      : @138 (gas: 1)\n  3949: jump @140 if a0 != 1469143191\n      : @139 (gas: 1)\n  3956: jump @405\n      : @140 (gas: 1)\n  3959: jump @142 if a0 == 1750544647\n      : @141 (gas: 1)\n  3966: jump @560\n      : @142 (gas: 11)\n  3969: u64 [a2 + 544] = 0\n  3973: u64 [a2 + 536] = 0\n  3977: u64 [a2 + 528] = 0\n  3981: u64 [a2 + 520] = 0\n  3985: a0 = s1 + 0x4000\n  3989: i32 a0 = a0 + 0xfffffffffffffa60\n  3993: ra = 0x68\n  3996: ecalli 10 // 'value_transferred'\n  3998: a0 = 0x4000\n  4002: t0 = 0x6a\n  4005: jump @1577\n      : @143 [@dyn 52] (gas: 2)\n  4009: a0 = 0x4000\n  4013: t0 = 106, jump @1577\n      : @144 [@dyn 53] (gas: 1)\n  4019: t0 = 108, jump @1557\n      : @145 [@dyn 54] (gas: 1)\n  4025: jump @147 if a0 == 0\n      : @146 (gas: 1)\n  4028: jump @1090\n      : @147 (gas: 3)\n  4031: a0 = u64 [s1 + 0x18]\n  4034: a0 = i32 [a0]\n  4036: jump @149 if a0 >u 67\n      : @148 (gas: 1)\n  4040: jump @1091\n      : @149 (gas: 5)\n  4043: a0 = s1 + 0x4000\n  4047: i32 a0 = a0 + 0xfffffffffffffa80\n  4051: a1 = 0x4\n  4054: ecalli 1 // 'call_data_load'\n  4056: fallthrough\n      : @150 (gas: 9)\n  4057: a2 = s1 + 0x3858\n  4061: a0 = a2 + 0x200\n  4065: a5 = u64 [a0 + 0x40]\n  4068: a3 = u64 [a0 + 0x38]\n  4071: a4 = u64 [a0 + 0x30]\n  4074: a0 = a3 | a5\n  4077: a1 = a4 <u 0x1\n  4080: a1 = 0 if a0 != 0\n  4082: jump @152 if a1 != 0\n      : @151 (gas: 1)\n  4085: jump @1092\n      : @152 (gas: 19)\n  4088: a1 = u64 [a2 + 0x228]\n  4092: a0 = u64 [s1 + 0x18]\n  4095: t2 = u32 [a0]\n  4097: a0 = a1 + 0x23\n  4100: a2 = a0 <u a1\n  4103: t0 = a4 + a2\n  4106: u64 [s1 + 0x88] = a4\n  4110: a4 = t0 <u a4\n  4113: a4 = a2 if a2 == 0\n  4116: a4 = a4 + a3\n  4119: u64 [s1 + 0x90] = a3\n  4123: a2 = a4 <u a3\n  4126: u64 [s1 + 0x98] = a5\n  4130: a2 = a2 + a5\n  4133: a2 = a2 | a4\n  4136: a0 = a0 <u t2\n  4139: a0 = 0 if t0 != 0\n  4141: a0 = 0 if a2 != 0\n  4143: jump @154 if a0 != 0\n      : @153 (gas: 1)\n  4146: jump @1093\n      : @154 (gas: 24)\n  4149: u64 [s1 + 0x80] = a1\n  4153: i32 a1 = a1 + 0x4\n  4156: a0 = s1 + 0x4000\n  4160: i32 a0 = a0 + 0xfffffffffffffaa0\n  4164: ecalli 1 // 'call_data_load'\n  4166: a0 = s1 + 0x3858\n  4170: a5 = a0 + 0x200\n  4174: a3 = u64 [a5 + 0x60]\n  4177: a1 = u64 [a5 + 0x58]\n  4180: a2 = u64 [a5 + 0x50]\n  4183: a4 = u64 [a5 + 0x48]\n  4186: a5 = s1 + 0x2058\n  4190: u64 [s1 + 0xc8] = a3\n  4194: u64 [a5 + 0x4c0] = a3\n  4198: u64 [s1 + 0xd0] = a1\n  4202: a3 = a5 + 0x400\n  4206: u64 [a3 + 0xb8] = a1\n  4210: u64 [s1 + 0xd8] = a2\n  4214: u64 [a3 + 0xb0] = a2\n  4218: a0 = s1 + 0x2520\n  4222: a1 = s1 + 0x2500\n  4226: u64 [s1 + 0xc0] = a4\n  4230: u64 [a3 + 0xa8] = a4\n  4234: ra = 110, jump @1216\n      : @155 [@dyn 55] (gas: 13)\n  4239: a0 = s1 + 0x2058\n  4243: a2 = a0 + 0x400\n  4247: a1 = u64 [a2 + 0xc8]\n  4251: u64 [s1 + 0xb8] = a1\n  4255: a1 = u64 [a2 + 0xd0]\n  4259: u64 [s1 + 0xb0] = a1\n  4263: a1 = u64 [a2 + 0xd8]\n  4267: u64 [s1 + 0xa8] = a1\n  4271: a1 = u64 [a2 + 0xe0]\n  4275: u64 [s1 + 0xa0] = a1\n  4279: a0 = s1 + 0x24e0\n  4283: a1 = 0x40\n  4286: ra = 112, jump @23\n      : @156 [@dyn 56] (gas: 26)\n  4291: a0 = s1 + 0x2058\n  4295: a2 = u64 [a0 + 0x4a0]\n  4299: u64 [s1 + 0x48] = a2\n  4302: a1 = u64 [a0 + 0x498]\n  4306: u64 [s1 + 0x40] = a1\n  4309: a4 = u64 [a0 + 0x490]\n  4313: u64 [s1 + 0x38] = a4\n  4316: a5 = u64 [a0 + 0x488]\n  4320: u64 [s1 + 0x50] = a5\n  4323: a3 = u64 [s1 + 0xa0]\n  4327: u64 [a0 + 0x460] = a3\n  4331: a3 = u64 [s1 + 0xa8]\n  4335: u64 [a0 + 0x458] = a3\n  4339: a3 = u64 [s1 + 0xb0]\n  4343: u64 [a0 + 0x450] = a3\n  4347: a3 = u64 [s1 + 0xb8]\n  4351: u64 [a0 + 0x448] = a3\n  4355: a3 = a0 + 0x400\n  4359: u64 [a3 + 0x80] = a2\n  4363: u64 [a3 + 0x78] = a1\n  4366: u64 [a3 + 0x70] = a4\n  4369: a2 = a0\n  4371: a0 = s1 + 0x24c0\n  4375: a1 = s1 + 0x24a0\n  4379: u64 [a2 + 0x468] = a5\n  4383: ra = 114, jump @1177\n      : @157 [@dyn 57] (gas: 12)\n  4388: a0 = u64 [s1 + 0x50]\n  4391: a1 = u64 [s1 + 0x48]\n  4394: a2 = u64 [s1 + 0x38]\n  4397: a2 = a2 | a1\n  4400: a3 = u64 [s1 + 0x40]\n  4403: a1 = a0 | a3\n  4406: a1 = a1 | a2\n  4409: a1 = a1 >> 0x20\n  4412: a2 = a2 | a3\n  4415: a2 = a2 << 0x20\n  4418: a1 = a1 | a2\n  4421: jump @159 if a1 == 0\n      : @158 (gas: 1)\n  4424: jump @1003\n      : @159 (gas: 12)\n  4427: a2 = s1 + 0x2058\n  4431: a1 = u64 [s1 + 0xc0]\n  4435: a4 = a2 + 0x400\n  4439: u64 [a4 + 0x28] = a1\n  4442: a1 = u64 [s1 + 0xd8]\n  4446: u64 [a4 + 0x30] = a1\n  4449: a1 = u64 [s1 + 0xd0]\n  4453: u64 [a4 + 0x38] = a1\n  4456: a1 = s1 + 0x2480\n  4460: a3 = u64 [s1 + 0xc8]\n  4464: u64 [a4 + 0x40] = a3\n  4467: ra = 116, jump @25\n      : @160 [@dyn 58] (gas: 1)\n  4472: t0 = 118, jump @1575\n      : @161 [@dyn 59] (gas: 52)\n  4478: t0 = t2 <u a0\n  4481: a3 = u64 [s1 + 0x88]\n  4485: t1 = a3 + t0\n  4488: a1 = a1 + t1\n  4491: a5 = t2 + a2\n  4494: a2 = a5 <u t2\n  4497: ra = a1 + a2\n  4500: a4 = ra ^ t1\n  4503: a1 = ra <u t1\n  4506: a1 = a2 if a4 == 0\n  4509: a0 = u64 [s1 + 0xc8]\n  4513: a0 = a0 << 0x5\n  4516: a4 = u64 [s1 + 0xd0]\n  4520: a2 = a4 >> 0x3b\n  4523: a0 = a0 | a2\n  4526: u64 [s1 + 0xc8] = a0\n  4530: a2 = u64 [s1 + 0xd8]\n  4534: a2 = a2 >> 0x3b\n  4537: a4 = a4 << 0x5\n  4540: a2 = a2 | a4\n  4543: a4 = t1 <u a3\n  4546: a4 = t0 if t0 == 0\n  4549: a0 = u64 [s1 + 0x90]\n  4553: a4 = a4 + a0\n  4556: a0 = a4 <u a0\n  4559: t0 = u64 [s1 + 0x98]\n  4563: t0 = t0 + a0\n  4566: a2 = a2 + a4\n  4569: a3 = a2 + a1\n  4572: a0 = a3 <u a2\n  4575: u64 [s1 + 0xd8] = a4\n  4579: a2 = a2 <u a4\n  4582: a1 = u64 [s1 + 0xc8]\n  4586: a1 = a1 + t0\n  4589: a1 = a1 + a2\n  4592: a4 = a1 + a0\n  4595: a0 = u64 [s1 + 0x18]\n  4598: a0 = u32 [a0]\n  4600: a1 = a4 <u 0x1\n  4603: a2 = a3 <u 0x1\n  4606: a2 = a1 if a4 != 0\n  4609: u64 [s1 + 0x80] = a5\n  4613: a0 = a0 <u a5\n  4616: a0 = a0 ^ 0x1\n  4619: a1 = ra <u 0x1\n  4622: u64 [s1 + 0x78] = ra\n  4625: a0 = a1 if ra != 0\n  4628: u64 [s1 + 0x70] = a3\n  4631: u64 [s1 + 0x68] = a4\n  4634: a1 = a3 | a4\n  4637: a0 = a2 if a1 != 0\n  4640: jump @163 if a0 != 0\n      : @162 (gas: 1)\n  4643: jump @1152\n      : @163 (gas: 13)\n  4646: a0 = 0xffffffff\n  4656: u64 [s1 + 0x60] = a0\n  4659: a0 = 0xffffffe0\n  4669: u64 [s1 + 0x58] = a0\n  4672: a0 = u64 [s1 + 0x50]\n  4675: u64 [s1 + 0xc8] = a0\n  4679: a0 = u64 [s1 + 0x38]\n  4682: u64 [s1 + 0xc0] = a0\n  4686: ra = u64 [s1 + 0x40]\n  4689: a0 = u64 [s1 + 0x48]\n  4692: u64 [s1 + 0xd0] = a0\n  4696: a4 = u64 [s1 + 0xd8]\n  4700: fallthrough\n      : @164 (gas: 16)\n  4701: a0 = u64 [s1 + 0x80]\n  4705: a0 = t2 <u a0\n  4708: a2 = u64 [s1 + 0x78]\n  4711: a1 = t1 ^ a2\n  4714: a2 = t1 <u a2\n  4717: a2 = a0 if a1 == 0\n  4720: a5 = u64 [s1 + 0x70]\n  4723: a0 = a4 <u a5\n  4726: a3 = u64 [s1 + 0x68]\n  4729: a1 = t0 ^ a3\n  4732: a3 = t0 <u a3\n  4735: a3 = a0 if a1 == 0\n  4738: a0 = a4 ^ a5\n  4741: a0 = a0 | a1\n  4744: a3 = a2 if a0 == 0\n  4747: jump @166 if a3 != 0\n      : @165 (gas: 1)\n  4750: jump @967\n      : @166 (gas: 8)\n  4753: a0 = t2 | a4\n  4756: a1 = t1 | t0\n  4759: a0 = a0 | a1\n  4762: a0 = a0 >> 0x20\n  4765: a1 = a1 | a4\n  4768: a1 = a1 << 0x20\n  4771: a0 = a0 | a1\n  4774: jump @168 if a0 == 0\n      : @167 (gas: 1)\n  4777: jump @1003\n      : @168 (gas: 10)\n  4780: u64 [s1 + 0xb8] = ra\n  4784: u64 [s1 + 0xd8] = a4\n  4788: u64 [s1 + 0xa0] = t0\n  4792: u64 [s1 + 0xa8] = t1\n  4796: u64 [s1 + 0xb0] = t2\n  4800: i32 a1 = t2 + 0\n  4802: a0 = s1 + 0x4000\n  4806: i32 a0 = a0 + 0xfffffffffffffac0\n  4810: ecalli 1 // 'call_data_load'\n  4812: fallthrough\n      : @169 (gas: 12)\n  4813: a0 = s1 + 0x3858\n  4817: ra = u64 [a0 + 0x280]\n  4821: t2 = u64 [a0 + 0x278]\n  4825: a2 = ra >u 0\n  4827: a3 = t2 >> 0x20\n  4830: a3 = a3 >u 0\n  4832: a3 = a2 if ra != 0\n  4835: a2 = u64 [s1 + 0x60]\n  4838: a2 = t2 ^ a2\n  4841: a2 = a2 | ra\n  4844: a3 = 0 if a2 == 0\n  4846: jump @171 if a3 == 0\n      : @170 (gas: 1)\n  4849: jump @1087\n      : @171 (gas: 10)\n  4852: a5 = u64 [s1 + 0xd0]\n  4856: a2 = u64 [s1 + 0xb8]\n  4860: t1 = a2 | a5\n  4863: a3 = u64 [s1 + 0x58]\n  4866: a4 = u64 [s1 + 0xc8]\n  4870: a3 = a4 <u a3\n  4873: a1 = u64 [s1 + 0xc0]\n  4877: a3 = 0 if a1 != 0\n  4879: a3 = 0 if t1 != 0\n  4881: jump @173 if a3 != 0\n      : @172 (gas: 1)\n  4884: jump @1003\n      : @173 (gas: 23)\n  4887: a3 = a4 + 0x20\n  4890: t0 = a0\n  4892: a4 = a3 <u a4\n  4895: a0 = a3\n  4897: u64 [s1 + 0x88] = a3\n  4901: a3 = a1 + a4\n  4904: u64 [s1 + 0x98] = a3\n  4908: a3 = a3 <u a1\n  4911: a3 = a4 if a4 == 0\n  4914: t1 = u64 [t0 + 0x270]\n  4918: a4 = u64 [t0 + 0x268]\n  4922: a3 = a3 + a2\n  4925: u64 [s1 + 0x90] = a3\n  4929: a3 = a3 <u a2\n  4932: a5 = a5 + a3\n  4935: u64 [s1 + 0xd0] = a5\n  4939: a3 = s1 + 0x1858\n  4943: u64 [a3 + 0x368] = a4\n  4947: u64 [a3 + 0x370] = t1\n  4951: u64 [a3 + 0x378] = t2\n  4955: a1 = s1 + 0x1bc0\n  4959: u64 [a3 + 0x380] = ra\n  4963: ra = 120, jump @25\n      : @174 [@dyn 60] (gas: 20)\n  4968: a1 = u64 [s1 + 0xb0]\n  4972: a0 = a1 + 0x20\n  4975: a1 = a0 <u a1\n  4978: a3 = u64 [s1 + 0xa8]\n  4982: t1 = a3 + a1\n  4985: a3 = t1 <u a3\n  4988: a3 = a1 if a1 == 0\n  4991: a1 = u64 [s1 + 0xd8]\n  4995: a3 = a3 + a1\n  4998: a1 = a3 <u a1\n  5001: t0 = u64 [s1 + 0xa0]\n  5005: t0 = t0 + a1\n  5008: a1 = u64 [s1 + 0x88]\n  5012: u64 [s1 + 0xc8] = a1\n  5016: a1 = u64 [s1 + 0x98]\n  5020: u64 [s1 + 0xc0] = a1\n  5024: ra = u64 [s1 + 0x90]\n  5028: t2 = a0\n  5030: a4 = a3\n  5032: jump @164\n      : @175 (gas: 12)\n  5035: a0 = s1 + 0x3858\n  5039: u64 [a0 + 1056] = 0\n  5043: u64 [a0 + 1048] = 0\n  5047: u64 [a0 + 1040] = 0\n  5051: u64 [a0 + 1032] = 0\n  5055: a0 = s1 + 0x4000\n  5059: i32 a0 = a0 + 0xfffffffffffffc60\n  5063: ra = 0x7a\n  5066: ecalli 10 // 'value_transferred'\n  5068: a0 = 0x4000\n  5072: t0 = 0x7c\n  5075: jump @1576\n      : @176 [@dyn 61] (gas: 2)\n  5079: a0 = 0x4000\n  5083: t0 = 124, jump @1576\n      : @177 [@dyn 62] (gas: 1)\n  5089: t0 = 126, jump @1557\n      : @178 [@dyn 63] (gas: 1)\n  5095: jump @180 if a0 == 0\n      : @179 (gas: 1)\n  5098: jump @1094\n      : @180 (gas: 3)\n  5101: a0 = u64 [s1 + 0x18]\n  5104: a0 = i32 [a0]\n  5106: jump @182 if a0 >u 3\n      : @181 (gas: 1)\n  5110: jump @1095\n      : @182 (gas: 3)\n  5113: a0 = s1 + 0x2820\n  5117: a1 = 0x40\n  5120: ra = 128, jump @23\n      : @183 [@dyn 64] (gas: 18)\n  5126: a1 = s1 + 0x2058\n  5130: a2 = a1 + 0x700\n  5134: a0 = u64 [a2 + 0xe0]\n  5138: u64 [s1 + 0x38] = a0\n  5141: a0 = u64 [a2 + 0xd8]\n  5145: u64 [s1 + 0x40] = a0\n  5148: a0 = u64 [a2 + 0xd0]\n  5152: u64 [s1 + 0x48] = a0\n  5155: a0 = u64 [a2 + 0xc8]\n  5159: u64 [s1 + 0x50] = a0\n  5162: a1 = s1 + 0x3858\n  5166: u64 [a1 + 1088] = 0\n  5170: u64 [a1 + 1080] = 0\n  5174: u64 [a1 + 1072] = 0\n  5178: u64 [a1 + 1064] = 0x1\n  5183: a0 = s1 + 0x2800\n  5187: a1 = s1 + 0x3c80\n  5191: ra = 130, jump @27\n      : @184 [@dyn 65] (gas: 35)\n  5197: a0 = s1 + 0x2058\n  5201: t2 = u64 [a0 + 0x7b8]\n  5205: ra = u64 [a0 + 0x7b0]\n  5209: t1 = u64 [a0 + 0x7c0]\n  5213: a4 = u64 [a0 + 0x7a8]\n  5217: a0 = t2 << 0x3f\n  5220: a1 = ra >> 0x1\n  5223: a0 = a0 | a1\n  5226: a1 = t1 << 0x3f\n  5229: a2 = t2 >> 0x1\n  5232: a1 = a1 | a2\n  5235: a2 = ra << 0x3f\n  5238: a3 = a4 >> 0x1\n  5241: a5 = a3 | a2\n  5244: a2 = t1 >> 0x1\n  5247: u64 [s1 + 0xc8] = a4\n  5251: a4 = a4 & 0x1\n  5254: a3 = -a4\n  5256: a1 = a1 & a3\n  5259: t0 = a3 & a0\n  5262: a2 = a2 & a3\n  5265: a0 = a5 & 0x7f\n  5268: u64 [s1 + 0xd0] = a0\n  5272: a5 = a0 if a4 == 0\n  5275: u64 [s1 + 0x98] = a5\n  5279: a0 = a5 <u 0x20\n  5282: u64 [s1 + 0x88] = t0\n  5286: a0 = 0 if t0 != 0\n  5288: u64 [s1 + 0x90] = a1\n  5292: u64 [s1 + 0x80] = a2\n  5296: a1 = a1 | a2\n  5299: a0 = 0 if a1 != 0\n  5301: u64 [s1 + 0xd8] = a4\n  5305: a1 = a4 <u 0x1\n  5308: jump @186 if a1 == a0\n      : @185 (gas: 1)\n  5311: jump @1096\n      : @186 (gas: 12)\n  5314: a2 = u64 [s1 + 0x40]\n  5317: a3 = u64 [s1 + 0x50]\n  5320: a0 = a3 | a2\n  5323: a1 = u64 [s1 + 0x48]\n  5326: a4 = u64 [s1 + 0x38]\n  5329: a1 = a1 | a4\n  5332: a0 = a0 | a1\n  5335: a0 = a0 >> 0x20\n  5338: a1 = a1 | a2\n  5341: a1 = a1 << 0x20\n  5344: a1 = a1 | a0\n  5347: jump @188 if a1 == 0\n      : @187 (gas: 1)\n  5350: jump @1003\n      : @188 (gas: 16)\n  5353: a0 = a3\n  5355: u64 [s1 + 0xb0] = ra\n  5359: u64 [s1 + 0xb8] = t2\n  5363: u64 [s1 + 0xc0] = t1\n  5367: a1 = u64 [s1 + 0x98]\n  5371: a3 = s1 + 0x2058\n  5375: a4 = a3 + 0x700\n  5379: u64 [a4 + 0x88] = a1\n  5383: a1 = u64 [s1 + 0x88]\n  5387: u64 [a4 + 0x90] = a1\n  5391: a1 = u64 [s1 + 0x90]\n  5395: u64 [a4 + 0x98] = a1\n  5399: a1 = s1 + 0x27e0\n  5403: a2 = u64 [s1 + 0x80]\n  5407: u64 [a4 + 0xa0] = a2\n  5411: ra = 132, jump @25\n      : @189 [@dyn 66] (gas: 2)\n  5417: a0 = u64 [s1 + 0xd8]\n  5421: jump @191 if a0 == 0\n      : @190 (gas: 1)\n  5424: jump @945\n      : @191 (gas: 1)\n  5427: t0 = 134, jump @1554\n      : @192 [@dyn 67] (gas: 1)\n  5434: jump @194 if a1 != 0\n      : @193 (gas: 1)\n  5437: jump @1003\n      : @194 (gas: 14)\n  5440: a0 = u64 [s1 + 0xc8]\n  5444: a1 = a0 & 0xffffffffffffff00\n  5448: i32 a0 = a3 + 0x20\n  5451: a2 = s1 + 0x2058\n  5455: a3 = u64 [s1 + 0xb0]\n  5459: a4 = a2 + 0x700\n  5463: u64 [a4 + 0x10] = a3\n  5466: u64 [a4 + 0x8] = a1\n  5469: a1 = u64 [s1 + 0xb8]\n  5473: u64 [a4 + 0x18] = a1\n  5476: a1 = s1 + 0x2760\n  5480: a3 = u64 [s1 + 0xc0]\n  5484: u64 [a4 + 0x20] = a3\n  5487: ra = 136, jump @25\n      : @195 [@dyn 68] (gas: 9)\n  5493: a5 = u64 [s1 + 0x50]\n  5496: t2 = 0\n  5498: t1 = 0\n  5500: t0 = 0\n  5502: a0 = u64 [s1 + 0xd0]\n  5506: a0 = a0 >u 0\n  5508: a0 = a0 << 0x5\n  5511: u64 [s1 + 0xd8] = a0\n  5515: jump @988\n      : @196 (gas: 11)\n  5518: u64 [a2 + 1184] = 0\n  5522: u64 [a2 + 1176] = 0\n  5526: u64 [a2 + 1168] = 0\n  5530: u64 [a2 + 1160] = 0\n  5534: a0 = s1 + 0x4000\n  5538: i32 a0 = a0 + 0xfffffffffffffce0\n  5542: ra = 0x8a\n  5546: ecalli 10 // 'value_transferred'\n  5548: a0 = 0x4000\n  5552: t0 = 0x8c\n  5556: jump @1576\n      : @197 [@dyn 69] (gas: 2)\n  5560: a0 = 0x4000\n  5564: t0 = 140, jump @1576\n      : @198 [@dyn 70] (gas: 1)\n  5571: t0 = 142, jump @1571\n      : @199 [@dyn 71] (gas: 1)\n  5578: jump @201 if a0 == 0\n      : @200 (gas: 1)\n  5581: jump @1102\n      : @201 (gas: 4)\n  5584: a0 = u64 [s1 + 0x18]\n  5587: a0 = i32 [a0]\n  5589: a1 = 0x43\n  5592: jump @203 if a1 <u a0\n      : @202 (gas: 1)\n  5595: jump @1103\n      : @203 (gas: 4)\n  5598: a0 = s1 + 0x2f00\n  5602: ra = 0x90\n  5606: t0 = 0x504\n  5610: jump @1574\n      : @204 [@dyn 72] (gas: 31)\n  5614: a1 = s1 + 0x2858\n  5618: a2 = a1 + 0x600\n  5622: a0 = u64 [a2 + 0xb8]\n  5626: u64 [s1 + 0x90] = a0\n  5630: a0 = u64 [a2 + 0xb0]\n  5634: u64 [s1 + 0xb0] = a0\n  5638: a0 = u64 [a2 + 0xa8]\n  5642: u64 [s1 + 0xb8] = a0\n  5646: a0 = s1 + 0x4000\n  5650: i32 a0 = a0 + 0xfffffffffffffd00\n  5654: a1 = 0x24\n  5657: ecalli 1 // 'call_data_load'\n  5659: a0 = s1 + 0x3858\n  5663: a2 = a0 + 0x400\n  5667: a1 = u64 [a2 + 0xc0]\n  5671: u64 [s1 + 0xd8] = a1\n  5675: a1 = u64 [a2 + 0xb8]\n  5679: u64 [s1 + 0xd0] = a1\n  5683: a1 = u64 [a2 + 0xb0]\n  5687: u64 [s1 + 0xc8] = a1\n  5691: a0 = u64 [a2 + 0xa8]\n  5695: u64 [s1 + 0xc0] = a0\n  5699: a0 = 0x301b0\n  5704: u64 [s1 + 0xa8] = a0\n  5708: i32 a0 = a0 + 0\n  5710: u64 [s1 + 0x88] = a0\n  5714: ra = 0x92\n  5718: ecalli 3 // 'caller'\n  5720: a2 = u64 [s1 + 0xa8]\n  5724: t0 = 0x94\n  5728: jump @1520\n      : @205 [@dyn 73] (gas: 2)\n  5732: a2 = u64 [s1 + 0xa8]\n  5736: t0 = 148, jump @1520\n      : @206 [@dyn 74] (gas: 8)\n  5743: u64 [a2 + 1696] = 0\n  5747: a4 = a2 + 0x600\n  5751: u64 [a4 + 0x98] = a1\n  5755: u64 [a4 + 0x90] = a0\n  5759: a1 = s1 + 0x2ee0\n  5763: u64 [a4 + 0x88] = a3\n  5767: a0 = 0\n  5769: ra = 150, jump @25\n      : @207 [@dyn 75] (gas: 9)\n  5775: a0 = s1 + 0x2858\n  5779: u64 [a0 + 1664] = 0\n  5783: u64 [a0 + 1656] = 0\n  5787: u64 [a0 + 1648] = 0\n  5791: a3 = a0\n  5793: a0 = 0x20\n  5796: a1 = s1 + 0x2ec0\n  5800: u64 [a3 + 1640] = 0x4\n  5805: ra = 152, jump @25\n      : @208 [@dyn 76] (gas: 3)\n  5811: a1 = 0x2019c\n  5816: a0 = i32 [0x2019c]\n  5821: jump @210 if a0 >u 63\n      : @209 (gas: 2)\n  5825: u32 [0x2019c] = 0x40\n  5831: fallthrough\n      : @210 (gas: 15)\n  5832: a0 = sp + 0xffffffffffffffe0\n  5835: a2 = a0 & 0xffffffffffffffe0\n  5838: u64 [s1 + 0x80] = a2\n  5842: sp = a2\n  5844: a0 = 0x201b0\n  5849: i32 a0 = a0 + 0\n  5851: i32 a2 = a2 + 0\n  5853: u64 [s1 + 0xa0] = a1\n  5857: a1 = 0x40\n  5860: u64 [s1 + 0x98] = a0\n  5864: ra = 0x9a\n  5868: ecalli 6 // 'hash_keccak_256'\n  5870: a3 = u64 [s1 + 0x80]\n  5874: t0 = 0x9c\n  5878: jump @1538\n      : @211 [@dyn 77] (gas: 2)\n  5882: a3 = u64 [s1 + 0x80]\n  5886: t0 = 156, jump @1538\n      : @212 [@dyn 78] (gas: 8)\n  5893: a5 = a4 + 0x400\n  5897: u64 [a5 + 0xe0] = a3\n  5901: u64 [a5 + 0xd8] = a2\n  5905: u64 [a5 + 0xd0] = a1\n  5909: u64 [a5 + 0xc8] = a0\n  5913: a0 = s1 + 0x2ea0\n  5917: a1 = s1 + 0x3d20\n  5921: ra = 158, jump @27\n      : @213 [@dyn 79] (gas: 31)\n  5927: a4 = s1 + 0x2858\n  5931: a5 = a4 + 0x600\n  5935: a0 = u64 [a5 + 0x50]\n  5938: a1 = u64 [a5 + 0x48]\n  5941: a2 = u64 [a5 + 0x58]\n  5944: a3 = u64 [a5 + 0x60]\n  5947: t0 = a4\n  5949: a5 = u64 [s1 + 0xc8]\n  5953: a4 = a0 ^ a5\n  5956: a0 = a0 <u a5\n  5959: a5 = u64 [s1 + 0xc0]\n  5963: a1 = a1 <u a5\n  5966: a1 = a0 if a4 != 0\n  5969: a4 = u64 [s1 + 0xd8]\n  5973: a0 = a3 ^ a4\n  5976: a3 = a3 <u a4\n  5979: a5 = u64 [s1 + 0xd0]\n  5983: a4 = a2 <u a5\n  5986: a4 = a3 if a0 != 0\n  5989: a2 = a2 ^ a5\n  5992: a0 = a0 | a2\n  5995: a1 = a4 if a0 != 0\n  5998: a0 = a1 ^ 0x1\n  6001: u64 [t0 + 1600] = 0\n  6005: u64 [t0 + 1592] = 0\n  6009: u64 [t0 + 0x628] = a0\n  6013: a0 = s1 + 0x2e80\n  6017: u64 [t0 + 1584] = 0\n  6021: ra = 0xa0\n  6025: t0 = 0x564\n  6029: jump @1542\n      : @214 [@dyn 80] (gas: 18)\n  6033: a0 = u64 [s1 + 0x90]\n  6037: a0 = a0 << 0x20\n  6040: a2 = a0 >> 0x20\n  6043: a0 = u64 [s1 + 0xb8]\n  6047: a1 = u64 [s1 + 0xb0]\n  6051: a0 = a0 | a1\n  6054: u64 [s1 + 0x80] = a2\n  6058: a0 = a0 | a2\n  6061: a0 = a0 >u 0\n  6063: a1 = s1 + 0x2858\n  6067: u64 [a1 + 1568] = 0\n  6071: u64 [a1 + 1560] = 0\n  6075: u64 [a1 + 0x608] = a0\n  6079: a0 = s1 + 0x2e60\n  6083: u64 [a1 + 1552] = 0\n  6087: ra = 0xa2\n  6091: t0 = 0x582\n  6095: jump @1542\n      : @215 [@dyn 81] (gas: 6)\n  6099: a0 = u64 [s1 + 0x88]\n  6103: ra = 0xa4\n  6107: ecalli 3 // 'caller'\n  6109: a2 = u64 [s1 + 0xa8]\n  6113: t0 = 0xa6\n  6117: jump @1520\n      : @216 [@dyn 82] (gas: 2)\n  6121: a2 = u64 [s1 + 0xa8]\n  6125: t0 = 166, jump @1520\n      : @217 [@dyn 83] (gas: 8)\n  6132: u64 [a2 + 1536] = 0\n  6136: a4 = a2 + 0x500\n  6140: u64 [a4 + 0xf8] = a1\n  6144: u64 [a4 + 0xf0] = a0\n  6148: a1 = s1 + 0x2e40\n  6152: u64 [a4 + 0xe8] = a3\n  6156: a0 = 0\n  6158: ra = 168, jump @25\n      : @218 [@dyn 84] (gas: 3)\n  6164: t0 = 0xaa\n  6168: a1 = s1 + 0x2858\n  6172: fallthrough\n      : @219 [@dyn 85] (gas: 8)\n  6173: u64 [a1 + 1504] = 0\n  6177: u64 [a1 + 1496] = 0\n  6181: u64 [a1 + 1480] = 0x4\n  6186: a2 = a1\n  6188: a0 = 0x20\n  6191: a1 = s1 + 0x2e20\n  6195: u64 [a2 + 1488] = 0\n  6199: ra = 172, jump @25\n      : @220 [@dyn 86] (gas: 7)\n  6205: a1 = u64 [s1 + 0xa0]\n  6209: a0 = sp + 0xffffffffffffffe0\n  6212: a0 = a0 & 0xffffffffffffffe0\n  6215: u64 [s1 + 0x90] = a0\n  6219: sp = a0\n  6221: a0 = i32 [a1]\n  6223: jump @222 if a0 >u 63\n      : @221 (gas: 2)\n  6227: u32 [a1 + 0] = 0x40\n  6230: fallthrough\n      : @222 (gas: 12)\n  6231: a0 = sp + 0xffffffffffffffe0\n  6234: a0 = a0 & 0xffffffffffffffe0\n  6237: u64 [s1 + 0x78] = a0\n  6240: sp = a0\n  6242: i32 a2 = a0 + 0\n  6244: a1 = 0x40\n  6247: a0 = u64 [s1 + 0x98]\n  6251: ra = 0xae\n  6255: ecalli 6 // 'hash_keccak_256'\n  6257: a3 = u64 [s1 + 0x78]\n  6260: t0 = 0xb0\n  6264: jump @1552\n      : @223 [@dyn 87] (gas: 2)\n  6268: a3 = u64 [s1 + 0x78]\n  6271: t0 = 176, jump @1552\n      : @224 [@dyn 88] (gas: 3)\n  6278: i32 a0 = a0 + 0xfffffffffffffe00\n  6282: a0 = a0 + s1\n  6285: ra = 178, jump @27\n      : @225 [@dyn 89] (gas: 22)\n  6291: a5 = s1 + 0x2858\n  6295: a3 = u64 [a5 + 0x5a8]\n  6299: a0 = u64 [a5 + 0x5b0]\n  6303: a1 = u64 [a5 + 0x5b8]\n  6307: a2 = u64 [a5 + 0x5c0]\n  6311: a4 = u64 [s1 + 0xd8]\n  6315: u64 [a5 + 0x560] = a4\n  6319: a4 = u64 [s1 + 0xd0]\n  6323: u64 [a5 + 0x558] = a4\n  6327: a4 = u64 [s1 + 0xc8]\n  6331: u64 [a5 + 0x550] = a4\n  6335: a4 = u64 [s1 + 0xc0]\n  6339: u64 [a5 + 0x548] = a4\n  6343: a4 = a5 + 0x500\n  6347: u64 [a4 + 0x80] = a2\n  6351: u64 [a4 + 0x78] = a1\n  6354: u64 [a4 + 0x70] = a0\n  6357: a0 = s1 + 0x2de0\n  6361: a1 = s1 + 0x2dc0\n  6365: a2 = s1 + 0x2da0\n  6369: u64 [a4 + 0x68] = a3\n  6372: ra = 180, jump @1336\n      : @226 [@dyn 90] (gas: 15)\n  6378: a3 = s1 + 0x2858\n  6382: a4 = a3 + 0x500\n  6386: a0 = u64 [a4 + 0xa0]\n  6390: a1 = u64 [a4 + 0x98]\n  6394: a2 = u64 [a4 + 0x90]\n  6398: a3 = u64 [a4 + 0x88]\n  6402: a4 = s1 + 0x3858\n  6406: u64 [a4 + 0x500] = a0\n  6410: a0 = a4 + 0x400\n  6414: u64 [a0 + 0xf8] = a1\n  6418: u64 [a0 + 0xf0] = a2\n  6422: u64 [a0 + 0xe8] = a3\n  6426: a1 = s1 + 0x3d40\n  6430: a0 = u64 [s1 + 0x90]\n  6434: ra = 182, jump @31\n      : @227 [@dyn 91] (gas: 12)\n  6440: a2 = s1 + 0x2858\n  6444: u64 [a2 + 1344] = 0\n  6448: a0 = u64 [s1 + 0x80]\n  6452: a3 = a2 + 0x500\n  6456: u64 [a3 + 0x38] = a0\n  6459: a0 = u64 [s1 + 0xb0]\n  6463: u64 [a3 + 0x30] = a0\n  6466: a1 = s1 + 0x2d80\n  6470: a0 = u64 [s1 + 0xb8]\n  6474: u64 [a3 + 0x28] = a0\n  6477: a0 = 0\n  6479: ra = 184, jump @25\n      : @228 [@dyn 92] (gas: 3)\n  6485: t0 = 0xba\n  6489: a1 = s1 + 0x2858\n  6493: fallthrough\n      : @229 [@dyn 93] (gas: 8)\n  6494: u64 [a1 + 1312] = 0\n  6498: u64 [a1 + 1304] = 0\n  6502: u64 [a1 + 1288] = 0x4\n  6507: a2 = a1\n  6509: a0 = 0x20\n  6512: a1 = s1 + 0x2d60\n  6516: u64 [a2 + 1296] = 0\n  6520: ra = 188, jump @25\n      : @230 [@dyn 94] (gas: 7)\n  6526: a1 = u64 [s1 + 0xa0]\n  6530: a0 = sp + 0xffffffffffffffe0\n  6533: a0 = a0 & 0xffffffffffffffe0\n  6536: u64 [s1 + 0x90] = a0\n  6540: sp = a0\n  6542: a0 = i32 [a1]\n  6544: jump @232 if a0 >=u 64\n      : @231 (gas: 2)\n  6548: u32 [a1 + 0] = 0x40\n  6551: fallthrough\n      : @232 (gas: 12)\n  6552: a0 = sp + 0xffffffffffffffe0\n  6555: a0 = a0 & 0xffffffffffffffe0\n  6558: u64 [s1 + 0xa0] = a0\n  6562: sp = a0\n  6564: i32 a2 = a0 + 0\n  6566: a1 = 0x40\n  6569: a0 = u64 [s1 + 0x98]\n  6573: ra = 0xbe\n  6577: ecalli 6 // 'hash_keccak_256'\n  6579: a3 = u64 [s1 + 0xa0]\n  6583: t0 = 0xc0\n  6587: jump @1552\n      : @233 [@dyn 95] (gas: 2)\n  6591: a3 = u64 [s1 + 0xa0]\n  6595: t0 = 192, jump @1552\n      : @234 [@dyn 96] (gas: 3)\n  6602: i32 a0 = a0 + 0xfffffffffffffd40\n  6606: a0 = a0 + s1\n  6609: ra = 194, jump @27\n      : @235 [@dyn 97] (gas: 22)\n  6615: a5 = s1 + 0x2858\n  6619: a3 = u64 [a5 + 0x4e8]\n  6623: a0 = u64 [a5 + 0x4f0]\n  6627: a1 = u64 [a5 + 0x4f8]\n  6631: a2 = u64 [a5 + 0x500]\n  6635: a4 = u64 [s1 + 0xd8]\n  6639: u64 [a5 + 0x4a0] = a4\n  6643: a4 = u64 [s1 + 0xd0]\n  6647: u64 [a5 + 0x498] = a4\n  6651: a4 = u64 [s1 + 0xc8]\n  6655: u64 [a5 + 0x490] = a4\n  6659: a4 = u64 [s1 + 0xc0]\n  6663: u64 [a5 + 0x488] = a4\n  6667: a4 = a5 + 0x400\n  6671: u64 [a4 + 0xc0] = a2\n  6675: u64 [a4 + 0xb8] = a1\n  6679: u64 [a4 + 0xb0] = a0\n  6683: a0 = s1 + 0x2d20\n  6687: a1 = s1 + 0x2d00\n  6691: a2 = s1 + 0x2ce0\n  6695: u64 [a4 + 0xa8] = a3\n  6699: ra = 196, jump @1344\n      : @236 [@dyn 98] (gas: 2)\n  6705: a0 = 0x3000\n  6709: t0 = 198, jump @1576\n      : @237 [@dyn 99] (gas: 13)\n  6716: a0 = u64 [a4 + 0xe0]\n  6720: a1 = u64 [a4 + 0xd8]\n  6724: a2 = u64 [a4 + 0xd0]\n  6728: a3 = u64 [a4 + 0xc8]\n  6732: a4 = s1 + 0x3858\n  6736: a5 = a4 + 0x500\n  6740: u64 [a5 + 0x20] = a0\n  6743: u64 [a5 + 0x18] = a1\n  6746: u64 [a5 + 0x10] = a2\n  6749: u64 [a5 + 0x8] = a3\n  6752: a1 = s1 + 0x3d60\n  6756: a0 = u64 [s1 + 0x90]\n  6760: ra = 200, jump @31\n      : @238 [@dyn 100] (gas: 3)\n  6766: a0 = s1 + 0x2cc0\n  6770: a1 = 0x40\n  6773: ra = 202, jump @23\n      : @239 [@dyn 101] (gas: 7)\n  6779: a3 = s1 + 0x2858\n  6783: a5 = a3 + 0x400\n  6787: a4 = u64 [a5 + 0x80]\n  6791: a1 = u64 [a5 + 0x78]\n  6794: a2 = u64 [a5 + 0x70]\n  6797: a0 = u64 [a5 + 0x68]\n  6800: t0 = 204, jump @1528\n      : @240 [@dyn 102] (gas: 1)\n  6807: jump @242 if a1 == 0\n      : @241 (gas: 1)\n  6810: jump @1003\n      : @242 (gas: 12)\n  6813: a1 = u64 [s1 + 0xc0]\n  6817: a4 = a3 + 0x400\n  6821: u64 [a4 + 0x48] = a1\n  6824: a1 = u64 [s1 + 0xc8]\n  6828: u64 [a4 + 0x50] = a1\n  6831: a1 = u64 [s1 + 0xd0]\n  6835: u64 [a4 + 0x58] = a1\n  6838: a1 = s1 + 0x2ca0\n  6842: a2 = u64 [s1 + 0xd8]\n  6846: u64 [a4 + 0x60] = a2\n  6849: u64 [s1 + 0xd8] = a0\n  6853: ra = 206, jump @25\n      : @243 [@dyn 103] (gas: 6)\n  6859: a0 = u64 [s1 + 0x88]\n  6863: ra = 0xd0\n  6867: ecalli 3 // 'caller'\n  6869: a2 = u64 [s1 + 0xa8]\n  6873: t0 = 0xd2\n  6877: jump @1522\n      : @244 [@dyn 104] (gas: 2)\n  6881: a2 = u64 [s1 + 0xa8]\n  6885: t0 = 210, jump @1522\n      : @245 [@dyn 105] (gas: 43)\n  6892: t0 = a1 | a0\n  6895: a3 = a3 >> 0x20\n  6898: a2 = reverse a2\n  6900: a1 = a2 << 0x20\n  6903: a1 = a1 | a3\n  6906: a2 = a2 >> 0x20\n  6909: a3 = s1 + 0x2858\n  6913: a0 = u64 [s1 + 0x80]\n  6917: u64 [a3 + 0x3f8] = a0\n  6921: a3 = u64 [0x20030]\n  6926: a4 = s1 + 0x2858\n  6930: u64 [a4 + 1024] = 0\n  6934: a4 = s1 + 0x2858\n  6938: a0 = u64 [s1 + 0xb0]\n  6942: u64 [a4 + 0x3f0] = a0\n  6946: a4 = s1 + 0x2858\n  6950: a0 = u64 [s1 + 0xb8]\n  6954: u64 [a4 + 0x3e8] = a0\n  6958: a0 = s1 + 0x2858\n  6962: u64 [a0 + 0x440] = a3\n  6966: a3 = u64 [0x20038]\n  6971: a4 = u64 [0x20040]\n  6976: a5 = u64 [0x20048]\n  6981: a0 = s1 + 0x2858\n  6985: u64 [a0 + 1056] = 0\n  6989: a0 = s1 + 0x2858\n  6993: u64 [a0 + 0x438] = a3\n  6997: a0 = s1 + 0x2858\n  7001: u64 [a0 + 0x430] = a4\n  7005: a0 = s1 + 0x2858\n  7009: u64 [a0 + 0x428] = a5\n  7013: a0 = s1 + 0x2858\n  7017: u64 [a0 + 0x418] = a2\n  7021: a0 = s1 + 0x2858\n  7025: u64 [a0 + 0x410] = a1\n  7029: a1 = 0x20\n  7032: a2 = s1 + 0x2c80\n  7036: a3 = s1 + 0x2c60\n  7040: a4 = s1 + 0x2c40\n  7044: a0 = s1 + 0x2858\n  7048: u64 [a0 + 0x408] = t0\n  7052: a0 = u64 [s1 + 0xd8]\n  7056: ra = 212, jump @34\n      : @246 [@dyn 106] (gas: 3)\n  7062: a0 = s1 + 0x2c20\n  7066: a1 = 0x40\n  7069: ra = 214, jump @23\n      : @247 [@dyn 107] (gas: 7)\n  7075: a3 = s1 + 0x2858\n  7079: a5 = a3 + 0x300\n  7083: a4 = u64 [a5 + 0xe0]\n  7087: a1 = u64 [a5 + 0xd8]\n  7091: a2 = u64 [a5 + 0xd0]\n  7095: a0 = u64 [a5 + 0xc8]\n  7099: t0 = 216, jump @1528\n      : @248 [@dyn 108] (gas: 1)\n  7106: jump @250 if a1 == 0\n      : @249 (gas: 1)\n  7109: jump @1003\n      : @250 (gas: 8)\n  7112: u64 [a3 + 960] = 0\n  7116: u64 [a3 + 952] = 0\n  7120: u64 [a3 + 936] = 0x1\n  7125: a1 = s1 + 0x2c00\n  7129: u64 [a3 + 944] = 0\n  7133: u64 [s1 + 0xd8] = a0\n  7137: ra = 0x410\n  7141: jump @25\n      : @251 (gas: 8)\n  7144: u64 [a3 + 1280] = 0\n  7148: u64 [a3 + 1272] = 0\n  7152: u64 [a3 + 1264] = 0\n  7156: u64 [a3 + 1256] = 0\n  7160: a0 = s1 + 0x3000\n  7164: i32 a0 = a0 + 0x540\n  7168: ecalli 10 // 'value_transferred'\n  7170: fallthrough\n      : @252 (gas: 10)\n  7171: a3 = s1 + 0x3058\n  7175: a4 = a3 + 0x400\n  7179: a0 = u64 [a4 + 0xf8]\n  7183: a1 = u64 [a3 + 0x500]\n  7187: a2 = u64 [a4 + 0xf0]\n  7191: a3 = u64 [a4 + 0xe8]\n  7195: a1 = a1 | a2\n  7198: a0 = a0 | a3\n  7201: a0 = a0 | a1\n  7204: jump @254 if a0 == 0\n      : @253 (gas: 1)\n  7207: jump @1104\n      : @254 (gas: 3)\n  7210: a0 = u64 [s1 + 0x18]\n  7213: a0 = i32 [a0]\n  7215: jump @256 if a0 >u 3\n      : @255 (gas: 1)\n  7219: jump @1105\n      : @256 (gas: 3)\n  7222: a0 = s1 + 0x2a0\n  7226: a1 = 0x40\n  7229: ra = 218, jump @23\n      : @257 [@dyn 109] (gas: 16)\n  7235: a0 = u64 [s1 + 0x2b8]\n  7239: u64 [s1 + 0x38] = a0\n  7242: a0 = u64 [s1 + 0x2b0]\n  7246: u64 [s1 + 0x40] = a0\n  7249: a0 = u64 [s1 + 0x2a8]\n  7253: u64 [s1 + 0x48] = a0\n  7256: a0 = u64 [s1 + 0x2a0]\n  7260: u64 [s1 + 0x50] = a0\n  7263: a0 = s1 + 0x3058\n  7267: u64 [a0 + 1312] = 0\n  7271: u64 [a0 + 1304] = 0\n  7275: u64 [a0 + 1296] = 0\n  7279: u64 [a0 + 1288] = 0\n  7283: a0 = s1 + 0x280\n  7287: a1 = s1 + 0x3560\n  7291: ra = 220, jump @27\n      : @258 [@dyn 110] (gas: 34)\n  7297: a2 = u64 [s1 + 0x290]\n  7301: t2 = u64 [s1 + 0x288]\n  7305: t0 = u64 [s1 + 0x298]\n  7309: a5 = u64 [s1 + 0x280]\n  7313: a0 = a2 << 0x3f\n  7316: a1 = t2 >> 0x1\n  7319: a0 = a0 | a1\n  7322: a1 = t0 << 0x3f\n  7325: u64 [s1 + 0xd0] = a2\n  7329: a2 = a2 >> 0x1\n  7332: a1 = a1 | a2\n  7335: a2 = t2 << 0x3f\n  7338: a3 = a5 >> 0x1\n  7341: a4 = a3 | a2\n  7344: a2 = t0 >> 0x1\n  7347: u64 [s1 + 0xc8] = a5\n  7351: a5 = a5 & 0x1\n  7354: a3 = -a5\n  7356: a1 = a1 & a3\n  7359: t1 = a3 & a0\n  7362: a2 = a2 & a3\n  7365: ra = a4 & 0x7f\n  7368: a4 = ra if a5 == 0\n  7371: u64 [s1 + 0x98] = a4\n  7375: a0 = a4 <u 0x20\n  7378: u64 [s1 + 0x88] = t1\n  7382: a0 = 0 if t1 != 0\n  7384: u64 [s1 + 0x90] = a1\n  7388: u64 [s1 + 0x80] = a2\n  7392: a1 = a1 | a2\n  7395: a0 = 0 if a1 != 0\n  7397: u64 [s1 + 0xd8] = a5\n  7401: a1 = a5 <u 0x1\n  7404: jump @260 if a1 == a0\n      : @259 (gas: 1)\n  7407: jump @1106\n      : @260 (gas: 12)\n  7410: a2 = u64 [s1 + 0x40]\n  7413: a4 = u64 [s1 + 0x50]\n  7416: a0 = a4 | a2\n  7419: a1 = u64 [s1 + 0x38]\n  7422: a3 = u64 [s1 + 0x48]\n  7425: a1 = a1 | a3\n  7428: a0 = a0 | a1\n  7431: a0 = a0 >> 0x20\n  7434: a1 = a1 | a2\n  7437: a1 = a1 << 0x20\n  7440: a1 = a1 | a0\n  7443: jump @262 if a1 == 0\n      : @261 (gas: 1)\n  7446: jump @1003\n      : @262 (gas: 15)\n  7449: a0 = a4\n  7451: u64 [s1 + 0xb0] = ra\n  7455: u64 [s1 + 0xb8] = t2\n  7459: u64 [s1 + 0xc0] = t0\n  7463: a1 = u64 [s1 + 0x98]\n  7467: a3 = s1 + 0x200\n  7471: u64 [a3 + 0x60] = a1\n  7474: a1 = u64 [s1 + 0x88]\n  7478: u64 [a3 + 0x68] = a1\n  7481: a1 = u64 [s1 + 0x90]\n  7485: u64 [a3 + 0x70] = a1\n  7488: a1 = s1 + 0x260\n  7492: a2 = u64 [s1 + 0x80]\n  7496: u64 [a3 + 0x78] = a2\n  7499: ra = 222, jump @25\n      : @263 [@dyn 111] (gas: 2)\n  7505: a0 = u64 [s1 + 0xd8]\n  7509: jump @265 if a0 == 0\n      : @264 (gas: 1)\n  7512: jump @956\n      : @265 (gas: 1)\n  7515: t0 = 224, jump @1554\n      : @266 [@dyn 112] (gas: 1)\n  7522: jump @268 if a1 != 0\n      : @267 (gas: 1)\n  7525: jump @1003\n      : @268 (gas: 13)\n  7528: a0 = u64 [s1 + 0xc8]\n  7532: a1 = a0 & 0xffffffffffffff00\n  7536: i32 a0 = a3 + 0x20\n  7539: a3 = u64 [s1 + 0xb8]\n  7543: a2 = s1 + 0x100\n  7547: u64 [a2 + 0xe8] = a3\n  7551: u64 [a2 + 0xe0] = a1\n  7555: a1 = u64 [s1 + 0xd0]\n  7559: u64 [a2 + 0xf0] = a1\n  7563: a1 = s1 + 0x1e0\n  7567: a3 = u64 [s1 + 0xc0]\n  7571: u64 [a2 + 0xf8] = a3\n  7575: ra = 226, jump @25\n      : @269 [@dyn 113] (gas: 9)\n  7581: a5 = u64 [s1 + 0x50]\n  7584: t2 = 0\n  7586: t1 = 0\n  7588: t0 = 0\n  7590: a0 = u64 [s1 + 0xb0]\n  7594: a0 = a0 >u 0\n  7596: a0 = a0 << 0x5\n  7599: u64 [s1 + 0xd8] = a0\n  7603: jump @995\n      : @270 (gas: 8)\n  7606: u64 [a3 + 1920] = 0\n  7610: u64 [a3 + 1912] = 0\n  7614: u64 [a3 + 1904] = 0\n  7618: u64 [a3 + 1896] = 0\n  7622: a0 = s1 + 0x3000\n  7626: i32 a0 = a0 + 0x7c0\n  7630: ecalli 10 // 'value_transferred'\n  7632: fallthrough\n      : @271 (gas: 10)\n  7633: a3 = s1 + 0x3058\n  7637: a4 = a3 + 0x700\n  7641: a0 = u64 [a4 + 0x78]\n  7644: a1 = u64 [a4 + 0x80]\n  7648: a2 = u64 [a4 + 0x70]\n  7651: a3 = u64 [a4 + 0x68]\n  7654: a1 = a1 | a2\n  7657: a0 = a0 | a3\n  7660: a0 = a0 | a1\n  7663: jump @273 if a0 == 0\n      : @272 (gas: 1)\n  7666: jump @1112\n      : @273 (gas: 4)\n  7669: a0 = u64 [s1 + 0x18]\n  7672: a0 = i32 [a0]\n  7674: a1 = 0x43\n  7677: jump @275 if a1 <u a0\n      : @274 (gas: 1)\n  7680: jump @1113\n      : @275 (gas: 4)\n  7683: a0 = s1 + 0x14a0\n  7687: ra = 0xe4\n  7691: t0 = 0x504\n  7695: jump @1574\n      : @276 [@dyn 114] (gas: 28)\n  7699: a1 = s1 + 0x1058\n  7703: a0 = u64 [a1 + 0x450]\n  7707: u64 [s1 + 0xd0] = a0\n  7711: a0 = u64 [a1 + 0x448]\n  7715: u64 [s1 + 0xd8] = a0\n  7719: a0 = u32 [a1 + 0x458]\n  7723: u64 [s1 + 0xc8] = a0\n  7727: a0 = s1 + 0x3000\n  7731: i32 a0 = a0 + 0x7e0\n  7735: a1 = 0x24\n  7738: ecalli 1 // 'call_data_load'\n  7740: a1 = s1 + 0x3058\n  7744: a2 = a1 + 0x700\n  7748: a0 = u64 [a2 + 0xa0]\n  7752: u64 [s1 + 0xc0] = a0\n  7756: a0 = u64 [a2 + 0x98]\n  7760: u64 [s1 + 0xb8] = a0\n  7764: a0 = u64 [a2 + 0x90]\n  7768: u64 [s1 + 0xb0] = a0\n  7772: a0 = u64 [a2 + 0x88]\n  7776: u64 [s1 + 0xa8] = a0\n  7780: u64 [a1 + 1984] = 0\n  7784: u64 [a1 + 1976] = 0\n  7788: u64 [a1 + 1968] = 0\n  7792: u64 [a2 + 168] = 0x6\n  7797: a0 = s1 + 0x1480\n  7801: a1 = s1 + 0x3800\n  7805: ra = 230, jump @27\n      : @277 [@dyn 115] (gas: 15)\n  7811: a0 = s1 + 0x1058\n  7815: a1 = u64 [a0 + 0x430]\n  7819: u64 [s1 + 0xa0] = a1\n  7823: a1 = u64 [a0 + 0x428]\n  7827: u64 [s1 + 0x98] = a1\n  7831: a0 = u32 [a0 + 0x438]\n  7835: u64 [s1 + 0x90] = a0\n  7839: a0 = 0x301b0\n  7844: u64 [s1 + 0x88] = a0\n  7848: i32 a0 = a0 + 0\n  7850: ra = 0xe8\n  7854: ecalli 3 // 'caller'\n  7856: a2 = u64 [s1 + 0x88]\n  7860: t0 = 0xea\n  7864: jump @1530\n      : @278 [@dyn 116] (gas: 2)\n  7868: a2 = u64 [s1 + 0x88]\n  7872: t0 = 234, jump @1530\n      : @279 [@dyn 117] (gas: 16)\n  7879: a2 = u64 [s1 + 0x90]\n  7883: a1 = a1 ^ a2\n  7886: a2 = u64 [s1 + 0x98]\n  7890: a0 = a0 ^ a2\n  7893: a0 = a0 | a1\n  7896: a1 = u64 [s1 + 0xa0]\n  7900: a1 = a1 ^ a3\n  7903: a0 = a0 | a1\n  7906: a0 = a0 <u 0x1\n  7909: a1 = s1 + 0x1058\n  7913: u64 [a1 + 1056] = 0\n  7917: u64 [a1 + 1048] = 0\n  7921: u64 [a1 + 0x408] = a0\n  7925: a0 = s1 + 0x1460\n  7929: u64 [a1 + 1040] = 0\n  7933: ra = 236, jump @1352\n      : @280 [@dyn 118] (gas: 15)\n  7939: a0 = u64 [s1 + 0xd8]\n  7943: a1 = u64 [s1 + 0xc8]\n  7947: a0 = a0 | a1\n  7950: a1 = u64 [s1 + 0xd0]\n  7954: a0 = a0 | a1\n  7957: a0 = a0 >u 0\n  7959: a1 = s1 + 0x1058\n  7963: u64 [a1 + 1024] = 0\n  7967: u64 [a1 + 1016] = 0\n  7971: u64 [a1 + 0x3e8] = a0\n  7975: a0 = s1 + 0x1440\n  7979: u64 [a1 + 1008] = 0\n  7983: ra = 0xee\n  7987: t0 = 0x5c6\n  7991: jump @1542\n      : @281 [@dyn 119] (gas: 12)\n  7995: a2 = s1 + 0x1058\n  7999: u64 [a2 + 992] = 0\n  8003: a0 = u64 [s1 + 0xc8]\n  8007: a3 = a2 + 0x300\n  8011: u64 [a3 + 0xd8] = a0\n  8015: a0 = u64 [s1 + 0xd0]\n  8019: u64 [a3 + 0xd0] = a0\n  8023: a1 = s1 + 0x1420\n  8027: a0 = u64 [s1 + 0xd8]\n  8031: u64 [a3 + 0xc8] = a0\n  8035: a0 = 0\n  8037: ra = 240, jump @25\n      : @282 [@dyn 120] (gas: 3)\n  8043: t0 = 0xf2\n  8047: a1 = s1 + 0x1058\n  8051: fallthrough\n      : @283 [@dyn 121] (gas: 8)\n  8052: u64 [a1 + 960] = 0\n  8056: u64 [a1 + 952] = 0\n  8060: u64 [a1 + 936] = 0x4\n  8065: a2 = a1\n  8067: a0 = 0x20\n  8070: a1 = s1 + 0x1400\n  8074: u64 [a2 + 944] = 0\n  8078: ra = 244, jump @25\n      : @284 [@dyn 122] (gas: 6)\n  8084: a0 = sp + 0xffffffffffffffe0\n  8087: a0 = a0 & 0xffffffffffffffe0\n  8090: u64 [s1 + 0xa0] = a0\n  8094: sp = a0\n  8096: a1 = i32 [0x2019c]\n  8101: jump @286 if a1 >u 63\n      : @285 (gas: 2)\n  8105: u32 [0x2019c] = 0x40\n  8111: fallthrough\n      : @286 (gas: 14)\n  8112: a0 = sp + 0xffffffffffffffe0\n  8115: a2 = a0 & 0xffffffffffffffe0\n  8118: u64 [s1 + 0x98] = a2\n  8122: sp = a2\n  8124: a0 = 0x201b0\n  8129: i32 a0 = a0 + 0\n  8131: i32 a2 = a2 + 0\n  8133: a1 = 0x40\n  8136: u64 [s1 + 0x90] = a0\n  8140: ra = 0xf6\n  8144: ecalli 6 // 'hash_keccak_256'\n  8146: a3 = u64 [s1 + 0x98]\n  8150: t0 = 0xf8\n  8154: jump @1529\n      : @287 [@dyn 123] (gas: 2)\n  8158: a3 = u64 [s1 + 0x98]\n  8162: t0 = 248, jump @1529\n      : @288 [@dyn 124] (gas: 7)\n  8169: a1 = u64 [s1 + 0xa0]\n  8173: u64 [a1 + 0x18] = a3\n  8176: u64 [a1 + 0x10] = a2\n  8179: u64 [a1 + 0x8] = a4\n  8182: u64 [a1] = a0\n  8184: a0 = s1 + 0x13e0\n  8188: ra = 250, jump @27\n      : @289 [@dyn 125] (gas: 22)\n  8194: a4 = s1 + 0x1058\n  8198: a3 = u64 [a4 + 0x388]\n  8202: a0 = u64 [a4 + 0x390]\n  8206: a1 = u64 [a4 + 0x398]\n  8210: a2 = u64 [a4 + 0x3a0]\n  8214: a5 = u64 [s1 + 0xc0]\n  8218: u64 [a4 + 0x340] = a5\n  8222: a5 = u64 [s1 + 0xb8]\n  8226: u64 [a4 + 0x338] = a5\n  8230: a5 = u64 [s1 + 0xb0]\n  8234: u64 [a4 + 0x330] = a5\n  8238: a5 = u64 [s1 + 0xa8]\n  8242: u64 [a4 + 0x328] = a5\n  8246: a5 = a4 + 0x300\n  8250: u64 [a5 + 0x60] = a2\n  8253: u64 [a5 + 0x58] = a1\n  8256: u64 [a5 + 0x50] = a0\n  8259: a0 = s1 + 0x13c0\n  8263: a1 = s1 + 0x13a0\n  8267: a2 = s1 + 0x1380\n  8271: u64 [a5 + 0x48] = a3\n  8274: ra = 252, jump @1344\n      : @290 [@dyn 126] (gas: 15)\n  8280: a3 = s1 + 0x1058\n  8284: a4 = a3 + 0x300\n  8288: a0 = u64 [a4 + 0x80]\n  8292: a1 = u64 [a4 + 0x78]\n  8295: a2 = u64 [a4 + 0x70]\n  8298: a3 = u64 [a4 + 0x68]\n  8301: a4 = s1 + 0x3058\n  8305: a5 = a4 + 0x700\n  8309: u64 [a5 + 0xe0] = a0\n  8313: u64 [a5 + 0xd8] = a1\n  8317: u64 [a5 + 0xd0] = a2\n  8321: u64 [a5 + 0xc8] = a3\n  8325: a1 = s1 + 0x3820\n  8329: a0 = u64 [s1 + 0xa0]\n  8333: ra = 254, jump @31\n      : @291 [@dyn 127] (gas: 8)\n  8339: a1 = s1 + 0x3858\n  8343: u64 [a1 + 0] = 0\n  8345: u64 [a1 + 4294967288] = 0\n  8348: u64 [a1 + 4294967280] = 0\n  8351: u64 [a1 + 4294967272] = 0x3\n  8355: a0 = s1 + 0x1360\n  8359: a1 = s1 + 0x3840\n  8363: ra = 256, jump @27\n      : @292 [@dyn 128] (gas: 23)\n  8369: a4 = s1 + 0x1058\n  8373: a5 = a4 + 0x300\n  8377: a3 = u64 [a5 + 0x8]\n  8380: a0 = u64 [a5 + 0x10]\n  8383: a1 = u64 [a5 + 0x18]\n  8386: a2 = u64 [a5 + 0x20]\n  8389: a5 = u64 [s1 + 0xc0]\n  8393: u64 [a4 + 0x2c0] = a5\n  8397: a5 = u64 [s1 + 0xb8]\n  8401: u64 [a4 + 0x2b8] = a5\n  8405: a5 = u64 [s1 + 0xb0]\n  8409: u64 [a4 + 0x2b0] = a5\n  8413: a5 = u64 [s1 + 0xa8]\n  8417: u64 [a4 + 0x2a8] = a5\n  8421: a5 = a4 + 0x200\n  8425: u64 [a5 + 0xe0] = a2\n  8429: u64 [a5 + 0xd8] = a1\n  8433: u64 [a5 + 0xd0] = a0\n  8437: a0 = s1 + 0x1340\n  8441: a1 = s1 + 0x1320\n  8445: a2 = s1 + 0x1300\n  8449: u64 [a5 + 0xc8] = a3\n  8453: ra = 258, jump @1344\n      : @293 [@dyn 129] (gas: 18)\n  8459: a3 = s1 + 0x1058\n  8463: a4 = a3 + 0x200\n  8467: a0 = u64 [a4 + 0xe8]\n  8471: a1 = u64 [a4 + 0xf0]\n  8475: a2 = u64 [a4 + 0xf8]\n  8479: a3 = u64 [a3 + 0x300]\n  8483: a4 = s1 + 0x3858\n  8487: u64 [a4 + 32] = 0\n  8490: u64 [a4 + 24] = 0\n  8493: u64 [a4 + 16] = 0\n  8496: u64 [a4 + 8] = 0x3\n  8500: u64 [a4 + 0x40] = a3\n  8503: u64 [a4 + 0x38] = a2\n  8506: u64 [a4 + 0x30] = a1\n  8509: u64 [a4 + 0x28] = a0\n  8512: a0 = s1 + 0x3860\n  8516: a1 = s1 + 0x3880\n  8520: ra = 260, jump @31\n      : @294 [@dyn 130] (gas: 3)\n  8526: a0 = s1 + 0x12e0\n  8530: a1 = 0x40\n  8533: ra = 262, jump @23\n      : @295 [@dyn 131] (gas: 7)\n  8539: a3 = s1 + 0x1058\n  8543: a5 = a3 + 0x200\n  8547: a0 = u64 [a5 + 0xa0]\n  8551: a1 = u64 [a5 + 0x98]\n  8555: a2 = u64 [a5 + 0x90]\n  8559: a4 = u64 [a5 + 0x88]\n  8563: t0 = 264, jump @1526\n      : @296 [@dyn 132] (gas: 1)\n  8570: jump @298 if a0 == 0\n      : @297 (gas: 1)\n  8573: jump @1003\n      : @298 (gas: 13)\n  8576: a0 = u64 [s1 + 0xa8]\n  8580: a2 = a3 + 0x200\n  8584: u64 [a2 + 0x68] = a0\n  8587: a0 = u64 [s1 + 0xb0]\n  8591: u64 [a2 + 0x70] = a0\n  8594: a0 = u64 [s1 + 0xb8]\n  8598: u64 [a2 + 0x78] = a0\n  8601: a1 = s1 + 0x12c0\n  8605: a0 = u64 [s1 + 0xc0]\n  8609: u64 [a2 + 0x80] = a0\n  8613: a0 = a4\n  8615: u64 [s1 + 0xa0] = a4\n  8619: ra = 266, jump @25\n      : @299 [@dyn 133] (gas: 28)\n  8625: a0 = u64 [0x200a8]\n  8630: a1 = s1 + 0x1058\n  8634: u64 [a1 + 576] = 0\n  8638: a1 = s1 + 0x1058\n  8642: a2 = u64 [s1 + 0xc8]\n  8646: u64 [a1 + 0x238] = a2\n  8650: a1 = s1 + 0x1058\n  8654: u64 [a1 + 0x260] = a0\n  8658: a0 = u64 [0x200b0]\n  8663: a1 = u64 [0x200b8]\n  8668: a2 = u64 [0x200c0]\n  8673: a3 = s1 + 0x1058\n  8677: a4 = u64 [s1 + 0xd0]\n  8681: u64 [a3 + 0x230] = a4\n  8685: a3 = s1 + 0x1058\n  8689: u64 [a3 + 0x258] = a0\n  8693: a0 = s1 + 0x1058\n  8697: u64 [a0 + 0x250] = a1\n  8701: a0 = s1 + 0x1058\n  8705: u64 [a0 + 0x248] = a2\n  8709: a1 = 0x20\n  8712: a2 = s1 + 0x12a0\n  8716: a3 = s1 + 0x1280\n  8720: a0 = s1 + 0x1058\n  8724: a4 = u64 [s1 + 0xd8]\n  8728: u64 [a0 + 0x228] = a4\n  8732: a0 = u64 [s1 + 0xa0]\n  8736: ra = 268, jump @32\n      : @300 [@dyn 134] (gas: 3)\n  8742: a0 = s1 + 0x1260\n  8746: a1 = 0x40\n  8749: ra = 270, jump @23\n      : @301 [@dyn 135] (gas: 7)\n  8755: a3 = s1 + 0x1058\n  8759: a5 = a3 + 0x200\n  8763: a0 = u64 [a5 + 0x20]\n  8766: a1 = u64 [a5 + 0x18]\n  8769: a2 = u64 [a5 + 0x10]\n  8772: a4 = u64 [a5 + 0x8]\n  8775: t0 = 272, jump @1526\n      : @302 [@dyn 136] (gas: 1)\n  8782: jump @304 if a0 == 0\n      : @303 (gas: 1)\n  8785: jump @1003\n      : @304 (gas: 13)\n  8788: a0 = u64 [s1 + 0xa8]\n  8792: a1 = a3 + 0x100\n  8796: u64 [a1 + 0xe8] = a0\n  8800: a0 = u64 [s1 + 0xb0]\n  8804: u64 [a1 + 0xf0] = a0\n  8808: a0 = u64 [s1 + 0xb8]\n  8812: u64 [a1 + 0xf8] = a0\n  8816: a1 = s1 + 0x1240\n  8820: a0 = u64 [s1 + 0xc0]\n  8824: u64 [a3 + 0x200] = a0\n  8828: a0 = a4\n  8830: u64 [s1 + 0xc0] = a4\n  8834: ra = 274, jump @25\n      : @305 [@dyn 137] (gas: 27)\n  8840: a5 = s1 + 0x1058\n  8844: u64 [a5 + 416] = 0\n  8848: a0 = u64 [s1 + 0xc8]\n  8852: a4 = a5 + 0x100\n  8856: u64 [a4 + 0x98] = a0\n  8860: a0 = u64 [s1 + 0xd0]\n  8864: u64 [a4 + 0x90] = a0\n  8868: a0 = u64 [s1 + 0xd8]\n  8872: u64 [a4 + 0x88] = a0\n  8876: u64 [a5 + 448] = 0\n  8880: u64 [a5 + 440] = 0\n  8884: u64 [a5 + 432] = 0\n  8888: a0 = u64 [0x20030]\n  8893: a1 = u64 [0x20038]\n  8898: a2 = u64 [0x20040]\n  8903: a3 = u64 [0x20048]\n  8908: u64 [a4 + 0xe0] = a0\n  8912: u64 [a4 + 0xd8] = a1\n  8916: u64 [a4 + 0xd0] = a2\n  8920: u64 [a4 + 0xc8] = a3\n  8924: a1 = 0x20\n  8927: a2 = s1 + 0x1220\n  8931: a3 = s1 + 0x1200\n  8935: a4 = s1 + 0x11e0\n  8939: u64 [a5 + 424] = 0\n  8943: a0 = u64 [s1 + 0xc0]\n  8947: ra = 276, jump @34\n      : @306 [@dyn 138] (gas: 5)\n  8953: a0 = 0\n  8955: a1 = u64 [s1 + 0x90]\n  8959: a2 = 0\n  8961: ecalli 7 // 'seal_return'\n  8963: jump @1089\n      : @307 (gas: 9)\n  8966: u64 [a2 + 1440] = 0\n  8970: u64 [a2 + 1432] = 0\n  8974: u64 [a2 + 1424] = 0\n  8978: u64 [a2 + 1416] = 0\n  8982: a0 = s1 + 0x4000\n  8986: i32 a0 = a0 + 0xfffffffffffffde0\n  8990: ra = 0x116\n  8994: ecalli 10 // 'value_transferred'\n  8996: fallthrough\n      : @308 [@dyn 139] (gas: 3)\n  8997: a3 = s1 + 0x3858\n  9001: a4 = a3 + 0x500\n  9005: t0 = 280, jump @1571\n      : @309 [@dyn 140] (gas: 1)\n  9012: jump @311 if a0 == 0\n      : @310 (gas: 1)\n  9015: jump @1114\n      : @311 (gas: 4)\n  9018: a0 = u64 [s1 + 0x18]\n  9021: a0 = i32 [a0]\n  9023: a1 = 0x43\n  9026: jump @313 if a1 <u a0\n      : @312 (gas: 1)\n  9029: jump @1115\n      : @313 (gas: 6)\n  9032: a0 = 0xffffffff\n  9042: u64 [s1 + 0xd8] = a0\n  9046: a0 = s1 + 0x3460\n  9050: ra = 0x11a\n  9054: t0 = 0x504\n  9058: jump @1574\n      : @314 [@dyn 141] (gas: 11)\n  9062: a1 = s1 + 0x3058\n  9066: a0 = u64 [a1 + 0x408]\n  9070: u64 [s1 + 0xd0] = a0\n  9074: a0 = u64 [a1 + 0x410]\n  9078: u64 [s1 + 0xb0] = a0\n  9082: a0 = u32 [a1 + 0x418]\n  9086: u64 [s1 + 0xa8] = a0\n  9090: a0 = s1 + 0x3440\n  9094: ra = 0x11c\n  9098: t0 = 0x50e\n  9102: jump @1574\n      : @315 [@dyn 142] (gas: 19)\n  9106: a1 = s1 + 0x3058\n  9110: a2 = a1 + 0x300\n  9114: a0 = u64 [a2 + 0xf8]\n  9118: u64 [s1 + 0xc8] = a0\n  9122: a0 = u64 [a2 + 0xf0]\n  9126: u64 [s1 + 0xc0] = a0\n  9130: a0 = u64 [a2 + 0xe8]\n  9134: u64 [s1 + 0xb8] = a0\n  9138: u64 [a1 + 992] = 0\n  9142: a0 = u64 [s1 + 0xa8]\n  9146: u64 [a2 + 0xd8] = a0\n  9150: a0 = u64 [s1 + 0xb0]\n  9154: u64 [a2 + 0xd0] = a0\n  9158: a2 = a1\n  9160: a1 = s1 + 0x3420\n  9164: a0 = u64 [s1 + 0xd0]\n  9168: u64 [a2 + 0x3c8] = a0\n  9172: a0 = 0\n  9174: ra = 286, jump @25\n      : @316 [@dyn 143] (gas: 3)\n  9180: t0 = 0x120\n  9184: a1 = s1 + 0x3058\n  9188: fallthrough\n      : @317 [@dyn 144] (gas: 8)\n  9189: u64 [a1 + 960] = 0\n  9193: u64 [a1 + 952] = 0\n  9197: u64 [a1 + 936] = 0x5\n  9202: a2 = a1\n  9204: a0 = 0x20\n  9207: a1 = s1 + 0x3400\n  9211: u64 [a2 + 944] = 0\n  9215: ra = 290, jump @25\n      : @318 [@dyn 145] (gas: 3)\n  9221: a1 = 0x2019c\n  9226: a0 = i32 [0x2019c]\n  9231: jump @320 if a0 >u 63\n      : @319 (gas: 2)\n  9235: u32 [0x2019c] = 0x40\n  9241: fallthrough\n      : @320 (gas: 15)\n  9242: a0 = sp + 0xffffffffffffffe0\n  9245: a2 = a0 & 0xffffffffffffffe0\n  9248: u64 [s1 + 0xa8] = a2\n  9252: sp = a2\n  9254: a0 = 0x201b0\n  9259: i32 a0 = a0 + 0\n  9261: i32 a2 = a2 + 0\n  9263: u64 [s1 + 0xd0] = a1\n  9267: a1 = 0x40\n  9270: u64 [s1 + 0xb0] = a0\n  9274: ra = 0x124\n  9278: ecalli 6 // 'hash_keccak_256'\n  9280: a3 = u64 [s1 + 0xa8]\n  9284: t0 = 0x126\n  9288: jump @1579\n      : @321 [@dyn 146] (gas: 2)\n  9292: a3 = u64 [s1 + 0xa8]\n  9296: t0 = 294, jump @1579\n      : @322 [@dyn 147] (gas: 27)\n  9303: u64 [s1 + 0xa0] = a0\n  9307: a0 = reverse a1\n  9309: u64 [s1 + 0x98] = a0\n  9313: a0 = reverse a2\n  9315: u64 [s1 + 0x90] = a0\n  9319: a0 = reverse a3\n  9321: u64 [s1 + 0x88] = a0\n  9325: a0 = sp + 0xffffffffffffffe0\n  9328: a0 = a0 & 0xffffffffffffffe0\n  9331: u64 [s1 + 0xa8] = a0\n  9335: sp = a0\n  9337: a0 = u64 [s1 + 0xb8]\n  9341: a0 = a0 & 0xffffffffffffffff\n  9344: a2 = u64 [s1 + 0xc0]\n  9348: a1 = a2 & 0xffffffffffffffff\n  9351: a2 = u64 [s1 + 0xd8]\n  9355: a3 = u64 [s1 + 0xc8]\n  9359: a2 = a2 & a3\n  9362: a3 = s1 + 0x3058\n  9366: u64 [a3 + 928] = 0\n  9370: a4 = a3 + 0x300\n  9374: u64 [a4 + 0x98] = a2\n  9378: u64 [a4 + 0x90] = a1\n  9382: a1 = s1 + 0x33e0\n  9386: u64 [a4 + 0x88] = a0\n  9390: a0 = 0\n  9392: ra = 296, jump @25\n      : @323 [@dyn 148] (gas: 14)\n  9398: a0 = u64 [s1 + 0x88]\n  9402: a1 = s1 + 0x3058\n  9406: a2 = a1 + 0x300\n  9410: u64 [a2 + 0x80] = a0\n  9414: a0 = u64 [s1 + 0x90]\n  9418: u64 [a2 + 0x78] = a0\n  9421: a0 = u64 [s1 + 0x98]\n  9425: u64 [a2 + 0x70] = a0\n  9428: a3 = a1\n  9430: a0 = 0x20\n  9433: a1 = s1 + 0x33c0\n  9437: a2 = u64 [s1 + 0xa0]\n  9441: u64 [a3 + 0x368] = a2\n  9445: ra = 298, jump @25\n      : @324 [@dyn 149] (gas: 3)\n  9451: a1 = u64 [s1 + 0xd0]\n  9455: a0 = i32 [a1]\n  9457: jump @326 if a0 >u 63\n      : @325 (gas: 2)\n  9461: u32 [a1 + 0] = 0x40\n  9464: fallthrough\n      : @326 (gas: 12)\n  9465: a0 = sp + 0xffffffffffffffe0\n  9468: a0 = a0 & 0xffffffffffffffe0\n  9471: u64 [s1 + 0xd8] = a0\n  9475: sp = a0\n  9477: i32 a2 = a0 + 0\n  9479: a1 = 0x40\n  9482: a0 = u64 [s1 + 0xb0]\n  9486: ra = 0x12c\n  9490: ecalli 6 // 'hash_keccak_256'\n  9492: a3 = u64 [s1 + 0xd8]\n  9496: t0 = 0x12e\n  9500: jump @1529\n      : @327 [@dyn 150] (gas: 2)\n  9504: a3 = u64 [s1 + 0xd8]\n  9508: t0 = 302, jump @1529\n      : @328 [@dyn 151] (gas: 7)\n  9515: a1 = u64 [s1 + 0xa8]\n  9519: u64 [a1 + 0x18] = a3\n  9522: u64 [a1 + 0x10] = a2\n  9525: u64 [a1 + 0x8] = a4\n  9528: u64 [a1] = a0\n  9530: a0 = s1 + 0x33a0\n  9534: ra = 304, jump @27\n      : @329 [@dyn 152] (gas: 13)\n  9540: a1 = s1 + 0x3058\n  9544: a2 = a1 + 0x300\n  9548: a0 = u64 [a2 + 0x60]\n  9551: u64 [s1 + 0xd8] = a0\n  9555: a0 = u64 [a2 + 0x58]\n  9558: u64 [s1 + 0xd0] = a0\n  9562: a0 = u64 [a2 + 0x50]\n  9565: u64 [s1 + 0xc8] = a0\n  9569: a0 = u64 [a2 + 0x48]\n  9572: u64 [s1 + 0xc0] = a0\n  9576: a0 = s1 + 0x3380\n  9580: a1 = 0x40\n  9583: ra = 306, jump @23\n      : @330 [@dyn 153] (gas: 7)\n  9589: a3 = s1 + 0x3058\n  9593: a5 = a3 + 0x300\n  9597: a0 = u64 [a5 + 0x40]\n  9600: a1 = u64 [a5 + 0x38]\n  9603: a2 = u64 [a5 + 0x30]\n  9606: a4 = u64 [a5 + 0x28]\n  9609: t0 = 308, jump @1526\n      : @331 [@dyn 154] (gas: 1)\n  9616: jump @333 if a0 == 0\n      : @332 (gas: 1)\n  9619: jump @1003\n      : @333 (gas: 14)\n  9622: a0 = u64 [s1 + 0xc0]\n  9626: a2 = a3 + 0x300\n  9630: u64 [a2 + 0x8] = a0\n  9633: a0 = u64 [s1 + 0xc8]\n  9637: u64 [a2 + 0x10] = a0\n  9640: a0 = u64 [s1 + 0xd0]\n  9644: u64 [a2 + 0x18] = a0\n  9647: a1 = s1 + 0x3360\n  9651: a0 = u64 [s1 + 0xd8]\n  9655: u64 [a2 + 0x20] = a0\n  9658: a0 = a4\n  9660: u64 [s1 + 0xd8] = a4\n  9664: ra = 0x410\n  9668: jump @25\n      : @334 (gas: 9)\n  9671: u64 [a3 + 1408] = 0\n  9675: u64 [a3 + 1400] = 0\n  9679: u64 [a3 + 1392] = 0\n  9683: u64 [a3 + 1384] = 0\n  9687: a0 = s1 + 0x3000\n  9691: i32 a0 = a0 + 0x5c0\n  9695: ra = 0x136\n  9699: ecalli 10 // 'value_transferred'\n  9701: fallthrough\n      : @335 [@dyn 155] (gas: 10)\n  9702: a3 = s1 + 0x3058\n  9706: a4 = a3 + 0x500\n  9710: a0 = u64 [a4 + 0x78]\n  9713: a1 = u64 [a4 + 0x80]\n  9717: a2 = u64 [a4 + 0x70]\n  9720: a3 = u64 [a4 + 0x68]\n  9723: a1 = a1 | a2\n  9726: a0 = a0 | a3\n  9729: a0 = a0 | a1\n  9732: jump @337 if a0 == 0\n      : @336 (gas: 1)\n  9735: jump @1116\n      : @337 (gas: 4)\n  9738: a0 = u64 [s1 + 0x18]\n  9741: a0 = i32 [a0]\n  9743: a1 = 0x23\n  9746: jump @339 if a1 <u a0\n      : @338 (gas: 1)\n  9749: jump @1117\n      : @339 (gas: 5)\n  9752: a0 = s1 + 0x7ff\n  9756: a0 = a0 + 0xe1\n  9760: ra = 0x138\n  9764: t0 = 0x504\n  9768: jump @1574\n      : @340 [@dyn 156] (gas: 13)\n  9772: a3 = s1 + 0x7ff\n  9776: a3 = a3 + 0x51\n  9779: a0 = u64 [a3 + 0x90]\n  9783: a1 = u64 [a3 + 0x98]\n  9787: a2 = u32 [a3 + 0xa0]\n  9791: u64 [a3 + 136] = 0\n  9795: u64 [a3 + 0x80] = a2\n  9799: u64 [a3 + 0x78] = a1\n  9802: a1 = s1 + 0x7ff\n  9806: a1 = a1 + 0xc1\n  9810: u64 [a3 + 0x70] = a0\n  9813: a0 = 0\n  9815: ra = 314, jump @25\n      : @341 [@dyn 157] (gas: 11)\n  9821: a1 = s1 + 0x7ff\n  9825: a1 = a1 + 0x51\n  9828: u64 [a1 + 104] = 0\n  9831: u64 [a1 + 96] = 0\n  9834: u64 [a1 + 80] = 0x4\n  9838: a2 = a1\n  9840: a0 = 0x20\n  9843: a1 = s1 + 0x7ff\n  9847: a1 = a1 + 0xa1\n  9851: u64 [a2 + 88] = 0\n  9854: ra = 316, jump @25\n      : @342 [@dyn 158] (gas: 2)\n  9860: a1 = i32 [0x2019c]\n  9865: jump @344 if a1 >u 63\n      : @343 (gas: 2)\n  9869: u32 [0x2019c] = 0x40\n  9875: fallthrough\n      : @344 (gas: 13)\n  9876: a0 = sp + 0xffffffffffffffe0\n  9879: a2 = a0 & 0xffffffffffffffe0\n  9882: u64 [s1 + 0xd8] = a2\n  9886: sp = a2\n  9888: a0 = 0x201b0\n  9893: i32 a0 = a0 + 0\n  9895: i32 a2 = a2 + 0\n  9897: a1 = 0x40\n  9900: ra = 0x13e\n  9904: ecalli 6 // 'hash_keccak_256'\n  9906: a3 = u64 [s1 + 0xd8]\n  9910: t0 = 0x140\n  9914: jump @1553\n      : @345 [@dyn 159] (gas: 2)\n  9918: a3 = u64 [s1 + 0xd8]\n  9922: t0 = 320, jump @1553\n      : @346 [@dyn 160] (gas: 9)\n  9929: a5 = a4 + 0x500\n  9933: u64 [a5 + 0xa0] = a3\n  9937: u64 [a5 + 0x98] = a2\n  9941: u64 [a5 + 0x90] = a1\n  9945: u64 [a5 + 0x88] = a0\n  9949: a0 = s1 + 0x7ff\n  9953: a0 = a0 + 0x81\n  9957: a1 = s1 + 0x35e0\n  9961: ra = 322, jump @27\n      : @347 [@dyn 161] (gas: 20)\n  9967: a1 = s1 + 0x7ff\n  9971: a1 = a1 + 0x51\n  9974: a0 = u64 [a1 + 0x30]\n  9977: u64 [s1 + 0xd8] = a0\n  9981: a0 = u64 [a1 + 0x38]\n  9984: u64 [s1 + 0xd0] = a0\n  9988: a0 = u64 [a1 + 0x40]\n  9991: u64 [s1 + 0xc8] = a0\n  9995: a0 = u64 [a1 + 0x48]\n  9998: u64 [s1 + 0xc0] = a0\n 10002: a0 = s1 + 0x3058\n 10006: u64 [a0 + 1472] = 0\n 10010: u64 [a0 + 1464] = 0\n 10014: u64 [a0 + 1456] = 0\n 10018: a1 = a0\n 10020: u64 [a1 + 1448] = 0x2\n 10025: a0 = s1 + 0x7ff\n 10029: a0 = a0 + 0x61\n 10032: a1 = s1 + 0x3600\n 10036: ra = 324, jump @27\n      : @348 [@dyn 162] (gas: 17)\n 10042: a0 = s1 + 0x7ff\n 10046: a0 = a0 + 0x51\n 10049: a2 = u8 [a0 + 0x10]\n 10052: u64 [s1 + 0xb8] = a2\n 10056: a0 = s1 + 0x1000\n 10060: u64 [a0 + 4294965304] = 0\n 10064: a0 = s1 + 0x1000\n 10068: u64 [a0 + 4294965296] = 0\n 10072: a0 = s1 + 0x1000\n 10076: u64 [a0 + 4294965288] = 0\n 10080: a0 = s1 + 0x7ff\n 10084: a0 = a0 + 0x41\n 10087: a1 = s1 + 0x7ff\n 10091: a1 = a1 + 0x21\n 10094: a3 = s1 + 0x1000\n 10098: u64 [a3 + 0xfffffffffffff820] = a2\n 10102: ra = 326, jump @1224\n      : @349 [@dyn 163] (gas: 25)\n 10108: a0 = s1 + 0x1000\n 10112: a0 = u64 [a0 + 0xfffffffffffff840]\n 10116: a1 = s1 + 0x1000\n 10120: a1 = u64 [a1 + 0xfffffffffffff848]\n 10124: a3 = s1 + 0x7ff\n 10128: a3 = a3 + 0x51\n 10131: a2 = u64 [a3]\n 10133: a3 = u64 [a3 + 0x8]\n 10136: u64 [s1 + 0x7d8] = a3\n 10140: u64 [s1 + 0x7d0] = a2\n 10144: u64 [s1 + 0x7c8] = a1\n 10148: u64 [s1 + 0x7c0] = a0\n 10152: a0 = u64 [s1 + 0xc0]\n 10156: u64 [s1 + 0x7f8] = a0\n 10160: a0 = u64 [s1 + 0xc8]\n 10164: u64 [s1 + 0x7f0] = a0\n 10168: a0 = u64 [s1 + 0xd0]\n 10172: u64 [s1 + 0x7e8] = a0\n 10176: a0 = s1 + 0x7ff\n 10180: a0 = a0 + 0x1\n 10183: a1 = s1 + 0x7e0\n 10187: a2 = s1 + 0x7c0\n 10191: a3 = u64 [s1 + 0xd8]\n 10195: u64 [s1 + 0x7e0] = a3\n 10199: ra = 328, jump @1233\n      : @350 [@dyn 164] (gas: 20)\n 10205: a0 = s1 + 0x1000\n 10209: a0 = u64 [a0 + 0xfffffffffffff800]\n 10213: u64 [s1 + 0xb0] = a0\n 10217: a0 = s1 + 0x1000\n 10221: a0 = u64 [a0 + 0xfffffffffffff808]\n 10225: u64 [s1 + 0xa8] = a0\n 10229: a0 = s1 + 0x1000\n 10233: a0 = u64 [a0 + 0xfffffffffffff810]\n 10237: u64 [s1 + 0xa0] = a0\n 10241: a0 = s1 + 0x1000\n 10245: a0 = u64 [a0 + 0xfffffffffffff818]\n 10249: u64 [s1 + 0x98] = a0\n 10253: u64 [s1 + 1944] = 0\n 10257: u64 [s1 + 1936] = 0\n 10261: u64 [s1 + 1928] = 0\n 10265: a0 = s1 + 0x7a0\n 10269: a1 = s1 + 0x780\n 10273: a2 = u64 [s1 + 0xb8]\n 10277: u64 [s1 + 0x780] = a2\n 10281: ra = 330, jump @1224\n      : @351 [@dyn 165] (gas: 20)\n 10287: a0 = u64 [s1 + 0x7a0]\n 10291: a1 = u64 [s1 + 0x7a8]\n 10295: a2 = u64 [s1 + 0x7b0]\n 10299: a3 = u64 [s1 + 0x7b8]\n 10303: u64 [s1 + 0x738] = a3\n 10307: u64 [s1 + 0x730] = a2\n 10311: u64 [s1 + 0x728] = a1\n 10315: u64 [s1 + 0x720] = a0\n 10319: a0 = u64 [s1 + 0xc0]\n 10323: u64 [s1 + 0x758] = a0\n 10327: a0 = u64 [s1 + 0xc8]\n 10331: u64 [s1 + 0x750] = a0\n 10335: a0 = u64 [s1 + 0xd0]\n 10339: u64 [s1 + 0x748] = a0\n 10343: a0 = s1 + 0x760\n 10347: a1 = s1 + 0x740\n 10351: a2 = s1 + 0x720\n 10355: a3 = u64 [s1 + 0xd8]\n 10359: u64 [s1 + 0x740] = a3\n 10363: ra = 332, jump @1259\n      : @352 [@dyn 166] (gas: 16)\n 10369: a0 = u64 [s1 + 0x760]\n 10373: u64 [s1 + 0xd8] = a0\n 10377: a0 = u64 [s1 + 0x768]\n 10381: u64 [s1 + 0xd0] = a0\n 10385: a0 = u64 [s1 + 0x770]\n 10389: u64 [s1 + 0xc8] = a0\n 10393: a0 = u64 [s1 + 0x778]\n 10397: u64 [s1 + 0xc0] = a0\n 10401: u64 [s1 + 1784] = 0\n 10405: u64 [s1 + 1776] = 0\n 10409: a0 = u64 [s1 + 0xb8]\n 10413: u64 [s1 + 0x6e0] = a0\n 10417: a0 = s1 + 0x700\n 10421: a1 = s1 + 0x6e0\n 10425: u64 [s1 + 1768] = 0\n 10429: ra = 334, jump @1284\n      : @353 [@dyn 167] (gas: 12)\n 10435: a4 = s1 + 0x700\n 10439: a2 = u64 [a4]\n 10441: a0 = u64 [a4 + 0x8]\n 10444: a1 = u64 [a4 + 0x10]\n 10447: a3 = u64 [a4 + 0x18]\n 10450: u64 [s1 + 0x6b8] = a3\n 10454: u64 [s1 + 0x6b0] = a1\n 10458: u64 [s1 + 0x6a8] = a0\n 10462: a0 = s1 + 0x6c0\n 10466: a1 = s1 + 0x6a0\n 10470: u64 [s1 + 0x6a0] = a2\n 10474: ra = 336, jump @1224\n      : @354 [@dyn 168] (gas: 20)\n 10480: a0 = u64 [s1 + 0x6c0]\n 10484: a1 = u64 [s1 + 0x6c8]\n 10488: a2 = u64 [s1 + 0x6d0]\n 10492: a3 = u64 [s1 + 0x6d8]\n 10496: u64 [s1 + 0x658] = a3\n 10500: u64 [s1 + 0x650] = a2\n 10504: u64 [s1 + 0x648] = a1\n 10508: u64 [s1 + 0x640] = a0\n 10512: a0 = u64 [s1 + 0xc0]\n 10516: u64 [s1 + 0x678] = a0\n 10520: a0 = u64 [s1 + 0xc8]\n 10524: u64 [s1 + 0x670] = a0\n 10528: a0 = u64 [s1 + 0xd0]\n 10532: u64 [s1 + 0x668] = a0\n 10536: a0 = s1 + 0x680\n 10540: a1 = s1 + 0x660\n 10544: a2 = s1 + 0x640\n 10548: a3 = u64 [s1 + 0xd8]\n 10552: u64 [s1 + 0x660] = a3\n 10556: ra = 338, jump @1233\n      : @355 [@dyn 169] (gas: 19)\n 10562: a0 = u64 [s1 + 0x680]\n 10566: u64 [s1 + 0xb8] = a0\n 10570: a0 = u64 [s1 + 0x688]\n 10574: u64 [s1 + 0x90] = a0\n 10578: a0 = u64 [s1 + 0x690]\n 10582: u64 [s1 + 0x88] = a0\n 10586: a0 = u64 [s1 + 0x698]\n 10590: u64 [s1 + 0x80] = a0\n 10594: a0 = u64 [s1 + 0x98]\n 10598: u64 [s1 + 0x618] = a0\n 10602: a0 = u64 [s1 + 0xa0]\n 10606: u64 [s1 + 0x610] = a0\n 10610: a0 = u64 [s1 + 0xa8]\n 10614: u64 [s1 + 0x608] = a0\n 10618: a0 = s1 + 0x620\n 10622: a1 = s1 + 0x600\n 10626: a2 = u64 [s1 + 0xb0]\n 10630: u64 [s1 + 0x600] = a2\n 10634: ra = 340, jump @1412\n      : @356 [@dyn 170] (gas: 20)\n 10640: a1 = s1 + 0x600\n 10644: a0 = u64 [a1 + 0x38]\n 10647: u64 [s1 + 0xd0] = a0\n 10651: a0 = u64 [a1 + 0x30]\n 10654: u64 [s1 + 0xc8] = a0\n 10658: a0 = u64 [a1 + 0x28]\n 10661: u64 [s1 + 0xd8] = a0\n 10665: a0 = u64 [a1 + 0x20]\n 10668: u64 [s1 + 0xc0] = a0\n 10672: a0 = u64 [s1 + 0x80]\n 10676: u64 [s1 + 0x5d8] = a0\n 10680: a0 = u64 [s1 + 0x88]\n 10684: u64 [s1 + 0x5d0] = a0\n 10688: a0 = u64 [s1 + 0x90]\n 10692: u64 [s1 + 0x5c8] = a0\n 10696: a0 = s1 + 0x5e0\n 10700: a1 = s1 + 0x5c0\n 10704: a2 = u64 [s1 + 0xb8]\n 10708: u64 [s1 + 0x5c0] = a2\n 10712: ra = 342, jump @1496\n      : @357 [@dyn 171] (gas: 12)\n 10718: a1 = s1 + 0x500\n 10722: a0 = u64 [a1 + 0xf8]\n 10726: u64 [s1 + 0x88] = a0\n 10730: a0 = u64 [a1 + 0xf0]\n 10734: u64 [s1 + 0x80] = a0\n 10738: a0 = u64 [a1 + 0xe8]\n 10742: u64 [s1 + 0x90] = a0\n 10746: a0 = u64 [a1 + 0xe0]\n 10750: u64 [s1 + 0x98] = a0\n 10754: a0 = s1 + 0x5a0\n 10758: a1 = 0x40\n 10761: ra = 344, jump @23\n      : @358 [@dyn 172] (gas: 1)\n 10767: t0 = 346, jump @1564\n      : @359 [@dyn 173] (gas: 1)\n 10774: jump @361 if a0 == 0\n      : @360 (gas: 1)\n 10777: jump @1003\n      : @361 (gas: 11)\n 10780: a2 = s1 + 0x500\n 10784: a0 = u64 [a2 + 0xb8]\n 10788: u64 [s1 + 0xa0] = a0\n 10792: a0 = u64 [a2 + 0xb0]\n 10796: u64 [s1 + 0xa8] = a0\n 10800: a0 = u64 [a2 + 0xa8]\n 10804: u64 [s1 + 0xb0] = a0\n 10808: a0 = u64 [a2 + 0xa0]\n 10812: u64 [s1 + 0xb8] = a0\n 10816: a0 = s1 + 0x580\n 10820: ra = 348, jump @23\n      : @362 [@dyn 174] (gas: 13)\n 10826: a1 = u64 [s1 + 0xb8]\n 10830: a0 = a1 + 0x20\n 10833: a1 = a0 <u a1\n 10836: a3 = u64 [s1 + 0xb0]\n 10840: a2 = a3 + a1\n 10843: a3 = a2 <u a3\n 10846: a3 = a1 if a1 == 0\n 10849: a1 = u64 [s1 + 0xa8]\n 10853: a3 = a3 + a1\n 10856: a1 = a3 <u a1\n 10859: a4 = u64 [s1 + 0xa0]\n 10863: a1 = a1 + a4\n 10866: t0 = 350, jump @1537\n      : @363 [@dyn 175] (gas: 1)\n 10873: jump @365 if a1 == 0\n      : @364 (gas: 1)\n 10876: jump @1003\n      : @365 (gas: 10)\n 10879: a1 = u64 [s1 + 0xd0]\n 10883: a2 = u64 [s1 + 0xc8]\n 10887: a1 = a1 | a2\n 10890: a2 = 0xffffffe0\n 10900: t0 = u64 [s1 + 0xc0]\n 10904: a2 = t0 <u a2\n 10907: a3 = u64 [s1 + 0xd8]\n 10911: a2 = 0 if a3 != 0\n 10913: a2 = 0 if a1 != 0\n 10915: jump @367 if a2 != 0\n      : @366 (gas: 1)\n 10918: jump @1003\n      : @367 (gas: 13)\n 10921: t1 = u64 [s1 + 0x598]\n 10925: a2 = s1 + 0x500\n 10929: a5 = u64 [a2 + 0x90]\n 10933: a1 = u64 [a2 + 0x80]\n 10937: a3 = u64 [a2 + 0x88]\n 10941: a4 = a1 | a5\n 10944: a2 = a3 | t1\n 10947: a4 = a4 | a2\n 10950: a4 = a4 >> 0x20\n 10953: a2 = a2 | a5\n 10956: a2 = a2 << 0x20\n 10959: a2 = a2 | a4\n 10962: jump @369 if a2 == 0\n      : @368 (gas: 1)\n 10965: jump @1003\n      : @369 (gas: 7)\n 10968: i32 a2 = t0 + 0x20\n 10971: u64 [s1 + 0x78] = a2\n 10974: u64 [s1 + 0xd0] = t1\n 10978: u64 [s1 + 0xc8] = a5\n 10982: u64 [s1 + 0xc0] = a3\n 10986: u64 [s1 + 0xd8] = a1\n 10990: ra = 352, jump @38\n      : @370 [@dyn 176] (gas: 4)\n 10996: u64 [s1 + 0x70] = a0\n 10999: a0 = u64 [s1 + 0x78]\n 11002: a1 = u64 [s1 + 0xd8]\n 11006: ra = 354, jump @38\n      : @371 [@dyn 177] (gas: 4)\n 11012: a1 = a0\n 11014: a0 = u64 [s1 + 0x70]\n 11017: a2 = u64 [s1 + 0xd8]\n 11021: ra = 356, jump @6\n      : @372 [@dyn 178] (gas: 38)\n 11027: a0 = u64 [s1 + 0xb8]\n 11031: a1 = u64 [s1 + 0xd8]\n 11035: t0 = a1 + a0\n 11038: a0 = t0 <u a1\n 11041: a1 = u64 [s1 + 0xb0]\n 11045: a2 = u64 [s1 + 0xc0]\n 11049: a1 = a1 + a2\n 11052: a5 = a1 + a0\n 11055: a1 = a5 ^ a2\n 11058: a2 = a5 <u a2\n 11061: a2 = a0 if a1 == 0\n 11064: a0 = u64 [s1 + 0xa8]\n 11068: a3 = u64 [s1 + 0xc8]\n 11072: a0 = a0 + a3\n 11075: a4 = a0 + a2\n 11078: a1 = a4 <u a0\n 11081: a0 = a0 <u a3\n 11084: a2 = u64 [s1 + 0xa0]\n 11088: a3 = u64 [s1 + 0xd0]\n 11092: a2 = a2 + a3\n 11095: a0 = a0 + a2\n 11098: t1 = a0 + a1\n 11101: a0 = t0 + 0x20\n 11104: a1 = a0 <u t0\n 11107: a2 = a5 + a1\n 11110: a3 = a2 <u a5\n 11113: a3 = a1 if a1 == 0\n 11116: a3 = a3 + a4\n 11119: a1 = a3 <u a4\n 11122: a1 = a1 + t1\n 11125: a1 = a1 | a2\n 11128: a2 = a0 | a3\n 11131: a2 = a2 | a1\n 11134: a1 = a1 | a3\n 11137: a2 = a2 >> 0x20\n 11140: a1 = a1 << 0x20\n 11143: a1 = a1 | a2\n 11146: jump @374 if a1 == 0\n      : @373 (gas: 1)\n 11149: jump @1003\n      : @374 (gas: 11)\n 11152: u64 [s1 + 0xc0] = t1\n 11156: u64 [s1 + 0xc8] = a4\n 11160: u64 [s1 + 0xd0] = a5\n 11164: u64 [s1 + 0xd8] = t0\n 11168: u64 [s1 + 1392] = 0\n 11172: u64 [s1 + 1384] = 0\n 11176: a1 = 0x2e00000000000000\n 11186: u64 [s1 + 0x578] = a1\n 11190: a1 = s1 + 0x560\n 11194: u64 [s1 + 1376] = 0\n 11198: ra = 358, jump @25\n      : @375 [@dyn 179] (gas: 1)\n 11204: t0 = 360, jump @1560\n      : @376 [@dyn 180] (gas: 1)\n 11211: jump @378 if a0 == 0\n      : @377 (gas: 1)\n 11214: jump @1003\n      : @378 (gas: 2)\n 11217: a0 = s1 + 0x540\n 11221: ra = 362, jump @23\n      : @379 [@dyn 181] (gas: 13)\n 11227: a1 = u64 [s1 + 0xd8]\n 11231: a0 = a1 + 0x21\n 11234: a1 = a0 <u a1\n 11237: a3 = u64 [s1 + 0xd0]\n 11241: a2 = a3 + a1\n 11244: a3 = a2 <u a3\n 11247: a3 = a1 if a1 == 0\n 11250: a1 = u64 [s1 + 0xc8]\n 11254: a3 = a3 + a1\n 11257: a1 = a3 <u a1\n 11260: a4 = u64 [s1 + 0xc0]\n 11264: a1 = a1 + a4\n 11267: t0 = 364, jump @1537\n      : @380 [@dyn 182] (gas: 1)\n 11274: jump @382 if a1 == 0\n      : @381 (gas: 1)\n 11277: jump @1003\n      : @382 (gas: 10)\n 11280: a1 = u64 [s1 + 0x88]\n 11284: a2 = u64 [s1 + 0x80]\n 11288: a1 = a1 | a2\n 11291: a2 = 0xffffffe0\n 11301: t0 = u64 [s1 + 0x98]\n 11305: a2 = t0 <u a2\n 11308: a3 = u64 [s1 + 0x90]\n 11312: a2 = 0 if a3 != 0\n 11314: a2 = 0 if a1 != 0\n 11316: jump @384 if a2 != 0\n      : @383 (gas: 1)\n 11319: jump @1003\n      : @384 (gas: 16)\n 11322: a3 = s1 + 0x500\n 11326: a2 = u64 [a3 + 0x58]\n 11329: a4 = u64 [a3 + 0x50]\n 11332: a1 = u64 [a3 + 0x40]\n 11335: a5 = u64 [a3 + 0x48]\n 11338: a3 = a1 | a4\n 11341: u64 [s1 + 0x90] = a2\n 11345: u64 [s1 + 0x80] = a5\n 11349: a2 = a2 | a5\n 11352: a3 = a3 | a2\n 11355: a3 = a3 >> 0x20\n 11358: u64 [s1 + 0x88] = a4\n 11362: a2 = a2 | a4\n 11365: a2 = a2 << 0x20\n 11368: a2 = a2 | a3\n 11371: jump @386 if a2 == 0\n      : @385 (gas: 1)\n 11374: jump @1003\n      : @386 (gas: 4)\n 11377: i32 a2 = t0 + 0x20\n 11380: u64 [s1 + 0x78] = a2\n 11383: u64 [s1 + 0x98] = a1\n 11387: ra = 366, jump @38\n      : @387 [@dyn 183] (gas: 4)\n 11393: u64 [s1 + 0x70] = a0\n 11396: a0 = u64 [s1 + 0x78]\n 11399: a1 = u64 [s1 + 0x98]\n 11403: ra = 368, jump @38\n      : @388 [@dyn 184] (gas: 4)\n 11409: a1 = a0\n 11411: a0 = u64 [s1 + 0x70]\n 11414: a2 = u64 [s1 + 0x98]\n 11418: ra = 370, jump @6\n      : @389 [@dyn 185] (gas: 1)\n 11424: t0 = 372, jump @1544\n      : @390 [@dyn 186] (gas: 20)\n 11431: t0 = a5 <u a0\n 11434: a0 = a0 <u a1\n 11437: a2 = u64 [s1 + 0xc0]\n 11441: a1 = u64 [s1 + 0x90]\n 11445: a2 = a2 + a1\n 11448: a0 = a0 + a2\n 11451: t0 = t0 + a0\n 11454: a0 = a3 + 0x21\n 11457: u64 [s1 + 0xd8] = a3\n 11461: a1 = a0 <u a3\n 11464: a2 = a4 + a1\n 11467: u64 [s1 + 0xd0] = a4\n 11471: a3 = a2 <u a4\n 11474: a3 = a1 if a1 == 0\n 11477: a3 = a3 + a5\n 11480: u64 [s1 + 0xc8] = a5\n 11484: a1 = a3 <u a5\n 11487: u64 [s1 + 0xc0] = t0\n 11491: a1 = a1 + t0\n 11494: t0 = 374, jump @1537\n      : @391 [@dyn 187] (gas: 1)\n 11501: jump @393 if a1 == 0\n      : @392 (gas: 1)\n 11504: jump @1003\n      : @393 (gas: 6)\n 11507: u64 [s1 + 1336] = 0\n 11511: u64 [s1 + 1328] = 0\n 11515: u64 [s1 + 1320] = 0\n 11519: a1 = s1 + 0x520\n 11523: u64 [s1 + 1312] = 0\n 11527: ra = 376, jump @25\n      : @394 [@dyn 188] (gas: 1)\n 11533: t0 = 378, jump @1570\n      : @395 [@dyn 189] (gas: 1)\n 11540: jump @397 if a0 == 0\n      : @396 (gas: 1)\n 11543: jump @1003\n      : @397 (gas: 55)\n 11546: ra = u64 [s1 + 0xb8]\n 11550: t2 = u64 [s1 + 0xd8]\n 11554: t0 = t2 <u ra\n 11557: a3 = u64 [s1 + 0xb0]\n 11561: a2 = u64 [s1 + 0xd0]\n 11565: a0 = a2 ^ a3\n 11568: a1 = a2 <u a3\n 11571: a5 = a3\n 11573: a1 = t0 if a0 == 0\n 11576: a0 = u64 [s1 + 0xa8]\n 11580: t1 = u64 [s1 + 0xc8]\n 11584: a3 = t1 - a0\n 11587: a4 = a3 <u a1\n 11590: u64 [s1 + 0x98] = a4\n 11594: a0 = t1 <u a0\n 11597: u64 [s1 + 0xc8] = a0\n 11601: a0 = u64 [s1 + 0xa0]\n 11605: a4 = u64 [s1 + 0xc0]\n 11609: t1 = a4 - a0\n 11612: a0 = u64 [s1 + 0x98]\n 11616: a4 = u64 [s1 + 0xc8]\n 11620: a0 = a0 + a4\n 11623: t1 = t1 - a0\n 11626: a1 = a3 - a1\n 11629: a3 = a2 - a5\n 11632: a3 = a3 - t0\n 11635: a2 = t2 - ra\n 11638: a0 = a2 + 0x1\n 11641: a5 = a0 <u 0x1\n 11644: t0 = a3 + a5\n 11647: a4 = a0 | t0\n 11650: a4 = a4 <u 0x1\n 11653: a4 = a4 + a1\n 11656: a5 = a2 + 0x21\n 11659: u64 [s1 + 0xd8] = a5\n 11663: a2 = a5 <u a2\n 11666: a5 = a3 + a2\n 11669: u64 [s1 + 0xd0] = a5\n 11673: a3 = a5 <u a3\n 11676: a3 = a2 if a2 == 0\n 11679: a2 = a4 <u a1\n 11682: a2 = a2 + t1\n 11685: a3 = a3 + a1\n 11688: u64 [s1 + 0xc8] = a3\n 11692: a1 = a3 <u a1\n 11695: a1 = a1 + t1\n 11698: u64 [s1 + 0xc0] = a1\n 11702: a3 = s1 + 0x500\n 11706: u64 [a3] = a0\n 11708: u64 [s1 + 0x508] = t0\n 11712: u64 [a3 + 0x10] = a4\n 11715: a1 = s1 + 0x500\n 11719: u64 [a3 + 0x18] = a2\n 11722: a0 = ra\n 11724: ra = 380, jump @25\n      : @398 [@dyn 190] (gas: 19)\n 11730: a0 = u64 [s1 + 0xc0]\n 11734: u64 [s1 + 0x4d8] = a0\n 11738: a0 = u64 [s1 + 0xc8]\n 11742: u64 [s1 + 0x4d0] = a0\n 11746: a0 = u64 [s1 + 0xd0]\n 11750: u64 [s1 + 0x4c8] = a0\n 11754: a0 = u64 [s1 + 0xd8]\n 11758: u64 [s1 + 0x4c0] = a0\n 11762: a0 = u64 [s1 + 0xa0]\n 11766: u64 [s1 + 0x4f8] = a0\n 11770: a0 = u64 [s1 + 0xa8]\n 11774: u64 [s1 + 0x4f0] = a0\n 11778: a0 = u64 [s1 + 0xb0]\n 11782: u64 [s1 + 0x4e8] = a0\n 11786: a0 = s1 + 0x4e0\n 11790: a1 = s1 + 0x4c0\n 11794: a2 = u64 [s1 + 0xb8]\n 11798: u64 [s1 + 0x4e0] = a2\n 11802: ra = 382, jump @1177\n      : @399 [@dyn 191] (gas: 3)\n 11808: a0 = s1 + 0x4a0\n 11812: a1 = 0x40\n 11815: ra = 384, jump @23\n      : @400 [@dyn 192] (gas: 25)\n 11821: a5 = s1 + 0x400\n 11825: a1 = u64 [a5 + 0xb8]\n 11829: u64 [s1 + 0xd0] = a1\n 11833: a2 = u64 [a5 + 0xb0]\n 11837: u64 [s1 + 0xc8] = a2\n 11841: a4 = u64 [a5 + 0xa8]\n 11845: u64 [s1 + 0xc0] = a4\n 11849: a3 = u64 [a5 + 0xa0]\n 11853: u64 [s1 + 0xd8] = a3\n 11857: a0 = u64 [s1 + 0xa0]\n 11861: u64 [a5 + 0x58] = a0\n 11864: a0 = u64 [s1 + 0xa8]\n 11868: u64 [a5 + 0x50] = a0\n 11871: a0 = u64 [s1 + 0xb0]\n 11875: u64 [a5 + 0x48] = a0\n 11878: a0 = u64 [s1 + 0xb8]\n 11882: u64 [a5 + 0x40] = a0\n 11885: u64 [a5 + 0x78] = a1\n 11888: u64 [a5 + 0x70] = a2\n 11891: u64 [a5 + 0x68] = a4\n 11894: a0 = s1 + 0x480\n 11898: a1 = s1 + 0x460\n 11902: a2 = s1 + 0x440\n 11906: u64 [a5 + 0x60] = a3\n 11909: ra = 386, jump @1187\n      : @401 [@dyn 193] (gas: 1)\n 11915: t0 = 388, jump @1563\n      : @402 [@dyn 194] (gas: 1)\n 11922: jump @404 if a0 == 0\n      : @403 (gas: 1)\n 11925: jump @1003\n      : @404 (gas: 8)\n 11928: t0 = a3\n 11930: a4 = s1 + 0x400\n 11934: a0 = u64 [a4 + 0x88]\n 11938: a1 = u64 [a4 + 0x98]\n 11942: u64 [s1 + 0xb8] = a1\n 11946: t1 = u64 [s1 + 0x480]\n 11950: a3 = u64 [a4 + 0x90]\n 11954: jump @715\n      : @405 (gas: 8)\n 11957: u64 [a2 + 320] = 0\n 11961: u64 [a2 + 312] = 0\n 11965: u64 [a2 + 304] = 0\n 11969: u64 [a2 + 296] = 0\n 11973: a0 = s1 + 0x4000\n 11977: i32 a0 = a0 + 0xfffffffffffff980\n 11981: ecalli 10 // 'value_transferred'\n 11983: fallthrough\n      : @406 (gas: 10)\n 11984: a3 = s1 + 0x3858\n 11988: a4 = a3 + 0x100\n 11992: a0 = u64 [a4 + 0x38]\n 11995: a1 = u64 [a4 + 0x40]\n 11998: a2 = u64 [a4 + 0x30]\n 12001: a3 = u64 [a4 + 0x28]\n 12004: a1 = a1 | a2\n 12007: a0 = a0 | a3\n 12010: a0 = a0 | a1\n 12013: jump @408 if a0 == 0\n      : @407 (gas: 1)\n 12016: jump @1118\n      : @408 (gas: 3)\n 12019: a0 = u64 [s1 + 0x18]\n 12022: a0 = i32 [a0]\n 12024: jump @410 if a0 >u 35\n      : @409 (gas: 1)\n 12028: jump @1119\n      : @410 (gas: 21)\n 12031: a0 = s1 + 0x4000\n 12035: i32 a0 = a0 + 0xfffffffffffff9a0\n 12039: a1 = 0x4\n 12042: ecalli 1 // 'call_data_load'\n 12044: a1 = s1 + 0x3858\n 12048: a2 = a1 + 0x100\n 12052: a0 = u64 [a2 + 0x60]\n 12055: u64 [s1 + 0xd8] = a0\n 12059: a0 = u64 [a2 + 0x58]\n 12062: u64 [s1 + 0xd0] = a0\n 12066: a0 = u64 [a2 + 0x50]\n 12069: u64 [s1 + 0xc8] = a0\n 12073: a0 = u64 [a2 + 0x48]\n 12076: u64 [s1 + 0xc0] = a0\n 12080: u64 [a1 + 384] = 0\n 12084: u64 [a1 + 376] = 0\n 12088: u64 [a1 + 368] = 0\n 12092: u64 [a2 + 104] = 0x2\n 12096: a0 = s1 + 0x1ba0\n 12100: a1 = s1 + 0x39c0\n 12104: ra = 390, jump @27\n      : @411 [@dyn 195] (gas: 9)\n 12110: a2 = s1 + 0x1858\n 12114: a0 = u8 [a2 + 0x348]\n 12118: u64 [a2 + 800] = 0\n 12122: u64 [a2 + 792] = 0\n 12126: u64 [a2 + 0x308] = a0\n 12130: a0 = s1 + 0x1b80\n 12134: a1 = s1 + 0x1b60\n 12138: u64 [a2 + 784] = 0\n 12142: ra = 392, jump @1224\n      : @412 [@dyn 196] (gas: 2)\n 12148: a1 = s1 + 0x1858\n 12152: fallthrough\n      : @413 (gas: 25)\n 12153: t1 = u64 [a1 + 0x340]\n 12157: t0 = u64 [a1 + 0x328]\n 12161: a0 = u64 [a1 + 0x330]\n 12165: a5 = u64 [a1 + 0x338]\n 12169: a3 = 0x3e8\n 12173: a1 = t0 mulhu a3\n 12176: a2 = a0 * a3\n 12179: a1 = a1 + a2\n 12182: a2 = a1 <u a2\n 12185: a0 = a0 mulhu a3\n 12188: a2 = a2 + a0\n 12191: a0 = a5 * a3\n 12194: ra = a2 + a0\n 12197: a2 = ra <u a2\n 12200: t2 = t1 * a3\n 12203: a4 = a5 mulhu a3\n 12206: t2 = t2 + a4\n 12209: a0 = t2 + a2\n 12212: a2 = 0 if a0 != 0\n 12214: t2 = t2 <u a4\n 12217: a4 = t1 mulhu a3\n 12220: a4 = a4 >u 0\n 12222: a4 = a4 | t2\n 12225: a2 = a2 | a4\n 12228: jump @415 if a2 == 0\n      : @414 (gas: 1)\n 12231: jump @1120\n      : @415 (gas: 17)\n 12234: a2 = t0 * 0x3e8\n 12238: a3 = u64 [s1 + 0xc0]\n 12242: a2 = a2 <u a3\n 12245: a4 = u64 [s1 + 0xc8]\n 12249: a3 = a4 ^ a1\n 12252: a1 = a1 <u a4\n 12255: a1 = a2 if a3 == 0\n 12258: a2 = u64 [s1 + 0xd0]\n 12262: t0 = ra <u a2\n 12265: a3 = u64 [s1 + 0xd8]\n 12269: a5 = a3 ^ a0\n 12272: a4 = a0 <u a3\n 12275: a4 = t0 if a5 == 0\n 12278: a0 = a2 ^ ra\n 12281: a0 = a0 | a5\n 12284: a4 = a1 if a0 == 0\n 12287: jump @417 if a4 != 0\n      : @416 (gas: 1)\n 12290: jump @826\n      : @417 (gas: 3)\n 12293: a0 = s1 + 0x18e0\n 12297: a1 = 0x40\n 12300: ra = 394, jump @23\n      : @418 [@dyn 197] (gas: 13)\n 12306: a2 = s1 + 0x1858\n 12310: t0 = u64 [a2 + 0xa0]\n 12314: a5 = u64 [a2 + 0x98]\n 12318: a4 = u64 [a2 + 0x90]\n 12322: a0 = u64 [a2 + 0x88]\n 12326: a3 = a4 | t0\n 12329: a1 = a0 | a5\n 12332: a1 = a1 | a3\n 12335: a1 = a1 >> 0x20\n 12338: a3 = a3 | a5\n 12341: a3 = a3 << 0x20\n 12344: a1 = a1 | a3\n 12347: jump @420 if a1 == 0\n      : @419 (gas: 1)\n 12350: jump @1003\n      : @420 (gas: 11)\n 12353: u64 [a2 + 120] = 0\n 12356: u64 [a2 + 112] = 0\n 12359: u64 [a2 + 104] = 0\n 12362: a3 = 0x8c379a000000000\n 12372: a1 = s1 + 0x18c0\n 12376: u64 [a2 + 0x80] = a3\n 12380: u64 [s1 + 0xd8] = a0\n 12384: u64 [s1 + 0xd0] = a4\n 12388: u64 [s1 + 0xc0] = t0\n 12392: u64 [s1 + 0xc8] = a5\n 12396: ra = 396, jump @25\n      : @421 [@dyn 198] (gas: 1)\n 12402: t0 = 398, jump @1524\n      : @422 [@dyn 199] (gas: 1)\n 12408: jump @424 if a0 != 0\n      : @423 (gas: 1)\n 12411: jump @1003\n      : @424 (gas: 11)\n 12414: i32 a0 = a1 + 0x4\n 12417: a2 = s1 + 0x1858\n 12421: u64 [a2 + 96] = 0\n 12424: u64 [a2 + 88] = 0\n 12427: u64 [a2 + 80] = 0\n 12430: a5 = 0x20\n 12433: a1 = s1 + 0x18a0\n 12437: u64 [a2 + 0x48] = a5\n 12440: u64 [s1 + 0xc8] = a3\n 12444: u64 [s1 + 0xc0] = a4\n 12448: ra = 400, jump @25\n      : @425 [@dyn 200] (gas: 1)\n 12454: t0 = 402, jump @1547\n      : @426 [@dyn 201] (gas: 1)\n 12460: jump @428 if a0 != 0\n      : @427 (gas: 1)\n 12463: jump @1003\n      : @428 (gas: 8)\n 12466: i32 a0 = a1 + 0x24\n 12469: a2 = s1 + 0x1858\n 12473: u64 [a2 + 64] = 0\n 12476: u64 [a2 + 56] = 0\n 12479: u64 [a2 + 40] = 0x20\n 12483: a1 = s1 + 0x1880\n 12487: u64 [a2 + 48] = 0\n 12490: ra = 404, jump @25\n      : @429 [@dyn 202] (gas: 1)\n 12496: t0 = 406, jump @1534\n      : @430 [@dyn 203] (gas: 1)\n 12502: jump @432 if a0 != 0\n      : @431 (gas: 1)\n 12505: jump @1003\n      : @432 (gas: 13)\n 12508: i32 a0 = a3 + 0x44\n 12511: a1 = u64 [0x200c8]\n 12516: a4 = s1 + 0x1858\n 12520: u64 [a4 + 0x20] = a1\n 12523: a1 = u64 [0x200d0]\n 12528: a2 = u64 [0x200d8]\n 12533: a3 = u64 [0x200e0]\n 12538: u64 [a4 + 0x18] = a1\n 12541: u64 [a4 + 0x10] = a2\n 12544: a1 = s1 + 0x1860\n 12548: u64 [a4 + 0x8] = a3\n 12551: ra = 0x4bc\n 12555: jump @25\n      : @433 (gas: 11)\n 12558: u64 [a2 + 1120] = 0\n 12562: u64 [a2 + 1112] = 0\n 12566: u64 [a2 + 1104] = 0\n 12570: u64 [a2 + 1096] = 0\n 12574: a0 = s1 + 0x4000\n 12578: i32 a0 = a0 + 0xfffffffffffffca0\n 12582: ra = 0x198\n 12586: ecalli 10 // 'value_transferred'\n 12588: a0 = 0x4000\n 12592: t0 = 0x19a\n 12596: jump @1576\n      : @434 [@dyn 204] (gas: 2)\n 12600: a0 = 0x4000\n 12604: t0 = 410, jump @1576\n      : @435 [@dyn 205] (gas: 8)\n 12611: a0 = u64 [a4 + 0x58]\n 12614: a1 = u64 [a4 + 0x60]\n 12617: a2 = u64 [a4 + 0x50]\n 12620: a3 = u64 [a4 + 0x48]\n 12623: a1 = a1 | a2\n 12626: a0 = a0 | a3\n 12629: a0 = a0 | a1\n 12632: jump @437 if a0 == 0\n      : @436 (gas: 1)\n 12635: jump @1127\n      : @437 (gas: 4)\n 12638: a0 = u64 [s1 + 0x18]\n 12641: a0 = i32 [a0]\n 12643: a1 = 0x43\n 12646: jump @439 if a1 <u a0\n      : @438 (gas: 1)\n 12649: jump @1128\n      : @439 (gas: 4)\n 12652: a0 = s1 + 0x2be0\n 12656: ra = 0x19c\n 12660: t0 = 0x504\n 12664: jump @1574\n      : @440 [@dyn 206] (gas: 31)\n 12668: a1 = s1 + 0x2858\n 12672: a2 = a1 + 0x300\n 12676: a0 = u64 [a2 + 0x98]\n 12680: u64 [s1 + 0xa0] = a0\n 12684: a0 = u64 [a2 + 0x90]\n 12688: u64 [s1 + 0xc0] = a0\n 12692: a0 = u64 [a2 + 0x88]\n 12696: u64 [s1 + 0xc8] = a0\n 12700: a0 = s1 + 0x4000\n 12704: i32 a0 = a0 + 0xfffffffffffffcc0\n 12708: a1 = 0x24\n 12711: ecalli 1 // 'call_data_load'\n 12713: a0 = s1 + 0x3858\n 12717: a2 = a0 + 0x400\n 12721: a1 = u64 [a2 + 0x80]\n 12725: u64 [s1 + 0x88] = a1\n 12729: a1 = u64 [a2 + 0x78]\n 12732: u64 [s1 + 0x90] = a1\n 12736: a1 = u64 [a2 + 0x70]\n 12739: u64 [s1 + 0x98] = a1\n 12743: a0 = u64 [a2 + 0x68]\n 12746: u64 [s1 + 0xb0] = a0\n 12750: a0 = 0x301b0\n 12755: u64 [s1 + 0xb8] = a0\n 12759: i32 a0 = a0 + 0\n 12761: u64 [s1 + 0xa8] = a0\n 12765: ra = 0x19e\n 12769: ecalli 3 // 'caller'\n 12771: a2 = u64 [s1 + 0xb8]\n 12775: t0 = 0x1a0\n 12779: jump @1520\n      : @441 [@dyn 207] (gas: 2)\n 12782: a2 = u64 [s1 + 0xb8]\n 12786: t0 = 416, jump @1520\n      : @442 [@dyn 208] (gas: 8)\n 12792: u64 [a2 + 896] = 0\n 12796: a4 = a2 + 0x300\n 12800: u64 [a4 + 0x78] = a1\n 12803: u64 [a4 + 0x70] = a0\n 12806: a1 = s1 + 0x2bc0\n 12810: u64 [a4 + 0x68] = a3\n 12813: a0 = 0\n 12815: ra = 418, jump @25\n      : @443 [@dyn 209] (gas: 3)\n 12821: t0 = 0x1a4\n 12825: a1 = s1 + 0x2858\n 12829: fallthrough\n      : @444 [@dyn 210] (gas: 8)\n 12830: u64 [a1 + 864] = 0\n 12834: u64 [a1 + 856] = 0\n 12838: u64 [a1 + 840] = 0x5\n 12843: a2 = a1\n 12845: a0 = 0x20\n 12848: a1 = s1 + 0x2ba0\n 12852: u64 [a2 + 848] = 0\n 12856: ra = 422, jump @25\n      : @445 [@dyn 211] (gas: 3)\n 12862: a1 = 0x2019c\n 12867: a0 = i32 [0x2019c]\n 12872: jump @447 if a0 >u 63\n      : @446 (gas: 2)\n 12876: u32 [0x2019c] = 0x40\n 12882: fallthrough\n      : @447 (gas: 15)\n 12883: a0 = sp + 0xffffffffffffffe0\n 12886: a2 = a0 & 0xffffffffffffffe0\n 12889: u64 [s1 + 0x80] = a2\n 12893: sp = a2\n 12895: a0 = 0x201b0\n 12900: i32 a0 = a0 + 0\n 12902: i32 a2 = a2 + 0\n 12904: u64 [s1 + 0xd8] = a1\n 12908: a1 = 0x40\n 12911: u64 [s1 + 0xd0] = a0\n 12915: ra = 0x1a8\n 12919: ecalli 6 // 'hash_keccak_256'\n 12921: a3 = u64 [s1 + 0x80]\n 12925: t0 = 0x1aa\n 12929: jump @1579\n      : @448 [@dyn 212] (gas: 2)\n 12933: a3 = u64 [s1 + 0x80]\n 12937: t0 = 426, jump @1579\n      : @449 [@dyn 213] (gas: 26)\n 12944: u64 [s1 + 0x78] = a0\n 12947: a0 = reverse a1\n 12949: u64 [s1 + 0x70] = a0\n 12952: a0 = reverse a2\n 12954: u64 [s1 + 0x68] = a0\n 12957: a0 = reverse a3\n 12959: u64 [s1 + 0x60] = a0\n 12962: a0 = sp + 0xffffffffffffffe0\n 12965: a0 = a0 & 0xffffffffffffffe0\n 12968: u64 [s1 + 0x80] = a0\n 12972: sp = a0\n 12974: a0 = u64 [s1 + 0xa0]\n 12978: a0 = a0 << 0x20\n 12981: a1 = a0 >> 0x20\n 12984: a2 = s1 + 0x2858\n 12988: u64 [a2 + 832] = 0\n 12992: u64 [s1 + 0xa0] = a1\n 12996: a3 = a2 + 0x300\n 13000: u64 [a3 + 0x38] = a1\n 13003: a0 = u64 [s1 + 0xc0]\n 13007: u64 [a3 + 0x30] = a0\n 13010: a1 = s1 + 0x2b80\n 13014: a0 = u64 [s1 + 0xc8]\n 13018: u64 [a3 + 0x28] = a0\n 13021: a0 = 0\n 13023: ra = 428, jump @25\n      : @450 [@dyn 214] (gas: 14)\n 13029: a0 = u64 [s1 + 0x60]\n 13032: a1 = s1 + 0x2858\n 13036: a2 = a1 + 0x300\n 13040: u64 [a2 + 0x20] = a0\n 13043: a0 = u64 [s1 + 0x68]\n 13046: u64 [a2 + 0x18] = a0\n 13049: a0 = u64 [s1 + 0x70]\n 13052: u64 [a2 + 0x10] = a0\n 13055: a3 = a1\n 13057: a0 = 0x20\n 13060: a1 = s1 + 0x2b60\n 13064: a2 = u64 [s1 + 0x78]\n 13067: u64 [a3 + 0x308] = a2\n 13071: ra = 430, jump @25\n      : @451 [@dyn 215] (gas: 3)\n 13077: a1 = u64 [s1 + 0xd8]\n 13081: a0 = i32 [a1]\n 13083: jump @453 if a0 >u 63\n      : @452 (gas: 2)\n 13087: u32 [a1 + 0] = 0x40\n 13090: fallthrough\n      : @453 (gas: 4)\n 13091: a0 = sp + 0xffffffffffffffe0\n 13094: a0 = a0 & 0xffffffffffffffe0\n 13097: u64 [s1 + 0x78] = a0\n 13100: t0 = 432, jump @1535\n      : @454 [@dyn 216] (gas: 5)\n 13106: ra = 0x1b2\n 13110: ecalli 6 // 'hash_keccak_256'\n 13112: a3 = u64 [s1 + 0x78]\n 13115: t0 = 0x1b4\n 13119: jump @1529\n      : @455 [@dyn 217] (gas: 2)\n 13122: a3 = u64 [s1 + 0x78]\n 13125: t0 = 436, jump @1529\n      : @456 [@dyn 218] (gas: 7)\n 13131: a1 = u64 [s1 + 0x80]\n 13135: u64 [a1 + 0x18] = a3\n 13138: u64 [a1 + 0x10] = a2\n 13141: u64 [a1 + 0x8] = a4\n 13144: u64 [a1] = a0\n 13146: a0 = s1 + 0x2b40\n 13150: ra = 438, jump @27\n      : @457 [@dyn 219] (gas: 25)\n 13156: t2 = s1 + 0x2858\n 13160: a2 = u64 [t2 + 0x300]\n 13164: a3 = u64 [t2 + 0x2f0]\n 13168: ra = u64 [t2 + 0x2f8]\n 13172: a0 = u64 [t2 + 0x2e8]\n 13176: t1 = u64 [s1 + 0x88]\n 13180: a4 = a2 ^ t1\n 13183: t0 = u64 [s1 + 0x98]\n 13187: a5 = a3 ^ t0\n 13190: u64 [s1 + 0x68] = a3\n 13193: a3 = a3 <u t0\n 13196: u64 [s1 + 0x78] = a0\n 13199: a1 = u64 [s1 + 0xb0]\n 13203: a0 = a0 <u a1\n 13206: a1 = ra\n 13208: a0 = a3 if a5 != 0\n 13211: u64 [s1 + 0x70] = a2\n 13214: a3 = a2 <u t1\n 13217: ra = u64 [s1 + 0x90]\n 13221: a5 = a1 <u ra\n 13224: a5 = a3 if a4 != 0\n 13227: a3 = a1 ^ ra\n 13230: a3 = a3 | a4\n 13233: a0 = a5 if a3 != 0\n 13236: jump @459 if a0 != 0\n      : @458 (gas: 1)\n 13239: jump @776\n      : @459 (gas: 3)\n 13242: a0 = s1 + 0x28c0\n 13246: a1 = 0x40\n 13249: ra = 440, jump @23\n      : @460 [@dyn 220] (gas: 13)\n 13255: a2 = s1 + 0x2858\n 13259: t0 = u64 [a2 + 0x80]\n 13263: a5 = u64 [a2 + 0x78]\n 13266: a4 = u64 [a2 + 0x70]\n 13269: a0 = u64 [a2 + 0x68]\n 13272: a3 = a4 | t0\n 13275: a1 = a0 | a5\n 13278: a1 = a1 | a3\n 13281: a1 = a1 >> 0x20\n 13284: a3 = a3 | a5\n 13287: a3 = a3 << 0x20\n 13290: a1 = a1 | a3\n 13293: jump @462 if a1 == 0\n      : @461 (gas: 1)\n 13296: jump @1003\n      : @462 (gas: 11)\n 13299: u64 [a2 + 88] = 0\n 13302: u64 [a2 + 80] = 0\n 13305: u64 [a2 + 72] = 0\n 13308: a3 = 0x8c379a000000000\n 13318: a1 = s1 + 0x28a0\n 13322: u64 [a2 + 0x60] = a3\n 13325: u64 [s1 + 0xd8] = a0\n 13329: u64 [s1 + 0xd0] = a4\n 13333: u64 [s1 + 0xc0] = t0\n 13337: u64 [s1 + 0xc8] = a5\n 13341: ra = 442, jump @25\n      : @463 [@dyn 221] (gas: 1)\n 13347: t0 = 444, jump @1524\n      : @464 [@dyn 222] (gas: 1)\n 13353: jump @466 if a0 != 0\n      : @465 (gas: 1)\n 13356: jump @1003\n      : @466 (gas: 11)\n 13359: i32 a0 = a1 + 0x4\n 13362: a2 = s1 + 0x2858\n 13366: a5 = 0\n 13368: u64 [a2 + 64] = 0\n 13371: u64 [a2 + 56] = 0\n 13374: u64 [a2 + 40] = 0x20\n 13378: a1 = s1 + 0x2880\n 13382: u64 [a2 + 48] = 0\n 13385: u64 [s1 + 0xc8] = a3\n 13389: u64 [s1 + 0xc0] = a4\n 13393: ra = 446, jump @25\n      : @467 [@dyn 223] (gas: 1)\n 13399: t0 = 448, jump @1547\n      : @468 [@dyn 224] (gas: 1)\n 13405: jump @470 if a0 != 0\n      : @469 (gas: 1)\n 13408: jump @1003\n      : @470 (gas: 8)\n 13411: i32 a0 = a1 + 0x24\n 13414: a2 = s1 + 0x2858\n 13418: u64 [a2 + 32] = 0\n 13421: u64 [a2 + 24] = 0\n 13424: u64 [a2 + 8] = 0x1e\n 13428: a1 = s1 + 0x2860\n 13432: u64 [a2 + 16] = 0\n 13435: ra = 450, jump @25\n      : @471 [@dyn 225] (gas: 1)\n 13441: t0 = 452, jump @1534\n      : @472 [@dyn 226] (gas: 1)\n 13447: jump @474 if a0 != 0\n      : @473 (gas: 1)\n 13450: jump @1003\n      : @474 (gas: 14)\n 13453: i32 a0 = a3 + 0x44\n 13456: a1 = u64 [0x20070]\n 13461: a4 = s1 + 0x2858\n 13465: u64 [a4] = a1\n 13467: a1 = u64 [0x20078]\n 13472: a2 = u64 [0x20080]\n 13477: a3 = u64 [0x20088]\n 13482: a5 = a4 + 0xffffffffffffff00\n 13486: u64 [a5 + 0xf8] = a1\n 13490: u64 [a5 + 0xf0] = a2\n 13494: a1 = s1 + 0x2840\n 13498: u64 [a5 + 0xe8] = a3\n 13502: ra = 0x4bc\n 13506: jump @25\n      : @475 (gas: 8)\n 13509: u64 [a2 + 96] = 0\n 13512: u64 [a2 + 88] = 0\n 13515: u64 [a2 + 80] = 0\n 13518: u64 [a2 + 72] = 0\n 13521: a0 = s1 + 0x4000\n 13525: i32 a0 = a0 + 0xfffffffffffff8a0\n 13529: ecalli 10 // 'value_transferred'\n 13531: fallthrough\n      : @476 (gas: 9)\n 13532: a3 = s1 + 0x3858\n 13536: a0 = u64 [a3 + 0x58]\n 13539: a1 = u64 [a3 + 0x60]\n 13542: a2 = u64 [a3 + 0x50]\n 13545: a3 = u64 [a3 + 0x48]\n 13548: a1 = a1 | a2\n 13551: a0 = a0 | a3\n 13554: a0 = a0 | a1\n 13557: jump @478 if a0 == 0\n      : @477 (gas: 1)\n 13560: jump @1129\n      : @478 (gas: 3)\n 13563: a0 = u64 [s1 + 0x18]\n 13566: a0 = i32 [a0]\n 13568: jump @480 if a0 >u 35\n      : @479 (gas: 1)\n 13572: jump @1130\n      : @480 (gas: 22)\n 13575: a0 = s1 + 0x4000\n 13579: i32 a0 = a0 + 0xfffffffffffff8c0\n 13583: a1 = 0x4\n 13586: ecalli 1 // 'call_data_load'\n 13588: a0 = s1 + 0x3858\n 13592: a1 = u64 [a0 + 0x80]\n 13596: u64 [s1 + 0xd8] = a1\n 13600: a1 = u64 [a0 + 0x78]\n 13603: u64 [s1 + 0xd0] = a1\n 13607: a1 = u64 [a0 + 0x70]\n 13610: u64 [s1 + 0xc8] = a1\n 13614: a0 = u64 [a0 + 0x68]\n 13617: u64 [s1 + 0xc0] = a0\n 13621: a0 = 0x301b0\n 13626: u64 [s1 + 0xb8] = a0\n 13630: i32 a0 = a0 + 0\n 13632: u64 [s1 + 0xa8] = a0\n 13636: ra = 0x1c6\n 13640: ecalli 3 // 'caller'\n 13642: a2 = u64 [s1 + 0xb8]\n 13646: t0 = 0x1c8\n 13650: jump @1521\n      : @481 [@dyn 227] (gas: 2)\n 13653: a2 = u64 [s1 + 0xb8]\n 13657: t0 = 456, jump @1521\n      : @482 [@dyn 228] (gas: 8)\n 13663: u64 [a2 + 1984] = 0\n 13667: a4 = a2 + 0x700\n 13671: u64 [a4 + 0xb8] = a1\n 13675: u64 [a4 + 0xb0] = a0\n 13679: a1 = s1 + 0x1800\n 13683: u64 [a4 + 0xa8] = a3\n 13687: a0 = 0\n 13689: ra = 458, jump @25\n      : @483 [@dyn 229] (gas: 3)\n 13695: t0 = 0x1cc\n 13699: a1 = s1 + 0x1058\n 13703: fallthrough\n      : @484 [@dyn 230] (gas: 8)\n 13704: u64 [a1 + 1952] = 0\n 13708: u64 [a1 + 1944] = 0\n 13712: u64 [a1 + 1928] = 0x4\n 13717: a2 = a1\n 13719: a0 = 0x20\n 13722: a1 = s1 + 0x17e0\n 13726: u64 [a2 + 1936] = 0\n 13730: ra = 462, jump @25\n      : @485 [@dyn 231] (gas: 3)\n 13736: a2 = 0x2019c\n 13741: a0 = i32 [0x2019c]\n 13746: jump @487 if a0 >u 63\n      : @486 (gas: 2)\n 13750: u32 [0x2019c] = 0x40\n 13756: fallthrough\n      : @487 (gas: 15)\n 13757: u64 [s1 + 0x98] = a2\n 13761: a0 = sp + 0xffffffffffffffe0\n 13764: a2 = a0 & 0xffffffffffffffe0\n 13767: u64 [s1 + 0xb0] = a2\n 13771: sp = a2\n 13773: a0 = 0x201b0\n 13778: i32 a0 = a0 + 0\n 13780: i32 a2 = a2 + 0\n 13782: a1 = 0x40\n 13785: u64 [s1 + 0xa0] = a0\n 13789: ra = 0x1d0\n 13793: ecalli 6 // 'hash_keccak_256'\n 13795: a3 = u64 [s1 + 0xb0]\n 13799: t0 = 0x1d2\n 13803: jump @1538\n      : @488 [@dyn 232] (gas: 2)\n 13806: a3 = u64 [s1 + 0xb0]\n 13810: t0 = 466, jump @1538\n      : @489 [@dyn 233] (gas: 7)\n 13816: u64 [a4 + 0xa0] = a3\n 13820: u64 [a4 + 0x98] = a2\n 13824: u64 [a4 + 0x90] = a1\n 13828: u64 [a4 + 0x88] = a0\n 13832: a0 = s1 + 0x17c0\n 13836: a1 = s1 + 0x38e0\n 13840: ra = 468, jump @27\n      : @490 [@dyn 234] (gas: 3)\n 13846: t0 = 0x1d6\n 13850: a3 = s1 + 0x1058\n 13854: fallthrough\n      : @491 [@dyn 235] (gas: 21)\n 13855: a4 = a3 + 0x700\n 13859: a0 = u64 [a4 + 0x70]\n 13862: a1 = u64 [a4 + 0x68]\n 13865: a2 = u64 [a4 + 0x78]\n 13868: a3 = u64 [a4 + 0x80]\n 13872: a5 = u64 [s1 + 0xc8]\n 13876: a4 = a0 ^ a5\n 13879: a0 = a0 <u a5\n 13882: a5 = u64 [s1 + 0xc0]\n 13886: a1 = a1 <u a5\n 13889: a1 = a0 if a4 != 0\n 13892: a4 = u64 [s1 + 0xd8]\n 13896: a0 = a3 ^ a4\n 13899: a3 = a3 <u a4\n 13902: a5 = u64 [s1 + 0xd0]\n 13906: a4 = a2 <u a5\n 13909: a4 = a3 if a0 != 0\n 13912: a2 = a2 ^ a5\n 13915: a0 = a0 | a2\n 13918: a1 = a4 if a0 != 0\n 13921: jump @493 if a1 != 0\n      : @492 (gas: 1)\n 13924: jump @860\n      : @493 (gas: 3)\n 13927: a0 = s1 + 0x1540\n 13931: a1 = 0x40\n 13934: ra = 472, jump @23\n      : @494 [@dyn 236] (gas: 2)\n 13940: a3 = s1 + 0x1058\n 13944: fallthrough\n      : @495 (gas: 13)\n 13945: t0 = u64 [a3 + 0x500]\n 13949: a1 = a3 + 0x400\n 13953: a5 = u64 [a1 + 0xf8]\n 13957: a4 = u64 [a1 + 0xf0]\n 13961: a0 = u64 [a1 + 0xe8]\n 13965: a2 = a4 | t0\n 13968: a1 = a0 | a5\n 13971: a1 = a1 | a2\n 13974: a1 = a1 >> 0x20\n 13977: a2 = a2 | a5\n 13980: a2 = a2 << 0x20\n 13983: a1 = a1 | a2\n 13986: jump @497 if a1 == 0\n      : @496 (gas: 1)\n 13989: jump @1003\n      : @497 (gas: 12)\n 13992: a2 = a3\n 13994: u64 [a3 + 1240] = 0\n 13998: u64 [a3 + 1232] = 0\n 14002: u64 [a3 + 1224] = 0\n 14006: a3 = 0x8c379a000000000\n 14016: a1 = s1 + 0x1520\n 14020: u64 [a2 + 0x4e0] = a3\n 14024: u64 [s1 + 0xd8] = a0\n 14028: u64 [s1 + 0xd0] = a4\n 14032: u64 [s1 + 0xc0] = t0\n 14036: u64 [s1 + 0xc8] = a5\n 14040: ra = 474, jump @25\n      : @498 [@dyn 237] (gas: 1)\n 14046: t0 = 476, jump @1524\n      : @499 [@dyn 238] (gas: 1)\n 14052: jump @501 if a0 != 0\n      : @500 (gas: 1)\n 14055: jump @1003\n      : @501 (gas: 10)\n 14058: i32 a0 = a1 + 0x4\n 14061: a2 = s1 + 0x1058\n 14065: u64 [a2 + 1216] = 0\n 14069: u64 [a2 + 1208] = 0\n 14073: u64 [a2 + 1192] = 0x20\n 14078: a1 = s1 + 0x1500\n 14082: u64 [a2 + 1200] = 0\n 14086: u64 [s1 + 0xc8] = a3\n 14090: u64 [s1 + 0xc0] = a4\n 14094: ra = 478, jump @25\n      : @502 [@dyn 239] (gas: 1)\n 14100: t0 = 480, jump @1547\n      : @503 [@dyn 240] (gas: 1)\n 14106: jump @505 if a0 != 0\n      : @504 (gas: 1)\n 14109: jump @1003\n      : @505 (gas: 8)\n 14112: i32 a0 = a1 + 0x24\n 14115: a2 = s1 + 0x1058\n 14119: u64 [a2 + 1184] = 0\n 14123: u64 [a2 + 1176] = 0\n 14127: u64 [a2 + 1160] = 0x1c\n 14132: a1 = s1 + 0x14e0\n 14136: u64 [a2 + 1168] = 0\n 14140: ra = 482, jump @25\n      : @506 [@dyn 241] (gas: 1)\n 14146: t0 = 484, jump @1534\n      : @507 [@dyn 242] (gas: 1)\n 14152: jump @509 if a0 != 0\n      : @508 (gas: 1)\n 14155: jump @1003\n      : @509 (gas: 14)\n 14158: i32 a0 = a3 + 0x44\n 14161: a1 = u64 [0x20108]\n 14166: a2 = u64 [0x20110]\n 14171: a3 = u64 [0x20118]\n 14176: a4 = s1 + 0x1058\n 14180: a5 = a4 + 0x400\n 14184: u64 [a5 + 0x80] = a1\n 14188: u64 [a5 + 0x78] = a2\n 14191: u64 [a5 + 0x70] = a3\n 14194: a2 = 0x6275726e00000000\n 14204: a1 = s1 + 0x14c0\n 14208: u64 [a5 + 0x68] = a2\n 14211: ra = 0x4bc\n 14215: jump @25\n      : @510 (gas: 9)\n 14218: u64 [a3 + 1568] = 0\n 14222: u64 [a3 + 1560] = 0\n 14226: u64 [a3 + 1552] = 0\n 14230: u64 [a3 + 1544] = 0\n 14234: a0 = s1 + 0x3000\n 14238: i32 a0 = a0 + 0x660\n 14242: ra = 0x1e6\n 14246: ecalli 10 // 'value_transferred'\n 14248: fallthrough\n      : @511 [@dyn 243] (gas: 3)\n 14249: a3 = s1 + 0x3058\n 14253: a4 = a3 + 0x600\n 14257: t0 = 488, jump @1557\n      : @512 [@dyn 244] (gas: 1)\n 14263: jump @514 if a0 == 0\n      : @513 (gas: 1)\n 14266: jump @1131\n      : @514 (gas: 4)\n 14269: a0 = u64 [s1 + 0x18]\n 14272: a0 = i32 [a0]\n 14274: a1 = 0x63\n 14277: jump @516 if a1 <u a0\n      : @515 (gas: 1)\n 14280: jump @1132\n      : @516 (gas: 5)\n 14283: a0 = s1 + 0x7ff\n 14287: a0 = a0 + 0x6c1\n 14291: ra = 0x1ea\n 14295: t0 = 0x504\n 14299: jump @1574\n      : @517 [@dyn 245] (gas: 13)\n 14302: a1 = s1 + 0x7ff\n 14306: a1 = a1 + 0x51\n 14309: a0 = u64 [a1 + 0x670]\n 14313: u64 [s1 + 0xa8] = a0\n 14317: a0 = u64 [a1 + 0x678]\n 14321: u64 [s1 + 0xa0] = a0\n 14325: a0 = u32 [a1 + 0x680]\n 14329: u64 [s1 + 0x98] = a0\n 14333: a0 = s1 + 0x7ff\n 14337: a0 = a0 + 0x6a1\n 14341: ra = 0x1ec\n 14345: t0 = 0x50e\n 14349: jump @1574\n      : @518 [@dyn 246] (gas: 37)\n 14352: a1 = s1 + 0x7ff\n 14356: a1 = a1 + 0x51\n 14359: a2 = a1 + 0x600\n 14363: a0 = u64 [a2 + 0x60]\n 14366: u64 [s1 + 0x58] = a0\n 14369: a0 = u64 [a2 + 0x58]\n 14372: u64 [s1 + 0x48] = a0\n 14375: a0 = u64 [a2 + 0x50]\n 14378: u64 [s1 + 0x50] = a0\n 14381: a0 = s1 + 0x3000\n 14385: i32 a0 = a0 + 0x680\n 14389: a1 = 0x44\n 14392: ecalli 1 // 'call_data_load'\n 14394: a0 = s1 + 0x3058\n 14398: a2 = a0 + 0x600\n 14402: a1 = u64 [a2 + 0x40]\n 14405: u64 [s1 + 0xc8] = a1\n 14409: a1 = u64 [a2 + 0x38]\n 14412: u64 [s1 + 0xc0] = a1\n 14416: a1 = u64 [a2 + 0x30]\n 14419: u64 [s1 + 0xb8] = a1\n 14423: a0 = u64 [a2 + 0x28]\n 14426: u64 [s1 + 0xb0] = a0\n 14430: a0 = s1 + 0x7ff\n 14434: a0 = a0 + 0x51\n 14437: u64 [a0 + 1608] = 0\n 14441: a1 = u64 [s1 + 0x98]\n 14445: a3 = a0 + 0x600\n 14449: u64 [a3 + 0x40] = a1\n 14452: a1 = u64 [s1 + 0xa0]\n 14456: u64 [a3 + 0x38] = a1\n 14459: a1 = s1 + 0x7ff\n 14463: a1 = a1 + 0x681\n 14467: a2 = u64 [s1 + 0xa8]\n 14471: u64 [a3 + 0x30] = a2\n 14474: a0 = 0\n 14476: ra = 494, jump @25\n      : @519 [@dyn 247] (gas: 11)\n 14482: a1 = s1 + 0x7ff\n 14486: a1 = a1 + 0x51\n 14489: u64 [a1 + 1576] = 0\n 14493: u64 [a1 + 1568] = 0\n 14497: u64 [a1 + 1552] = 0x4\n 14502: a2 = a1\n 14504: a0 = 0x20\n 14507: a1 = s1 + 0x7ff\n 14511: a1 = a1 + 0x661\n 14515: u64 [a2 + 1560] = 0\n 14519: ra = 496, jump @25\n      : @520 [@dyn 248] (gas: 3)\n 14525: a1 = 0x2019c\n 14530: a0 = i32 [0x2019c]\n 14535: jump @522 if a0 >u 63\n      : @521 (gas: 2)\n 14539: u32 [0x2019c] = 0x40\n 14545: fallthrough\n      : @522 (gas: 15)\n 14546: a0 = sp + 0xffffffffffffffe0\n 14549: a2 = a0 & 0xffffffffffffffe0\n 14552: u64 [s1 + 0x90] = a2\n 14556: sp = a2\n 14558: a0 = 0x201b0\n 14563: i32 a0 = a0 + 0\n 14565: i32 a2 = a2 + 0\n 14567: u64 [s1 + 0xd8] = a1\n 14571: a1 = 0x40\n 14574: u64 [s1 + 0xd0] = a0\n 14578: ra = 0x1f2\n 14582: ecalli 6 // 'hash_keccak_256'\n 14584: a3 = u64 [s1 + 0x90]\n 14588: t0 = 0x1f4\n 14592: jump @1553\n      : @523 [@dyn 249] (gas: 2)\n 14595: a3 = u64 [s1 + 0x90]\n 14599: t0 = 500, jump @1553\n      : @524 [@dyn 250] (gas: 9)\n 14605: a5 = a4 + 0x600\n 14609: u64 [a5 + 0x60] = a3\n 14612: u64 [a5 + 0x58] = a2\n 14615: u64 [a5 + 0x50] = a1\n 14618: u64 [a5 + 0x48] = a0\n 14621: a0 = s1 + 0x7ff\n 14625: a0 = a0 + 0x641\n 14629: a1 = s1 + 0x36a0\n 14633: ra = 502, jump @27\n      : @525 [@dyn 251] (gas: 32)\n 14639: a4 = s1 + 0x7ff\n 14643: a4 = a4 + 0x51\n 14646: a0 = u64 [a4 + 0x5f8]\n 14650: a1 = u64 [a4 + 0x5f0]\n 14654: a2 = u64 [a4 + 0x600]\n 14658: a3 = u64 [a4 + 0x608]\n 14662: t0 = a4\n 14664: a5 = u64 [s1 + 0xb8]\n 14668: a4 = a0 ^ a5\n 14671: a0 = a0 <u a5\n 14674: a5 = u64 [s1 + 0xb0]\n 14678: a1 = a1 <u a5\n 14681: a1 = a0 if a4 != 0\n 14684: a4 = u64 [s1 + 0xc8]\n 14688: a0 = a3 ^ a4\n 14691: a3 = a3 <u a4\n 14694: a5 = u64 [s1 + 0xc0]\n 14698: a4 = a2 <u a5\n 14701: a4 = a3 if a0 != 0\n 14704: a2 = a2 ^ a5\n 14707: a0 = a0 | a2\n 14710: a1 = a4 if a0 != 0\n 14713: a0 = a1 ^ 0x1\n 14716: u64 [t0 + 1512] = 0\n 14720: u64 [t0 + 1504] = 0\n 14724: u64 [t0 + 0x5d0] = a0\n 14728: a0 = s1 + 0x7ff\n 14732: a0 = a0 + 0x621\n 14736: u64 [t0 + 1496] = 0\n 14740: ra = 0x1f8\n 14744: t0 = 0x564\n 14748: jump @1542\n      : @526 [@dyn 252] (gas: 14)\n 14751: a2 = s1 + 0x7ff\n 14755: a2 = a2 + 0x51\n 14758: u64 [a2 + 1480] = 0\n 14762: a0 = u64 [s1 + 0x98]\n 14766: a3 = a2 + 0x500\n 14770: u64 [a3 + 0xc0] = a0\n 14774: a0 = u64 [s1 + 0xa0]\n 14778: u64 [a3 + 0xb8] = a0\n 14782: a1 = s1 + 0x7ff\n 14786: a1 = a1 + 0x601\n 14790: a0 = u64 [s1 + 0xa8]\n 14794: u64 [a3 + 0xb0] = a0\n 14798: a0 = 0\n 14800: ra = 506, jump @25\n      : @527 [@dyn 253] (gas: 11)\n 14806: a1 = s1 + 0x7ff\n 14810: a1 = a1 + 0x51\n 14813: u64 [a1 + 1448] = 0\n 14817: u64 [a1 + 1440] = 0\n 14821: u64 [a1 + 1424] = 0x5\n 14826: a2 = a1\n 14828: a0 = 0x20\n 14831: a1 = s1 + 0x7ff\n 14835: a1 = a1 + 0x5e1\n 14839: u64 [a2 + 1432] = 0\n 14843: ra = 508, jump @25\n      : @528 [@dyn 254] (gas: 3)\n 14849: a1 = u64 [s1 + 0xd8]\n 14853: a0 = i32 [a1]\n 14855: jump @530 if a0 >u 63\n      : @529 (gas: 2)\n 14859: u32 [a1 + 0] = 0x40\n 14862: fallthrough\n      : @530 (gas: 4)\n 14863: a0 = sp + 0xffffffffffffffe0\n 14866: a0 = a0 & 0xffffffffffffffe0\n 14869: u64 [s1 + 0x90] = a0\n 14873: t0 = 510, jump @1535\n      : @531 [@dyn 255] (gas: 5)\n 14879: ra = 0x200\n 14883: ecalli 6 // 'hash_keccak_256'\n 14885: a3 = u64 [s1 + 0x90]\n 14889: t0 = 0x202\n 14893: jump @1579\n      : @532 [@dyn 256] (gas: 2)\n 14896: a3 = u64 [s1 + 0x90]\n 14900: t0 = 514, jump @1579\n      : @533 [@dyn 257] (gas: 19)\n 14906: u64 [s1 + 0x80] = a0\n 14910: a0 = reverse a1\n 14912: u64 [s1 + 0x78] = a0\n 14915: a0 = reverse a2\n 14917: u64 [s1 + 0x70] = a0\n 14920: a0 = reverse a3\n 14922: u64 [s1 + 0x68] = a0\n 14925: a0 = sp + 0xffffffffffffffe0\n 14928: a0 = a0 & 0xffffffffffffffe0\n 14931: u64 [s1 + 0x88] = a0\n 14935: sp = a0\n 14937: a0 = 0x301b0\n 14942: u64 [s1 + 0x90] = a0\n 14946: i32 a0 = a0 + 0\n 14948: u64 [s1 + 0x60] = a0\n 14951: ra = 0x204\n 14955: ecalli 3 // 'caller'\n 14957: t0 = 0x206\n 14961: jump @1543\n      : @534 [@dyn 258] (gas: 1)\n 14964: t0 = 518, jump @1543\n      : @535 [@dyn 259] (gas: 9)\n 14970: u64 [a2 + 1416] = 0\n 14974: a4 = a2 + 0x500\n 14978: u64 [a4 + 0x80] = a1\n 14982: u64 [a4 + 0x78] = a0\n 14985: a1 = s1 + 0x7ff\n 14989: a1 = a1 + 0x5c1\n 14993: u64 [a4 + 0x70] = a3\n 14996: a0 = 0\n 14998: ra = 520, jump @25\n      : @536 [@dyn 260] (gas: 16)\n 15004: a0 = u64 [s1 + 0x68]\n 15007: a1 = s1 + 0x7ff\n 15011: a1 = a1 + 0x51\n 15014: a2 = a1 + 0x500\n 15018: u64 [a2 + 0x68] = a0\n 15021: a0 = u64 [s1 + 0x70]\n 15024: u64 [a2 + 0x60] = a0\n 15027: a0 = u64 [s1 + 0x78]\n 15030: u64 [a2 + 0x58] = a0\n 15033: a3 = a1\n 15035: a0 = 0x20\n 15038: a1 = s1 + 0x7ff\n 15042: a1 = a1 + 0x5a1\n 15046: a2 = u64 [s1 + 0x80]\n 15050: u64 [a3 + 0x550] = a2\n 15054: ra = 522, jump @25\n      : @537 [@dyn 261] (gas: 3)\n 15060: a1 = u64 [s1 + 0xd8]\n 15064: a0 = i32 [a1]\n 15066: jump @539 if a0 >=u 64\n      : @538 (gas: 2)\n 15070: u32 [a1 + 0] = 0x40\n 15073: fallthrough\n      : @539 (gas: 4)\n 15074: a0 = sp + 0xffffffffffffffe0\n 15077: a0 = a0 & 0xffffffffffffffe0\n 15080: u64 [s1 + 0x80] = a0\n 15084: t0 = 524, jump @1535\n      : @540 [@dyn 262] (gas: 5)\n 15090: ra = 0x20e\n 15094: ecalli 6 // 'hash_keccak_256'\n 15096: a3 = u64 [s1 + 0x80]\n 15100: t0 = 0x210\n 15104: jump @1523\n      : @541 [@dyn 263] (gas: 2)\n 15107: a3 = u64 [s1 + 0x80]\n 15111: t0 = 528, jump @1523\n      : @542 [@dyn 264] (gas: 2)\n 15117: a0 = a0 + 0x581\n 15121: ra = 530, jump @27\n      : @543 [@dyn 265] (gas: 23)\n 15127: t0 = s1 + 0x7ff\n 15131: t0 = t0 + 0x51\n 15134: a2 = t0 + 0x500\n 15138: a0 = u64 [a2 + 0x38]\n 15141: a1 = u64 [a2 + 0x30]\n 15144: a5 = u64 [a2 + 0x40]\n 15147: a3 = u64 [a2 + 0x48]\n 15150: a2 = u64 [s1 + 0xb8]\n 15154: a4 = a0 ^ a2\n 15157: a0 = a0 <u a2\n 15160: a2 = u64 [s1 + 0xb0]\n 15164: a1 = a1 <u a2\n 15167: a1 = a0 if a4 != 0\n 15170: a4 = u64 [s1 + 0xc8]\n 15174: a0 = a3 ^ a4\n 15177: a3 = a3 <u a4\n 15180: a2 = u64 [s1 + 0xc0]\n 15184: a4 = a5 <u a2\n 15187: a4 = a3 if a0 != 0\n 15190: a2 = a2 ^ a5\n 15193: a0 = a0 | a2\n 15196: a1 = a4 if a0 != 0\n 15199: jump @545 if a1 != 0\n      : @544 (gas: 1)\n 15202: jump @892\n      : @545 (gas: 4)\n 15205: a0 = s1 + 0x7ff\n 15209: a0 = a0 + 0x1e1\n 15213: a1 = 0x40\n 15216: ra = 532, jump @23\n      : @546 [@dyn 266] (gas: 15)\n 15222: a2 = s1 + 0x7ff\n 15226: a2 = a2 + 0x51\n 15229: t0 = u64 [a2 + 0x1a8]\n 15233: a1 = a2 + 0x100\n 15237: a5 = u64 [a1 + 0xa0]\n 15241: a4 = u64 [a1 + 0x98]\n 15245: a0 = u64 [a1 + 0x90]\n 15249: a3 = a4 | t0\n 15252: a1 = a0 | a5\n 15255: a1 = a1 | a3\n 15258: a1 = a1 >> 0x20\n 15261: a3 = a3 | a5\n 15264: a3 = a3 << 0x20\n 15267: a1 = a1 | a3\n 15270: jump @548 if a1 == 0\n      : @547 (gas: 1)\n 15273: jump @1003\n      : @548 (gas: 12)\n 15276: u64 [a2 + 384] = 0\n 15280: u64 [a2 + 376] = 0\n 15284: u64 [a2 + 368] = 0\n 15288: a3 = 0x8c379a000000000\n 15298: a1 = s1 + 0x7ff\n 15302: a1 = a1 + 0x1c1\n 15306: u64 [a2 + 0x188] = a3\n 15310: u64 [s1 + 0xd8] = a0\n 15314: u64 [s1 + 0xd0] = a4\n 15318: u64 [s1 + 0xc0] = t0\n 15322: u64 [s1 + 0xc8] = a5\n 15326: ra = 534, jump @25\n      : @549 [@dyn 267] (gas: 1)\n 15332: t0 = 536, jump @1524\n      : @550 [@dyn 268] (gas: 1)\n 15338: jump @552 if a0 != 0\n      : @551 (gas: 1)\n 15341: jump @1003\n      : @552 (gas: 12)\n 15344: i32 a0 = a1 + 0x4\n 15347: a2 = s1 + 0x7ff\n 15351: a2 = a2 + 0x51\n 15354: u64 [a2 + 360] = 0\n 15358: u64 [a2 + 352] = 0\n 15362: u64 [a2 + 336] = 0x20\n 15367: a1 = s1 + 0x7ff\n 15371: a1 = a1 + 0x1a1\n 15375: u64 [a2 + 344] = 0\n 15379: u64 [s1 + 0xc8] = a3\n 15383: u64 [s1 + 0xc0] = a4\n 15387: ra = 538, jump @25\n      : @553 [@dyn 269] (gas: 9)\n 15393: a3 = u64 [s1 + 0xc8]\n 15397: a2 = u64 [s1 + 0xd0]\n 15401: a1 = u64 [s1 + 0xd8]\n 15405: a0 = u64 [s1 + 0xc0]\n 15409: a0 = a0 + 0xffffffffffffffdc\n 15412: a0 = a1 <u a0\n 15415: a0 = 0 if a2 != 0\n 15417: a0 = 0 if a3 != 0\n 15419: jump @555 if a0 != 0\n      : @554 (gas: 1)\n 15422: jump @1003\n      : @555 (gas: 10)\n 15425: i32 a0 = a1 + 0x24\n 15428: a3 = s1 + 0x7ff\n 15432: a3 = a3 + 0x51\n 15435: u64 [a3 + 328] = 0\n 15439: u64 [a3 + 320] = 0\n 15443: u64 [a3 + 304] = 0x16\n 15448: a1 = s1 + 0x7ff\n 15452: a1 = a1 + 0x181\n 15456: u64 [a3 + 312] = 0\n 15460: ra = 540, jump @25\n      : @556 [@dyn 270] (gas: 1)\n 15466: t0 = 542, jump @1534\n      : @557 [@dyn 271] (gas: 1)\n 15472: jump @559 if a0 != 0\n      : @558 (gas: 1)\n 15475: jump @1003\n      : @559 (gas: 15)\n 15478: i32 a0 = a3 + 0x44\n 15481: a1 = u64 [0x20108]\n 15486: a2 = u64 [0x20120]\n 15491: a3 = u64 [0x20128]\n 15496: a4 = s1 + 0x7ff\n 15500: a4 = a4 + 0x51\n 15503: a5 = a4 + 0x100\n 15507: u64 [a5 + 0x28] = a1\n 15510: u64 [a5 + 0x20] = a2\n 15513: u64 [a5 + 0x18] = a3\n 15516: a1 = s1 + 0x7ff\n 15520: a1 = a1 + 0x161\n 15524: u64 [a4 + 272] = 0\n 15528: ra = 0x4bc\n 15532: jump @25\n      : @560 (gas: 1)\n 15535: jump @562 if a0 == 1889567281\n      : @561 (gas: 1)\n 15542: jump @1133\n      : @562 (gas: 9)\n 15545: u64 [a2 + 928] = 0\n 15549: u64 [a2 + 920] = 0\n 15553: u64 [a2 + 912] = 0\n 15557: u64 [a2 + 904] = 0\n 15561: a0 = s1 + 0x4000\n 15565: i32 a0 = a0 + 0xfffffffffffffbe0\n 15569: ra = 0x220\n 15573: ecalli 10 // 'value_transferred'\n 15575: fallthrough\n      : @563 [@dyn 272] (gas: 3)\n 15576: a3 = s1 + 0x3858\n 15580: a4 = a3 + 0x300\n 15584: t0 = 546, jump @1571\n      : @564 [@dyn 273] (gas: 1)\n 15590: jump @566 if a0 == 0\n      : @565 (gas: 1)\n 15593: jump @1138\n      : @566 (gas: 4)\n 15596: a0 = u64 [s1 + 0x18]\n 15599: a0 = i32 [a0]\n 15601: a1 = 0x23\n 15604: jump @568 if a1 <u a0\n      : @567 (gas: 1)\n 15607: jump @1139\n      : @568 (gas: 4)\n 15610: a0 = s1 + 0x25e0\n 15614: ra = 0x224\n 15618: t0 = 0x504\n 15622: jump @1574\n      : @569 [@dyn 274] (gas: 12)\n 15625: a3 = s1 + 0x2058\n 15629: a4 = a3 + 0x500\n 15633: a0 = u64 [a4 + 0x88]\n 15637: a1 = u64 [a4 + 0x90]\n 15641: a2 = u32 [a3 + 0x598]\n 15645: u64 [a3 + 1408] = 0\n 15649: u64 [a4 + 0x78] = a2\n 15652: u64 [a4 + 0x70] = a1\n 15655: a1 = s1 + 0x25c0\n 15659: u64 [a4 + 0x68] = a0\n 15662: a0 = 0\n 15664: ra = 550, jump @25\n      : @570 [@dyn 275] (gas: 3)\n 15670: t0 = 0x228\n 15674: a1 = s1 + 0x2058\n 15678: fallthrough\n      : @571 [@dyn 276] (gas: 8)\n 15679: u64 [a1 + 1376] = 0\n 15683: u64 [a1 + 1368] = 0\n 15687: u64 [a1 + 1352] = 0x4\n 15692: a2 = a1\n 15694: a0 = 0x20\n 15697: a1 = s1 + 0x25a0\n 15701: u64 [a2 + 1360] = 0\n 15705: ra = 554, jump @25\n      : @572 [@dyn 277] (gas: 2)\n 15711: a1 = i32 [0x2019c]\n 15716: jump @574 if a1 >u 63\n      : @573 (gas: 2)\n 15720: u32 [0x2019c] = 0x40\n 15726: fallthrough\n      : @574 (gas: 13)\n 15727: a0 = sp + 0xffffffffffffffe0\n 15730: a2 = a0 & 0xffffffffffffffe0\n 15733: u64 [s1 + 0xd8] = a2\n 15737: sp = a2\n 15739: a0 = 0x201b0\n 15744: i32 a0 = a0 + 0\n 15746: i32 a2 = a2 + 0\n 15748: a1 = 0x40\n 15751: ra = 0x22c\n 15755: ecalli 6 // 'hash_keccak_256'\n 15757: a3 = u64 [s1 + 0xd8]\n 15761: t0 = 0x22e\n 15765: jump @1538\n      : @575 [@dyn 278] (gas: 2)\n 15768: a3 = u64 [s1 + 0xd8]\n 15772: t0 = 558, jump @1538\n      : @576 [@dyn 279] (gas: 8)\n 15778: a5 = a4 + 0x300\n 15782: u64 [a5 + 0xc0] = a3\n 15786: u64 [a5 + 0xb8] = a2\n 15790: u64 [a5 + 0xb0] = a1\n 15794: u64 [a5 + 0xa8] = a0\n 15798: a0 = s1 + 0x2580\n 15802: a1 = s1 + 0x3c00\n 15806: ra = 560, jump @27\n      : @577 [@dyn 280] (gas: 13)\n 15812: a1 = s1 + 0x2058\n 15816: a2 = a1 + 0x500\n 15820: a0 = u64 [a2 + 0x40]\n 15823: u64 [s1 + 0xd8] = a0\n 15827: a0 = u64 [a2 + 0x38]\n 15830: u64 [s1 + 0xd0] = a0\n 15834: a0 = u64 [a2 + 0x30]\n 15837: u64 [s1 + 0xc8] = a0\n 15841: a0 = u64 [a2 + 0x28]\n 15844: u64 [s1 + 0xc0] = a0\n 15848: a0 = s1 + 0x2560\n 15852: a1 = 0x40\n 15855: ra = 562, jump @23\n      : @578 [@dyn 281] (gas: 7)\n 15861: a3 = s1 + 0x2058\n 15865: a5 = a3 + 0x500\n 15869: a0 = u64 [a5 + 0x20]\n 15872: a1 = u64 [a5 + 0x18]\n 15875: a2 = u64 [a5 + 0x10]\n 15878: a4 = u64 [a5 + 0x8]\n 15881: t0 = 564, jump @1526\n      : @579 [@dyn 282] (gas: 1)\n 15887: jump @581 if a0 == 0\n      : @580 (gas: 1)\n 15890: jump @1003\n      : @581 (gas: 14)\n 15893: a0 = u64 [s1 + 0xc0]\n 15897: a1 = a3 + 0x400\n 15901: u64 [a1 + 0xe8] = a0\n 15905: a0 = u64 [s1 + 0xc8]\n 15909: u64 [a1 + 0xf0] = a0\n 15913: a0 = u64 [s1 + 0xd0]\n 15917: u64 [a1 + 0xf8] = a0\n 15921: a1 = s1 + 0x2540\n 15925: a0 = u64 [s1 + 0xd8]\n 15929: u64 [a3 + 0x500] = a0\n 15933: a0 = a4\n 15935: u64 [s1 + 0xd8] = a4\n 15939: ra = 0x410\n 15943: jump @25\n      : @582 (gas: 9)\n 15946: a0 = s1 + 0x3858\n 15950: u64 [a0 + 992] = 0\n 15954: u64 [a0 + 984] = 0\n 15958: u64 [a0 + 976] = 0\n 15962: u64 [a0 + 968] = 0\n 15966: a0 = s1 + 0x4000\n 15970: i32 a0 = a0 + 0xfffffffffffffc20\n 15974: ecalli 10 // 'value_transferred'\n 15976: fallthrough\n      : @583 (gas: 10)\n 15977: a4 = s1 + 0x3858\n 15981: a5 = a4 + 0x300\n 15985: a0 = u64 [a5 + 0xd8]\n 15989: a1 = u64 [a5 + 0xe0]\n 15993: a2 = u64 [a5 + 0xd0]\n 15997: a3 = u64 [a5 + 0xc8]\n 16001: a1 = a1 | a2\n 16004: a0 = a0 | a3\n 16007: a0 = a0 | a1\n 16010: jump @585 if a0 == 0\n      : @584 (gas: 1)\n 16013: jump @1140\n      : @585 (gas: 3)\n 16016: a0 = u64 [s1 + 0x18]\n 16019: a0 = i32 [a0]\n 16021: jump @587 if a0 >u 3\n      : @586 (gas: 1)\n 16025: jump @1141\n      : @587 (gas: 7)\n 16028: u64 [a4 + 1024] = 0\n 16032: u64 [a4 + 1016] = 0\n 16036: u64 [a4 + 1008] = 0\n 16040: u64 [a4 + 1000] = 0x6\n 16045: a0 = s1 + 0x2640\n 16049: a1 = s1 + 0x3c40\n 16053: ra = 566, jump @27\n      : @588 [@dyn 283] (gas: 11)\n 16059: a1 = s1 + 0x2058\n 16063: a2 = a1 + 0x500\n 16067: a0 = u64 [a2 + 0xf8]\n 16071: u64 [s1 + 0xc8] = a0\n 16075: a0 = u64 [a2 + 0xf0]\n 16079: u64 [s1 + 0xd8] = a0\n 16083: a0 = u64 [a2 + 0xe8]\n 16087: u64 [s1 + 0xd0] = a0\n 16091: a0 = s1 + 0x2620\n 16095: a1 = 0x40\n 16098: ra = 568, jump @23\n      : @589 [@dyn 284] (gas: 7)\n 16104: a3 = s1 + 0x2058\n 16108: a5 = a3 + 0x500\n 16112: a4 = u64 [a5 + 0xe0]\n 16116: a1 = u64 [a5 + 0xd8]\n 16120: a2 = u64 [a5 + 0xd0]\n 16124: a0 = u64 [a5 + 0xc8]\n 16128: t0 = 570, jump @1528\n      : @590 [@dyn 285] (gas: 1)\n 16134: jump @592 if a1 == 0\n      : @591 (gas: 1)\n 16137: jump @1003\n      : @592 (gas: 14)\n 16140: a1 = u64 [s1 + 0xc8]\n 16144: a1 = a1 << 0x20\n 16147: a2 = a1 >> 0x20\n 16150: u64 [a3 + 1472] = 0\n 16154: a1 = u64 [s1 + 0xd0]\n 16158: a4 = a3 + 0x500\n 16162: u64 [a4 + 0xa8] = a1\n 16166: a1 = u64 [s1 + 0xd8]\n 16170: u64 [a4 + 0xb0] = a1\n 16174: a1 = s1 + 0x2600\n 16178: u64 [a4 + 0xb8] = a2\n 16182: u64 [s1 + 0xd8] = a0\n 16186: ra = 0x410\n 16190: jump @25\n      : @593 (gas: 9)\n 16193: u64 [a3 + 1824] = 0\n 16197: u64 [a3 + 1816] = 0\n 16201: u64 [a3 + 1808] = 0\n 16205: u64 [a3 + 1800] = 0\n 16209: a0 = s1 + 0x3000\n 16213: i32 a0 = a0 + 0x760\n 16217: ra = 0x23c\n 16221: ecalli 10 // 'value_transferred'\n 16223: fallthrough\n      : @594 [@dyn 286] (gas: 3)\n 16224: a3 = s1 + 0x3058\n 16228: a4 = a3 + 0x700\n 16232: t0 = 574, jump @1557\n      : @595 [@dyn 287] (gas: 1)\n 16238: jump @597 if a0 == 0\n      : @596 (gas: 1)\n 16241: jump @1142\n      : @597 (gas: 4)\n 16244: a0 = u64 [s1 + 0x18]\n 16247: a0 = i32 [a0]\n 16249: a1 = 0x43\n 16252: jump @599 if a1 <u a0\n      : @598 (gas: 1)\n 16255: jump @1143\n      : @599 (gas: 4)\n 16258: a0 = s1 + 0x11c0\n 16262: ra = 0x240\n 16266: t0 = 0x504\n 16270: jump @1574\n      : @600 [@dyn 288] (gas: 17)\n 16273: a1 = s1 + 0x1058\n 16277: a2 = a1 + 0x100\n 16281: a0 = u64 [a2 + 0x78]\n 16284: u64 [s1 + 0xa0] = a0\n 16288: a0 = u64 [a2 + 0x70]\n 16291: u64 [s1 + 0xb8] = a0\n 16295: a0 = u64 [a2 + 0x68]\n 16298: u64 [s1 + 0xc0] = a0\n 16302: a0 = 0x301b0\n 16307: u64 [s1 + 0xb0] = a0\n 16311: i32 a0 = a0 + 0\n 16313: u64 [s1 + 0xa8] = a0\n 16317: ra = 0x242\n 16321: ecalli 3 // 'caller'\n 16323: a2 = u64 [s1 + 0xb0]\n 16327: t0 = 0x244\n 16331: jump @1521\n      : @601 [@dyn 289] (gas: 2)\n 16334: a2 = u64 [s1 + 0xb0]\n 16338: t0 = 580, jump @1521\n      : @602 [@dyn 290] (gas: 8)\n 16344: u64 [a2 + 352] = 0\n 16348: a4 = a2 + 0x100\n 16352: u64 [a4 + 0x58] = a1\n 16355: u64 [a4 + 0x50] = a0\n 16358: a1 = s1 + 0x11a0\n 16362: u64 [a4 + 0x48] = a3\n 16365: a0 = 0\n 16367: ra = 582, jump @25\n      : @603 [@dyn 291] (gas: 3)\n 16373: t0 = 0x248\n 16377: a1 = s1 + 0x1058\n 16381: fallthrough\n      : @604 [@dyn 292] (gas: 8)\n 16382: u64 [a1 + 320] = 0\n 16386: u64 [a1 + 312] = 0\n 16390: u64 [a1 + 296] = 0x5\n 16395: a2 = a1\n 16397: a0 = 0x20\n 16400: a1 = s1 + 0x1180\n 16404: u64 [a2 + 304] = 0\n 16408: ra = 586, jump @25\n      : @605 [@dyn 293] (gas: 4)\n 16414: a0 = 0x2019c\n 16419: u64 [s1 + 0xd8] = a0\n 16423: a0 = i32 [0x2019c]\n 16428: jump @607 if a0 >u 63\n      : @606 (gas: 3)\n 16432: a1 = u64 [s1 + 0xd8]\n 16436: u32 [a1 + 0] = 0x40\n 16439: fallthrough\n      : @607 (gas: 13)\n 16440: a0 = sp + 0xffffffffffffffe0\n 16443: a2 = a0 & 0xffffffffffffffe0\n 16446: u64 [s1 + 0xc8] = a2\n 16450: sp = a2\n 16452: a0 = 0x201b0\n 16457: i32 a0 = a0 + 0\n 16459: i32 a2 = a2 + 0\n 16461: a1 = 0x40\n 16464: u64 [s1 + 0xd0] = a0\n 16468: ra = 0x24c\n 16472: ecalli 6 // 'hash_keccak_256'\n 16474: t0 = 0x24e\n 16478: jump @1546\n      : @608 [@dyn 294] (gas: 1)\n 16481: t0 = 590, jump @1546\n      : @609 [@dyn 295] (gas: 15)\n 16487: a0 = u64 [s1 + 0xa0]\n 16491: a0 = a0 << 0x20\n 16494: a1 = a0 >> 0x20\n 16497: a2 = s1 + 0x1058\n 16501: u64 [a2 + 288] = 0\n 16505: u64 [s1 + 0xa0] = a1\n 16509: a3 = a2 + 0x100\n 16513: u64 [a3 + 0x18] = a1\n 16516: a0 = u64 [s1 + 0xb8]\n 16520: u64 [a3 + 0x10] = a0\n 16523: a1 = s1 + 0x1160\n 16527: a0 = u64 [s1 + 0xc0]\n 16531: u64 [a3 + 0x8] = a0\n 16534: a0 = 0\n 16536: ra = 592, jump @25\n      : @610 [@dyn 296] (gas: 13)\n 16542: a0 = u64 [s1 + 0x80]\n 16546: a1 = s1 + 0x1058\n 16550: u64 [a1 + 0x100] = a0\n 16554: a0 = u64 [s1 + 0x88]\n 16558: u64 [a1 + 0xf8] = a0\n 16562: a0 = u64 [s1 + 0x90]\n 16566: u64 [a1 + 0xf0] = a0\n 16570: a3 = a1\n 16572: a0 = 0x20\n 16575: a1 = s1 + 0x1140\n 16579: a2 = u64 [s1 + 0x98]\n 16583: u64 [a3 + 0xe8] = a2\n 16587: ra = 594, jump @25\n      : @611 [@dyn 297] (gas: 3)\n 16593: a0 = u64 [s1 + 0xd8]\n 16597: a0 = i32 [a0]\n 16599: jump @613 if a0 >u 63\n      : @612 (gas: 3)\n 16603: a0 = u64 [s1 + 0xd8]\n 16607: u32 [a0 + 0] = 0x40\n 16610: fallthrough\n      : @613 (gas: 4)\n 16611: a0 = sp + 0xffffffffffffffe0\n 16614: a0 = a0 & 0xffffffffffffffe0\n 16617: u64 [s1 + 0x98] = a0\n 16621: t0 = 596, jump @1535\n      : @614 [@dyn 298] (gas: 3)\n 16627: ra = 0x256\n 16631: ecalli 6 // 'hash_keccak_256'\n 16633: fallthrough\n      : @615 [@dyn 299] (gas: 7)\n 16634: a3 = u64 [s1 + 0x98]\n 16638: a0 = u64 [a3 + 0x18]\n 16641: a1 = u64 [a3 + 0x10]\n 16644: a2 = u64 [a3 + 0x8]\n 16647: a3 = u64 [a3]\n 16649: a0 = reverse a0\n 16651: t0 = 600, jump @1558\n      : @616 [@dyn 300] (gas: 22)\n 16657: a4 = u64 [s1 + 0xc8]\n 16661: u64 [a4 + 0x18] = a3\n 16664: u64 [a4 + 0x10] = a2\n 16667: u64 [a4 + 0x8] = a1\n 16670: u64 [a4] = a0\n 16672: a0 = s1 + 0x3000\n 16676: i32 a0 = a0 + 0x780\n 16680: a1 = 0x24\n 16683: ecalli 1 // 'call_data_load'\n 16685: a0 = s1 + 0x3058\n 16689: a2 = a0 + 0x700\n 16693: a1 = u64 [a2 + 0x28]\n 16696: u64 [s1 + 0x98] = a1\n 16700: a1 = u64 [a2 + 0x30]\n 16703: u64 [s1 + 0x90] = a1\n 16707: a1 = u64 [a2 + 0x38]\n 16710: u64 [s1 + 0x88] = a1\n 16714: a0 = u64 [a2 + 0x40]\n 16717: u64 [s1 + 0x80] = a0\n 16721: a0 = s1 + 0x1120\n 16725: a1 = u64 [s1 + 0xc8]\n 16729: ra = 602, jump @27\n      : @617 [@dyn 301] (gas: 21)\n 16735: a4 = s1 + 0x1058\n 16739: a3 = u64 [a4 + 0xc8]\n 16743: a0 = u64 [a4 + 0xd0]\n 16747: a1 = u64 [a4 + 0xd8]\n 16751: a2 = u64 [a4 + 0xe0]\n 16755: a5 = u64 [s1 + 0x80]\n 16759: u64 [a4 + 0x80] = a5\n 16763: a5 = u64 [s1 + 0x88]\n 16767: u64 [a4 + 0x78] = a5\n 16770: a5 = u64 [s1 + 0x90]\n 16774: u64 [a4 + 0x70] = a5\n 16777: a5 = u64 [s1 + 0x98]\n 16781: u64 [a4 + 0x68] = a5\n 16784: u64 [a4 + 0xa0] = a2\n 16788: u64 [a4 + 0x98] = a1\n 16792: u64 [a4 + 0x90] = a0\n 16796: a0 = s1 + 0x1100\n 16800: a1 = s1 + 0x10e0\n 16804: a2 = s1 + 0x10c0\n 16808: u64 [a4 + 0x88] = a3\n 16812: ra = 604, jump @1344\n      : @618 [@dyn 302] (gas: 14)\n 16818: a3 = s1 + 0x1058\n 16822: a0 = u64 [a3 + 0xc0]\n 16826: a1 = u64 [a3 + 0xb8]\n 16830: a2 = u64 [a3 + 0xb0]\n 16834: a3 = u64 [a3 + 0xa8]\n 16838: a4 = s1 + 0x3058\n 16842: a5 = a4 + 0x700\n 16846: u64 [a5 + 0x60] = a0\n 16849: u64 [a5 + 0x58] = a1\n 16852: u64 [a5 + 0x50] = a2\n 16855: u64 [a5 + 0x48] = a3\n 16858: a1 = s1 + 0x37a0\n 16862: a0 = u64 [s1 + 0xc8]\n 16866: ra = 606, jump @31\n      : @619 [@dyn 303] (gas: 6)\n 16872: a0 = u64 [s1 + 0xa8]\n 16876: ra = 0x260\n 16880: ecalli 3 // 'caller'\n 16882: a2 = u64 [s1 + 0xb0]\n 16886: t0 = 0x262\n 16890: jump @1521\n      : @620 [@dyn 304] (gas: 2)\n 16893: a2 = u64 [s1 + 0xb0]\n 16897: t0 = 610, jump @1521\n      : @621 [@dyn 305] (gas: 7)\n 16903: u64 [a2 + 96] = 0\n 16906: u64 [a2 + 0x58] = a1\n 16909: u64 [a2 + 0x50] = a0\n 16912: a1 = s1 + 0x10a0\n 16916: u64 [a2 + 0x48] = a3\n 16919: a0 = 0\n 16921: ra = 612, jump @25\n      : @622 [@dyn 306] (gas: 3)\n 16927: t0 = 0x266\n 16931: a1 = s1 + 0x1058\n 16935: fallthrough\n      : @623 [@dyn 307] (gas: 8)\n 16936: u64 [a1 + 64] = 0\n 16939: u64 [a1 + 56] = 0\n 16942: u64 [a1 + 40] = 0x5\n 16946: a2 = a1\n 16948: a0 = 0x20\n 16951: a1 = s1 + 0x1080\n 16955: u64 [a2 + 48] = 0\n 16958: ra = 616, jump @25\n      : @624 [@dyn 308] (gas: 3)\n 16964: a0 = u64 [s1 + 0xd8]\n 16968: a0 = i32 [a0]\n 16970: jump @626 if a0 >u 63\n      : @625 (gas: 3)\n 16974: a0 = u64 [s1 + 0xd8]\n 16978: u32 [a0 + 0] = 0x40\n 16981: fallthrough\n      : @626 (gas: 4)\n 16982: a0 = sp + 0xffffffffffffffe0\n 16985: a0 = a0 & 0xffffffffffffffe0\n 16988: u64 [s1 + 0xc8] = a0\n 16992: t0 = 618, jump @1535\n      : @627 [@dyn 309] (gas: 4)\n 16998: ra = 0x26c\n 17002: ecalli 6 // 'hash_keccak_256'\n 17004: t0 = 0x26e\n 17008: jump @1546\n      : @628 [@dyn 310] (gas: 1)\n 17011: t0 = 622, jump @1546\n      : @629 [@dyn 311] (gas: 11)\n 17017: a2 = s1 + 0x1058\n 17021: u64 [a2 + 32] = 0\n 17024: a0 = u64 [s1 + 0xa0]\n 17028: u64 [a2 + 0x18] = a0\n 17031: a0 = u64 [s1 + 0xb8]\n 17035: u64 [a2 + 0x10] = a0\n 17038: a1 = s1 + 0x1060\n 17042: a0 = u64 [s1 + 0xc0]\n 17046: u64 [a2 + 0x8] = a0\n 17049: a0 = 0\n 17051: ra = 624, jump @25\n      : @630 [@dyn 312] (gas: 13)\n 17057: a0 = u64 [s1 + 0x80]\n 17061: a1 = s1 + 0x1058\n 17065: u64 [a1] = a0\n 17067: a0 = u64 [s1 + 0x88]\n 17071: u64 [a1 + 0xfffffffffffffff8] = a0\n 17074: a0 = u64 [s1 + 0x90]\n 17078: u64 [a1 + 0xfffffffffffffff0] = a0\n 17081: a3 = a1\n 17083: a0 = 0x20\n 17086: a1 = s1 + 0x1040\n 17090: a2 = u64 [s1 + 0x98]\n 17094: u64 [a3 + 0xffffffffffffffe8] = a2\n 17097: ra = 626, jump @25\n      : @631 [@dyn 313] (gas: 3)\n 17103: a0 = u64 [s1 + 0xd8]\n 17107: a0 = i32 [a0]\n 17109: jump @633 if a0 >u 63\n      : @632 (gas: 3)\n 17113: a0 = u64 [s1 + 0xd8]\n 17117: u32 [a0 + 0] = 0x40\n 17120: fallthrough\n      : @633 (gas: 4)\n 17121: a0 = sp + 0xffffffffffffffe0\n 17124: a0 = a0 & 0xffffffffffffffe0\n 17127: u64 [s1 + 0xd8] = a0\n 17131: t0 = 628, jump @1535\n      : @634 [@dyn 314] (gas: 5)\n 17137: ra = 0x276\n 17141: ecalli 6 // 'hash_keccak_256'\n 17143: a3 = u64 [s1 + 0xd8]\n 17147: t0 = 0x278\n 17151: jump @1529\n      : @635 [@dyn 315] (gas: 2)\n 17154: a3 = u64 [s1 + 0xd8]\n 17158: t0 = 632, jump @1529\n      : @636 [@dyn 316] (gas: 7)\n 17164: a1 = u64 [s1 + 0xc8]\n 17168: u64 [a1 + 0x18] = a3\n 17171: u64 [a1 + 0x10] = a2\n 17174: u64 [a1 + 0x8] = a4\n 17177: u64 [a1] = a0\n 17179: a0 = s1 + 0x1020\n 17183: ra = 634, jump @27\n      : @637 [@dyn 317] (gas: 14)\n 17189: a1 = s1 + 0x7ff\n 17193: a1 = a1 + 0x51\n 17196: a2 = a1 + 0x700\n 17200: a0 = u64 [a2 + 0xe8]\n 17204: u64 [s1 + 0xd8] = a0\n 17208: a0 = u64 [a2 + 0xe0]\n 17212: u64 [s1 + 0xd0] = a0\n 17216: a0 = u64 [a2 + 0xd8]\n 17220: u64 [s1 + 0xc8] = a0\n 17224: a0 = u64 [a2 + 0xd0]\n 17228: u64 [s1 + 0x98] = a0\n 17232: a0 = s1 + 0x1000\n 17236: a1 = 0x40\n 17239: ra = 636, jump @23\n      : @638 [@dyn 318] (gas: 8)\n 17245: a3 = s1 + 0x7ff\n 17249: a3 = a3 + 0x51\n 17252: a5 = a3 + 0x700\n 17256: a4 = u64 [a5 + 0xc8]\n 17260: a1 = u64 [a5 + 0xc0]\n 17264: a2 = u64 [a5 + 0xb8]\n 17268: a0 = u64 [a5 + 0xb0]\n 17272: t0 = 638, jump @1528\n      : @639 [@dyn 319] (gas: 1)\n 17278: jump @641 if a1 == 0\n      : @640 (gas: 1)\n 17281: jump @1003\n      : @641 (gas: 13)\n 17284: a1 = u64 [s1 + 0x98]\n 17288: a4 = a3 + 0x700\n 17292: u64 [a4 + 0x90] = a1\n 17296: a1 = u64 [s1 + 0xc8]\n 17300: u64 [a4 + 0x98] = a1\n 17304: a1 = u64 [s1 + 0xd0]\n 17308: u64 [a4 + 0xa0] = a1\n 17312: a1 = s1 + 0x7ff\n 17316: a1 = a1 + 0x7e1\n 17320: a2 = u64 [s1 + 0xd8]\n 17324: u64 [a4 + 0xa8] = a2\n 17328: u64 [s1 + 0xd8] = a0\n 17332: ra = 640, jump @25\n      : @642 [@dyn 320] (gas: 6)\n 17338: a0 = u64 [s1 + 0xa8]\n 17342: ra = 0x282\n 17346: ecalli 3 // 'caller'\n 17348: a2 = u64 [s1 + 0xb0]\n 17352: t0 = 0x284\n 17356: jump @1522\n      : @643 [@dyn 321] (gas: 2)\n 17359: a2 = u64 [s1 + 0xb0]\n 17363: t0 = 644, jump @1522\n      : @644 [@dyn 322] (gas: 58)\n 17369: t0 = a1 | a0\n 17372: a3 = a3 >> 0x20\n 17375: a2 = reverse a2\n 17377: a1 = a2 << 0x20\n 17380: a1 = a1 | a3\n 17383: a2 = a2 >> 0x20\n 17386: a3 = s1 + 0x7ff\n 17390: a3 = a3 + 0x51\n 17393: a0 = u64 [s1 + 0xa0]\n 17397: u64 [a3 + 0x740] = a0\n 17401: a3 = u64 [0x20050]\n 17406: a4 = s1 + 0x7ff\n 17410: a4 = a4 + 0x51\n 17413: u64 [a4 + 1864] = 0\n 17417: a4 = s1 + 0x7ff\n 17421: a4 = a4 + 0x51\n 17424: a0 = u64 [s1 + 0xb8]\n 17428: u64 [a4 + 0x738] = a0\n 17432: a4 = s1 + 0x7ff\n 17436: a4 = a4 + 0x51\n 17439: a0 = u64 [s1 + 0xc0]\n 17443: u64 [a4 + 0x730] = a0\n 17447: a0 = s1 + 0x7ff\n 17451: a0 = a0 + 0x51\n 17454: u64 [a0 + 0x788] = a3\n 17458: a3 = u64 [0x20058]\n 17463: a4 = u64 [0x20060]\n 17468: a5 = u64 [0x20068]\n 17473: a0 = s1 + 0x7ff\n 17477: a0 = a0 + 0x51\n 17480: u64 [a0 + 1896] = 0\n 17484: a0 = s1 + 0x7ff\n 17488: a0 = a0 + 0x51\n 17491: u64 [a0 + 0x780] = a3\n 17495: a0 = s1 + 0x7ff\n 17499: a0 = a0 + 0x51\n 17502: u64 [a0 + 0x778] = a4\n 17506: a0 = s1 + 0x7ff\n 17510: a0 = a0 + 0x51\n 17513: u64 [a0 + 0x770] = a5\n 17517: a0 = s1 + 0x7ff\n 17521: a0 = a0 + 0x51\n 17524: u64 [a0 + 0x760] = a2\n 17528: a0 = s1 + 0x7ff\n 17532: a0 = a0 + 0x51\n 17535: u64 [a0 + 0x758] = a1\n 17539: a1 = 0x20\n 17542: a2 = s1 + 0x7ff\n 17546: a2 = a2 + 0x7c1\n 17550: a3 = s1 + 0x7ff\n 17554: a3 = a3 + 0x7a1\n 17558: a4 = s1 + 0x7ff\n 17562: a4 = a4 + 0x781\n 17566: a0 = s1 + 0x7ff\n 17570: a0 = a0 + 0x51\n 17573: u64 [a0 + 0x750] = t0\n 17577: a0 = u64 [s1 + 0xd8]\n 17581: ra = 646, jump @34\n      : @645 [@dyn 323] (gas: 4)\n 17587: a0 = s1 + 0x7ff\n 17591: a0 = a0 + 0x761\n 17595: a1 = 0x40\n 17598: ra = 648, jump @23\n      : @646 [@dyn 324] (gas: 8)\n 17604: a3 = s1 + 0x7ff\n 17608: a3 = a3 + 0x51\n 17611: a5 = a3 + 0x700\n 17615: a4 = u64 [a5 + 0x28]\n 17618: a1 = u64 [a5 + 0x20]\n 17621: a2 = u64 [a5 + 0x18]\n 17624: a0 = u64 [a5 + 0x10]\n 17627: t0 = 650, jump @1528\n      : @647 [@dyn 325] (gas: 1)\n 17633: jump @649 if a1 == 0\n      : @648 (gas: 1)\n 17636: jump @1003\n      : @649 (gas: 9)\n 17639: u64 [a3 + 1800] = 0\n 17643: u64 [a3 + 1792] = 0\n 17647: u64 [a3 + 1776] = 0x1\n 17652: a1 = s1 + 0x7ff\n 17656: a1 = a1 + 0x741\n 17660: u64 [a3 + 1784] = 0\n 17664: u64 [s1 + 0xd8] = a0\n 17668: ra = 0x410\n 17672: jump @25\n      : @650 (gas: 11)\n 17675: u64 [a2 + 1344] = 0\n 17679: u64 [a2 + 1336] = 0\n 17683: u64 [a2 + 1328] = 0\n 17687: u64 [a2 + 1320] = 0\n 17691: a0 = s1 + 0x4000\n 17695: i32 a0 = a0 + 0xfffffffffffffd80\n 17699: ra = 0x28c\n 17703: ecalli 10 // 'value_transferred'\n 17705: a0 = 0x3858\n 17709: t0 = 0x28e\n 17713: jump @1569\n      : @651 [@dyn 326] (gas: 2)\n 17716: a0 = 0x3858\n 17720: t0 = 654, jump @1569\n      : @652 [@dyn 327] (gas: 1)\n 17726: jump @654 if a0 == 0\n      : @653 (gas: 1)\n 17729: jump @1144\n      : @654 (gas: 3)\n 17732: a0 = u64 [s1 + 0x18]\n 17735: a0 = i32 [a0]\n 17737: jump @656 if a0 >u 35\n      : @655 (gas: 1)\n 17741: jump @1145\n      : @656 (gas: 21)\n 17744: a0 = s1 + 0x4000\n 17748: i32 a0 = a0 + 0xfffffffffffffda0\n 17752: a1 = 0x4\n 17755: ecalli 1 // 'call_data_load'\n 17757: a1 = s1 + 0x3858\n 17761: a2 = a1 + 0x500\n 17765: a0 = u64 [a2 + 0x48]\n 17768: u64 [s1 + 0xd8] = a0\n 17772: a0 = u64 [a2 + 0x50]\n 17775: u64 [s1 + 0xd0] = a0\n 17779: a0 = u64 [a2 + 0x58]\n 17782: u64 [s1 + 0xc8] = a0\n 17786: a0 = u64 [a2 + 0x60]\n 17789: u64 [s1 + 0xc0] = a0\n 17793: u64 [a1 + 1408] = 0\n 17797: u64 [a1 + 1400] = 0\n 17801: u64 [a1 + 1392] = 0\n 17805: u64 [a2 + 104] = 0x2\n 17809: a0 = s1 + 0x3340\n 17813: a1 = s1 + 0x3dc0\n 17817: ra = 656, jump @27\n      : @657 [@dyn 328] (gas: 11)\n 17823: a0 = s1 + 0x3058\n 17827: a2 = u8 [a0 + 0x2e8]\n 17831: u64 [s1 + 0xb8] = a2\n 17835: u64 [a0 + 704] = 0\n 17839: u64 [a0 + 696] = 0\n 17843: u64 [a0 + 688] = 0\n 17847: a3 = a0\n 17849: a0 = s1 + 0x3320\n 17853: a1 = s1 + 0x3300\n 17857: u64 [a3 + 0x2a8] = a2\n 17861: ra = 658, jump @1224\n      : @658 [@dyn 329] (gas: 22)\n 17867: a4 = s1 + 0x3058\n 17871: a5 = a4 + 0x200\n 17875: a0 = u64 [a5 + 0xc8]\n 17879: a1 = u64 [a5 + 0xd0]\n 17883: a2 = u64 [a5 + 0xd8]\n 17887: a3 = u64 [a5 + 0xe0]\n 17891: u64 [a5 + 0x60] = a3\n 17894: u64 [a5 + 0x58] = a2\n 17897: u64 [a5 + 0x50] = a1\n 17900: u64 [a5 + 0x48] = a0\n 17903: a0 = u64 [s1 + 0xc0]\n 17907: u64 [a5 + 0x80] = a0\n 17911: a0 = u64 [s1 + 0xc8]\n 17915: u64 [a5 + 0x78] = a0\n 17918: a0 = u64 [s1 + 0xd0]\n 17922: u64 [a5 + 0x70] = a0\n 17925: a0 = s1 + 0x32e0\n 17929: a1 = s1 + 0x32c0\n 17933: a2 = s1 + 0x32a0\n 17937: a3 = u64 [s1 + 0xd8]\n 17941: u64 [a5 + 0x68] = a3\n 17944: ra = 660, jump @1233\n      : @659 [@dyn 330] (gas: 19)\n 17950: a1 = s1 + 0x3058\n 17954: a2 = a1 + 0x200\n 17958: a0 = u64 [a2 + 0x88]\n 17962: u64 [s1 + 0xb0] = a0\n 17966: a0 = u64 [a2 + 0x90]\n 17970: u64 [s1 + 0xa8] = a0\n 17974: a0 = u64 [a2 + 0x98]\n 17978: u64 [s1 + 0xa0] = a0\n 17982: a0 = u64 [a2 + 0xa0]\n 17986: u64 [s1 + 0x98] = a0\n 17990: u64 [a1 + 544] = 0\n 17994: u64 [a1 + 536] = 0\n 17998: u64 [a1 + 528] = 0\n 18002: a3 = a1\n 18004: a0 = s1 + 0x3280\n 18008: a1 = s1 + 0x3260\n 18012: a2 = u64 [s1 + 0xb8]\n 18016: u64 [a3 + 0x208] = a2\n 18020: ra = 662, jump @1224\n      : @660 [@dyn 331] (gas: 23)\n 18026: a4 = s1 + 0x3058\n 18030: a5 = a4 + 0x200\n 18034: a0 = u64 [a5 + 0x28]\n 18037: a1 = u64 [a5 + 0x30]\n 18040: a2 = u64 [a5 + 0x38]\n 18043: a3 = u64 [a5 + 0x40]\n 18046: a5 = a4 + 0x100\n 18050: u64 [a5 + 0xc0] = a3\n 18054: u64 [a5 + 0xb8] = a2\n 18058: u64 [a5 + 0xb0] = a1\n 18062: u64 [a5 + 0xa8] = a0\n 18066: a0 = u64 [s1 + 0xc0]\n 18070: u64 [a5 + 0xe0] = a0\n 18074: a0 = u64 [s1 + 0xc8]\n 18078: u64 [a5 + 0xd8] = a0\n 18082: a0 = u64 [s1 + 0xd0]\n 18086: u64 [a5 + 0xd0] = a0\n 18090: a0 = s1 + 0x3240\n 18094: a1 = s1 + 0x3220\n 18098: a2 = s1 + 0x3200\n 18102: a3 = u64 [s1 + 0xd8]\n 18106: u64 [a5 + 0xc8] = a3\n 18110: ra = 664, jump @1259\n      : @661 [@dyn 332] (gas: 19)\n 18116: a1 = s1 + 0x3058\n 18120: a2 = a1 + 0x100\n 18124: a0 = u64 [a2 + 0xe8]\n 18128: u64 [s1 + 0xd8] = a0\n 18132: a0 = u64 [a2 + 0xf0]\n 18136: u64 [s1 + 0xd0] = a0\n 18140: a0 = u64 [a2 + 0xf8]\n 18144: u64 [s1 + 0xc8] = a0\n 18148: a0 = u64 [a1 + 0x200]\n 18152: u64 [s1 + 0xc0] = a0\n 18156: u64 [a1 + 384] = 0\n 18160: u64 [a1 + 376] = 0\n 18164: a0 = u64 [s1 + 0xb8]\n 18168: u64 [a2 + 0x68] = a0\n 18171: a2 = a1\n 18173: a0 = s1 + 0x31e0\n 18177: a1 = s1 + 0x31c0\n 18181: u64 [a2 + 368] = 0\n 18185: ra = 666, jump @1284\n      : @662 [@dyn 333] (gas: 13)\n 18191: a4 = s1 + 0x3058\n 18195: a5 = a4 + 0x100\n 18199: a2 = u64 [a5 + 0x88]\n 18203: a0 = u64 [a5 + 0x90]\n 18207: a1 = u64 [a5 + 0x98]\n 18211: a3 = u64 [a5 + 0xa0]\n 18215: u64 [a5 + 0x40] = a3\n 18218: u64 [a5 + 0x38] = a1\n 18221: u64 [a5 + 0x30] = a0\n 18224: a0 = s1 + 0x31a0\n 18228: a1 = s1 + 0x3180\n 18232: u64 [a5 + 0x28] = a2\n 18235: ra = 668, jump @1224\n      : @663 [@dyn 334] (gas: 22)\n 18241: a4 = s1 + 0x3058\n 18245: a5 = a4 + 0x100\n 18249: a0 = u64 [a5 + 0x48]\n 18252: a1 = u64 [a5 + 0x50]\n 18255: a2 = u64 [a5 + 0x58]\n 18258: a3 = u64 [a5 + 0x60]\n 18261: u64 [a4 + 0xe0] = a3\n 18265: u64 [a4 + 0xd8] = a2\n 18269: u64 [a4 + 0xd0] = a1\n 18273: u64 [a4 + 0xc8] = a0\n 18277: a0 = u64 [s1 + 0xc0]\n 18281: u64 [a5] = a0\n 18283: a0 = u64 [s1 + 0xc8]\n 18287: u64 [a4 + 0xf8] = a0\n 18291: a0 = u64 [s1 + 0xd0]\n 18295: u64 [a4 + 0xf0] = a0\n 18299: a0 = s1 + 0x3160\n 18303: a1 = s1 + 0x3140\n 18307: a2 = s1 + 0x3120\n 18311: a3 = u64 [s1 + 0xd8]\n 18315: u64 [a4 + 0xe8] = a3\n 18319: ra = 670, jump @1233\n      : @664 [@dyn 335] (gas: 22)\n 18325: a1 = s1 + 0x3058\n 18329: a2 = a1 + 0x100\n 18333: a0 = u64 [a2 + 0x8]\n 18336: u64 [s1 + 0xb8] = a0\n 18340: a0 = u64 [a2 + 0x10]\n 18343: u64 [s1 + 0x90] = a0\n 18347: a0 = u64 [a2 + 0x18]\n 18350: u64 [s1 + 0x88] = a0\n 18354: a0 = u64 [a2 + 0x20]\n 18357: u64 [s1 + 0x80] = a0\n 18361: a0 = u64 [s1 + 0x98]\n 18365: u64 [a1 + 0xa0] = a0\n 18369: a0 = u64 [s1 + 0xa0]\n 18373: u64 [a1 + 0x98] = a0\n 18377: a0 = u64 [s1 + 0xa8]\n 18381: u64 [a1 + 0x90] = a0\n 18385: a3 = a1\n 18387: a0 = s1 + 0x3100\n 18391: a1 = s1 + 0x30e0\n 18395: a2 = u64 [s1 + 0xb0]\n 18399: u64 [a3 + 0x88] = a2\n 18403: ra = 672, jump @1412\n      : @665 [@dyn 336] (gas: 21)\n 18409: a0 = s1 + 0x3058\n 18413: a1 = u64 [a0 + 0xc0]\n 18417: u64 [s1 + 0xd0] = a1\n 18421: a1 = u64 [a0 + 0xb8]\n 18425: u64 [s1 + 0xc8] = a1\n 18429: a1 = u64 [a0 + 0xb0]\n 18433: u64 [s1 + 0xd8] = a1\n 18437: a1 = u64 [a0 + 0xa8]\n 18441: u64 [s1 + 0xc0] = a1\n 18445: a1 = u64 [s1 + 0x80]\n 18449: u64 [a0 + 0x60] = a1\n 18452: a1 = u64 [s1 + 0x88]\n 18456: u64 [a0 + 0x58] = a1\n 18459: a1 = u64 [s1 + 0x90]\n 18463: u64 [a0 + 0x50] = a1\n 18466: a3 = a0\n 18468: a0 = s1 + 0x30c0\n 18472: a1 = s1 + 0x30a0\n 18476: a2 = u64 [s1 + 0xb8]\n 18480: u64 [a3 + 0x48] = a2\n 18483: ra = 674, jump @1496\n      : @666 [@dyn 337] (gas: 3)\n 18489: t0 = 0x2a4\n 18493: a1 = s1 + 0x3058\n 18497: fallthrough\n      : @667 [@dyn 338] (gas: 11)\n 18498: a0 = u64 [a1 + 0x80]\n 18502: u64 [s1 + 0x88] = a0\n 18506: a0 = u64 [a1 + 0x78]\n 18509: u64 [s1 + 0x80] = a0\n 18513: a0 = u64 [a1 + 0x70]\n 18516: u64 [s1 + 0x90] = a0\n 18520: a0 = u64 [a1 + 0x68]\n 18523: u64 [s1 + 0x98] = a0\n 18527: a0 = s1 + 0x3080\n 18531: a1 = 0x40\n 18534: ra = 678, jump @23\n      : @668 [@dyn 339] (gas: 1)\n 18540: t0 = 680, jump @1564\n      : @669 [@dyn 340] (gas: 1)\n 18546: jump @671 if a0 == 0\n      : @670 (gas: 1)\n 18549: jump @1003\n      : @671 (gas: 11)\n 18552: a0 = s1 + 0x3058\n 18556: a2 = u64 [a0 + 0x40]\n 18559: u64 [s1 + 0xa0] = a2\n 18563: a2 = u64 [a0 + 0x38]\n 18566: u64 [s1 + 0xa8] = a2\n 18570: a2 = u64 [a0 + 0x30]\n 18573: u64 [s1 + 0xb0] = a2\n 18577: a0 = u64 [a0 + 0x28]\n 18580: u64 [s1 + 0xb8] = a0\n 18584: a0 = s1 + 0x3060\n 18588: ra = 682, jump @23\n      : @672 [@dyn 341] (gas: 13)\n 18594: a1 = u64 [s1 + 0xb8]\n 18598: a0 = a1 + 0x20\n 18601: a1 = a0 <u a1\n 18604: a3 = u64 [s1 + 0xb0]\n 18608: a2 = a3 + a1\n 18611: a3 = a2 <u a3\n 18614: a3 = a1 if a1 == 0\n 18617: a1 = u64 [s1 + 0xa8]\n 18621: a3 = a3 + a1\n 18624: a1 = a3 <u a1\n 18627: a4 = u64 [s1 + 0xa0]\n 18631: a1 = a1 + a4\n 18634: t0 = 684, jump @1537\n      : @673 [@dyn 342] (gas: 1)\n 18640: jump @675 if a1 == 0\n      : @674 (gas: 1)\n 18643: jump @1003\n      : @675 (gas: 10)\n 18646: a1 = u64 [s1 + 0xd0]\n 18650: a2 = u64 [s1 + 0xc8]\n 18654: a1 = a1 | a2\n 18657: a2 = 0xffffffe0\n 18667: t0 = u64 [s1 + 0xc0]\n 18671: a2 = t0 <u a2\n 18674: a3 = u64 [s1 + 0xd8]\n 18678: a2 = 0 if a3 != 0\n 18680: a2 = 0 if a1 != 0\n 18682: jump @677 if a2 != 0\n      : @676 (gas: 1)\n 18685: jump @1003\n      : @677 (gas: 13)\n 18688: a2 = s1 + 0x3058\n 18692: t1 = u64 [a2 + 0x20]\n 18695: a5 = u64 [a2 + 0x18]\n 18698: a1 = u64 [a2 + 0x8]\n 18701: a3 = u64 [a2 + 0x10]\n 18704: a4 = a1 | a5\n 18707: a2 = a3 | t1\n 18710: a4 = a4 | a2\n 18713: a4 = a4 >> 0x20\n 18716: a2 = a2 | a5\n 18719: a2 = a2 << 0x20\n 18722: a2 = a2 | a4\n 18725: jump @679 if a2 == 0\n      : @678 (gas: 1)\n 18728: jump @1003\n      : @679 (gas: 7)\n 18731: i32 a2 = t0 + 0x20\n 18734: u64 [s1 + 0x78] = a2\n 18737: u64 [s1 + 0xd0] = t1\n 18741: u64 [s1 + 0xc8] = a5\n 18745: u64 [s1 + 0xc0] = a3\n 18749: u64 [s1 + 0xd8] = a1\n 18753: ra = 686, jump @38\n      : @680 [@dyn 343] (gas: 4)\n 18759: u64 [s1 + 0x70] = a0\n 18762: a0 = u64 [s1 + 0x78]\n 18765: a1 = u64 [s1 + 0xd8]\n 18769: ra = 688, jump @38\n      : @681 [@dyn 344] (gas: 4)\n 18775: a1 = a0\n 18777: a0 = u64 [s1 + 0x70]\n 18780: a2 = u64 [s1 + 0xd8]\n 18784: ra = 690, jump @6\n      : @682 [@dyn 345] (gas: 38)\n 18790: a0 = u64 [s1 + 0xb8]\n 18794: a1 = u64 [s1 + 0xd8]\n 18798: t0 = a1 + a0\n 18801: a0 = t0 <u a1\n 18804: a1 = u64 [s1 + 0xb0]\n 18808: a2 = u64 [s1 + 0xc0]\n 18812: a1 = a1 + a2\n 18815: a5 = a1 + a0\n 18818: a1 = a5 ^ a2\n 18821: a2 = a5 <u a2\n 18824: a2 = a0 if a1 == 0\n 18827: a0 = u64 [s1 + 0xa8]\n 18831: a3 = u64 [s1 + 0xc8]\n 18835: a0 = a0 + a3\n 18838: a4 = a0 + a2\n 18841: a1 = a4 <u a0\n 18844: a0 = a0 <u a3\n 18847: a2 = u64 [s1 + 0xa0]\n 18851: a3 = u64 [s1 + 0xd0]\n 18855: a2 = a2 + a3\n 18858: a0 = a0 + a2\n 18861: t1 = a0 + a1\n 18864: a0 = t0 + 0x20\n 18867: a1 = a0 <u t0\n 18870: a2 = a5 + a1\n 18873: a3 = a2 <u a5\n 18876: a3 = a1 if a1 == 0\n 18879: a3 = a3 + a4\n 18882: a1 = a3 <u a4\n 18885: a1 = a1 + t1\n 18888: a1 = a1 | a2\n 18891: a2 = a0 | a3\n 18894: a2 = a2 | a1\n 18897: a1 = a1 | a3\n 18900: a2 = a2 >> 0x20\n 18903: a1 = a1 << 0x20\n 18906: a1 = a1 | a2\n 18909: jump @684 if a1 == 0\n      : @683 (gas: 1)\n 18912: jump @1003\n      : @684 (gas: 13)\n 18915: u64 [s1 + 0xc0] = t1\n 18919: u64 [s1 + 0xc8] = a4\n 18923: u64 [s1 + 0xd0] = a5\n 18927: u64 [s1 + 0xd8] = t0\n 18931: a1 = s1 + 0x2858\n 18935: u64 [a1 + 2040] = 0\n 18939: u64 [a1 + 2032] = 0\n 18943: u64 [a1 + 2024] = 0\n 18947: a2 = 0x2e00000000000000\n 18957: a1 = s1 + 0x3040\n 18961: a3 = s1 + 0x3058\n 18965: u64 [a3] = a2\n 18967: ra = 692, jump @25\n      : @685 [@dyn 346] (gas: 1)\n 18973: t0 = 694, jump @1560\n      : @686 [@dyn 347] (gas: 1)\n 18979: jump @688 if a0 == 0\n      : @687 (gas: 1)\n 18982: jump @1003\n      : @688 (gas: 2)\n 18985: a0 = s1 + 0x3020\n 18989: ra = 696, jump @23\n      : @689 [@dyn 348] (gas: 13)\n 18995: a1 = u64 [s1 + 0xd8]\n 18999: a0 = a1 + 0x21\n 19002: a1 = a0 <u a1\n 19005: a3 = u64 [s1 + 0xd0]\n 19009: a2 = a3 + a1\n 19012: a3 = a2 <u a3\n 19015: a3 = a1 if a1 == 0\n 19018: a1 = u64 [s1 + 0xc8]\n 19022: a3 = a3 + a1\n 19025: a1 = a3 <u a1\n 19028: a4 = u64 [s1 + 0xc0]\n 19032: a1 = a1 + a4\n 19035: t0 = 698, jump @1537\n      : @690 [@dyn 349] (gas: 1)\n 19041: jump @692 if a1 == 0\n      : @691 (gas: 1)\n 19044: jump @1003\n      : @692 (gas: 10)\n 19047: a1 = u64 [s1 + 0x88]\n 19051: a2 = u64 [s1 + 0x80]\n 19055: a1 = a1 | a2\n 19058: a2 = 0xffffffe0\n 19068: t0 = u64 [s1 + 0x98]\n 19072: a2 = t0 <u a2\n 19075: a3 = u64 [s1 + 0x90]\n 19079: a2 = 0 if a3 != 0\n 19081: a2 = 0 if a1 != 0\n 19083: jump @694 if a2 != 0\n      : @693 (gas: 1)\n 19086: jump @1003\n      : @694 (gas: 17)\n 19089: a5 = s1 + 0x2858\n 19093: a3 = a5 + 0x700\n 19097: a2 = u64 [a3 + 0xe0]\n 19101: a4 = u64 [a3 + 0xd8]\n 19105: a1 = u64 [a3 + 0xc8]\n 19109: a5 = u64 [a3 + 0xd0]\n 19113: a3 = a1 | a4\n 19116: u64 [s1 + 0x90] = a2\n 19120: u64 [s1 + 0x80] = a5\n 19124: a2 = a2 | a5\n 19127: a3 = a3 | a2\n 19130: a3 = a3 >> 0x20\n 19133: u64 [s1 + 0x88] = a4\n 19137: a2 = a2 | a4\n 19140: a2 = a2 << 0x20\n 19143: a2 = a2 | a3\n 19146: jump @696 if a2 == 0\n      : @695 (gas: 1)\n 19149: jump @1003\n      : @696 (gas: 4)\n 19152: i32 a2 = t0 + 0x20\n 19155: u64 [s1 + 0x78] = a2\n 19158: u64 [s1 + 0x98] = a1\n 19162: ra = 700, jump @38\n      : @697 [@dyn 350] (gas: 4)\n 19168: u64 [s1 + 0x70] = a0\n 19171: a0 = u64 [s1 + 0x78]\n 19174: a1 = u64 [s1 + 0x98]\n 19178: ra = 702, jump @38\n      : @698 [@dyn 351] (gas: 4)\n 19184: a1 = a0\n 19186: a0 = u64 [s1 + 0x70]\n 19189: a2 = u64 [s1 + 0x98]\n 19193: ra = 704, jump @6\n      : @699 [@dyn 352] (gas: 1)\n 19199: t0 = 706, jump @1544\n      : @700 [@dyn 353] (gas: 20)\n 19205: t0 = a5 <u a0\n 19208: a0 = a0 <u a1\n 19211: a2 = u64 [s1 + 0xc0]\n 19215: a1 = u64 [s1 + 0x90]\n 19219: a2 = a2 + a1\n 19222: a0 = a0 + a2\n 19225: t0 = t0 + a0\n 19228: a0 = a3 + 0x21\n 19231: u64 [s1 + 0xd8] = a3\n 19235: a1 = a0 <u a3\n 19238: a2 = a4 + a1\n 19241: u64 [s1 + 0xd0] = a4\n 19245: a3 = a2 <u a4\n 19248: a3 = a1 if a1 == 0\n 19251: a3 = a3 + a5\n 19254: u64 [s1 + 0xc8] = a5\n 19258: a1 = a3 <u a5\n 19261: u64 [s1 + 0xc0] = t0\n 19265: a1 = a1 + t0\n 19268: t0 = 708, jump @1537\n      : @701 [@dyn 354] (gas: 1)\n 19274: jump @703 if a1 == 0\n      : @702 (gas: 1)\n 19277: jump @1003\n      : @703 (gas: 7)\n 19280: a2 = s1 + 0x2858\n 19284: u64 [a2 + 1984] = 0\n 19288: u64 [a2 + 1976] = 0\n 19292: u64 [a2 + 1968] = 0\n 19296: a1 = s1 + 0x3000\n 19300: u64 [a2 + 1960] = 0\n 19304: ra = 710, jump @25\n      : @704 [@dyn 355] (gas: 1)\n 19310: t0 = 712, jump @1570\n      : @705 [@dyn 356] (gas: 1)\n 19316: jump @707 if a0 == 0\n      : @706 (gas: 1)\n 19319: jump @1003\n      : @707 (gas: 56)\n 19322: ra = u64 [s1 + 0xb8]\n 19326: t2 = u64 [s1 + 0xd8]\n 19330: t0 = t2 <u ra\n 19333: a3 = u64 [s1 + 0xb0]\n 19337: a2 = u64 [s1 + 0xd0]\n 19341: a0 = a2 ^ a3\n 19344: a1 = a2 <u a3\n 19347: a5 = a3\n 19349: a1 = t0 if a0 == 0\n 19352: a0 = u64 [s1 + 0xa8]\n 19356: t1 = u64 [s1 + 0xc8]\n 19360: a3 = t1 - a0\n 19363: a4 = a3 <u a1\n 19366: u64 [s1 + 0x98] = a4\n 19370: a0 = t1 <u a0\n 19373: u64 [s1 + 0xc8] = a0\n 19377: a0 = u64 [s1 + 0xa0]\n 19381: a4 = u64 [s1 + 0xc0]\n 19385: t1 = a4 - a0\n 19388: a0 = u64 [s1 + 0x98]\n 19392: a4 = u64 [s1 + 0xc8]\n 19396: a0 = a0 + a4\n 19399: t1 = t1 - a0\n 19402: a1 = a3 - a1\n 19405: a3 = a2 - a5\n 19408: a3 = a3 - t0\n 19411: a2 = t2 - ra\n 19414: a0 = a2 + 0x1\n 19417: a5 = a0 <u 0x1\n 19420: t0 = a3 + a5\n 19423: a4 = a0 | t0\n 19426: a4 = a4 <u 0x1\n 19429: a4 = a4 + a1\n 19432: a5 = a2 + 0x21\n 19435: u64 [s1 + 0xd8] = a5\n 19439: a2 = a5 <u a2\n 19442: a5 = a3 + a2\n 19445: u64 [s1 + 0xd0] = a5\n 19449: a3 = a5 <u a3\n 19452: a3 = a2 if a2 == 0\n 19455: a2 = a4 <u a1\n 19458: a2 = a2 + t1\n 19461: a3 = a3 + a1\n 19464: u64 [s1 + 0xc8] = a3\n 19468: a1 = a3 <u a1\n 19471: a1 = a1 + t1\n 19474: u64 [s1 + 0xc0] = a1\n 19478: a3 = s1 + 0x2858\n 19482: a5 = a3 + 0x700\n 19486: u64 [a5 + 0x88] = a0\n 19490: u64 [a3 + 0x790] = t0\n 19494: u64 [a5 + 0x98] = a4\n 19498: a1 = s1 + 0x2fe0\n 19502: u64 [a5 + 0xa0] = a2\n 19506: a0 = ra\n 19508: ra = 714, jump @25\n      : @708 [@dyn 357] (gas: 22)\n 19514: a1 = s1 + 0x2858\n 19518: a0 = u64 [s1 + 0xc0]\n 19522: a2 = a1 + 0x700\n 19526: u64 [a2 + 0x60] = a0\n 19529: a0 = u64 [s1 + 0xc8]\n 19533: u64 [a2 + 0x58] = a0\n 19536: a0 = u64 [s1 + 0xd0]\n 19540: u64 [a2 + 0x50] = a0\n 19543: a0 = u64 [s1 + 0xd8]\n 19547: u64 [a2 + 0x48] = a0\n 19550: a0 = u64 [s1 + 0xa0]\n 19554: u64 [a2 + 0x80] = a0\n 19558: a0 = u64 [s1 + 0xa8]\n 19562: u64 [a2 + 0x78] = a0\n 19565: a0 = u64 [s1 + 0xb0]\n 19569: u64 [a2 + 0x70] = a0\n 19572: a3 = a1\n 19574: a0 = s1 + 0x2fc0\n 19578: a1 = s1 + 0x2fa0\n 19582: a2 = u64 [s1 + 0xb8]\n 19586: u64 [a3 + 0x768] = a2\n 19590: ra = 716, jump @1177\n      : @709 [@dyn 358] (gas: 3)\n 19596: a0 = s1 + 0x2f80\n 19600: a1 = 0x40\n 19603: ra = 718, jump @23\n      : @710 [@dyn 359] (gas: 26)\n 19609: a1 = s1 + 0x2858\n 19613: a2 = u64 [a1 + 0x740]\n 19617: u64 [s1 + 0xd0] = a2\n 19621: a3 = u64 [a1 + 0x738]\n 19625: u64 [s1 + 0xc8] = a3\n 19629: a5 = u64 [a1 + 0x730]\n 19633: u64 [s1 + 0xc0] = a5\n 19637: a4 = u64 [a1 + 0x728]\n 19641: u64 [s1 + 0xd8] = a4\n 19645: a0 = u64 [s1 + 0xa0]\n 19649: u64 [a1 + 0x6e0] = a0\n 19653: a0 = u64 [s1 + 0xa8]\n 19657: u64 [a1 + 0x6d8] = a0\n 19661: a0 = u64 [s1 + 0xb0]\n 19665: u64 [a1 + 0x6d0] = a0\n 19669: a0 = u64 [s1 + 0xb8]\n 19673: u64 [a1 + 0x6c8] = a0\n 19677: u64 [a1 + 0x700] = a2\n 19681: u64 [a1 + 0x6f8] = a3\n 19685: u64 [a1 + 0x6f0] = a5\n 19689: a3 = a1\n 19691: a0 = s1 + 0x2f60\n 19695: a1 = s1 + 0x2f40\n 19699: a2 = s1 + 0x2f20\n 19703: u64 [a3 + 0x6e8] = a4\n 19707: ra = 720, jump @1187\n      : @711 [@dyn 360] (gas: 1)\n 19713: t0 = 722, jump @1563\n      : @712 [@dyn 361] (gas: 1)\n 19719: jump @714 if a0 == 0\n      : @713 (gas: 1)\n 19722: jump @1003\n      : @714 (gas: 9)\n 19725: t0 = a3\n 19727: a1 = s1 + 0x2858\n 19731: a4 = a1 + 0x700\n 19735: a0 = u64 [a4 + 0x10]\n 19738: a3 = u64 [a4 + 0x20]\n 19741: u64 [s1 + 0xb8] = a3\n 19745: t1 = u64 [a1 + 0x708]\n 19749: a3 = u64 [a4 + 0x18]\n 19752: fallthrough\n      : @715 (gas: 28)\n 19753: ra = a0 ^ a2\n 19756: a5 = a0 <u a2\n 19759: t2 = u64 [s1 + 0xd8]\n 19763: a1 = t1 <u t2\n 19766: a5 = a1 if ra == 0\n 19769: a4 = a3 - t0\n 19772: ra = a4 - a5\n 19775: a4 = a4 <u a5\n 19778: u64 [s1 + 0xb0] = a4\n 19782: a3 = a3 <u t0\n 19785: a5 = u64 [s1 + 0xd0]\n 19789: a4 = u64 [s1 + 0xb8]\n 19793: a5 = a4 - a5\n 19796: a5 = a5 - a3\n 19799: a3 = u64 [s1 + 0xb0]\n 19803: a5 = a5 - a3\n 19806: a0 = a0 - a2\n 19809: a0 = a0 - a1\n 19812: a1 = t1 - t2\n 19815: a0 = a0 | a5\n 19818: a2 = a1\n 19820: a1 = a1 | ra\n 19823: a1 = a1 | a0\n 19826: a0 = a0 | ra\n 19829: a1 = a1 >> 0x20\n 19832: a0 = a0 << 0x20\n 19835: a0 = a0 | a1\n 19838: jump @717 if a0 == 0\n      : @716 (gas: 1)\n 19841: jump @1003\n      : @717 (gas: 4)\n 19844: a0 = u64 [s1 + 0xd8]\n 19848: a1 = a2\n 19850: u64 [s1 + 0xd0] = a2\n 19854: ra = 724, jump @38\n      : @718 [@dyn 362] (gas: 5)\n 19860: i32 a1 = a0 + 0\n 19862: a2 = i32 [s1 + 0xd0]\n 19866: a0 = 0\n 19868: ecalli 7 // 'seal_return'\n 19870: jump @945\n      : @719 (gas: 8)\n 19873: u64 [a3 + 1760] = 0\n 19877: u64 [a3 + 1752] = 0\n 19881: u64 [a3 + 1744] = 0\n 19885: u64 [a3 + 1736] = 0\n 19889: a0 = s1 + 0x3000\n 19893: i32 a0 = a0 + 0x720\n 19897: ecalli 10 // 'value_transferred'\n 19899: fallthrough\n      : @720 (gas: 10)\n 19900: a3 = s1 + 0x3058\n 19904: a4 = a3 + 0x600\n 19908: a0 = u64 [a4 + 0xd8]\n 19912: a1 = u64 [a4 + 0xe0]\n 19916: a2 = u64 [a4 + 0xd0]\n 19920: a3 = u64 [a4 + 0xc8]\n 19924: a1 = a1 | a2\n 19927: a0 = a0 | a3\n 19930: a0 = a0 | a1\n 19933: jump @722 if a0 == 0\n      : @721 (gas: 1)\n 19936: jump @1146\n      : @722 (gas: 3)\n 19939: a0 = u64 [s1 + 0x18]\n 19942: a0 = i32 [a0]\n 19944: jump @724 if a0 >u 3\n      : @723 (gas: 1)\n 19948: jump @1147\n      : @724 (gas: 9)\n 19951: a1 = s1 + 0x3058\n 19955: u64 [a1 + 1792] = 0\n 19959: u64 [a1 + 1784] = 0\n 19963: u64 [a1 + 1776] = 0\n 19967: u64 [a1 + 1768] = 0x2\n 19972: a0 = s1 + 0x7ff\n 19976: a0 = a0 + 0x721\n 19980: a1 = s1 + 0x3740\n 19984: ra = 726, jump @27\n      : @725 [@dyn 363] (gas: 8)\n 19990: a0 = s1 + 0x7ff\n 19994: a0 = a0 + 0x51\n 19997: a0 = u64 [a0 + 0x6d0]\n 20001: u64 [s1 + 0xd8] = a0\n 20005: a0 = s1 + 0x7ff\n 20009: a0 = a0 + 0x701\n 20013: a1 = 0x40\n 20016: ra = 728, jump @23\n      : @726 [@dyn 364] (gas: 8)\n 20022: a3 = s1 + 0x7ff\n 20026: a3 = a3 + 0x51\n 20029: a5 = a3 + 0x600\n 20033: a4 = u64 [a5 + 0xc8]\n 20037: a1 = u64 [a5 + 0xc0]\n 20041: a2 = u64 [a5 + 0xb8]\n 20045: a0 = u64 [a5 + 0xb0]\n 20049: t0 = 730, jump @1528\n      : @727 [@dyn 365] (gas: 1)\n 20055: jump @729 if a1 == 0\n      : @728 (gas: 1)\n 20058: jump @1003\n      : @729 (gas: 10)\n 20061: a1 = u8 [s1 + 0xd8]\n 20065: u64 [a3 + 1704] = 0\n 20069: u64 [a3 + 1696] = 0\n 20073: u64 [a3 + 0x690] = a1\n 20077: a1 = s1 + 0x7ff\n 20081: a1 = a1 + 0x6e1\n 20085: u64 [a3 + 1688] = 0\n 20089: u64 [s1 + 0xd8] = a0\n 20093: ra = 0x410\n 20097: jump @25\n      : @730 (gas: 11)\n 20100: u64 [a3 + 1344] = 0\n 20104: u64 [a3 + 1336] = 0\n 20108: u64 [a3 + 1328] = 0\n 20112: u64 [a3 + 1320] = 0\n 20116: a0 = s1 + 0x3000\n 20120: i32 a0 = a0 + 0x580\n 20124: ra = 0x2dc\n 20128: ecalli 10 // 'value_transferred'\n 20130: a0 = 0x3058\n 20134: t0 = 0x2de\n 20138: jump @1569\n      : @731 [@dyn 366] (gas: 2)\n 20141: a0 = 0x3058\n 20145: t0 = 734, jump @1569\n      : @732 [@dyn 367] (gas: 1)\n 20151: jump @734 if a0 == 0\n      : @733 (gas: 1)\n 20154: jump @1148\n      : @734 (gas: 4)\n 20157: a0 = u64 [s1 + 0x18]\n 20160: a0 = i32 [a0]\n 20162: a1 = 0x43\n 20165: jump @736 if a1 <u a0\n      : @735 (gas: 1)\n 20168: jump @1149\n      : @736 (gas: 4)\n 20171: a0 = s1 + 0x420\n 20175: ra = 0x2e0\n 20179: t0 = 0x504\n 20183: jump @1574\n      : @737 [@dyn 368] (gas: 38)\n 20186: a0 = u64 [s1 + 0x430]\n 20190: u64 [s1 + 0xb8] = a0\n 20194: a0 = u64 [s1 + 0x428]\n 20198: u64 [s1 + 0xc8] = a0\n 20202: a0 = u64 [s1 + 0x420]\n 20206: u64 [s1 + 0xd0] = a0\n 20210: a0 = sp + 0xffffffffffffffe0\n 20213: a0 = a0 & 0xffffffffffffffe0\n 20216: u64 [s1 + 0xd8] = a0\n 20220: sp = a0\n 20222: a0 = s1 + 0x3000\n 20226: i32 a0 = a0 + 0x5a0\n 20230: a1 = 0x24\n 20233: ecalli 1 // 'call_data_load'\n 20235: a0 = s1 + 0x3058\n 20239: a4 = a0 + 0x500\n 20243: a1 = u64 [a4 + 0x60]\n 20246: a2 = u64 [a4 + 0x58]\n 20249: a3 = u64 [a4 + 0x50]\n 20252: a0 = u64 [a4 + 0x48]\n 20255: u64 [s1 + 0x78] = a1\n 20258: a4 = u64 [s1 + 0xd8]\n 20262: u64 [a4 + 0x18] = a1\n 20265: u64 [s1 + 0x70] = a2\n 20268: u64 [a4 + 0x10] = a2\n 20271: u64 [s1 + 0x60] = a3\n 20274: u64 [a4 + 0x8] = a3\n 20277: u64 [s1 + 0x58] = a0\n 20280: u64 [a4] = a0\n 20282: a0 = 0x301b0\n 20287: u64 [s1 + 0xc0] = a0\n 20291: i32 a0 = a0 + 0\n 20293: u64 [s1 + 0x68] = a0\n 20296: ra = 0x2e2\n 20300: ecalli 3 // 'caller'\n 20302: a2 = u64 [s1 + 0xc0]\n 20306: t0 = 0x2e4\n 20310: jump @1531\n      : @738 [@dyn 369] (gas: 2)\n 20313: a2 = u64 [s1 + 0xc0]\n 20317: t0 = 740, jump @1531\n      : @739 [@dyn 370] (gas: 8)\n 20323: u64 [s1 + 1048] = 0\n 20327: a2 = s1 + 0x400\n 20331: u64 [a2 + 0x10] = a1\n 20334: u64 [a2 + 0x8] = a0\n 20337: a1 = s1 + 0x400\n 20341: u64 [a2] = a3\n 20343: a0 = 0\n 20345: ra = 742, jump @25\n      : @740 [@dyn 371] (gas: 7)\n 20351: u64 [s1 + 1016] = 0\n 20355: u64 [s1 + 1008] = 0\n 20359: u64 [s1 + 992] = 0x5\n 20364: a0 = 0x20\n 20367: a1 = s1 + 0x3e0\n 20371: u64 [s1 + 1000] = 0\n 20375: ra = 744, jump @25\n      : @741 [@dyn 372] (gas: 3)\n 20381: a1 = 0x2019c\n 20386: a0 = i32 [0x2019c]\n 20391: jump @743 if a0 >u 63\n      : @742 (gas: 2)\n 20395: u32 [0x2019c] = 0x40\n 20401: fallthrough\n      : @743 (gas: 15)\n 20402: a0 = sp + 0xffffffffffffffe0\n 20405: a2 = a0 & 0xffffffffffffffe0\n 20408: u64 [s1 + 0xa0] = a2\n 20412: sp = a2\n 20414: a0 = 0x201b0\n 20419: i32 a0 = a0 + 0\n 20421: i32 a2 = a2 + 0\n 20423: u64 [s1 + 0xb0] = a1\n 20427: a1 = 0x40\n 20430: u64 [s1 + 0xa8] = a0\n 20434: ra = 0x2ea\n 20438: ecalli 6 // 'hash_keccak_256'\n 20440: a3 = u64 [s1 + 0xa0]\n 20444: t0 = 0x2ec\n 20448: jump @1550\n      : @744 [@dyn 373] (gas: 2)\n 20451: a3 = u64 [s1 + 0xa0]\n 20455: t0 = 748, jump @1550\n      : @745 [@dyn 374] (gas: 15)\n 20461: u64 [s1 + 0xa0] = a0\n 20465: sp = a0\n 20467: a0 = u64 [s1 + 0xb8]\n 20471: a0 = a0 << 0x20\n 20474: a0 = a0 >> 0x20\n 20477: u64 [s1 + 984] = 0\n 20481: u64 [s1 + 0x50] = a0\n 20484: u64 [s1 + 0x3d0] = a0\n 20488: a0 = u64 [s1 + 0xc8]\n 20492: u64 [s1 + 0x3c8] = a0\n 20496: a1 = s1 + 0x3c0\n 20500: a0 = u64 [s1 + 0xd0]\n 20504: u64 [s1 + 0x3c0] = a0\n 20508: a0 = 0\n 20510: ra = 750, jump @25\n      : @746 [@dyn 375] (gas: 12)\n 20516: a0 = u64 [s1 + 0x80]\n 20520: a3 = s1 + 0x300\n 20524: u64 [a3 + 0xb8] = a0\n 20528: a0 = u64 [s1 + 0x88]\n 20532: u64 [a3 + 0xb0] = a0\n 20536: a0 = u64 [s1 + 0x90]\n 20540: u64 [a3 + 0xa8] = a0\n 20544: a0 = 0x20\n 20547: a1 = s1 + 0x3a0\n 20551: a2 = u64 [s1 + 0x98]\n 20555: u64 [a3 + 0xa0] = a2\n 20559: ra = 752, jump @25\n      : @747 [@dyn 376] (gas: 3)\n 20565: a1 = u64 [s1 + 0xb0]\n 20569: a0 = i32 [a1]\n 20571: jump @749 if a0 >u 63\n      : @748 (gas: 2)\n 20575: u32 [a1 + 0] = 0x40\n 20578: fallthrough\n      : @749 (gas: 10)\n 20579: a0 = sp + 0xffffffffffffffe0\n 20582: a0 = a0 & 0xffffffffffffffe0\n 20585: u64 [s1 + 0xb8] = a0\n 20589: sp = a0\n 20591: i32 a2 = a0 + 0\n 20593: a1 = 0x40\n 20596: a0 = u64 [s1 + 0xa8]\n 20600: ra = 0x2f2\n 20604: ecalli 6 // 'hash_keccak_256'\n 20606: fallthrough\n      : @750 [@dyn 377] (gas: 7)\n 20607: a3 = u64 [s1 + 0xb8]\n 20611: a0 = u64 [a3 + 0x18]\n 20614: a1 = u64 [a3 + 0x10]\n 20617: a2 = u64 [a3 + 0x8]\n 20620: a3 = u64 [a3]\n 20622: a4 = reverse a0\n 20624: t0 = 756, jump @1558\n      : @751 [@dyn 378] (gas: 7)\n 20630: a0 = u64 [s1 + 0xa0]\n 20634: u64 [a0 + 0x18] = a3\n 20637: u64 [a0 + 0x10] = a2\n 20640: u64 [a0 + 0x8] = a1\n 20643: u64 [a0] = a4\n 20645: a1 = u64 [s1 + 0xd8]\n 20649: ra = 758, jump @31\n      : @752 [@dyn 379] (gas: 3)\n 20655: a0 = s1 + 0x380\n 20659: a1 = 0x40\n 20662: ra = 760, jump @23\n      : @753 [@dyn 380] (gas: 6)\n 20668: a4 = s1 + 0x300\n 20672: a0 = u64 [a4 + 0x98]\n 20676: a1 = u64 [a4 + 0x90]\n 20680: a2 = u64 [a4 + 0x88]\n 20684: a3 = u64 [a4 + 0x80]\n 20688: t0 = 762, jump @1566\n      : @754 [@dyn 381] (gas: 1)\n 20694: jump @756 if a0 == 0\n      : @755 (gas: 1)\n 20697: jump @1003\n      : @756 (gas: 12)\n 20700: a0 = u64 [s1 + 0x58]\n 20703: u64 [s1 + 0x360] = a0\n 20707: a0 = u64 [s1 + 0x60]\n 20710: u64 [s1 + 0x368] = a0\n 20714: a0 = u64 [s1 + 0x70]\n 20717: u64 [s1 + 0x370] = a0\n 20721: a1 = s1 + 0x360\n 20725: a0 = u64 [s1 + 0x78]\n 20728: u64 [s1 + 0x378] = a0\n 20732: a0 = a3\n 20734: u64 [s1 + 0xd8] = a3\n 20738: ra = 764, jump @25\n      : @757 [@dyn 382] (gas: 6)\n 20744: a0 = u64 [s1 + 0x68]\n 20747: ra = 0x2fe\n 20751: ecalli 3 // 'caller'\n 20753: a2 = u64 [s1 + 0xc0]\n 20757: t0 = 0x300\n 20761: jump @1522\n      : @758 [@dyn 383] (gas: 2)\n 20764: a2 = u64 [s1 + 0xc0]\n 20768: t0 = 768, jump @1522\n      : @759 [@dyn 384] (gas: 32)\n 20774: t0 = a1 | a0\n 20777: a3 = a3 >> 0x20\n 20780: a2 = reverse a2\n 20782: a1 = a2 << 0x20\n 20785: a1 = a1 | a3\n 20788: a2 = a2 >> 0x20\n 20791: u64 [s1 + 792] = 0\n 20795: a0 = u64 [s1 + 0x50]\n 20798: u64 [s1 + 0x310] = a0\n 20802: a0 = u64 [s1 + 0xc8]\n 20806: u64 [s1 + 0x308] = a0\n 20810: a0 = u64 [s1 + 0xd0]\n 20814: u64 [s1 + 0x300] = a0\n 20818: u64 [s1 + 824] = 0\n 20822: a3 = u64 [0x20050]\n 20827: a4 = u64 [0x20058]\n 20832: a5 = u64 [0x20060]\n 20837: a0 = u64 [0x20068]\n 20842: u64 [s1 + 0x358] = a3\n 20846: a3 = s1 + 0x300\n 20850: u64 [a3 + 0x50] = a4\n 20853: u64 [a3 + 0x48] = a5\n 20856: u64 [a3 + 0x40] = a0\n 20859: u64 [a3 + 0x30] = a2\n 20862: u64 [a3 + 0x28] = a1\n 20865: a1 = 0x20\n 20868: a2 = s1 + 0x340\n 20872: a3 = s1 + 0x320\n 20876: a4 = s1 + 0x300\n 20880: u64 [s1 + 0x320] = t0\n 20884: a0 = u64 [s1 + 0xd8]\n 20888: ra = 770, jump @34\n      : @760 [@dyn 385] (gas: 3)\n 20894: a0 = s1 + 0x2e0\n 20898: a1 = 0x40\n 20901: ra = 772, jump @23\n      : @761 [@dyn 386] (gas: 6)\n 20907: a4 = s1 + 0x200\n 20911: a3 = u64 [a4 + 0xf8]\n 20915: a1 = u64 [a4 + 0xf0]\n 20919: a2 = u64 [a4 + 0xe8]\n 20923: a0 = u64 [a4 + 0xe0]\n 20927: t0 = 774, jump @1562\n      : @762 [@dyn 387] (gas: 1)\n 20933: jump @764 if a1 == 0\n      : @763 (gas: 1)\n 20936: jump @1003\n      : @764 (gas: 8)\n 20939: u64 [s1 + 728] = 0\n 20943: u64 [s1 + 720] = 0\n 20947: u64 [s1 + 712] = 0\n 20951: a1 = s1 + 0x2c0\n 20955: u64 [s1 + 704] = 0x1\n 20960: u64 [s1 + 0xd8] = a0\n 20964: ra = 0x410\n 20968: jump @25\n      : @765 (gas: 8)\n 20971: u64 [a3 + 1504] = 0\n 20975: u64 [a3 + 1496] = 0\n 20979: u64 [a3 + 1488] = 0\n 20983: u64 [a3 + 1480] = 0\n 20987: a0 = s1 + 0x3000\n 20991: i32 a0 = a0 + 0x620\n 20995: ecalli 10 // 'value_transferred'\n 20997: fallthrough\n      : @766 (gas: 10)\n 20998: a3 = s1 + 0x3058\n 21002: a4 = a3 + 0x500\n 21006: a0 = u64 [a4 + 0xd8]\n 21010: a1 = u64 [a4 + 0xe0]\n 21014: a2 = u64 [a4 + 0xd0]\n 21018: a3 = u64 [a4 + 0xc8]\n 21022: a1 = a1 | a2\n 21025: a0 = a0 | a3\n 21028: a0 = a0 | a1\n 21031: jump @768 if a0 == 0\n      : @767 (gas: 1)\n 21034: jump @1150\n      : @768 (gas: 3)\n 21037: a0 = u64 [s1 + 0x18]\n 21040: a1 = i32 [a0]\n 21042: jump @770 if a1 >u 3\n      : @769 (gas: 1)\n 21046: jump @1151\n      : @770 (gas: 9)\n 21049: a1 = s1 + 0x3058\n 21053: u64 [a1 + 1536] = 0\n 21057: u64 [a1 + 1528] = 0\n 21061: u64 [a1 + 1520] = 0\n 21065: u64 [a1 + 1512] = 0x3\n 21070: a0 = s1 + 0x7ff\n 21074: a0 = a0 + 0x141\n 21078: a1 = s1 + 0x3640\n 21082: ra = 776, jump @27\n      : @771 [@dyn 388] (gas: 14)\n 21088: a1 = s1 + 0x7ff\n 21092: a1 = a1 + 0x51\n 21095: a0 = u64 [a1 + 0x108]\n 21099: u64 [s1 + 0xd8] = a0\n 21103: a0 = u64 [a1 + 0x100]\n 21107: u64 [s1 + 0xd0] = a0\n 21111: a0 = u64 [a1 + 0xf8]\n 21115: u64 [s1 + 0xc8] = a0\n 21119: a0 = u64 [a1 + 0xf0]\n 21123: u64 [s1 + 0xc0] = a0\n 21127: a0 = s1 + 0x7ff\n 21131: a0 = a0 + 0x121\n 21135: a1 = 0x40\n 21138: ra = 778, jump @23\n      : @772 [@dyn 389] (gas: 7)\n 21144: a3 = s1 + 0x7ff\n 21148: a3 = a3 + 0x51\n 21151: a0 = u64 [a3 + 0xe8]\n 21155: a1 = u64 [a3 + 0xe0]\n 21159: a2 = u64 [a3 + 0xd8]\n 21163: a4 = u64 [a3 + 0xd0]\n 21167: t0 = 780, jump @1526\n      : @773 [@dyn 390] (gas: 1)\n 21173: jump @775 if a0 == 0\n      : @774 (gas: 1)\n 21176: jump @1003\n      : @775 (gas: 14)\n 21179: a0 = u64 [s1 + 0xc0]\n 21183: u64 [a3 + 0xb0] = a0\n 21187: a0 = u64 [s1 + 0xc8]\n 21191: u64 [a3 + 0xb8] = a0\n 21195: a0 = u64 [s1 + 0xd0]\n 21199: u64 [a3 + 0xc0] = a0\n 21203: a1 = s1 + 0x7ff\n 21207: a1 = a1 + 0x101\n 21211: a0 = u64 [s1 + 0xd8]\n 21215: u64 [a3 + 0xc8] = a0\n 21219: a0 = a4\n 21221: u64 [s1 + 0xd8] = a4\n 21225: ra = 0x410\n 21229: jump @25\n      : @776 (gas: 21)\n 21232: a0 = sp + 0xffffffffffffffe0\n 21235: a0 = a0 & 0xffffffffffffffe0\n 21238: u64 [s1 + 0x80] = a0\n 21242: sp = a0\n 21244: u64 [t2 + 0x2a0] = t1\n 21248: u64 [t2 + 0x298] = ra\n 21252: u64 [t2 + 0x290] = t0\n 21256: a0 = u64 [s1 + 0xb0]\n 21260: a4 = t2 + 0x200\n 21264: u64 [a4 + 0x88] = a0\n 21268: a0 = u64 [s1 + 0x70]\n 21271: u64 [a4 + 0xc0] = a0\n 21275: u64 [a4 + 0xb8] = a1\n 21279: a0 = u64 [s1 + 0x68]\n 21282: u64 [a4 + 0xb0] = a0\n 21286: a0 = s1 + 0x2b20\n 21290: a1 = s1 + 0x2b00\n 21294: a2 = s1 + 0x2ae0\n 21298: a3 = u64 [s1 + 0x78]\n 21301: u64 [a4 + 0xa8] = a3\n 21305: ra = 782, jump @1336\n      : @777 [@dyn 391] (gas: 2)\n 21311: a0 = 0x3000\n 21315: t0 = 784, jump @1577\n      : @778 [@dyn 392] (gas: 15)\n 21321: a0 = u64 [a4 + 0xd8]\n 21325: a1 = u64 [a4 + 0xe0]\n 21329: a2 = u64 [a4 + 0xc8]\n 21333: a3 = u64 [a4 + 0xd0]\n 21337: a4 = u64 [s1 + 0x80]\n 21341: u64 [a4 + 0x10] = a0\n 21344: u64 [a4 + 0x18] = a1\n 21347: u64 [a4] = a2\n 21349: u64 [a4 + 0x8] = a3\n 21352: a0 = u64 [s1 + 0xa8]\n 21356: ra = 0x312\n 21360: ecalli 3 // 'caller'\n 21362: a2 = u64 [s1 + 0xb8]\n 21366: t0 = 0x314\n 21370: jump @1520\n      : @779 [@dyn 393] (gas: 2)\n 21373: a2 = u64 [s1 + 0xb8]\n 21377: t0 = 788, jump @1520\n      : @780 [@dyn 394] (gas: 8)\n 21383: u64 [a2 + 640] = 0\n 21387: a4 = a2 + 0x200\n 21391: u64 [a4 + 0x78] = a1\n 21394: u64 [a4 + 0x70] = a0\n 21397: a1 = s1 + 0x2ac0\n 21401: u64 [a4 + 0x68] = a3\n 21404: a0 = 0\n 21406: ra = 790, jump @25\n      : @781 [@dyn 395] (gas: 3)\n 21412: t0 = 0x318\n 21416: a1 = s1 + 0x2858\n 21420: fallthrough\n      : @782 [@dyn 396] (gas: 8)\n 21421: u64 [a1 + 608] = 0\n 21425: u64 [a1 + 600] = 0\n 21429: u64 [a1 + 584] = 0x5\n 21434: a2 = a1\n 21436: a0 = 0x20\n 21439: a1 = s1 + 0x2aa0\n 21443: u64 [a2 + 592] = 0\n 21447: ra = 794, jump @25\n      : @783 [@dyn 397] (gas: 3)\n 21453: a1 = u64 [s1 + 0xd8]\n 21457: a0 = i32 [a1]\n 21459: jump @785 if a0 >u 63\n      : @784 (gas: 2)\n 21463: u32 [a1 + 0] = 0x40\n 21466: fallthrough\n      : @785 (gas: 4)\n 21467: a0 = sp + 0xffffffffffffffe0\n 21470: a0 = a0 & 0xffffffffffffffe0\n 21473: u64 [s1 + 0xb0] = a0\n 21477: t0 = 796, jump @1535\n      : @786 [@dyn 398] (gas: 30)\n 21483: ecalli 6 // 'hash_keccak_256'\n 21485: a3 = u64 [s1 + 0xb0]\n 21489: a0 = u64 [a3 + 0x18]\n 21492: a1 = u64 [a3 + 0x10]\n 21495: a2 = u64 [a3 + 0x8]\n 21498: a3 = u64 [a3]\n 21500: a0 = reverse a0\n 21502: u64 [s1 + 0x98] = a0\n 21506: a0 = reverse a1\n 21508: u64 [s1 + 0x90] = a0\n 21512: a0 = reverse a2\n 21514: u64 [s1 + 0x88] = a0\n 21518: a0 = reverse a3\n 21520: u64 [s1 + 0x78] = a0\n 21523: a0 = sp + 0xffffffffffffffe0\n 21526: a0 = a0 & 0xffffffffffffffe0\n 21529: u64 [s1 + 0xb0] = a0\n 21533: sp = a0\n 21535: a2 = s1 + 0x2858\n 21539: u64 [a2 + 576] = 0\n 21543: a0 = u64 [s1 + 0xa0]\n 21547: a3 = a2 + 0x200\n 21551: u64 [a3 + 0x38] = a0\n 21554: a0 = u64 [s1 + 0xc0]\n 21558: u64 [a3 + 0x30] = a0\n 21561: a1 = s1 + 0x2a80\n 21565: a0 = u64 [s1 + 0xc8]\n 21569: u64 [a3 + 0x28] = a0\n 21572: a0 = 0\n 21574: ra = 798, jump @25\n      : @787 [@dyn 399] (gas: 14)\n 21580: a0 = u64 [s1 + 0x78]\n 21583: a1 = s1 + 0x2858\n 21587: a2 = a1 + 0x200\n 21591: u64 [a2 + 0x20] = a0\n 21594: a0 = u64 [s1 + 0x88]\n 21598: u64 [a2 + 0x18] = a0\n 21601: a0 = u64 [s1 + 0x90]\n 21605: u64 [a2 + 0x10] = a0\n 21608: a3 = a1\n 21610: a0 = 0x20\n 21613: a1 = s1 + 0x2a60\n 21617: a2 = u64 [s1 + 0x98]\n 21621: u64 [a3 + 0x208] = a2\n 21625: ra = 800, jump @25\n      : @788 [@dyn 400] (gas: 3)\n 21631: a1 = u64 [s1 + 0xd8]\n 21635: a0 = i32 [a1]\n 21637: jump @790 if a0 >u 63\n      : @789 (gas: 2)\n 21641: u32 [a1 + 0] = 0x40\n 21644: fallthrough\n      : @790 (gas: 4)\n 21645: a0 = sp + 0xffffffffffffffe0\n 21648: a0 = a0 & 0xffffffffffffffe0\n 21651: u64 [s1 + 0x98] = a0\n 21655: t0 = 802, jump @1535\n      : @791 [@dyn 401] (gas: 3)\n 21661: ra = 0x324\n 21665: ecalli 6 // 'hash_keccak_256'\n 21667: fallthrough\n      : @792 [@dyn 402] (gas: 7)\n 21668: a3 = u64 [s1 + 0x98]\n 21672: a0 = u64 [a3 + 0x18]\n 21675: a1 = u64 [a3 + 0x10]\n 21678: a2 = u64 [a3 + 0x8]\n 21681: a3 = u64 [a3]\n 21683: a4 = reverse a0\n 21685: t0 = 806, jump @1558\n      : @793 [@dyn 403] (gas: 7)\n 21691: a0 = u64 [s1 + 0xb0]\n 21695: u64 [a0 + 0x18] = a3\n 21698: u64 [a0 + 0x10] = a2\n 21701: u64 [a0 + 0x8] = a1\n 21704: u64 [a0] = a4\n 21706: a1 = u64 [s1 + 0x80]\n 21710: ra = 808, jump @31\n      : @794 [@dyn 404] (gas: 6)\n 21716: a0 = u64 [s1 + 0xa8]\n 21720: ra = 0x32a\n 21724: ecalli 3 // 'caller'\n 21726: a2 = u64 [s1 + 0xb8]\n 21730: t0 = 0x32c\n 21734: jump @1520\n      : @795 [@dyn 405] (gas: 2)\n 21737: a2 = u64 [s1 + 0xb8]\n 21741: t0 = 812, jump @1520\n      : @796 [@dyn 406] (gas: 8)\n 21747: u64 [a2 + 512] = 0\n 21751: a4 = a2 + 0x100\n 21755: u64 [a4 + 0xf8] = a1\n 21759: u64 [a4 + 0xf0] = a0\n 21763: a1 = s1 + 0x2a40\n 21767: u64 [a4 + 0xe8] = a3\n 21771: a0 = 0\n 21773: ra = 814, jump @25\n      : @797 [@dyn 407] (gas: 3)\n 21779: t0 = 0x330\n 21783: a1 = s1 + 0x2858\n 21787: fallthrough\n      : @798 [@dyn 408] (gas: 8)\n 21788: u64 [a1 + 480] = 0\n 21792: u64 [a1 + 472] = 0\n 21796: u64 [a1 + 456] = 0x5\n 21801: a2 = a1\n 21803: a0 = 0x20\n 21806: a1 = s1 + 0x2a20\n 21810: u64 [a2 + 464] = 0\n 21814: ra = 818, jump @25\n      : @799 [@dyn 409] (gas: 3)\n 21820: a1 = u64 [s1 + 0xd8]\n 21824: a0 = i32 [a1]\n 21826: jump @801 if a0 >u 63\n      : @800 (gas: 2)\n 21830: u32 [a1 + 0] = 0x40\n 21833: fallthrough\n      : @801 (gas: 4)\n 21834: a0 = sp + 0xffffffffffffffe0\n 21837: a0 = a0 & 0xffffffffffffffe0\n 21840: u64 [s1 + 0xb0] = a0\n 21844: t0 = 820, jump @1535\n      : @802 [@dyn 410] (gas: 5)\n 21850: ra = 0x336\n 21854: ecalli 6 // 'hash_keccak_256'\n 21856: a3 = u64 [s1 + 0xb0]\n 21860: t0 = 0x338\n 21864: jump @1550\n      : @803 [@dyn 411] (gas: 2)\n 21867: a3 = u64 [s1 + 0xb0]\n 21871: t0 = 824, jump @1550\n      : @804 [@dyn 412] (gas: 14)\n 21877: u64 [s1 + 0xb0] = a0\n 21881: sp = a0\n 21883: a2 = s1 + 0x2858\n 21887: u64 [a2 + 448] = 0\n 21891: a0 = u64 [s1 + 0xa0]\n 21895: a3 = a2 + 0x100\n 21899: u64 [a3 + 0xb8] = a0\n 21903: a0 = u64 [s1 + 0xc0]\n 21907: u64 [a3 + 0xb0] = a0\n 21911: a1 = s1 + 0x2a00\n 21915: a0 = u64 [s1 + 0xc8]\n 21919: u64 [a3 + 0xa8] = a0\n 21923: a0 = 0\n 21925: ra = 826, jump @25\n      : @805 [@dyn 413] (gas: 14)\n 21931: a0 = u64 [s1 + 0x80]\n 21935: a1 = s1 + 0x2858\n 21939: a2 = a1 + 0x100\n 21943: u64 [a2 + 0xa0] = a0\n 21947: a0 = u64 [s1 + 0x88]\n 21951: u64 [a2 + 0x98] = a0\n 21955: a0 = u64 [s1 + 0x90]\n 21959: u64 [a2 + 0x90] = a0\n 21963: a3 = a1\n 21965: a0 = 0x20\n 21968: a1 = s1 + 0x29e0\n 21972: a2 = u64 [s1 + 0x98]\n 21976: u64 [a3 + 0x188] = a2\n 21980: ra = 828, jump @25\n      : @806 [@dyn 414] (gas: 3)\n 21986: a1 = u64 [s1 + 0xd8]\n 21990: a0 = i32 [a1]\n 21992: jump @808 if a0 >u 63\n      : @807 (gas: 2)\n 21996: u32 [a1 + 0] = 0x40\n 21999: fallthrough\n      : @808 (gas: 4)\n 22000: a0 = sp + 0xffffffffffffffe0\n 22003: a0 = a0 & 0xffffffffffffffe0\n 22006: u64 [s1 + 0xd8] = a0\n 22010: t0 = 830, jump @1535\n      : @809 [@dyn 415] (gas: 5)\n 22016: ra = 0x340\n 22020: ecalli 6 // 'hash_keccak_256'\n 22022: a3 = u64 [s1 + 0xd8]\n 22026: t0 = 0x342\n 22030: jump @1536\n      : @810 [@dyn 416] (gas: 2)\n 22033: a3 = u64 [s1 + 0xd8]\n 22037: t0 = 834, jump @1536\n      : @811 [@dyn 417] (gas: 2)\n 22043: a0 = s1 + 0x29c0\n 22047: ra = 836, jump @27\n      : @812 [@dyn 418] (gas: 3)\n 22053: t0 = 0x346\n 22057: a1 = s1 + 0x2858\n 22061: fallthrough\n      : @813 [@dyn 419] (gas: 12)\n 22062: a2 = a1 + 0x100\n 22066: a0 = u64 [a2 + 0x80]\n 22070: u64 [s1 + 0xd8] = a0\n 22074: a0 = u64 [a2 + 0x78]\n 22077: u64 [s1 + 0xd0] = a0\n 22081: a0 = u64 [a2 + 0x70]\n 22084: u64 [s1 + 0xb0] = a0\n 22088: a0 = u64 [a2 + 0x68]\n 22091: u64 [s1 + 0x98] = a0\n 22095: a0 = s1 + 0x29a0\n 22099: a1 = 0x40\n 22102: ra = 840, jump @23\n      : @814 [@dyn 420] (gas: 7)\n 22108: a3 = s1 + 0x2858\n 22112: a5 = a3 + 0x100\n 22116: a4 = u64 [a5 + 0x60]\n 22119: a1 = u64 [a5 + 0x58]\n 22122: a2 = u64 [a5 + 0x50]\n 22125: a0 = u64 [a5 + 0x48]\n 22128: t0 = 842, jump @1528\n      : @815 [@dyn 421] (gas: 1)\n 22134: jump @817 if a1 == 0\n      : @816 (gas: 1)\n 22137: jump @1003\n      : @817 (gas: 12)\n 22140: a1 = u64 [s1 + 0x98]\n 22144: a4 = a3 + 0x100\n 22148: u64 [a4 + 0x28] = a1\n 22151: a1 = u64 [s1 + 0xb0]\n 22155: u64 [a4 + 0x30] = a1\n 22158: a1 = u64 [s1 + 0xd0]\n 22162: u64 [a4 + 0x38] = a1\n 22165: a1 = s1 + 0x2980\n 22169: a2 = u64 [s1 + 0xd8]\n 22173: u64 [a4 + 0x40] = a2\n 22176: u64 [s1 + 0xd8] = a0\n 22180: ra = 844, jump @25\n      : @818 [@dyn 422] (gas: 6)\n 22186: a0 = u64 [s1 + 0xa8]\n 22190: ra = 0x34e\n 22194: ecalli 3 // 'caller'\n 22196: a2 = u64 [s1 + 0xb8]\n 22200: t0 = 0x350\n 22204: jump @1522\n      : @819 [@dyn 423] (gas: 2)\n 22207: a2 = u64 [s1 + 0xb8]\n 22211: t0 = 848, jump @1522\n      : @820 [@dyn 424] (gas: 43)\n 22217: t0 = a1 | a0\n 22220: a3 = a3 >> 0x20\n 22223: a2 = reverse a2\n 22225: a1 = a2 << 0x20\n 22228: a1 = a1 | a3\n 22231: a2 = a2 >> 0x20\n 22234: a3 = s1 + 0x2858\n 22238: a0 = u64 [s1 + 0xa0]\n 22242: u64 [a3 + 0xd8] = a0\n 22246: a3 = u64 [0x20050]\n 22251: a4 = s1 + 0x2858\n 22255: u64 [a4 + 224] = 0\n 22259: a4 = s1 + 0x2858\n 22263: a0 = u64 [s1 + 0xc0]\n 22267: u64 [a4 + 0xd0] = a0\n 22271: a4 = s1 + 0x2858\n 22275: a0 = u64 [s1 + 0xc8]\n 22279: u64 [a4 + 0xc8] = a0\n 22283: a0 = s1 + 0x2858\n 22287: u64 [a0 + 0x120] = a3\n 22291: a3 = u64 [0x20058]\n 22296: a4 = u64 [0x20060]\n 22301: a5 = u64 [0x20068]\n 22306: a0 = s1 + 0x2858\n 22310: u64 [a0 + 256] = 0\n 22314: a0 = s1 + 0x2858\n 22318: u64 [a0 + 0x118] = a3\n 22322: a0 = s1 + 0x2858\n 22326: u64 [a0 + 0x110] = a4\n 22330: a0 = s1 + 0x2858\n 22334: u64 [a0 + 0x108] = a5\n 22338: a0 = s1 + 0x2858\n 22342: u64 [a0 + 0xf8] = a2\n 22346: a0 = s1 + 0x2858\n 22350: u64 [a0 + 0xf0] = a1\n 22354: a1 = 0x20\n 22357: a2 = s1 + 0x2960\n 22361: a3 = s1 + 0x2940\n 22365: a4 = s1 + 0x2920\n 22369: a0 = s1 + 0x2858\n 22373: u64 [a0 + 0xe8] = t0\n 22377: a0 = u64 [s1 + 0xd8]\n 22381: ra = 850, jump @34\n      : @821 [@dyn 425] (gas: 3)\n 22387: a0 = s1 + 0x2900\n 22391: a1 = 0x40\n 22394: ra = 852, jump @23\n      : @822 [@dyn 426] (gas: 6)\n 22400: a3 = s1 + 0x2858\n 22404: a4 = u64 [a3 + 0xc0]\n 22408: a1 = u64 [a3 + 0xb8]\n 22412: a2 = u64 [a3 + 0xb0]\n 22416: a0 = u64 [a3 + 0xa8]\n 22420: t0 = 854, jump @1528\n      : @823 [@dyn 427] (gas: 1)\n 22426: jump @825 if a1 == 0\n      : @824 (gas: 1)\n 22429: jump @1003\n      : @825 (gas: 8)\n 22432: u64 [a3 + 160] = 0\n 22436: u64 [a3 + 152] = 0\n 22440: u64 [a3 + 136] = 0x1\n 22445: a1 = s1 + 0x28e0\n 22449: u64 [a3 + 144] = 0\n 22453: u64 [s1 + 0xd8] = a0\n 22457: ra = 0x410\n 22461: jump @25\n      : @826 (gas: 9)\n 22464: a0 = 0x301b0\n 22469: u64 [s1 + 0xb0] = a0\n 22473: i32 a0 = a0 + 0\n 22475: u64 [s1 + 0xa0] = a0\n 22479: ra = 0x358\n 22483: ecalli 3 // 'caller'\n 22485: a2 = u64 [s1 + 0xb0]\n 22489: t0 = 0x35a\n 22493: jump @1531\n      : @827 [@dyn 428] (gas: 2)\n 22496: a2 = u64 [s1 + 0xb0]\n 22500: t0 = 858, jump @1531\n      : @828 [@dyn 429] (gas: 9)\n 22506: a2 = s1 + 0x1858\n 22510: u64 [a2 + 768] = 0\n 22514: a4 = a2 + 0x200\n 22518: u64 [a4 + 0xf8] = a1\n 22522: u64 [a4 + 0xf0] = a0\n 22526: a1 = s1 + 0x1b40\n 22530: u64 [a4 + 0xe8] = a3\n 22534: a0 = 0\n 22536: ra = 860, jump @25\n      : @829 [@dyn 430] (gas: 3)\n 22542: t0 = 0x35e\n 22546: a1 = s1 + 0x1858\n 22550: fallthrough\n      : @830 [@dyn 431] (gas: 8)\n 22551: u64 [a1 + 736] = 0\n 22555: u64 [a1 + 728] = 0\n 22559: u64 [a1 + 712] = 0x4\n 22564: a2 = a1\n 22566: a0 = 0x20\n 22569: a1 = s1 + 0x1b20\n 22573: u64 [a2 + 720] = 0\n 22577: ra = 864, jump @25\n      : @831 [@dyn 432] (gas: 6)\n 22583: a0 = sp + 0xffffffffffffffe0\n 22586: a0 = a0 & 0xffffffffffffffe0\n 22589: u64 [s1 + 0xb8] = a0\n 22593: sp = a0\n 22595: a1 = i32 [0x2019c]\n 22600: jump @833 if a1 >u 63\n      : @832 (gas: 2)\n 22604: u32 [0x2019c] = 0x40\n 22610: fallthrough\n      : @833 (gas: 14)\n 22611: a0 = sp + 0xffffffffffffffe0\n 22614: a2 = a0 & 0xffffffffffffffe0\n 22617: u64 [s1 + 0xa8] = a2\n 22621: sp = a2\n 22623: a0 = 0x201b0\n 22628: i32 a0 = a0 + 0\n 22630: i32 a2 = a2 + 0\n 22632: a1 = 0x40\n 22635: u64 [s1 + 0x98] = a0\n 22639: ra = 0x362\n 22643: ecalli 6 // 'hash_keccak_256'\n 22645: a3 = u64 [s1 + 0xa8]\n 22649: t0 = 0x364\n 22653: jump @1529\n      : @834 [@dyn 433] (gas: 2)\n 22656: a3 = u64 [s1 + 0xa8]\n 22660: t0 = 868, jump @1529\n      : @835 [@dyn 434] (gas: 7)\n 22666: a1 = u64 [s1 + 0xb8]\n 22670: u64 [a1 + 0x18] = a3\n 22673: u64 [a1 + 0x10] = a2\n 22676: u64 [a1 + 0x8] = a4\n 22679: u64 [a1] = a0\n 22681: a0 = s1 + 0x1b00\n 22685: ra = 870, jump @27\n      : @836 [@dyn 435] (gas: 22)\n 22691: a4 = s1 + 0x1858\n 22695: a3 = u64 [a4 + 0x2a8]\n 22699: a0 = u64 [a4 + 0x2b0]\n 22703: a1 = u64 [a4 + 0x2b8]\n 22707: a2 = u64 [a4 + 0x2c0]\n 22711: a5 = u64 [s1 + 0xd8]\n 22715: u64 [a4 + 0x260] = a5\n 22719: a5 = u64 [s1 + 0xd0]\n 22723: u64 [a4 + 0x258] = a5\n 22727: a5 = u64 [s1 + 0xc8]\n 22731: u64 [a4 + 0x250] = a5\n 22735: a5 = u64 [s1 + 0xc0]\n 22739: u64 [a4 + 0x248] = a5\n 22743: a5 = a4 + 0x200\n 22747: u64 [a5 + 0x80] = a2\n 22751: u64 [a5 + 0x78] = a1\n 22754: u64 [a5 + 0x70] = a0\n 22757: a0 = s1 + 0x1ae0\n 22761: a1 = s1 + 0x1ac0\n 22765: a2 = s1 + 0x1aa0\n 22769: u64 [a5 + 0x68] = a3\n 22772: ra = 872, jump @1344\n      : @837 [@dyn 436] (gas: 2)\n 22778: a0 = 0x2000\n 22782: t0 = 874, jump @1577\n      : @838 [@dyn 437] (gas: 13)\n 22788: a0 = u64 [a4 + 0xa0]\n 22792: a1 = u64 [a4 + 0x98]\n 22796: a2 = u64 [a4 + 0x90]\n 22800: a3 = u64 [a4 + 0x88]\n 22804: a4 = s1 + 0x3858\n 22808: a5 = a4 + 0x100\n 22812: u64 [a5 + 0xa0] = a0\n 22816: u64 [a5 + 0x98] = a1\n 22820: u64 [a5 + 0x90] = a2\n 22824: u64 [a5 + 0x88] = a3\n 22828: a1 = s1 + 0x39e0\n 22832: a0 = u64 [s1 + 0xb8]\n 22836: ra = 876, jump @31\n      : @839 [@dyn 438] (gas: 8)\n 22842: a0 = s1 + 0x3858\n 22846: u64 [a0 + 448] = 0\n 22850: u64 [a0 + 440] = 0\n 22854: u64 [a0 + 432] = 0\n 22858: u64 [a0 + 424] = 0x3\n 22863: a0 = s1 + 0x1a80\n 22867: a1 = s1 + 0x3a00\n 22871: ra = 878, jump @27\n      : @840 [@dyn 439] (gas: 22)\n 22877: a4 = s1 + 0x1858\n 22881: a3 = u64 [a4 + 0x228]\n 22885: a0 = u64 [a4 + 0x230]\n 22889: a1 = u64 [a4 + 0x238]\n 22893: a2 = u64 [a4 + 0x240]\n 22897: a5 = u64 [s1 + 0xd8]\n 22901: u64 [a4 + 0x1e0] = a5\n 22905: a5 = u64 [s1 + 0xd0]\n 22909: u64 [a4 + 0x1d8] = a5\n 22913: a5 = u64 [s1 + 0xc8]\n 22917: u64 [a4 + 0x1d0] = a5\n 22921: a5 = u64 [s1 + 0xc0]\n 22925: u64 [a4 + 0x1c8] = a5\n 22929: u64 [a4 + 0x200] = a2\n 22933: a5 = a4 + 0x100\n 22937: u64 [a5 + 0xf8] = a1\n 22941: u64 [a5 + 0xf0] = a0\n 22945: a0 = s1 + 0x1a60\n 22949: a1 = s1 + 0x1a40\n 22953: a2 = s1 + 0x1a20\n 22957: u64 [a5 + 0xe8] = a3\n 22961: ra = 880, jump @1344\n      : @841 [@dyn 440] (gas: 2)\n 22967: a0 = 0x2000\n 22971: t0 = 882, jump @1577\n      : @842 [@dyn 441] (gas: 17)\n 22977: a0 = u64 [a4 + 0x8]\n 22980: a1 = u64 [a4 + 0x10]\n 22983: a2 = u64 [a4 + 0x18]\n 22986: a3 = u64 [a4 + 0x20]\n 22989: a4 = s1 + 0x3858\n 22993: u64 [a4 + 480] = 0\n 22997: u64 [a4 + 472] = 0\n 23001: u64 [a4 + 464] = 0\n 23005: u64 [a4 + 456] = 0x3\n 23010: u64 [a4 + 0x200] = a3\n 23014: a3 = a4 + 0x100\n 23018: u64 [a3 + 0xf8] = a2\n 23022: u64 [a3 + 0xf0] = a1\n 23026: u64 [a3 + 0xe8] = a0\n 23030: a0 = s1 + 0x3a20\n 23034: a1 = s1 + 0x3a40\n 23038: ra = 884, jump @31\n      : @843 [@dyn 442] (gas: 3)\n 23044: a0 = s1 + 0x1a00\n 23048: a1 = 0x40\n 23051: ra = 886, jump @23\n      : @844 [@dyn 443] (gas: 7)\n 23057: a3 = s1 + 0x1858\n 23061: a5 = a3 + 0x100\n 23065: a0 = u64 [a5 + 0xc0]\n 23069: a1 = u64 [a5 + 0xb8]\n 23073: a2 = u64 [a5 + 0xb0]\n 23077: a4 = u64 [a5 + 0xa8]\n 23081: t0 = 888, jump @1526\n      : @845 [@dyn 444] (gas: 1)\n 23087: jump @847 if a0 == 0\n      : @846 (gas: 1)\n 23090: jump @1003\n      : @847 (gas: 13)\n 23093: a0 = u64 [s1 + 0xc0]\n 23097: a2 = a3 + 0x100\n 23101: u64 [a2 + 0x88] = a0\n 23105: a0 = u64 [s1 + 0xc8]\n 23109: u64 [a2 + 0x90] = a0\n 23113: a0 = u64 [s1 + 0xd0]\n 23117: u64 [a2 + 0x98] = a0\n 23121: a1 = s1 + 0x19e0\n 23125: a0 = u64 [s1 + 0xd8]\n 23129: u64 [a2 + 0xa0] = a0\n 23133: a0 = a4\n 23135: u64 [s1 + 0xb8] = a4\n 23139: ra = 890, jump @25\n      : @848 [@dyn 445] (gas: 6)\n 23145: a0 = u64 [s1 + 0xa0]\n 23149: ra = 0x37c\n 23153: ecalli 3 // 'caller'\n 23155: a2 = u64 [s1 + 0xb0]\n 23159: t0 = 0x37e\n 23163: jump @1522\n      : @849 [@dyn 446] (gas: 2)\n 23166: a2 = u64 [s1 + 0xb0]\n 23170: t0 = 894, jump @1522\n      : @850 [@dyn 447] (gas: 31)\n 23176: t0 = a1 | a0\n 23179: a3 = a3 >> 0x20\n 23182: a2 = reverse a2\n 23184: a1 = a2 << 0x20\n 23187: a1 = a1 | a3\n 23190: a2 = a2 >> 0x20\n 23193: a3 = u64 [0x200a8]\n 23198: a4 = s1 + 0x1858\n 23202: u64 [a4 + 0x180] = a3\n 23206: a3 = u64 [0x200b0]\n 23211: a4 = u64 [0x200b8]\n 23216: a5 = u64 [0x200c0]\n 23221: a0 = s1 + 0x1858\n 23225: u64 [a0 + 0x178] = a3\n 23229: a0 = s1 + 0x1858\n 23233: u64 [a0 + 0x170] = a4\n 23237: a3 = s1 + 0x1858\n 23241: u64 [a3 + 352] = 0\n 23245: a0 = s1 + 0x1858\n 23249: u64 [a0 + 0x168] = a5\n 23253: a3 = s1 + 0x1858\n 23257: u64 [a3 + 0x158] = a2\n 23261: a2 = s1 + 0x1858\n 23265: u64 [a2 + 0x150] = a1\n 23269: a1 = 0x20\n 23272: a2 = s1 + 0x19c0\n 23276: a3 = s1 + 0x19a0\n 23280: a4 = s1 + 0x1858\n 23284: u64 [a4 + 0x148] = t0\n 23288: a0 = u64 [s1 + 0xb8]\n 23292: ra = 896, jump @32\n      : @851 [@dyn 448] (gas: 3)\n 23298: a0 = s1 + 0x1980\n 23302: a1 = 0x40\n 23305: ra = 898, jump @23\n      : @852 [@dyn 449] (gas: 7)\n 23311: a3 = s1 + 0x1858\n 23315: a5 = a3 + 0x100\n 23319: a0 = u64 [a5 + 0x40]\n 23322: a1 = u64 [a5 + 0x38]\n 23325: a2 = u64 [a5 + 0x30]\n 23328: a4 = u64 [a5 + 0x28]\n 23331: t0 = 900, jump @1526\n      : @853 [@dyn 450] (gas: 1)\n 23337: jump @855 if a0 == 0\n      : @854 (gas: 1)\n 23340: jump @1003\n      : @855 (gas: 13)\n 23343: a0 = u64 [s1 + 0xc0]\n 23347: a2 = a3 + 0x100\n 23351: u64 [a2 + 0x8] = a0\n 23354: a0 = u64 [s1 + 0xc8]\n 23358: u64 [a2 + 0x10] = a0\n 23361: a0 = u64 [s1 + 0xd0]\n 23365: u64 [a2 + 0x18] = a0\n 23368: a1 = s1 + 0x1960\n 23372: a0 = u64 [s1 + 0xd8]\n 23376: u64 [a2 + 0x20] = a0\n 23379: a0 = a4\n 23381: u64 [s1 + 0xd8] = a4\n 23385: ra = 902, jump @25\n      : @856 [@dyn 451] (gas: 6)\n 23391: a0 = u64 [s1 + 0xa0]\n 23395: ra = 0x388\n 23399: ecalli 3 // 'caller'\n 23401: a2 = u64 [s1 + 0xb0]\n 23405: t0 = 0x38a\n 23409: jump @1522\n      : @857 [@dyn 452] (gas: 2)\n 23412: a2 = u64 [s1 + 0xb0]\n 23416: t0 = 906, jump @1522\n      : @858 [@dyn 453] (gas: 29)\n 23422: t0 = a1 | a0\n 23425: a3 = a3 >> 0x20\n 23428: a2 = reverse a2\n 23430: a1 = a2 << 0x20\n 23433: a1 = a1 | a3\n 23436: a2 = a2 >> 0x20\n 23439: a3 = u64 [0x20030]\n 23444: a4 = u64 [0x20038]\n 23449: a5 = u64 [0x20040]\n 23454: a0 = s1 + 0x1858\n 23458: u64 [a0 + 0x100] = a3\n 23462: u64 [a0 + 0xf8] = a4\n 23466: u64 [a0 + 192] = 0\n 23470: u64 [a0 + 0xf0] = a5\n 23474: a3 = u64 [0x20048]\n 23479: u64 [a0 + 224] = 0\n 23483: u64 [a0 + 216] = 0\n 23487: u64 [a0 + 208] = 0\n 23491: u64 [a0 + 0xe8] = a3\n 23495: u64 [a0 + 0xb8] = a2\n 23499: u64 [a0 + 0xb0] = a1\n 23503: u64 [a0 + 0xa8] = t0\n 23507: a1 = 0x20\n 23510: a2 = s1 + 0x1940\n 23514: a3 = s1 + 0x1920\n 23518: a4 = s1 + 0x1900\n 23522: u64 [a0 + 200] = 0\n 23526: a0 = u64 [s1 + 0xd8]\n 23530: ra = 908, jump @34\n      : @859 [@dyn 454] (gas: 5)\n 23536: a0 = 0\n 23538: a1 = u64 [s1 + 0x98]\n 23542: a2 = 0\n 23544: ecalli 7 // 'seal_return'\n 23546: jump @1089\n      : @860 (gas: 6)\n 23549: a0 = u64 [s1 + 0xa8]\n 23553: ra = 0x38e\n 23557: ecalli 3 // 'caller'\n 23559: a2 = u64 [s1 + 0xb8]\n 23563: t0 = 0x390\n 23567: jump @1521\n      : @861 [@dyn 455] (gas: 2)\n 23570: a2 = u64 [s1 + 0xb8]\n 23574: t0 = 912, jump @1521\n      : @862 [@dyn 456] (gas: 8)\n 23580: u64 [a2 + 1888] = 0\n 23584: a4 = a2 + 0x700\n 23588: u64 [a4 + 0x58] = a1\n 23591: u64 [a4 + 0x50] = a0\n 23594: a1 = s1 + 0x17a0\n 23598: u64 [a4 + 0x48] = a3\n 23601: a0 = 0\n 23603: ra = 914, jump @25\n      : @863 [@dyn 457] (gas: 3)\n 23609: t0 = 0x394\n 23613: a1 = s1 + 0x1058\n 23617: fallthrough\n      : @864 [@dyn 458] (gas: 8)\n 23618: u64 [a1 + 1856] = 0\n 23622: u64 [a1 + 1848] = 0\n 23626: u64 [a1 + 1832] = 0x4\n 23631: a2 = a1\n 23633: a0 = 0x20\n 23636: a1 = s1 + 0x1780\n 23640: u64 [a2 + 1840] = 0\n 23644: ra = 918, jump @25\n      : @865 [@dyn 459] (gas: 7)\n 23650: a0 = sp + 0xffffffffffffffe0\n 23653: a0 = a0 & 0xffffffffffffffe0\n 23656: u64 [s1 + 0xb0] = a0\n 23660: sp = a0\n 23662: a2 = u64 [s1 + 0x98]\n 23666: a0 = i32 [a2]\n 23668: jump @867 if a0 >u 63\n      : @866 (gas: 2)\n 23672: u32 [a2 + 0] = 0x40\n 23675: fallthrough\n      : @867 (gas: 12)\n 23676: a0 = sp + 0xffffffffffffffe0\n 23679: a0 = a0 & 0xffffffffffffffe0\n 23682: u64 [s1 + 0x98] = a0\n 23686: sp = a0\n 23688: i32 a2 = a0 + 0\n 23690: a1 = 0x40\n 23693: a0 = u64 [s1 + 0xa0]\n 23697: ra = 0x398\n 23701: ecalli 6 // 'hash_keccak_256'\n 23703: a3 = u64 [s1 + 0x98]\n 23707: t0 = 0x39a\n 23711: jump @1536\n      : @868 [@dyn 460] (gas: 2)\n 23714: a3 = u64 [s1 + 0x98]\n 23718: t0 = 922, jump @1536\n      : @869 [@dyn 461] (gas: 2)\n 23724: a0 = s1 + 0x1760\n 23728: ra = 924, jump @27\n      : @870 [@dyn 462] (gas: 23)\n 23734: a4 = s1 + 0x1058\n 23738: a5 = a4 + 0x700\n 23742: a3 = u64 [a5 + 0x8]\n 23745: a0 = u64 [a5 + 0x10]\n 23748: a1 = u64 [a5 + 0x18]\n 23751: a2 = u64 [a5 + 0x20]\n 23754: a5 = u64 [s1 + 0xd8]\n 23758: u64 [a4 + 0x6c0] = a5\n 23762: a5 = u64 [s1 + 0xd0]\n 23766: u64 [a4 + 0x6b8] = a5\n 23770: a5 = u64 [s1 + 0xc8]\n 23774: u64 [a4 + 0x6b0] = a5\n 23778: a5 = u64 [s1 + 0xc0]\n 23782: u64 [a4 + 0x6a8] = a5\n 23786: a5 = a4 + 0x600\n 23790: u64 [a5 + 0xe0] = a2\n 23794: u64 [a5 + 0xd8] = a1\n 23798: u64 [a5 + 0xd0] = a0\n 23802: a0 = s1 + 0x1740\n 23806: a1 = s1 + 0x1720\n 23810: a2 = s1 + 0x1700\n 23814: u64 [a5 + 0xc8] = a3\n 23818: ra = 926, jump @1336\n      : @871 [@dyn 463] (gas: 14)\n 23824: a3 = s1 + 0x1058\n 23828: a0 = u64 [a3 + 0x700]\n 23832: a4 = a3 + 0x600\n 23836: a1 = u64 [a4 + 0xf8]\n 23840: a2 = u64 [a4 + 0xf0]\n 23844: a3 = u64 [a4 + 0xe8]\n 23848: a4 = s1 + 0x3858\n 23852: u64 [a4 + 0xc0] = a0\n 23856: u64 [a4 + 0xb8] = a1\n 23860: u64 [a4 + 0xb0] = a2\n 23864: u64 [a4 + 0xa8] = a3\n 23868: a1 = s1 + 0x3900\n 23872: a0 = u64 [s1 + 0xb0]\n 23876: ra = 928, jump @31\n      : @872 [@dyn 464] (gas: 8)\n 23882: a0 = s1 + 0x3858\n 23886: u64 [a0 + 224] = 0\n 23890: u64 [a0 + 216] = 0\n 23894: u64 [a0 + 208] = 0\n 23898: u64 [a0 + 200] = 0x3\n 23903: a0 = s1 + 0x16e0\n 23907: a1 = s1 + 0x3920\n 23911: ra = 930, jump @27\n      : @873 [@dyn 465] (gas: 22)\n 23917: a4 = s1 + 0x1058\n 23921: a3 = u64 [a4 + 0x688]\n 23925: a0 = u64 [a4 + 0x690]\n 23929: a1 = u64 [a4 + 0x698]\n 23933: a2 = u64 [a4 + 0x6a0]\n 23937: a5 = u64 [s1 + 0xd8]\n 23941: u64 [a4 + 0x640] = a5\n 23945: a5 = u64 [s1 + 0xd0]\n 23949: u64 [a4 + 0x638] = a5\n 23953: a5 = u64 [s1 + 0xc8]\n 23957: u64 [a4 + 0x630] = a5\n 23961: a5 = u64 [s1 + 0xc0]\n 23965: u64 [a4 + 0x628] = a5\n 23969: a5 = a4 + 0x600\n 23973: u64 [a5 + 0x60] = a2\n 23976: u64 [a5 + 0x58] = a1\n 23979: u64 [a5 + 0x50] = a0\n 23982: a0 = s1 + 0x16c0\n 23986: a1 = s1 + 0x16a0\n 23990: a2 = s1 + 0x1680\n 23994: u64 [a5 + 0x48] = a3\n 23997: ra = 932, jump @1336\n      : @874 [@dyn 466] (gas: 19)\n 24003: a3 = s1 + 0x1058\n 24007: a4 = a3 + 0x600\n 24011: a0 = u64 [a4 + 0x68]\n 24014: a1 = u64 [a4 + 0x70]\n 24017: a2 = u64 [a4 + 0x78]\n 24020: a3 = u64 [a4 + 0x80]\n 24024: a4 = s1 + 0x3858\n 24028: u64 [a4 + 256] = 0\n 24032: u64 [a4 + 248] = 0\n 24036: u64 [a4 + 240] = 0\n 24040: u64 [a4 + 232] = 0x3\n 24045: a5 = a4 + 0x100\n 24049: u64 [a5 + 0x20] = a3\n 24052: u64 [a5 + 0x18] = a2\n 24055: u64 [a5 + 0x10] = a1\n 24058: u64 [a5 + 0x8] = a0\n 24061: a0 = s1 + 0x3940\n 24065: a1 = s1 + 0x3960\n 24069: ra = 934, jump @31\n      : @875 [@dyn 467] (gas: 3)\n 24075: a0 = s1 + 0x1660\n 24079: a1 = 0x40\n 24082: ra = 936, jump @23\n      : @876 [@dyn 468] (gas: 7)\n 24088: a3 = s1 + 0x1058\n 24092: a5 = a3 + 0x600\n 24096: a0 = u64 [a5 + 0x20]\n 24099: a1 = u64 [a5 + 0x18]\n 24102: a2 = u64 [a5 + 0x10]\n 24105: a4 = u64 [a5 + 0x8]\n 24108: t0 = 938, jump @1526\n      : @877 [@dyn 469] (gas: 1)\n 24114: jump @879 if a0 == 0\n      : @878 (gas: 1)\n 24117: jump @1003\n      : @879 (gas: 13)\n 24120: a0 = u64 [s1 + 0xc0]\n 24124: a1 = a3 + 0x500\n 24128: u64 [a1 + 0xe8] = a0\n 24132: a0 = u64 [s1 + 0xc8]\n 24136: u64 [a1 + 0xf0] = a0\n 24140: a0 = u64 [s1 + 0xd0]\n 24144: u64 [a1 + 0xf8] = a0\n 24148: a1 = s1 + 0x1640\n 24152: a0 = u64 [s1 + 0xd8]\n 24156: u64 [a3 + 0x600] = a0\n 24160: a0 = a4\n 24162: u64 [s1 + 0xb0] = a4\n 24166: ra = 940, jump @25\n      : @880 [@dyn 470] (gas: 6)\n 24172: a0 = u64 [s1 + 0xa8]\n 24176: ra = 0x3ae\n 24180: ecalli 3 // 'caller'\n 24182: a2 = u64 [s1 + 0xb8]\n 24186: t0 = 0x3b0\n 24190: jump @1522\n      : @881 [@dyn 471] (gas: 2)\n 24193: a2 = u64 [s1 + 0xb8]\n 24197: t0 = 944, jump @1522\n      : @882 [@dyn 472] (gas: 31)\n 24203: t0 = a1 | a0\n 24206: a3 = a3 >> 0x20\n 24209: a2 = reverse a2\n 24211: a1 = a2 << 0x20\n 24214: a1 = a1 | a3\n 24217: a2 = a2 >> 0x20\n 24220: a3 = u64 [0x200e8]\n 24225: a4 = s1 + 0x1058\n 24229: u64 [a4 + 0x5e0] = a3\n 24233: a3 = u64 [0x200f0]\n 24238: a4 = u64 [0x200f8]\n 24243: a5 = u64 [0x20100]\n 24248: a0 = s1 + 0x1058\n 24252: u64 [a0 + 0x5d8] = a3\n 24256: a0 = s1 + 0x1058\n 24260: u64 [a0 + 0x5d0] = a4\n 24264: a3 = s1 + 0x1058\n 24268: u64 [a3 + 1472] = 0\n 24272: a0 = s1 + 0x1058\n 24276: u64 [a0 + 0x5c8] = a5\n 24280: a3 = s1 + 0x1058\n 24284: u64 [a3 + 0x5b8] = a2\n 24288: a2 = s1 + 0x1058\n 24292: u64 [a2 + 0x5b0] = a1\n 24296: a1 = 0x20\n 24299: a2 = s1 + 0x1620\n 24303: a3 = s1 + 0x1600\n 24307: a4 = s1 + 0x1058\n 24311: u64 [a4 + 0x5a8] = t0\n 24315: a0 = u64 [s1 + 0xb0]\n 24319: ra = 946, jump @32\n      : @883 [@dyn 473] (gas: 3)\n 24325: a0 = s1 + 0x15e0\n 24329: a1 = 0x40\n 24332: ra = 948, jump @23\n      : @884 [@dyn 474] (gas: 7)\n 24338: a3 = s1 + 0x1058\n 24342: a5 = a3 + 0x500\n 24346: a0 = u64 [a5 + 0xa0]\n 24350: a1 = u64 [a5 + 0x98]\n 24354: a2 = u64 [a5 + 0x90]\n 24358: a4 = u64 [a5 + 0x88]\n 24362: t0 = 950, jump @1526\n      : @885 [@dyn 475] (gas: 1)\n 24368: jump @887 if a0 == 0\n      : @886 (gas: 1)\n 24371: jump @1003\n      : @887 (gas: 13)\n 24374: a0 = u64 [s1 + 0xc0]\n 24378: a2 = a3 + 0x500\n 24382: u64 [a2 + 0x68] = a0\n 24385: a0 = u64 [s1 + 0xc8]\n 24389: u64 [a2 + 0x70] = a0\n 24392: a0 = u64 [s1 + 0xd0]\n 24396: u64 [a2 + 0x78] = a0\n 24399: a1 = s1 + 0x15c0\n 24403: a0 = u64 [s1 + 0xd8]\n 24407: u64 [a2 + 0x80] = a0\n 24411: a0 = a4\n 24413: u64 [s1 + 0xd8] = a4\n 24417: ra = 952, jump @25\n      : @888 [@dyn 476] (gas: 6)\n 24423: a0 = u64 [s1 + 0xa8]\n 24427: ra = 0x3ba\n 24431: ecalli 3 // 'caller'\n 24433: a2 = u64 [s1 + 0xb8]\n 24437: t0 = 0x3bc\n 24441: jump @1522\n      : @889 [@dyn 477] (gas: 2)\n 24444: a2 = u64 [s1 + 0xb8]\n 24448: t0 = 956, jump @1522\n      : @890 [@dyn 478] (gas: 30)\n 24454: t0 = a1 | a0\n 24457: a3 = a3 >> 0x20\n 24460: a2 = reverse a2\n 24462: a1 = a2 << 0x20\n 24465: a1 = a1 | a3\n 24468: a2 = a2 >> 0x20\n 24471: a3 = u64 [0x20030]\n 24476: a4 = u64 [0x20038]\n 24481: a5 = u64 [0x20040]\n 24486: a0 = s1 + 0x1058\n 24490: u64 [a0 + 0x560] = a3\n 24494: u64 [a0 + 0x558] = a4\n 24498: u64 [a0 + 1312] = 0\n 24502: a4 = a0 + 0x500\n 24506: u64 [a4 + 0x50] = a5\n 24509: a3 = u64 [0x20048]\n 24514: u64 [a0 + 1304] = 0\n 24518: u64 [a0 + 1296] = 0\n 24522: u64 [a0 + 1288] = 0\n 24526: u64 [a4 + 0x48] = a3\n 24529: u64 [a4 + 0x38] = a2\n 24532: u64 [a4 + 0x30] = a1\n 24535: u64 [a0 + 0x528] = t0\n 24539: a1 = 0x20\n 24542: a2 = s1 + 0x15a0\n 24546: a3 = s1 + 0x1580\n 24550: a4 = s1 + 0x1560\n 24554: u64 [a0 + 1344] = 0\n 24558: a0 = u64 [s1 + 0xd8]\n 24562: ra = 958, jump @34\n      : @891 [@dyn 479] (gas: 5)\n 24568: a0 = 0\n 24570: a1 = u64 [s1 + 0xa0]\n 24574: a2 = 0\n 24576: ecalli 7 // 'seal_return'\n 24578: jump @1089\n      : @892 (gas: 22)\n 24581: a1 = 0xffffffff\n 24591: a2 = u64 [s1 + 0x48]\n 24594: a2 = a2 & 0xffffffffffffffff\n 24597: a3 = u64 [s1 + 0x50]\n 24600: a0 = a3 & 0xffffffffffffffff\n 24603: a3 = u64 [s1 + 0x58]\n 24606: a1 = a1 & a3\n 24609: u64 [s1 + 0x80] = a0\n 24613: u64 [s1 + 0x70] = a1\n 24616: a0 = a0 | a1\n 24619: u64 [s1 + 0x78] = a2\n 24622: a0 = a0 | a2\n 24625: a0 = a0 >u 0\n 24627: u64 [t0 + 1320] = 0\n 24631: u64 [t0 + 1312] = 0\n 24635: u64 [t0 + 0x510] = a0\n 24639: a0 = s1 + 0x7ff\n 24643: a0 = a0 + 0x561\n 24647: u64 [t0 + 1304] = 0\n 24651: ra = 0x3c0\n 24655: t0 = 0x582\n 24659: jump @1542\n      : @893 [@dyn 480] (gas: 13)\n 24662: a2 = s1 + 0x7ff\n 24666: a2 = a2 + 0x51\n 24669: u64 [a2 + 1288] = 0\n 24673: a0 = u64 [s1 + 0x98]\n 24677: u64 [a2 + 0x500] = a0\n 24681: a0 = u64 [s1 + 0xa0]\n 24685: u64 [a2 + 0x4f8] = a0\n 24689: a1 = s1 + 0x7ff\n 24693: a1 = a1 + 0x541\n 24697: a0 = u64 [s1 + 0xa8]\n 24701: u64 [a2 + 0x4f0] = a0\n 24705: a0 = 0\n 24707: ra = 962, jump @25\n      : @894 [@dyn 481] (gas: 11)\n 24713: a0 = s1 + 0x7ff\n 24717: a0 = a0 + 0x51\n 24720: u64 [a0 + 1256] = 0\n 24724: u64 [a0 + 1248] = 0\n 24728: u64 [a0 + 1240] = 0\n 24732: a3 = a0\n 24734: a0 = 0x20\n 24737: a1 = s1 + 0x7ff\n 24741: a1 = a1 + 0x521\n 24745: u64 [a3 + 1232] = 0x4\n 24750: ra = 964, jump @25\n      : @895 [@dyn 482] (gas: 7)\n 24756: a0 = sp + 0xffffffffffffffe0\n 24759: a0 = a0 & 0xffffffffffffffe0\n 24762: u64 [s1 + 0x88] = a0\n 24766: sp = a0\n 24768: a1 = u64 [s1 + 0xd8]\n 24772: a0 = i32 [a1]\n 24774: jump @897 if a0 >u 63\n      : @896 (gas: 2)\n 24778: u32 [a1 + 0] = 0x40\n 24781: fallthrough\n      : @897 (gas: 4)\n 24782: a0 = sp + 0xffffffffffffffe0\n 24785: a0 = a0 & 0xffffffffffffffe0\n 24788: u64 [s1 + 0x68] = a0\n 24791: t0 = 966, jump @1535\n      : @898 [@dyn 483] (gas: 5)\n 24797: ra = 0x3c8\n 24801: ecalli 6 // 'hash_keccak_256'\n 24803: a3 = u64 [s1 + 0x68]\n 24806: t0 = 0x3ca\n 24810: jump @1523\n      : @899 [@dyn 484] (gas: 2)\n 24813: a3 = u64 [s1 + 0x68]\n 24816: t0 = 970, jump @1523\n      : @900 [@dyn 485] (gas: 2)\n 24822: a0 = a0 + 0x501\n 24826: ra = 972, jump @27\n      : @901 [@dyn 486] (gas: 26)\n 24832: a5 = s1 + 0x7ff\n 24836: a5 = a5 + 0x51\n 24839: a3 = u64 [a5 + 0x4b0]\n 24843: a0 = u64 [a5 + 0x4b8]\n 24847: a1 = u64 [a5 + 0x4c0]\n 24851: a2 = u64 [a5 + 0x4c8]\n 24855: a4 = u64 [s1 + 0xc8]\n 24859: u64 [a5 + 0x468] = a4\n 24863: a4 = u64 [s1 + 0xc0]\n 24867: u64 [a5 + 0x460] = a4\n 24871: a4 = u64 [s1 + 0xb8]\n 24875: u64 [a5 + 0x458] = a4\n 24879: a4 = u64 [s1 + 0xb0]\n 24883: u64 [a5 + 0x450] = a4\n 24887: a4 = a5 + 0x400\n 24891: u64 [a4 + 0x88] = a2\n 24895: u64 [a4 + 0x80] = a1\n 24899: u64 [a4 + 0x78] = a0\n 24902: a0 = s1 + 0x7ff\n 24906: a0 = a0 + 0x4e1\n 24910: a1 = s1 + 0x7ff\n 24914: a1 = a1 + 0x4c1\n 24918: a2 = s1 + 0x7ff\n 24922: a2 = a2 + 0x4a1\n 24926: u64 [a4 + 0x70] = a3\n 24929: ra = 974, jump @1336\n      : @902 [@dyn 487] (gas: 16)\n 24935: a3 = s1 + 0x7ff\n 24939: a3 = a3 + 0x51\n 24942: a4 = a3 + 0x400\n 24946: a0 = u64 [a4 + 0xa8]\n 24950: a1 = u64 [a4 + 0xa0]\n 24954: a2 = u64 [a4 + 0x98]\n 24958: a3 = u64 [a4 + 0x90]\n 24962: a4 = s1 + 0x3058\n 24966: a5 = a4 + 0x600\n 24970: u64 [a5 + 0x80] = a0\n 24974: u64 [a5 + 0x78] = a1\n 24977: u64 [a5 + 0x70] = a2\n 24980: u64 [a5 + 0x68] = a3\n 24983: a1 = s1 + 0x36c0\n 24987: a0 = u64 [s1 + 0x88]\n 24991: ra = 976, jump @31\n      : @903 [@dyn 488] (gas: 14)\n 24997: a2 = s1 + 0x7ff\n 25001: a2 = a2 + 0x51\n 25004: u64 [a2 + 1096] = 0\n 25008: a0 = u64 [s1 + 0x70]\n 25011: a3 = a2 + 0x400\n 25015: u64 [a3 + 0x40] = a0\n 25018: a0 = u64 [s1 + 0x78]\n 25021: u64 [a3 + 0x38] = a0\n 25024: a1 = s1 + 0x7ff\n 25028: a1 = a1 + 0x481\n 25032: a0 = u64 [s1 + 0x80]\n 25036: u64 [a3 + 0x30] = a0\n 25039: a0 = 0\n 25041: ra = 978, jump @25\n      : @904 [@dyn 489] (gas: 11)\n 25047: a1 = s1 + 0x7ff\n 25051: a1 = a1 + 0x51\n 25054: u64 [a1 + 1064] = 0\n 25058: u64 [a1 + 1056] = 0\n 25062: u64 [a1 + 1040] = 0x4\n 25067: a2 = a1\n 25069: a0 = 0x20\n 25072: a1 = s1 + 0x7ff\n 25076: a1 = a1 + 0x461\n 25080: u64 [a2 + 1048] = 0\n 25084: ra = 980, jump @25\n      : @905 [@dyn 490] (gas: 7)\n 25090: a1 = u64 [s1 + 0xd8]\n 25094: a0 = sp + 0xffffffffffffffe0\n 25097: a0 = a0 & 0xffffffffffffffe0\n 25100: u64 [s1 + 0x88] = a0\n 25104: sp = a0\n 25106: a0 = i32 [a1]\n 25108: jump @907 if a0 >u 63\n      : @906 (gas: 2)\n 25112: u32 [a1 + 0] = 0x40\n 25115: fallthrough\n      : @907 (gas: 4)\n 25116: a0 = sp + 0xffffffffffffffe0\n 25119: a0 = a0 & 0xffffffffffffffe0\n 25122: u64 [s1 + 0x68] = a0\n 25125: t0 = 982, jump @1535\n      : @908 [@dyn 491] (gas: 5)\n 25131: ra = 0x3d8\n 25135: ecalli 6 // 'hash_keccak_256'\n 25137: a3 = u64 [s1 + 0x68]\n 25140: t0 = 0x3da\n 25144: jump @1523\n      : @909 [@dyn 492] (gas: 2)\n 25147: a3 = u64 [s1 + 0x68]\n 25150: t0 = 986, jump @1523\n      : @910 [@dyn 493] (gas: 2)\n 25156: a0 = a0 + 0x441\n 25160: ra = 988, jump @27\n      : @911 [@dyn 494] (gas: 26)\n 25166: a5 = s1 + 0x7ff\n 25170: a5 = a5 + 0x51\n 25173: a3 = u64 [a5 + 0x3f0]\n 25177: a0 = u64 [a5 + 0x3f8]\n 25181: a1 = u64 [a5 + 0x400]\n 25185: a2 = u64 [a5 + 0x408]\n 25189: a4 = u64 [s1 + 0xc8]\n 25193: u64 [a5 + 0x3a8] = a4\n 25197: a4 = u64 [s1 + 0xc0]\n 25201: u64 [a5 + 0x3a0] = a4\n 25205: a4 = u64 [s1 + 0xb8]\n 25209: u64 [a5 + 0x398] = a4\n 25213: a4 = u64 [s1 + 0xb0]\n 25217: u64 [a5 + 0x390] = a4\n 25221: a4 = a5 + 0x300\n 25225: u64 [a4 + 0xc8] = a2\n 25229: u64 [a4 + 0xc0] = a1\n 25233: u64 [a4 + 0xb8] = a0\n 25237: a0 = s1 + 0x7ff\n 25241: a0 = a0 + 0x421\n 25245: a1 = s1 + 0x7ff\n 25249: a1 = a1 + 0x401\n 25253: a2 = s1 + 0x7ff\n 25257: a2 = a2 + 0x3e1\n 25261: u64 [a4 + 0xb0] = a3\n 25265: ra = 990, jump @1344\n      : @912 [@dyn 495] (gas: 4)\n 25271: a3 = s1 + 0x7ff\n 25275: a3 = a3 + 0x51\n 25278: a4 = a3 + 0x300\n 25282: t0 = 992, jump @1573\n      : @913 [@dyn 496] (gas: 7)\n 25288: u64 [a5 + 0xa0] = a0\n 25292: u64 [a5 + 0x98] = a1\n 25296: u64 [a5 + 0x90] = a2\n 25300: u64 [a5 + 0x88] = a3\n 25304: a1 = s1 + 0x36e0\n 25308: a0 = u64 [s1 + 0x88]\n 25312: ra = 994, jump @31\n      : @914 [@dyn 497] (gas: 14)\n 25318: a2 = s1 + 0x7ff\n 25322: a2 = a2 + 0x51\n 25325: u64 [a2 + 904] = 0\n 25329: a0 = u64 [s1 + 0x98]\n 25333: a3 = a2 + 0x300\n 25337: u64 [a3 + 0x80] = a0\n 25341: a0 = u64 [s1 + 0xa0]\n 25345: u64 [a3 + 0x78] = a0\n 25348: a1 = s1 + 0x7ff\n 25352: a1 = a1 + 0x3c1\n 25356: a0 = u64 [s1 + 0xa8]\n 25360: u64 [a3 + 0x70] = a0\n 25363: a0 = 0\n 25365: ra = 996, jump @25\n      : @915 [@dyn 498] (gas: 11)\n 25371: a1 = s1 + 0x7ff\n 25375: a1 = a1 + 0x51\n 25378: u64 [a1 + 872] = 0\n 25382: u64 [a1 + 864] = 0\n 25386: u64 [a1 + 848] = 0x5\n 25391: a2 = a1\n 25393: a0 = 0x20\n 25396: a1 = s1 + 0x7ff\n 25400: a1 = a1 + 0x3a1\n 25404: u64 [a2 + 856] = 0\n 25408: ra = 998, jump @25\n      : @916 [@dyn 499] (gas: 3)\n 25414: a1 = u64 [s1 + 0xd8]\n 25418: a0 = i32 [a1]\n 25420: jump @918 if a0 >u 63\n      : @917 (gas: 2)\n 25424: u32 [a1 + 0] = 0x40\n 25427: fallthrough\n      : @918 (gas: 4)\n 25428: a0 = sp + 0xffffffffffffffe0\n 25431: a0 = a0 & 0xffffffffffffffe0\n 25434: u64 [s1 + 0x88] = a0\n 25438: t0 = 1000, jump @1535\n      : @919 [@dyn 500] (gas: 5)\n 25444: ra = 0x3ea\n 25448: ecalli 6 // 'hash_keccak_256'\n 25450: a3 = u64 [s1 + 0x88]\n 25454: t0 = 0x3ec\n 25458: jump @1579\n      : @920 [@dyn 501] (gas: 2)\n 25461: a3 = u64 [s1 + 0x88]\n 25465: t0 = 1004, jump @1579\n      : @921 [@dyn 502] (gas: 16)\n 25471: u64 [s1 + 0x68] = a0\n 25474: a0 = reverse a1\n 25476: u64 [s1 + 0x58] = a0\n 25479: a0 = reverse a2\n 25481: u64 [s1 + 0x50] = a0\n 25484: a0 = reverse a3\n 25486: u64 [s1 + 0x48] = a0\n 25489: a0 = sp + 0xffffffffffffffe0\n 25492: a0 = a0 & 0xffffffffffffffe0\n 25495: u64 [s1 + 0x88] = a0\n 25499: sp = a0\n 25501: a0 = u64 [s1 + 0x60]\n 25504: ra = 0x3ee\n 25508: ecalli 3 // 'caller'\n 25510: t0 = 0x3f0\n 25514: jump @1543\n      : @922 [@dyn 503] (gas: 1)\n 25517: t0 = 1008, jump @1543\n      : @923 [@dyn 504] (gas: 9)\n 25523: u64 [a2 + 840] = 0\n 25527: a4 = a2 + 0x300\n 25531: u64 [a4 + 0x40] = a1\n 25534: u64 [a4 + 0x38] = a0\n 25537: a1 = s1 + 0x7ff\n 25541: a1 = a1 + 0x381\n 25545: u64 [a4 + 0x30] = a3\n 25548: a0 = 0\n 25550: ra = 1010, jump @25\n      : @924 [@dyn 505] (gas: 16)\n 25556: a0 = u64 [s1 + 0x48]\n 25559: a1 = s1 + 0x7ff\n 25563: a1 = a1 + 0x51\n 25566: a2 = a1 + 0x300\n 25570: u64 [a2 + 0x28] = a0\n 25573: a0 = u64 [s1 + 0x50]\n 25576: u64 [a2 + 0x20] = a0\n 25579: a0 = u64 [s1 + 0x58]\n 25582: u64 [a2 + 0x18] = a0\n 25585: a3 = a1\n 25587: a0 = 0x20\n 25590: a1 = s1 + 0x7ff\n 25594: a1 = a1 + 0x361\n 25598: a2 = u64 [s1 + 0x68]\n 25601: u64 [a3 + 0x310] = a2\n 25605: ra = 1012, jump @25\n      : @925 [@dyn 506] (gas: 3)\n 25611: a1 = u64 [s1 + 0xd8]\n 25615: a0 = i32 [a1]\n 25617: jump @927 if a0 >u 63\n      : @926 (gas: 2)\n 25621: u32 [a1 + 0] = 0x40\n 25624: fallthrough\n      : @927 (gas: 4)\n 25625: a0 = sp + 0xffffffffffffffe0\n 25628: a0 = a0 & 0xffffffffffffffe0\n 25631: u64 [s1 + 0xd8] = a0\n 25635: t0 = 1014, jump @1535\n      : @928 [@dyn 507] (gas: 5)\n 25641: ra = 0x3f8\n 25645: ecalli 6 // 'hash_keccak_256'\n 25647: a3 = u64 [s1 + 0xd8]\n 25651: t0 = 0x3fa\n 25655: jump @1523\n      : @929 [@dyn 508] (gas: 2)\n 25658: a3 = u64 [s1 + 0xd8]\n 25662: t0 = 1018, jump @1523\n      : @930 [@dyn 509] (gas: 2)\n 25668: a0 = a0 + 0x341\n 25672: ra = 1020, jump @27\n      : @931 [@dyn 510] (gas: 26)\n 25678: a5 = s1 + 0x7ff\n 25682: a5 = a5 + 0x51\n 25685: a3 = u64 [a5 + 0x2f0]\n 25689: a0 = u64 [a5 + 0x2f8]\n 25693: a1 = u64 [a5 + 0x300]\n 25697: a2 = u64 [a5 + 0x308]\n 25701: a4 = u64 [s1 + 0xc8]\n 25705: u64 [a5 + 0x2a8] = a4\n 25709: a4 = u64 [s1 + 0xc0]\n 25713: u64 [a5 + 0x2a0] = a4\n 25717: a4 = u64 [s1 + 0xb8]\n 25721: u64 [a5 + 0x298] = a4\n 25725: a4 = u64 [s1 + 0xb0]\n 25729: u64 [a5 + 0x290] = a4\n 25733: a4 = a5 + 0x200\n 25737: u64 [a4 + 0xc8] = a2\n 25741: u64 [a4 + 0xc0] = a1\n 25745: u64 [a4 + 0xb8] = a0\n 25749: a0 = s1 + 0x7ff\n 25753: a0 = a0 + 0x321\n 25757: a1 = s1 + 0x7ff\n 25761: a1 = a1 + 0x301\n 25765: a2 = s1 + 0x7ff\n 25769: a2 = a2 + 0x2e1\n 25773: u64 [a4 + 0xb0] = a3\n 25777: ra = 1022, jump @1336\n      : @932 [@dyn 511] (gas: 4)\n 25783: a3 = s1 + 0x7ff\n 25787: a3 = a3 + 0x51\n 25790: a4 = a3 + 0x200\n 25794: t0 = 1024, jump @1573\n      : @933 [@dyn 512] (gas: 7)\n 25800: u64 [a5 + 0xc0] = a0\n 25804: u64 [a5 + 0xb8] = a1\n 25808: u64 [a5 + 0xb0] = a2\n 25812: u64 [a5 + 0xa8] = a3\n 25816: a1 = s1 + 0x3700\n 25820: a0 = u64 [s1 + 0x88]\n 25824: ra = 1026, jump @31\n      : @934 [@dyn 513] (gas: 4)\n 25830: a0 = s1 + 0x7ff\n 25834: a0 = a0 + 0x2c1\n 25838: a1 = 0x40\n 25841: ra = 1028, jump @23\n      : @935 [@dyn 514] (gas: 8)\n 25847: a3 = s1 + 0x7ff\n 25851: a3 = a3 + 0x51\n 25854: a5 = a3 + 0x200\n 25858: a0 = u64 [a5 + 0x88]\n 25862: a1 = u64 [a5 + 0x80]\n 25866: a2 = u64 [a5 + 0x78]\n 25869: a4 = u64 [a5 + 0x70]\n 25872: t0 = 1030, jump @1526\n      : @936 [@dyn 515] (gas: 1)\n 25878: jump @1003 if a0 != 0\n      : @937 (gas: 14)\n 25882: a0 = u64 [s1 + 0xb0]\n 25886: a2 = a3 + 0x200\n 25890: u64 [a2 + 0x50] = a0\n 25893: a0 = u64 [s1 + 0xb8]\n 25897: u64 [a2 + 0x58] = a0\n 25900: a0 = u64 [s1 + 0xc0]\n 25904: u64 [a2 + 0x60] = a0\n 25907: a1 = s1 + 0x7ff\n 25911: a1 = a1 + 0x2a1\n 25915: a0 = u64 [s1 + 0xc8]\n 25919: u64 [a2 + 0x68] = a0\n 25922: a0 = a4\n 25924: u64 [s1 + 0xd8] = a4\n 25928: ra = 1032, jump @25\n      : @938 [@dyn 516] (gas: 55)\n 25934: a0 = s1 + 0x7ff\n 25938: a0 = a0 + 0x51\n 25941: u64 [a0 + 520] = 0\n 25945: a0 = s1 + 0x7ff\n 25949: a0 = a0 + 0x51\n 25952: a1 = u64 [s1 + 0x70]\n 25955: u64 [a0 + 0x200] = a1\n 25959: a0 = s1 + 0x7ff\n 25963: a0 = a0 + 0x51\n 25966: a1 = u64 [s1 + 0x78]\n 25969: u64 [a0 + 0x1f8] = a1\n 25973: a0 = s1 + 0x7ff\n 25977: a0 = a0 + 0x51\n 25980: a1 = u64 [s1 + 0x80]\n 25984: u64 [a0 + 0x1f0] = a1\n 25988: a0 = s1 + 0x7ff\n 25992: a0 = a0 + 0x51\n 25995: u64 [a0 + 552] = 0\n 25999: a0 = s1 + 0x7ff\n 26003: a0 = a0 + 0x51\n 26006: a1 = u64 [s1 + 0x98]\n 26010: u64 [a0 + 0x220] = a1\n 26014: a0 = s1 + 0x7ff\n 26018: a0 = a0 + 0x51\n 26021: a1 = u64 [s1 + 0xa0]\n 26025: u64 [a0 + 0x218] = a1\n 26029: a0 = u64 [0x20030]\n 26034: a1 = u64 [0x20038]\n 26039: a2 = u64 [0x20040]\n 26044: a3 = s1 + 0x7ff\n 26048: a3 = a3 + 0x51\n 26051: a4 = u64 [s1 + 0xa8]\n 26055: u64 [a3 + 0x210] = a4\n 26059: a3 = s1 + 0x7ff\n 26063: a3 = a3 + 0x51\n 26066: u64 [a3 + 0x248] = a0\n 26070: a0 = s1 + 0x7ff\n 26074: a0 = a0 + 0x51\n 26077: u64 [a0 + 0x240] = a1\n 26081: a0 = s1 + 0x7ff\n 26085: a0 = a0 + 0x51\n 26088: u64 [a0 + 0x238] = a2\n 26092: a0 = u64 [0x20048]\n 26097: a1 = 0x20\n 26100: a2 = s1 + 0x7ff\n 26104: a2 = a2 + 0x281\n 26108: a3 = s1 + 0x7ff\n 26112: a3 = a3 + 0x261\n 26116: a4 = s1 + 0x7ff\n 26120: a4 = a4 + 0x241\n 26124: a5 = s1 + 0x7ff\n 26128: a5 = a5 + 0x51\n 26131: u64 [a5 + 0x230] = a0\n 26135: a0 = u64 [s1 + 0xd8]\n 26139: ra = 1034, jump @34\n      : @939 [@dyn 517] (gas: 4)\n 26145: a0 = s1 + 0x7ff\n 26149: a0 = a0 + 0x221\n 26153: a1 = 0x40\n 26156: ra = 1036, jump @23\n      : @940 [@dyn 518] (gas: 8)\n 26162: a3 = s1 + 0x7ff\n 26166: a3 = a3 + 0x51\n 26169: a5 = a3 + 0x100\n 26173: a4 = u64 [a5 + 0xe8]\n 26177: a1 = u64 [a5 + 0xe0]\n 26181: a2 = u64 [a5 + 0xd8]\n 26185: a0 = u64 [a5 + 0xd0]\n 26189: t0 = 1038, jump @1528\n      : @941 [@dyn 519] (gas: 1)\n 26195: jump @1003 if a1 != 0\n      : @942 (gas: 8)\n 26199: u64 [a3 + 456] = 0\n 26203: u64 [a3 + 448] = 0\n 26207: u64 [a3 + 432] = 0x1\n 26212: a1 = s1 + 0x7ff\n 26216: a1 = a1 + 0x201\n 26220: u64 [a3 + 440] = 0\n 26224: u64 [s1 + 0xd8] = a0\n 26228: ra = 1040, jump @25\n      : @943 [@dyn 520] (gas: 3)\n 26234: a1 = 0x20\n 26237: a0 = u64 [s1 + 0xd8]\n 26241: ra = 1042, jump @38\n      : @944 [@dyn 521] (gas: 5)\n 26247: i32 a1 = a0 + 0\n 26249: a2 = 0x20\n 26252: a0 = 0\n 26254: ecalli 7 // 'seal_return'\n 26256: fallthrough\n      : @945 (gas: 8)\n 26257: a2 = s1 + 0x2058\n 26261: u64 [a2 + 1920] = 0\n 26265: u64 [a2 + 1912] = 0\n 26269: u64 [a2 + 1904] = 0\n 26273: a1 = s1 + 0x27c0\n 26277: u64 [a2 + 1896] = 0x1\n 26282: a0 = 0\n 26284: ra = 1044, jump @25\n      : @946 [@dyn 522] (gas: 6)\n 26290: a0 = sp + 0xffffffffffffffe0\n 26293: a0 = a0 & 0xffffffffffffffe0\n 26296: u64 [s1 + 0x78] = a0\n 26299: sp = a0\n 26301: a1 = i32 [0x2019c]\n 26306: jump @948 if a1 >u 31\n      : @947 (gas: 2)\n 26310: u32 [0x2019c] = 0x20\n 26316: fallthrough\n      : @948 (gas: 49)\n 26317: a0 = sp + 0xffffffffffffffe0\n 26320: a2 = a0 & 0xffffffffffffffe0\n 26323: u64 [s1 + 0xd0] = a2\n 26327: sp = a2\n 26329: a0 = 0x201b0\n 26334: i32 a0 = a0 + 0\n 26336: i32 a2 = a2 + 0\n 26338: a1 = 0x20\n 26341: ecalli 6 // 'hash_keccak_256'\n 26343: u64 [s1 + 216] = 0\n 26347: t2 = 0\n 26349: t1 = 0\n 26351: t0 = 0\n 26353: a5 = u64 [s1 + 0xd0]\n 26357: a0 = u64 [a5 + 0x18]\n 26360: a1 = u64 [s1 + 0x50]\n 26363: a2 = a1 + 0x20\n 26366: u64 [s1 + 0x70] = a2\n 26369: a1 = a2 <u a1\n 26372: a2 = u64 [s1 + 0x48]\n 26375: a3 = a2 + a1\n 26378: u64 [s1 + 0x68] = a3\n 26381: a4 = a3 <u a2\n 26384: a4 = a1 if a1 == 0\n 26387: a1 = u64 [a5 + 0x10]\n 26390: a2 = u64 [a5 + 0x8]\n 26393: a3 = u64 [a5]\n 26395: a0 = reverse a0\n 26397: a1 = reverse a1\n 26399: ra = reverse a2\n 26401: a2 = reverse a3\n 26403: a5 = u64 [s1 + 0x78]\n 26406: a3 = a2\n 26408: u64 [a5 + 0x18] = a2\n 26411: a2 = ra\n 26413: u64 [s1 + 0xa0] = a2\n 26417: u64 [a5 + 0x10] = a2\n 26420: u64 [s1 + 0xb0] = a1\n 26424: u64 [a5 + 0x8] = a1\n 26427: a2 = a0\n 26429: u64 [a5] = a0\n 26431: a0 = u64 [s1 + 0x40]\n 26434: a4 = a4 + a0\n 26437: u64 [s1 + 0x60] = a4\n 26440: a0 = a4 <u a0\n 26443: a1 = u64 [s1 + 0x38]\n 26446: a0 = a0 + a1\n 26449: u64 [s1 + 0x58] = a0\n 26452: fallthrough\n      : @949 (gas: 19)\n 26453: u64 [s1 + 0xa8] = a3\n 26457: u64 [s1 + 0xb8] = a2\n 26461: a0 = u64 [s1 + 0x98]\n 26465: a1 = u64 [s1 + 0xd8]\n 26469: a0 = a1 <u a0\n 26472: a2 = u64 [s1 + 0x88]\n 26476: a1 = t2 ^ a2\n 26479: a2 = t2 <u a2\n 26482: a2 = a0 if a1 == 0\n 26485: a4 = u64 [s1 + 0x90]\n 26489: a0 = t1 <u a4\n 26492: a3 = u64 [s1 + 0x80]\n 26496: a1 = t0 ^ a3\n 26499: a3 = t0 <u a3\n 26502: a3 = a0 if a1 == 0\n 26505: a0 = t1 ^ a4\n 26508: a0 = a0 | a1\n 26511: a3 = a2 if a0 == 0\n 26514: jump @987 if a3 == 0\n      : @950 (gas: 6)\n 26518: a0 = s1 + 0x27a0\n 26522: a1 = a5\n 26524: u64 [s1 + 0xd0] = t0\n 26528: u64 [s1 + 0xc8] = t1\n 26532: u64 [s1 + 0xc0] = t2\n 26536: ra = 1046, jump @27\n      : @951 [@dyn 523] (gas: 1)\n 26542: t0 = 1048, jump @1540\n      : @952 [@dyn 524] (gas: 6)\n 26548: t0 = a1 <u a5\n 26551: a5 = u64 [s1 + 0xd0]\n 26555: a3 = u64 [s1 + 0x58]\n 26558: a5 = a5 + a3\n 26561: a5 = a5 + t0\n 26564: t0 = 1050, jump @1559\n      : @953 [@dyn 525] (gas: 1)\n 26570: jump @1003 if a1 != 0\n      : @954 (gas: 13)\n 26574: a5 = s1 + 0x2058\n 26578: t0 = u64 [a5 + 0x760]\n 26582: a3 = a5 + 0x700\n 26586: a1 = u64 [a3 + 0x58]\n 26589: a2 = u64 [a3 + 0x50]\n 26592: a4 = u64 [a3 + 0x48]\n 26595: u64 [a3 + 0x28] = a4\n 26598: u64 [a3 + 0x30] = a2\n 26601: u64 [a3 + 0x38] = a1\n 26604: a1 = s1 + 0x2780\n 26608: u64 [a5 + 0x740] = t0\n 26612: u64 [s1 + 0xd8] = t2\n 26616: ra = 1052, jump @25\n      : @955 [@dyn 526] (gas: 37)\n 26622: t0 = u64 [s1 + 0xd0]\n 26626: ra = u64 [s1 + 0xb8]\n 26630: ra = ra + 0x1\n 26633: a0 = ra <u 0x1\n 26636: a3 = u64 [s1 + 0xb0]\n 26640: a3 = a3 + a0\n 26643: a0 = ra | a3\n 26646: a0 = a0 <u 0x1\n 26649: a1 = u64 [s1 + 0xa0]\n 26653: t2 = a1 + a0\n 26656: a1 = t2 <u a1\n 26659: a0 = u64 [s1 + 0xa8]\n 26663: a0 = a0 + a1\n 26666: a1 = u64 [s1 + 0xd8]\n 26670: t1 = a1 + 0x20\n 26673: a2 = t1 <u a1\n 26676: a4 = u64 [s1 + 0xc0]\n 26680: a1 = a4 + a2\n 26683: a4 = a1 <u a4\n 26686: a4 = a2 if a2 == 0\n 26689: a2 = u64 [s1 + 0xc8]\n 26693: a4 = a4 + a2\n 26696: a2 = a4 <u a2\n 26699: t0 = t0 + a2\n 26702: u64 [s1 + 0xb0] = a3\n 26706: a5 = u64 [s1 + 0x78]\n 26709: u64 [a5 + 0x8] = a3\n 26712: a2 = ra\n 26714: u64 [a5] = ra\n 26716: u64 [a5 + 0x10] = t2\n 26719: a3 = a0\n 26721: u64 [a5 + 0x18] = a0\n 26724: u64 [s1 + 0xa0] = t2\n 26728: u64 [s1 + 0xd8] = t1\n 26732: t2 = a1\n 26734: t1 = a4\n 26736: jump @949\n      : @956 (gas: 7)\n 26739: u64 [s1 + 600] = 0\n 26743: u64 [s1 + 592] = 0\n 26747: u64 [s1 + 584] = 0\n 26751: a1 = s1 + 0x240\n 26755: u64 [s1 + 576] = 0\n 26759: a0 = 0\n 26761: ra = 1054, jump @25\n      : @957 [@dyn 527] (gas: 6)\n 26767: a0 = sp + 0xffffffffffffffe0\n 26770: a0 = a0 & 0xffffffffffffffe0\n 26773: u64 [s1 + 0x78] = a0\n 26776: sp = a0\n 26778: a1 = i32 [0x2019c]\n 26783: jump @959 if a1 >u 31\n      : @958 (gas: 2)\n 26787: u32 [0x2019c] = 0x20\n 26793: fallthrough\n      : @959 (gas: 49)\n 26794: a0 = sp + 0xffffffffffffffe0\n 26797: a2 = a0 & 0xffffffffffffffe0\n 26800: u64 [s1 + 0xd0] = a2\n 26804: sp = a2\n 26806: a0 = 0x201b0\n 26811: i32 a0 = a0 + 0\n 26813: i32 a2 = a2 + 0\n 26815: a1 = 0x20\n 26818: ecalli 6 // 'hash_keccak_256'\n 26820: u64 [s1 + 216] = 0\n 26824: t2 = 0\n 26826: t1 = 0\n 26828: t0 = 0\n 26830: a5 = u64 [s1 + 0xd0]\n 26834: a0 = u64 [a5 + 0x18]\n 26837: a1 = u64 [s1 + 0x50]\n 26840: a2 = a1 + 0x20\n 26843: u64 [s1 + 0x70] = a2\n 26846: a1 = a2 <u a1\n 26849: a2 = u64 [s1 + 0x48]\n 26852: a3 = a2 + a1\n 26855: u64 [s1 + 0x68] = a3\n 26858: a4 = a3 <u a2\n 26861: a4 = a1 if a1 == 0\n 26864: a1 = u64 [a5 + 0x10]\n 26867: a2 = u64 [a5 + 0x8]\n 26870: a3 = u64 [a5]\n 26872: a0 = reverse a0\n 26874: a1 = reverse a1\n 26876: ra = reverse a2\n 26878: a2 = reverse a3\n 26880: a5 = u64 [s1 + 0x78]\n 26883: a3 = a2\n 26885: u64 [a5 + 0x18] = a2\n 26888: a2 = ra\n 26890: u64 [s1 + 0xa0] = a2\n 26894: u64 [a5 + 0x10] = a2\n 26897: u64 [s1 + 0xb0] = a1\n 26901: u64 [a5 + 0x8] = a1\n 26904: a2 = a0\n 26906: u64 [a5] = a0\n 26908: a0 = u64 [s1 + 0x40]\n 26911: a4 = a4 + a0\n 26914: u64 [s1 + 0x60] = a4\n 26917: a0 = a4 <u a0\n 26920: a1 = u64 [s1 + 0x38]\n 26923: a0 = a0 + a1\n 26926: u64 [s1 + 0x58] = a0\n 26929: fallthrough\n      : @960 (gas: 19)\n 26930: u64 [s1 + 0xa8] = a3\n 26934: u64 [s1 + 0xb8] = a2\n 26938: a0 = u64 [s1 + 0x98]\n 26942: a1 = u64 [s1 + 0xd8]\n 26946: a0 = a1 <u a0\n 26949: a2 = u64 [s1 + 0x88]\n 26953: a1 = t2 ^ a2\n 26956: a2 = t2 <u a2\n 26959: a2 = a0 if a1 == 0\n 26962: a4 = u64 [s1 + 0x90]\n 26966: a0 = t1 <u a4\n 26969: a3 = u64 [s1 + 0x80]\n 26973: a1 = t0 ^ a3\n 26976: a3 = t0 <u a3\n 26979: a3 = a0 if a1 == 0\n 26982: a0 = t1 ^ a4\n 26985: a0 = a0 | a1\n 26988: a3 = a2 if a0 == 0\n 26991: jump @994 if a3 == 0\n      : @961 (gas: 6)\n 26995: a0 = s1 + 0x220\n 26999: a1 = a5\n 27001: u64 [s1 + 0xd0] = t0\n 27005: u64 [s1 + 0xc8] = t1\n 27009: u64 [s1 + 0xc0] = t2\n 27013: ra = 1056, jump @27\n      : @962 [@dyn 528] (gas: 1)\n 27019: t0 = 1058, jump @1540\n      : @963 [@dyn 529] (gas: 6)\n 27025: t0 = a1 <u a5\n 27028: a5 = u64 [s1 + 0xd0]\n 27032: a3 = u64 [s1 + 0x58]\n 27035: a5 = a5 + a3\n 27038: a5 = a5 + t0\n 27041: t0 = 1060, jump @1559\n      : @964 [@dyn 530] (gas: 1)\n 27047: jump @1003 if a1 != 0\n      : @965 (gas: 12)\n 27051: a3 = s1 + 0x200\n 27055: a2 = u64 [a3 + 0x38]\n 27058: a1 = u64 [a3 + 0x30]\n 27061: a5 = u64 [a3 + 0x28]\n 27064: a4 = u64 [a3 + 0x20]\n 27067: u64 [a3] = a4\n 27069: u64 [a3 + 0x8] = a5\n 27072: u64 [a3 + 0x10] = a1\n 27075: a1 = s1 + 0x200\n 27079: u64 [a3 + 0x18] = a2\n 27082: u64 [s1 + 0xd8] = t2\n 27086: ra = 1062, jump @25\n      : @966 [@dyn 531] (gas: 37)\n 27092: t0 = u64 [s1 + 0xd0]\n 27096: ra = u64 [s1 + 0xb8]\n 27100: ra = ra + 0x1\n 27103: a0 = ra <u 0x1\n 27106: a3 = u64 [s1 + 0xb0]\n 27110: a3 = a3 + a0\n 27113: a0 = ra | a3\n 27116: a0 = a0 <u 0x1\n 27119: a1 = u64 [s1 + 0xa0]\n 27123: t2 = a1 + a0\n 27126: a1 = t2 <u a1\n 27129: a0 = u64 [s1 + 0xa8]\n 27133: a0 = a0 + a1\n 27136: a1 = u64 [s1 + 0xd8]\n 27140: t1 = a1 + 0x20\n 27143: a2 = t1 <u a1\n 27146: a4 = u64 [s1 + 0xc0]\n 27150: a1 = a4 + a2\n 27153: a4 = a1 <u a4\n 27156: a4 = a2 if a2 == 0\n 27159: a2 = u64 [s1 + 0xc8]\n 27163: a4 = a4 + a2\n 27166: a2 = a4 <u a2\n 27169: t0 = t0 + a2\n 27172: u64 [s1 + 0xb0] = a3\n 27176: a5 = u64 [s1 + 0x78]\n 27179: u64 [a5 + 0x8] = a3\n 27182: a2 = ra\n 27184: u64 [a5] = ra\n 27186: u64 [a5 + 0x10] = t2\n 27189: a3 = a0\n 27191: u64 [a5 + 0x18] = a0\n 27194: u64 [s1 + 0xa0] = t2\n 27198: u64 [s1 + 0xd8] = t1\n 27202: t2 = a1\n 27204: t1 = a4\n 27206: jump @960\n      : @967 (gas: 5)\n 27209: a0 = s1 + 0x4000\n 27213: i32 a0 = a0 + 0xfffffffffffffae0\n 27217: a1 = 0x24\n 27220: ecalli 1 // 'call_data_load'\n 27222: fallthrough\n      : @968 (gas: 12)\n 27223: t0 = s1 + 0x3858\n 27227: a0 = t0 + 0x200\n 27231: a5 = u64 [a0 + 0xa0]\n 27235: a3 = u64 [a0 + 0x98]\n 27239: a4 = u64 [a0 + 0x90]\n 27243: a0 = a5 >u 0\n 27245: a1 = a3 >u 0\n 27247: a1 = a0 if a5 != 0\n 27250: a0 = a3 | a5\n 27253: a2 = a4 >u 0\n 27255: a2 = a1 if a0 != 0\n 27258: jump @970 if a2 == 0\n      : @969 (gas: 1)\n 27261: jump @1157\n      : @970 (gas: 19)\n 27264: a1 = u64 [t0 + 0x288]\n 27268: a0 = u64 [s1 + 0x18]\n 27271: t2 = u32 [a0]\n 27273: a0 = a1 + 0x23\n 27276: a2 = a0 <u a1\n 27279: t0 = a4 + a2\n 27282: u64 [s1 + 0x88] = a4\n 27286: a4 = t0 <u a4\n 27289: a4 = a2 if a2 == 0\n 27292: a4 = a4 + a3\n 27295: u64 [s1 + 0x90] = a3\n 27299: a2 = a4 <u a3\n 27302: u64 [s1 + 0x98] = a5\n 27306: a2 = a2 + a5\n 27309: a2 = a2 | a4\n 27312: a0 = a0 <u t2\n 27315: a0 = 0 if t0 != 0\n 27317: a0 = 0 if a2 != 0\n 27319: jump @972 if a0 != 0\n      : @971 (gas: 1)\n 27322: jump @1158\n      : @972 (gas: 24)\n 27325: u64 [s1 + 0x80] = a1\n 27329: i32 a1 = a1 + 0x4\n 27332: a0 = s1 + 0x4000\n 27336: i32 a0 = a0 + 0xfffffffffffffb00\n 27340: ecalli 1 // 'call_data_load'\n 27342: a0 = s1 + 0x3858\n 27346: a5 = a0 + 0x200\n 27350: a3 = u64 [a5 + 0xc0]\n 27354: a1 = u64 [a5 + 0xb8]\n 27358: a2 = u64 [a5 + 0xb0]\n 27362: a4 = u64 [a5 + 0xa8]\n 27366: a5 = s1 + 0x2058\n 27370: u64 [s1 + 0xc8] = a3\n 27374: u64 [a5 + 0x400] = a3\n 27378: u64 [s1 + 0xd0] = a1\n 27382: a3 = a5 + 0x300\n 27386: u64 [a3 + 0xf8] = a1\n 27390: u64 [s1 + 0xd8] = a2\n 27394: u64 [a3 + 0xf0] = a2\n 27398: a0 = s1 + 0x2460\n 27402: a1 = s1 + 0x2440\n 27406: u64 [s1 + 0xc0] = a4\n 27410: u64 [a3 + 0xe8] = a4\n 27414: ra = 1064, jump @1216\n      : @973 [@dyn 532] (gas: 13)\n 27420: a0 = s1 + 0x2058\n 27424: a2 = a0 + 0x400\n 27428: a1 = u64 [a2 + 0x8]\n 27431: u64 [s1 + 0xb8] = a1\n 27435: a1 = u64 [a2 + 0x10]\n 27438: u64 [s1 + 0xb0] = a1\n 27442: a1 = u64 [a2 + 0x18]\n 27445: u64 [s1 + 0xa8] = a1\n 27449: a1 = u64 [a2 + 0x20]\n 27452: u64 [s1 + 0xa0] = a1\n 27456: a0 = s1 + 0x2420\n 27460: a1 = 0x40\n 27463: ra = 1066, jump @23\n      : @974 [@dyn 533] (gas: 26)\n 27469: a0 = s1 + 0x2058\n 27473: a2 = u64 [a0 + 0x3e0]\n 27477: u64 [s1 + 0x30] = a2\n 27480: a1 = u64 [a0 + 0x3d8]\n 27484: u64 [s1 + 0x28] = a1\n 27487: a4 = u64 [a0 + 0x3d0]\n 27491: u64 [s1 + 0x20] = a4\n 27494: a5 = u64 [a0 + 0x3c8]\n 27498: u64 [s1 + 0x58] = a5\n 27501: a3 = u64 [s1 + 0xa0]\n 27505: u64 [a0 + 0x3a0] = a3\n 27509: a3 = u64 [s1 + 0xa8]\n 27513: u64 [a0 + 0x398] = a3\n 27517: a3 = u64 [s1 + 0xb0]\n 27521: u64 [a0 + 0x390] = a3\n 27525: a3 = u64 [s1 + 0xb8]\n 27529: u64 [a0 + 0x388] = a3\n 27533: a3 = a0 + 0x300\n 27537: u64 [a3 + 0xc0] = a2\n 27541: u64 [a3 + 0xb8] = a1\n 27545: u64 [a3 + 0xb0] = a4\n 27549: a2 = a0\n 27551: a0 = s1 + 0x2400\n 27555: a1 = s1 + 0x23e0\n 27559: u64 [a2 + 0x3a8] = a5\n 27563: ra = 1068, jump @1177\n      : @975 [@dyn 534] (gas: 12)\n 27569: a0 = u64 [s1 + 0x58]\n 27572: a1 = u64 [s1 + 0x30]\n 27575: a2 = u64 [s1 + 0x20]\n 27578: a2 = a2 | a1\n 27581: a3 = u64 [s1 + 0x28]\n 27584: a1 = a0 | a3\n 27587: a1 = a1 | a2\n 27590: a1 = a1 >> 0x20\n 27593: a2 = a2 | a3\n 27596: a2 = a2 << 0x20\n 27599: a1 = a1 | a2\n 27602: jump @1003 if a1 != 0\n      : @976 (gas: 12)\n 27606: a2 = s1 + 0x2058\n 27610: a1 = u64 [s1 + 0xc0]\n 27614: a4 = a2 + 0x300\n 27618: u64 [a4 + 0x68] = a1\n 27621: a1 = u64 [s1 + 0xd8]\n 27625: u64 [a4 + 0x70] = a1\n 27628: a1 = u64 [s1 + 0xd0]\n 27632: u64 [a4 + 0x78] = a1\n 27635: a1 = s1 + 0x23c0\n 27639: a3 = u64 [s1 + 0xc8]\n 27643: u64 [a4 + 0x80] = a3\n 27647: ra = 1070, jump @25\n      : @977 [@dyn 535] (gas: 1)\n 27653: t0 = 1072, jump @1575\n      : @978 [@dyn 536] (gas: 50)\n 27659: t0 = t2 <u a0\n 27662: a0 = u64 [s1 + 0x88]\n 27666: ra = a0 + t0\n 27669: a1 = a1 + ra\n 27672: a2 = a2 + t2\n 27675: u64 [s1 + 0x80] = a2\n 27679: a2 = a2 <u t2\n 27682: t1 = a1 + a2\n 27685: a3 = t1 ^ ra\n 27688: a5 = t1 <u ra\n 27691: a5 = a2 if a3 == 0\n 27694: a2 = u64 [s1 + 0xc8]\n 27698: a2 = a2 << 0x5\n 27701: a4 = u64 [s1 + 0xd0]\n 27705: a3 = a4 >> 0x3b\n 27708: a2 = a2 | a3\n 27711: a3 = u64 [s1 + 0xd8]\n 27715: a3 = a3 >> 0x3b\n 27718: a4 = a4 << 0x5\n 27721: a3 = a3 | a4\n 27724: a4 = ra <u a0\n 27727: a4 = t0 if t0 == 0\n 27730: a0 = u64 [s1 + 0x90]\n 27734: t0 = a0 + a4\n 27737: a0 = t0 <u a0\n 27740: a4 = u64 [s1 + 0x98]\n 27744: a4 = a4 + a0\n 27747: a1 = t0 + a3\n 27750: a2 = a2 + a4\n 27753: a0 = a1 <u t0\n 27756: a0 = a0 + a2\n 27759: a3 = a1 + a5\n 27762: a1 = a3 <u a1\n 27765: a5 = a0 + a1\n 27768: a0 = u64 [s1 + 0x18]\n 27771: a0 = u32 [a0]\n 27773: a1 = a5 <u 0x1\n 27776: a2 = a3 <u 0x1\n 27779: a2 = a1 if a5 != 0\n 27782: a1 = u64 [s1 + 0x80]\n 27786: a0 = a0 <u a1\n 27789: a0 = a0 ^ 0x1\n 27792: a1 = t1 <u 0x1\n 27795: u64 [s1 + 0x78] = t1\n 27798: a0 = a1 if t1 != 0\n 27801: u64 [s1 + 0x70] = a3\n 27804: u64 [s1 + 0x68] = a5\n 27807: a1 = a3 | a5\n 27810: a0 = a2 if a1 != 0\n 27813: jump @980 if a0 != 0\n      : @979 (gas: 1)\n 27816: jump @1159\n      : @980 (gas: 10)\n 27819: a0 = 0xffffffe0\n 27829: u64 [s1 + 0x60] = a0\n 27832: a0 = u64 [s1 + 0x58]\n 27835: u64 [s1 + 0xd0] = a0\n 27839: a0 = u64 [s1 + 0x20]\n 27842: u64 [s1 + 0xc8] = a0\n 27846: t1 = u64 [s1 + 0x28]\n 27849: a0 = u64 [s1 + 0x30]\n 27852: u64 [s1 + 0xd8] = a0\n 27856: fallthrough\n      : @981 (gas: 16)\n 27857: a0 = u64 [s1 + 0x80]\n 27861: a0 = t2 <u a0\n 27864: a2 = u64 [s1 + 0x78]\n 27867: a1 = ra ^ a2\n 27870: a2 = ra <u a2\n 27873: a2 = a0 if a1 == 0\n 27876: a0 = u64 [s1 + 0x70]\n 27879: a5 = t0 <u a0\n 27882: a3 = u64 [s1 + 0x68]\n 27885: a1 = a4 ^ a3\n 27888: a3 = a4 <u a3\n 27891: a3 = a5 if a1 == 0\n 27894: a0 = t0 ^ a0\n 27897: a0 = a0 | a1\n 27900: a3 = a2 if a0 == 0\n 27903: jump @1004 if a3 == 0\n      : @982 (gas: 8)\n 27907: a0 = t2 | t0\n 27910: a1 = ra | a4\n 27913: a0 = a0 | a1\n 27916: a0 = a0 >> 0x20\n 27919: a1 = a1 | t0\n 27922: a1 = a1 << 0x20\n 27925: a0 = a0 | a1\n 27928: jump @1003 if a0 != 0\n      : @983 (gas: 10)\n 27932: u64 [s1 + 0xa8] = t0\n 27936: u64 [s1 + 0xb0] = a4\n 27940: u64 [s1 + 0xb8] = ra\n 27944: i32 a1 = t2 + 0\n 27946: a0 = s1 + 0x4000\n 27950: i32 a0 = a0 + 0xfffffffffffffb20\n 27954: u64 [s1 + 0xa0] = t2\n 27958: u64 [s1 + 0xc0] = t1\n 27962: ecalli 1 // 'call_data_load'\n 27964: fallthrough\n      : @984 (gas: 10)\n 27965: a2 = u64 [s1 + 0xc0]\n 27969: a5 = u64 [s1 + 0xd8]\n 27973: a0 = a2 | a5\n 27976: a1 = u64 [s1 + 0x60]\n 27979: a3 = u64 [s1 + 0xd0]\n 27983: a1 = a3 <u a1\n 27986: a4 = u64 [s1 + 0xc8]\n 27990: a1 = 0 if a4 != 0\n 27992: a1 = 0 if a0 != 0\n 27994: jump @1003 if a1 == 0\n      : @985 (gas: 26)\n 27998: a1 = a3 + 0x20\n 28001: a0 = a1 <u a3\n 28004: a3 = a1\n 28006: u64 [s1 + 0x88] = a1\n 28010: a1 = a4 + a0\n 28013: u64 [s1 + 0x98] = a1\n 28017: a1 = a1 <u a4\n 28020: a1 = a0 if a0 == 0\n 28023: a4 = s1 + 0x3858\n 28027: t0 = u64 [a4 + 0x2c8]\n 28031: t2 = u64 [a4 + 0x2d0]\n 28035: a0 = u64 [a4 + 0x2d8]\n 28039: a4 = u64 [a4 + 0x2e0]\n 28043: a1 = a1 + a2\n 28046: u64 [s1 + 0x90] = a1\n 28050: a1 = a1 <u a2\n 28053: a5 = a5 + a1\n 28056: u64 [s1 + 0xd8] = a5\n 28060: a5 = s1 + 0x1858\n 28064: u64 [a5 + 0x3a0] = a4\n 28068: u64 [a5 + 0x398] = a0\n 28072: u64 [a5 + 0x390] = t2\n 28076: a1 = s1 + 0x1be0\n 28080: u64 [a5 + 0x388] = t0\n 28084: a0 = a3\n 28086: ra = 1074, jump @25\n      : @986 [@dyn 537] (gas: 19)\n 28092: a1 = u64 [s1 + 0xa0]\n 28096: a0 = a1 + 0x20\n 28099: a1 = a0 <u a1\n 28102: a3 = u64 [s1 + 0xb8]\n 28106: ra = a3 + a1\n 28109: a3 = ra <u a3\n 28112: a3 = a1 if a1 == 0\n 28115: a1 = u64 [s1 + 0xa8]\n 28119: t0 = a1 + a3\n 28122: a1 = t0 <u a1\n 28125: a4 = u64 [s1 + 0xb0]\n 28129: a4 = a4 + a1\n 28132: a1 = u64 [s1 + 0x88]\n 28136: u64 [s1 + 0xd0] = a1\n 28140: a1 = u64 [s1 + 0x98]\n 28144: u64 [s1 + 0xc8] = a1\n 28148: t1 = u64 [s1 + 0x90]\n 28152: t2 = a0\n 28154: jump @981\n      : @987 (gas: 2)\n 28157: a5 = u64 [s1 + 0x50]\n 28160: fallthrough\n      : @988 (gas: 26)\n 28161: a1 = u64 [s1 + 0xd8]\n 28165: a0 = a1 + 0x20\n 28168: a1 = a0 <u a1\n 28171: a2 = t2 + a1\n 28174: a3 = a2 <u t2\n 28177: a3 = a1 if a1 == 0\n 28180: a3 = a3 + t1\n 28183: a1 = a3 <u t1\n 28186: a4 = t0 + a1\n 28189: a1 = s1 + 0x2058\n 28193: u64 [a1 + 0x6e8] = a5\n 28197: a5 = a1 + 0x600\n 28201: u64 [a5 + 0xc8] = a0\n 28205: a0 = u64 [s1 + 0x48]\n 28208: u64 [a5 + 0xf0] = a0\n 28212: a0 = u64 [s1 + 0x40]\n 28215: u64 [a5 + 0xf8] = a0\n 28219: u64 [a5 + 0xd0] = a2\n 28223: a0 = u64 [s1 + 0x38]\n 28226: u64 [a1 + 0x700] = a0\n 28230: u64 [a5 + 0xd8] = a3\n 28234: a2 = a1\n 28236: a0 = s1 + 0x2740\n 28240: a1 = s1 + 0x2720\n 28244: u64 [a2 + 0x6e0] = a4\n 28248: ra = 1076, jump @1177\n      : @989 [@dyn 538] (gas: 3)\n 28254: a0 = s1 + 0x2700\n 28258: a1 = 0x40\n 28261: ra = 1078, jump @23\n      : @990 [@dyn 539] (gas: 27)\n 28267: a0 = s1 + 0x2058\n 28271: a3 = u64 [a0 + 0x6c0]\n 28275: u64 [s1 + 0xd8] = a3\n 28279: a2 = u64 [a0 + 0x6b8]\n 28283: u64 [s1 + 0xd0] = a2\n 28287: a4 = u64 [a0 + 0x6b0]\n 28291: u64 [s1 + 0xc8] = a4\n 28295: a5 = u64 [a0 + 0x6a8]\n 28299: u64 [s1 + 0xc0] = a5\n 28303: a1 = u64 [s1 + 0x38]\n 28306: u64 [a0 + 0x660] = a1\n 28310: a1 = u64 [s1 + 0x40]\n 28313: u64 [a0 + 0x658] = a1\n 28317: a1 = u64 [s1 + 0x48]\n 28320: u64 [a0 + 0x650] = a1\n 28324: a1 = u64 [s1 + 0x50]\n 28327: u64 [a0 + 0x648] = a1\n 28331: a1 = a0 + 0x600\n 28335: u64 [a1 + 0x80] = a3\n 28339: u64 [a1 + 0x78] = a2\n 28342: u64 [a1 + 0x70] = a4\n 28345: a3 = a0\n 28347: a0 = s1 + 0x26e0\n 28351: a1 = s1 + 0x26c0\n 28355: a2 = s1 + 0x26a0\n 28359: u64 [a3 + 0x668] = a5\n 28363: ra = 1080, jump @1187\n      : @991 [@dyn 540] (gas: 1)\n 28369: t0 = 1082, jump @1561\n      : @992 [@dyn 541] (gas: 1)\n 28375: jump @1003 if a0 != 0\n      : @993 (gas: 9)\n 28379: t0 = a3\n 28381: a1 = s1 + 0x2058\n 28385: a5 = a1 + 0x600\n 28389: a0 = u64 [a5 + 0x90]\n 28393: a3 = u64 [a5 + 0xa0]\n 28397: u64 [s1 + 0xb8] = a3\n 28401: t1 = u64 [a1 + 0x688]\n 28405: a3 = u64 [a5 + 0x98]\n 28409: jump @1001\n      : @994 (gas: 2)\n 28412: a5 = u64 [s1 + 0x50]\n 28415: fallthrough\n      : @995 (gas: 23)\n 28416: a1 = u64 [s1 + 0xd8]\n 28420: a0 = a1 + 0x20\n 28423: a1 = a0 <u a1\n 28426: a2 = t2 + a1\n 28429: a3 = a2 <u t2\n 28432: a3 = a1 if a1 == 0\n 28435: a3 = a3 + t1\n 28438: a1 = a3 <u t1\n 28441: a4 = t0 + a1\n 28444: u64 [s1 + 0x1c0] = a5\n 28448: u64 [s1 + 0x1a0] = a0\n 28452: a0 = u64 [s1 + 0x48]\n 28455: u64 [s1 + 0x1c8] = a0\n 28459: a0 = u64 [s1 + 0x40]\n 28462: u64 [s1 + 0x1d0] = a0\n 28466: u64 [s1 + 0x1a8] = a2\n 28470: a0 = u64 [s1 + 0x38]\n 28473: u64 [s1 + 0x1d8] = a0\n 28477: u64 [s1 + 0x1b0] = a3\n 28481: a0 = s1 + 0x1c0\n 28485: a1 = s1 + 0x1a0\n 28489: u64 [s1 + 0x1b8] = a4\n 28493: ra = 1084, jump @1177\n      : @996 [@dyn 542] (gas: 3)\n 28499: a0 = s1 + 0x180\n 28503: a1 = 0x40\n 28506: ra = 1086, jump @23\n      : @997 [@dyn 543] (gas: 25)\n 28512: a5 = s1 + 0x100\n 28516: a2 = u64 [a5 + 0x98]\n 28520: u64 [s1 + 0xd8] = a2\n 28524: a1 = u64 [a5 + 0x90]\n 28528: u64 [s1 + 0xd0] = a1\n 28532: a3 = u64 [a5 + 0x88]\n 28536: u64 [s1 + 0xc8] = a3\n 28540: a4 = u64 [a5 + 0x80]\n 28544: u64 [s1 + 0xc0] = a4\n 28548: a0 = u64 [s1 + 0x38]\n 28551: u64 [a5 + 0x38] = a0\n 28554: a0 = u64 [s1 + 0x40]\n 28557: u64 [a5 + 0x30] = a0\n 28560: a0 = u64 [s1 + 0x48]\n 28563: u64 [a5 + 0x28] = a0\n 28566: a0 = u64 [s1 + 0x50]\n 28569: u64 [a5 + 0x20] = a0\n 28572: u64 [a5 + 0x58] = a2\n 28575: u64 [a5 + 0x50] = a1\n 28578: u64 [a5 + 0x48] = a3\n 28581: a0 = s1 + 0x160\n 28585: a1 = s1 + 0x140\n 28589: a2 = s1 + 0x120\n 28593: u64 [a5 + 0x40] = a4\n 28596: ra = 1088, jump @1187\n      : @998 [@dyn 544] (gas: 1)\n 28602: t0 = 1090, jump @1561\n      : @999 [@dyn 545] (gas: 1)\n 28608: jump @1003 if a0 != 0\n      : @1000 (gas: 8)\n 28611: t0 = a3\n 28613: a5 = s1 + 0x100\n 28617: a0 = u64 [a5 + 0x68]\n 28620: a1 = u64 [a5 + 0x78]\n 28623: u64 [s1 + 0xb8] = a1\n 28627: t1 = u64 [s1 + 0x160]\n 28631: a3 = u64 [a5 + 0x70]\n 28634: fallthrough\n      : @1001 (gas: 26)\n 28635: t2 = a0 ^ a4\n 28638: a5 = a0 <u a4\n 28641: ra = t1 <u a2\n 28644: a5 = ra if t2 == 0\n 28647: a1 = a3 - t0\n 28650: t2 = a1 - a5\n 28653: a1 = a1 <u a5\n 28656: u64 [s1 + 0xb0] = a1\n 28660: a3 = a3 <u t0\n 28663: a5 = u64 [s1 + 0xd8]\n 28667: a1 = u64 [s1 + 0xb8]\n 28671: a5 = a1 - a5\n 28674: a5 = a5 - a3\n 28677: a1 = u64 [s1 + 0xb0]\n 28681: a5 = a5 - a1\n 28684: a0 = a0 - a4\n 28687: a0 = a0 - ra\n 28690: a1 = t1 - a2\n 28693: a0 = a0 | a5\n 28696: a3 = a1 | t2\n 28699: a3 = a3 | a0\n 28702: a0 = a0 | t2\n 28705: a3 = a3 >> 0x20\n 28708: a0 = a0 << 0x20\n 28711: a0 = a0 | a3\n 28714: jump @1003 if a0 != 0\n      : @1002 (gas: 1)\n 28717: jump @1153\n      : @1003 (gas: 1)\n 28720: trap\n      : @1004 (gas: 8)\n 28721: a1 = s1 + 0x3858\n 28725: u64 [a1 + 768] = 0\n 28729: u64 [a1 + 760] = 0\n 28733: u64 [a1 + 752] = 0\n 28737: u64 [a1 + 744] = 0x6\n 28742: a0 = s1 + 0x23a0\n 28746: a1 = s1 + 0x3b40\n 28750: ra = 1092, jump @27\n      : @1005 [@dyn 546] (gas: 15)\n 28756: a0 = s1 + 0x2058\n 28760: a1 = u64 [a0 + 0x350]\n 28764: u64 [s1 + 0xd8] = a1\n 28768: a1 = u64 [a0 + 0x348]\n 28772: u64 [s1 + 0xd0] = a1\n 28776: a0 = u32 [a0 + 0x358]\n 28780: u64 [s1 + 0xc8] = a0\n 28784: a0 = 0x301b0\n 28789: u64 [s1 + 0xc0] = a0\n 28793: i32 a0 = a0 + 0\n 28795: ra = 0x446\n 28799: ecalli 3 // 'caller'\n 28801: a2 = u64 [s1 + 0xc0]\n 28805: t0 = 0x448\n 28809: jump @1530\n      : @1006 [@dyn 547] (gas: 2)\n 28812: a2 = u64 [s1 + 0xc0]\n 28816: t0 = 1096, jump @1530\n      : @1007 [@dyn 548] (gas: 16)\n 28822: a2 = u64 [s1 + 0xc8]\n 28826: a1 = a1 ^ a2\n 28829: a2 = u64 [s1 + 0xd0]\n 28833: a0 = a0 ^ a2\n 28836: a0 = a0 | a1\n 28839: a1 = u64 [s1 + 0xd8]\n 28843: a1 = a1 ^ a3\n 28846: a0 = a0 | a1\n 28849: a0 = a0 <u 0x1\n 28852: a1 = s1 + 0x2058\n 28856: u64 [a1 + 832] = 0\n 28860: u64 [a1 + 824] = 0\n 28864: u64 [a1 + 0x328] = a0\n 28868: a0 = s1 + 0x2380\n 28872: u64 [a1 + 816] = 0\n 28876: ra = 1098, jump @1352\n      : @1008 [@dyn 549] (gas: 3)\n 28882: a0 = s1 + 0x2360\n 28886: a1 = u64 [s1 + 0x50]\n 28889: ra = 1100, jump @23\n      : @1009 [@dyn 550] (gas: 13)\n 28895: a0 = s1 + 0x2058\n 28899: a2 = a0 + 0x300\n 28903: a1 = u64 [a2 + 0x8]\n 28906: u64 [s1 + 0xd8] = a1\n 28910: a1 = u64 [a2 + 0x18]\n 28913: u64 [s1 + 0xd0] = a1\n 28917: a1 = u64 [a2 + 0x10]\n 28920: u64 [s1 + 0xc8] = a1\n 28924: a1 = u64 [a2 + 0x20]\n 28927: u64 [s1 + 0xc0] = a1\n 28931: a0 = s1 + 0x2340\n 28935: a1 = u64 [s1 + 0x58]\n 28938: ra = 1102, jump @23\n      : @1010 [@dyn 551] (gas: 18)\n 28944: a3 = s1 + 0x2058\n 28948: a0 = u64 [a3 + 0x300]\n 28952: a4 = a3 + 0x200\n 28956: a1 = u64 [a4 + 0xf0]\n 28960: a2 = u64 [a4 + 0xe8]\n 28964: a3 = u64 [a4 + 0xf8]\n 28968: a4 = u64 [s1 + 0xc0]\n 28972: a0 = a0 ^ a4\n 28975: a4 = u64 [s1 + 0xc8]\n 28979: a1 = a1 ^ a4\n 28982: a0 = a0 | a1\n 28985: a1 = u64 [s1 + 0xd0]\n 28989: a1 = a1 ^ a3\n 28992: a3 = u64 [s1 + 0xd8]\n 28996: a2 = a2 ^ a3\n 28999: a1 = a1 | a2\n 29002: a0 = a0 | a1\n 29005: jump @1076 if a0 != 0\n      : @1011 (gas: 7)\n 29009: u64 [s1 + 216] = 0\n 29013: u64 [s1 + 208] = 0\n 29017: u64 [s1 + 192] = 0\n 29021: u64 [s1 + 200] = 0\n 29025: a0 = 0xffffffff\n 29035: u64 [s1 + 0xb8] = a0\n 29039: fallthrough\n      : @1012 (gas: 3)\n 29040: a0 = s1 + 0x2280\n 29044: a1 = u64 [s1 + 0x50]\n 29047: ra = 1104, jump @23\n      : @1013 [@dyn 552] (gas: 22)\n 29053: a5 = s1 + 0x2058\n 29057: a3 = a5 + 0x200\n 29061: a0 = u64 [a3 + 0x30]\n 29064: a1 = u64 [a3 + 0x40]\n 29067: a2 = u64 [a3 + 0x28]\n 29070: t2 = u64 [a5 + 0x238]\n 29074: a3 = u64 [s1 + 0xd0]\n 29078: t1 = a3 ^ a0\n 29081: a0 = a3 <u a0\n 29084: t0 = u64 [s1 + 0xd8]\n 29088: a2 = t0 <u a2\n 29091: a2 = a0 if t1 != 0\n 29094: a4 = u64 [s1 + 0xc0]\n 29098: a0 = a4 <u t2\n 29101: t1 = u64 [s1 + 0xc8]\n 29105: ra = t1 ^ a1\n 29108: a1 = t1 <u a1\n 29111: a1 = a0 if ra == 0\n 29114: a0 = a4 ^ t2\n 29117: a0 = a0 | ra\n 29120: a1 = a2 if a0 == 0\n 29123: jump @1089 if a1 == 0\n      : @1014 (gas: 17)\n 29127: u64 [a5 + 0x1c8] = t0\n 29131: a0 = u64 [s1 + 0x50]\n 29134: a1 = a5 + 0x100\n 29138: u64 [a1 + 0xe8] = a0\n 29142: u64 [a1 + 0xd0] = a3\n 29146: a0 = u64 [s1 + 0x38]\n 29149: u64 [a1 + 0xf0] = a0\n 29153: u64 [a1 + 0xd8] = a4\n 29157: a0 = u64 [s1 + 0x40]\n 29160: u64 [a1 + 0xf8] = a0\n 29164: u64 [a5 + 0x1e0] = t1\n 29168: a0 = s1 + 0x2260\n 29172: a1 = s1 + 0x2240\n 29176: a2 = s1 + 0x2220\n 29180: a3 = u64 [s1 + 0x48]\n 29183: u64 [a5 + 0x200] = a3\n 29187: ra = 1106, jump @1393\n      : @1015 [@dyn 553] (gas: 7)\n 29193: a1 = s1 + 0x2058\n 29197: a4 = a1 + 0x200\n 29201: a0 = u64 [a4 + 0x20]\n 29204: a2 = u64 [a4 + 0x18]\n 29207: a3 = u64 [a4 + 0x10]\n 29210: a1 = u64 [a4 + 0x8]\n 29213: t0 = 1108, jump @1532\n      : @1016 [@dyn 554] (gas: 1)\n 29219: jump @1003 if a0 != 0\n      : @1017 (gas: 2)\n 29223: a0 = s1 + 0x2200\n 29227: ra = 1110, jump @23\n      : @1018 [@dyn 555] (gas: 19)\n 29233: a5 = s1 + 0x2058\n 29237: a0 = u64 [a5 + 0x1b0]\n 29241: a1 = u64 [a5 + 0x1b8]\n 29245: a2 = u64 [a5 + 0x1a8]\n 29249: a0 = a0 & 0xffffffffffffffff\n 29252: a4 = u64 [s1 + 0xb8]\n 29256: a1 = a1 & a4\n 29259: a2 = a2 & 0xffffffffffffffff\n 29262: a1 = a1 | a2\n 29265: a0 = a0 | a1\n 29268: a0 = a0 >u 0\n 29270: u64 [a5 + 416] = 0\n 29274: u64 [a5 + 408] = 0\n 29278: u64 [a5 + 0x188] = a0\n 29282: a0 = s1 + 0x21e0\n 29286: u64 [a5 + 400] = 0\n 29290: ra = 0x458\n 29294: t0 = 0x5c6\n 29298: jump @1542\n      : @1019 [@dyn 556] (gas: 23)\n 29301: a0 = u64 [s1 + 0xc8]\n 29305: a1 = s1 + 0x2058\n 29309: a2 = a1 + 0x100\n 29313: u64 [a2 + 0x40] = a0\n 29316: a0 = u64 [s1 + 0xc0]\n 29320: u64 [a2 + 0x38] = a0\n 29323: a0 = u64 [s1 + 0xd0]\n 29327: u64 [a2 + 0x30] = a0\n 29330: a0 = u64 [s1 + 0xd8]\n 29334: u64 [a2 + 0x28] = a0\n 29337: a0 = u64 [s1 + 0x30]\n 29340: u64 [a2 + 0x60] = a0\n 29343: a0 = u64 [s1 + 0x28]\n 29346: u64 [a2 + 0x58] = a0\n 29349: a0 = u64 [s1 + 0x20]\n 29352: u64 [a2 + 0x50] = a0\n 29355: a4 = a1\n 29357: a0 = s1 + 0x21c0\n 29361: a1 = s1 + 0x21a0\n 29365: a2 = s1 + 0x2180\n 29369: a3 = u64 [s1 + 0x58]\n 29372: u64 [a4 + 0x148] = a3\n 29376: ra = 1114, jump @1393\n      : @1020 [@dyn 557] (gas: 7)\n 29382: a1 = s1 + 0x2058\n 29386: a4 = a1 + 0x100\n 29390: a0 = u64 [a4 + 0x80]\n 29394: a2 = u64 [a4 + 0x78]\n 29397: a3 = u64 [a4 + 0x70]\n 29400: a1 = u64 [a4 + 0x68]\n 29403: t0 = 1116, jump @1532\n      : @1021 [@dyn 558] (gas: 1)\n 29409: jump @1003 if a0 != 0\n      : @1022 (gas: 2)\n 29413: a0 = s1 + 0x2160\n 29417: ra = 1118, jump @23\n      : @1023 [@dyn 559] (gas: 3)\n 29423: t0 = 0x460\n 29427: a1 = s1 + 0x2058\n 29431: fallthrough\n      : @1024 [@dyn 560] (gas: 30)\n 29432: a2 = a1 + 0x100\n 29436: a0 = u64 [a2 + 0x20]\n 29439: u64 [s1 + 0x90] = a0\n 29443: a0 = u64 [a2 + 0x18]\n 29446: u64 [s1 + 0x98] = a0\n 29450: a0 = u64 [a2 + 0x10]\n 29453: u64 [s1 + 0xa0] = a0\n 29457: a0 = u64 [a2 + 0x8]\n 29460: u64 [s1 + 0xa8] = a0\n 29464: a0 = u64 [s1 + 0xc8]\n 29468: u64 [a1 + 0xc0] = a0\n 29472: a0 = u64 [s1 + 0xc0]\n 29476: u64 [a1 + 0xb8] = a0\n 29480: a0 = u64 [s1 + 0xd0]\n 29484: u64 [a1 + 0xb0] = a0\n 29488: a0 = u64 [s1 + 0xd8]\n 29492: u64 [a1 + 0xa8] = a0\n 29496: a0 = u64 [s1 + 0x48]\n 29499: u64 [a1 + 0xe0] = a0\n 29503: a0 = u64 [s1 + 0x40]\n 29506: u64 [a1 + 0xd8] = a0\n 29510: a0 = u64 [s1 + 0x38]\n 29513: u64 [a1 + 0xd0] = a0\n 29517: a4 = a1\n 29519: a0 = s1 + 0x2140\n 29523: a1 = s1 + 0x2120\n 29527: a2 = s1 + 0x2100\n 29531: a3 = u64 [s1 + 0x50]\n 29534: u64 [a4 + 0xc8] = a3\n 29538: ra = 1122, jump @1393\n      : @1025 [@dyn 561] (gas: 6)\n 29544: a1 = s1 + 0x2058\n 29548: a0 = u64 [a1 + 0x100]\n 29552: a2 = u64 [a1 + 0xf8]\n 29556: a3 = u64 [a1 + 0xf0]\n 29560: a1 = u64 [a1 + 0xe8]\n 29564: t0 = 1124, jump @1532\n      : @1026 [@dyn 562] (gas: 1)\n 29570: jump @1003 if a0 != 0\n      : @1027 (gas: 2)\n 29574: a0 = s1 + 0x20e0\n 29578: ra = 1126, jump @23\n      : @1028 [@dyn 563] (gas: 15)\n 29584: a4 = s1 + 0x2058\n 29588: a0 = u64 [a4 + 0x88]\n 29592: a1 = u64 [a4 + 0x90]\n 29596: a2 = u64 [a4 + 0x98]\n 29600: a0 = a0 & 0xffffffffffffffff\n 29603: a1 = a1 & 0xffffffffffffffff\n 29606: a3 = u64 [s1 + 0xb8]\n 29610: a2 = a2 & a3\n 29613: u64 [a4 + 128] = 0\n 29617: u64 [a4 + 0x78] = a2\n 29620: u64 [a4 + 0x70] = a1\n 29623: a1 = s1 + 0x20c0\n 29627: u64 [a4 + 0x68] = a0\n 29630: a0 = 0\n 29632: ra = 1128, jump @25\n      : @1029 [@dyn 564] (gas: 9)\n 29638: a0 = s1 + 0x2058\n 29642: u64 [a0 + 96] = 0\n 29645: u64 [a0 + 88] = 0\n 29648: u64 [a0 + 80] = 0\n 29651: a3 = a0\n 29653: a0 = 0x20\n 29656: a1 = s1 + 0x20a0\n 29660: u64 [a3 + 72] = 0x4\n 29664: ra = 1130, jump @25\n      : @1030 [@dyn 565] (gas: 6)\n 29670: a0 = sp + 0xffffffffffffffe0\n 29673: a0 = a0 & 0xffffffffffffffe0\n 29676: u64 [s1 + 0xb0] = a0\n 29680: sp = a0\n 29682: a1 = i32 [0x2019c]\n 29687: jump @1032 if a1 >u 63\n      : @1031 (gas: 2)\n 29691: u32 [0x2019c] = 0x40\n 29697: fallthrough\n      : @1032 (gas: 13)\n 29698: a0 = sp + 0xffffffffffffffe0\n 29701: a2 = a0 & 0xffffffffffffffe0\n 29704: u64 [s1 + 0x88] = a2\n 29708: sp = a2\n 29710: a0 = 0x201b0\n 29715: i32 a0 = a0 + 0\n 29717: i32 a2 = a2 + 0\n 29719: a1 = 0x40\n 29722: ra = 0x46c\n 29726: ecalli 6 // 'hash_keccak_256'\n 29728: a3 = u64 [s1 + 0x88]\n 29732: t0 = 0x46e\n 29736: jump @1536\n      : @1033 [@dyn 566] (gas: 2)\n 29739: a3 = u64 [s1 + 0x88]\n 29743: t0 = 1134, jump @1536\n      : @1034 [@dyn 567] (gas: 2)\n 29749: a0 = s1 + 0x2080\n 29753: ra = 1136, jump @27\n      : @1035 [@dyn 568] (gas: 22)\n 29759: a3 = s1 + 0x2058\n 29763: t0 = u64 [a3 + 0x28]\n 29766: a0 = u64 [a3 + 0x30]\n 29769: a1 = u64 [a3 + 0x38]\n 29772: a2 = u64 [a3 + 0x40]\n 29775: a5 = s1 + 0x1858\n 29779: a4 = u64 [s1 + 0x90]\n 29783: u64 [a5 + 0x7e0] = a4\n 29787: a4 = u64 [s1 + 0x98]\n 29791: u64 [a5 + 0x7d8] = a4\n 29795: a4 = u64 [s1 + 0xa0]\n 29799: u64 [a5 + 0x7d0] = a4\n 29803: a4 = u64 [s1 + 0xa8]\n 29807: u64 [a5 + 0x7c8] = a4\n 29811: u64 [a3] = a2\n 29813: u64 [a3 + 0xfffffffffffffff8] = a1\n 29816: u64 [a3 + 0xfffffffffffffff0] = a0\n 29819: a0 = s1 + 0x2060\n 29823: a1 = s1 + 0x2040\n 29827: a2 = s1 + 0x2020\n 29831: u64 [a3 + 0xffffffffffffffe8] = t0\n 29834: ra = 1138, jump @1344\n      : @1036 [@dyn 569] (gas: 14)\n 29840: a3 = s1 + 0x2058\n 29844: a0 = u64 [a3 + 0x20]\n 29847: a1 = u64 [a3 + 0x18]\n 29850: a2 = u64 [a3 + 0x10]\n 29853: a3 = u64 [a3 + 0x8]\n 29856: a4 = s1 + 0x3858\n 29860: a5 = a4 + 0x300\n 29864: u64 [a5 + 0x20] = a0\n 29867: u64 [a5 + 0x18] = a1\n 29870: u64 [a5 + 0x10] = a2\n 29873: u64 [a5 + 0x8] = a3\n 29876: a1 = s1 + 0x3b60\n 29880: a0 = u64 [s1 + 0xb0]\n 29884: ra = 1140, jump @31\n      : @1037 [@dyn 570] (gas: 22)\n 29890: a0 = u64 [s1 + 0xc8]\n 29894: a4 = s1 + 0x1858\n 29898: a5 = a4 + 0x700\n 29902: u64 [a5 + 0x80] = a0\n 29906: a0 = u64 [s1 + 0xc0]\n 29910: u64 [a5 + 0x78] = a0\n 29913: a0 = u64 [s1 + 0xd0]\n 29917: u64 [a5 + 0x70] = a0\n 29920: a0 = u64 [s1 + 0xd8]\n 29924: u64 [a5 + 0x68] = a0\n 29927: a0 = u64 [s1 + 0x30]\n 29930: u64 [a5 + 0xa0] = a0\n 29934: a0 = u64 [s1 + 0x28]\n 29937: u64 [a5 + 0x98] = a0\n 29941: a0 = u64 [s1 + 0x20]\n 29944: u64 [a5 + 0x90] = a0\n 29948: a0 = s1 + 0x2000\n 29952: a1 = s1 + 0x1fe0\n 29956: a2 = s1 + 0x1fc0\n 29960: a3 = u64 [s1 + 0x58]\n 29963: u64 [a5 + 0x88] = a3\n 29967: ra = 1142, jump @1393\n      : @1038 [@dyn 571] (gas: 7)\n 29973: a1 = s1 + 0x1858\n 29977: a4 = a1 + 0x700\n 29981: a0 = u64 [a4 + 0xc0]\n 29985: a2 = u64 [a4 + 0xb8]\n 29989: a3 = u64 [a4 + 0xb0]\n 29993: a1 = u64 [a4 + 0xa8]\n 29997: t0 = 1144, jump @1532\n      : @1039 [@dyn 572] (gas: 1)\n 30003: jump @1003 if a0 != 0\n      : @1040 (gas: 2)\n 30007: a0 = s1 + 0x1fa0\n 30011: ra = 1146, jump @23\n      : @1041 [@dyn 573] (gas: 18)\n 30017: a1 = s1 + 0x1858\n 30021: a2 = a1 + 0x700\n 30025: a0 = u64 [a2 + 0x48]\n 30028: u64 [s1 + 0xb0] = a0\n 30032: a0 = u64 [a2 + 0x50]\n 30035: u64 [s1 + 0xa8] = a0\n 30039: a0 = u64 [a2 + 0x58]\n 30042: u64 [s1 + 0xa0] = a0\n 30046: a0 = u64 [a2 + 0x60]\n 30049: u64 [s1 + 0x98] = a0\n 30053: a1 = s1 + 0x3858\n 30057: u64 [a1 + 832] = 0\n 30061: u64 [a1 + 824] = 0\n 30065: u64 [a1 + 816] = 0\n 30069: u64 [a1 + 808] = 0x3\n 30074: a0 = s1 + 0x1f80\n 30078: a1 = s1 + 0x3b80\n 30082: ra = 1148, jump @27\n      : @1042 [@dyn 574] (gas: 22)\n 30088: a4 = s1 + 0x1858\n 30092: a3 = u64 [a4 + 0x728]\n 30096: a0 = u64 [a4 + 0x730]\n 30100: a1 = u64 [a4 + 0x738]\n 30104: a2 = u64 [a4 + 0x740]\n 30108: a5 = u64 [s1 + 0x98]\n 30112: u64 [a4 + 0x6e0] = a5\n 30116: a5 = u64 [s1 + 0xa0]\n 30120: u64 [a4 + 0x6d8] = a5\n 30124: a5 = u64 [s1 + 0xa8]\n 30128: u64 [a4 + 0x6d0] = a5\n 30132: a5 = u64 [s1 + 0xb0]\n 30136: u64 [a4 + 0x6c8] = a5\n 30140: u64 [a4 + 0x700] = a2\n 30144: a5 = a4 + 0x600\n 30148: u64 [a5 + 0xf8] = a1\n 30152: u64 [a5 + 0xf0] = a0\n 30156: a0 = s1 + 0x1f60\n 30160: a1 = s1 + 0x1f40\n 30164: a2 = s1 + 0x1f20\n 30168: u64 [a5 + 0xe8] = a3\n 30172: ra = 1150, jump @1344\n      : @1043 [@dyn 575] (gas: 19)\n 30178: a3 = s1 + 0x1858\n 30182: a4 = a3 + 0x700\n 30186: a0 = u64 [a4 + 0x8]\n 30189: a1 = u64 [a4 + 0x10]\n 30192: a2 = u64 [a4 + 0x18]\n 30195: a3 = u64 [a4 + 0x20]\n 30198: a4 = s1 + 0x3858\n 30202: u64 [a4 + 864] = 0\n 30206: u64 [a4 + 856] = 0\n 30210: u64 [a4 + 848] = 0\n 30214: u64 [a4 + 840] = 0x3\n 30219: a5 = a4 + 0x300\n 30223: u64 [a5 + 0x80] = a3\n 30227: u64 [a5 + 0x78] = a2\n 30230: u64 [a5 + 0x70] = a1\n 30233: u64 [a5 + 0x68] = a0\n 30236: a0 = s1 + 0x3ba0\n 30240: a1 = s1 + 0x3bc0\n 30244: ra = 1152, jump @31\n      : @1044 [@dyn 576] (gas: 23)\n 30250: a0 = u64 [s1 + 0xc8]\n 30254: a1 = s1 + 0x1858\n 30258: a2 = a1 + 0x600\n 30262: u64 [a2 + 0x80] = a0\n 30266: a0 = u64 [s1 + 0xc0]\n 30270: u64 [a2 + 0x78] = a0\n 30273: a0 = u64 [s1 + 0xd0]\n 30277: u64 [a2 + 0x70] = a0\n 30280: a0 = u64 [s1 + 0xd8]\n 30284: u64 [a2 + 0x68] = a0\n 30287: a0 = u64 [s1 + 0x48]\n 30290: u64 [a2 + 0xa0] = a0\n 30294: a0 = u64 [s1 + 0x40]\n 30297: u64 [a2 + 0x98] = a0\n 30301: a0 = u64 [s1 + 0x38]\n 30304: u64 [a2 + 0x90] = a0\n 30308: a4 = a1\n 30310: a0 = s1 + 0x1f00\n 30314: a1 = s1 + 0x1ee0\n 30318: a2 = s1 + 0x1ec0\n 30322: a3 = u64 [s1 + 0x50]\n 30325: u64 [a4 + 0x688] = a3\n 30329: ra = 1154, jump @1393\n      : @1045 [@dyn 577] (gas: 7)\n 30335: a1 = s1 + 0x1858\n 30339: a4 = a1 + 0x600\n 30343: a0 = u64 [a4 + 0xc0]\n 30347: a2 = u64 [a4 + 0xb8]\n 30351: a3 = u64 [a4 + 0xb0]\n 30355: a1 = u64 [a4 + 0xa8]\n 30359: t0 = 1156, jump @1532\n      : @1046 [@dyn 578] (gas: 1)\n 30365: jump @1003 if a0 != 0\n      : @1047 (gas: 2)\n 30369: a0 = s1 + 0x1ea0\n 30373: ra = 1158, jump @23\n      : @1048 [@dyn 579] (gas: 3)\n 30379: t0 = 0x488\n 30383: a1 = s1 + 0x1858\n 30387: fallthrough\n      : @1049 [@dyn 580] (gas: 29)\n 30388: a2 = a1 + 0x600\n 30392: a0 = u64 [a2 + 0x48]\n 30395: u64 [s1 + 0xb0] = a0\n 30399: a0 = u64 [a2 + 0x50]\n 30402: u64 [s1 + 0xa8] = a0\n 30406: a0 = u64 [a2 + 0x58]\n 30409: u64 [s1 + 0xa0] = a0\n 30413: a0 = u64 [s1 + 0xc8]\n 30417: u64 [a2] = a0\n 30419: a0 = u64 [s1 + 0xc0]\n 30423: a3 = a1 + 0x500\n 30427: u64 [a3 + 0xf8] = a0\n 30431: a0 = u64 [s1 + 0xd0]\n 30435: u64 [a3 + 0xf0] = a0\n 30439: a0 = u64 [s1 + 0xd8]\n 30443: u64 [a3 + 0xe8] = a0\n 30447: a0 = u64 [s1 + 0x30]\n 30450: u64 [a2 + 0x20] = a0\n 30453: a0 = u64 [s1 + 0x28]\n 30456: u64 [a2 + 0x18] = a0\n 30459: a0 = u64 [s1 + 0x20]\n 30462: u64 [a2 + 0x10] = a0\n 30465: a4 = a1\n 30467: a0 = s1 + 0x1e80\n 30471: a1 = s1 + 0x1e60\n 30475: a2 = s1 + 0x1e40\n 30479: a3 = u64 [s1 + 0x58]\n 30482: u64 [a4 + 0x608] = a3\n 30486: ra = 1162, jump @1393\n      : @1050 [@dyn 581] (gas: 7)\n 30492: a1 = s1 + 0x1858\n 30496: a4 = a1 + 0x600\n 30500: a0 = u64 [a4 + 0x40]\n 30503: a2 = u64 [a4 + 0x38]\n 30506: a3 = u64 [a4 + 0x30]\n 30509: a1 = u64 [a4 + 0x28]\n 30512: t0 = 1164, jump @1532\n      : @1051 [@dyn 582] (gas: 1)\n 30518: jump @1003 if a0 != 0\n      : @1052 (gas: 2)\n 30522: a0 = s1 + 0x1e20\n 30526: ra = 1166, jump @23\n      : @1053 [@dyn 583] (gas: 3)\n 30532: t0 = 0x490\n 30536: a1 = s1 + 0x1858\n 30540: fallthrough\n      : @1054 [@dyn 584] (gas: 12)\n 30541: a2 = a1 + 0x500\n 30545: a0 = u64 [a2 + 0xe0]\n 30549: u64 [s1 + 0x98] = a0\n 30553: a0 = u64 [a2 + 0xd8]\n 30557: u64 [s1 + 0x90] = a0\n 30561: a0 = u64 [a2 + 0xd0]\n 30565: u64 [s1 + 0x88] = a0\n 30569: a0 = u64 [a2 + 0xc8]\n 30573: u64 [s1 + 0x80] = a0\n 30577: a0 = s1 + 0x1e00\n 30581: a1 = 0x40\n 30584: ra = 1170, jump @23\n      : @1055 [@dyn 585] (gas: 7)\n 30590: a4 = s1 + 0x1858\n 30594: a5 = a4 + 0x500\n 30598: a0 = u64 [a5 + 0xc0]\n 30602: a1 = u64 [a5 + 0xb8]\n 30606: a2 = u64 [a5 + 0xb0]\n 30610: a3 = u64 [a5 + 0xa8]\n 30614: t0 = 1172, jump @1566\n      : @1056 [@dyn 586] (gas: 1)\n 30620: jump @1003 if a0 != 0\n      : @1057 (gas: 1)\n 30624: t0 = 1174, jump @1567\n      : @1058 [@dyn 587] (gas: 12)\n 30630: a2 = a4 + 0x500\n 30634: u64 [a2 + 0x88] = a0\n 30638: a0 = u64 [s1 + 0x88]\n 30642: u64 [a2 + 0x90] = a0\n 30646: a0 = u64 [s1 + 0x90]\n 30650: u64 [a2 + 0x98] = a0\n 30654: a1 = s1 + 0x1de0\n 30658: a0 = u64 [s1 + 0x98]\n 30662: u64 [a2 + 0xa0] = a0\n 30666: a0 = a3\n 30668: u64 [s1 + 0xb0] = a3\n 30672: ra = 1176, jump @25\n      : @1059 [@dyn 588] (gas: 22)\n 30678: a4 = s1 + 0x1858\n 30682: a0 = u64 [s1 + 0x78]\n 30685: a5 = a4 + 0x500\n 30689: u64 [a5 + 0x58] = a0\n 30692: a0 = u64 [s1 + 0xa0]\n 30696: u64 [a5 + 0x50] = a0\n 30699: a0 = u64 [s1 + 0xa8]\n 30703: u64 [a5 + 0x48] = a0\n 30706: a0 = u64 [0x200a8]\n 30711: a1 = u64 [0x200b0]\n 30716: a2 = u64 [0x200b8]\n 30721: a3 = u64 [0x200c0]\n 30726: u64 [a5 + 0x80] = a0\n 30730: u64 [a5 + 0x78] = a1\n 30733: u64 [a5 + 0x70] = a2\n 30736: u64 [a5 + 0x68] = a3\n 30739: a1 = 0x20\n 30742: a2 = s1 + 0x1dc0\n 30746: a3 = s1 + 0x1da0\n 30750: u64 [a4 + 1376] = 0\n 30754: a0 = u64 [s1 + 0xb0]\n 30758: ra = 1178, jump @32\n      : @1060 [@dyn 589] (gas: 3)\n 30764: t0 = 0x49c\n 30768: a1 = s1 + 0x1858\n 30772: fallthrough\n      : @1061 [@dyn 590] (gas: 23)\n 30773: a0 = u64 [s1 + 0xc8]\n 30777: a2 = a1 + 0x500\n 30781: u64 [a2] = a0\n 30783: a0 = u64 [s1 + 0xc0]\n 30787: a3 = a1 + 0x400\n 30791: u64 [a3 + 0xf8] = a0\n 30795: a0 = u64 [s1 + 0xd0]\n 30799: u64 [a3 + 0xf0] = a0\n 30803: a0 = u64 [s1 + 0xd8]\n 30807: u64 [a3 + 0xe8] = a0\n 30811: a0 = u64 [s1 + 0x48]\n 30814: u64 [a2 + 0x20] = a0\n 30817: a0 = u64 [s1 + 0x40]\n 30820: u64 [a2 + 0x18] = a0\n 30823: a0 = u64 [s1 + 0x38]\n 30826: u64 [a2 + 0x10] = a0\n 30829: a4 = a1\n 30831: a0 = s1 + 0x1d80\n 30835: a1 = s1 + 0x1d60\n 30839: a2 = s1 + 0x1d40\n 30843: a3 = u64 [s1 + 0x50]\n 30846: u64 [a4 + 0x508] = a3\n 30850: ra = 1182, jump @1393\n      : @1062 [@dyn 591] (gas: 7)\n 30856: a1 = s1 + 0x1858\n 30860: a4 = a1 + 0x500\n 30864: a0 = u64 [a4 + 0x40]\n 30867: a2 = u64 [a4 + 0x38]\n 30870: a3 = u64 [a4 + 0x30]\n 30873: a1 = u64 [a4 + 0x28]\n 30876: t0 = 1184, jump @1532\n      : @1063 [@dyn 592] (gas: 1)\n 30882: jump @1003 if a0 != 0\n      : @1064 (gas: 2)\n 30886: a0 = s1 + 0x1d20\n 30890: ra = 1186, jump @23\n      : @1065 [@dyn 593] (gas: 29)\n 30896: a1 = s1 + 0x1858\n 30900: a2 = a1 + 0x400\n 30904: a0 = u64 [a2 + 0xc8]\n 30908: u64 [s1 + 0xb0] = a0\n 30912: a0 = u64 [a2 + 0xd0]\n 30916: u64 [s1 + 0xa8] = a0\n 30920: a0 = u64 [a2 + 0xd8]\n 30924: u64 [s1 + 0xa0] = a0\n 30928: a0 = u64 [s1 + 0xc8]\n 30932: u64 [a2 + 0x80] = a0\n 30936: a0 = u64 [s1 + 0xc0]\n 30940: u64 [a2 + 0x78] = a0\n 30943: a0 = u64 [s1 + 0xd0]\n 30947: u64 [a2 + 0x70] = a0\n 30950: a0 = u64 [s1 + 0xd8]\n 30954: u64 [a2 + 0x68] = a0\n 30957: a0 = u64 [s1 + 0x30]\n 30960: u64 [a2 + 0xa0] = a0\n 30964: a0 = u64 [s1 + 0x28]\n 30967: u64 [a2 + 0x98] = a0\n 30971: a0 = u64 [s1 + 0x20]\n 30974: u64 [a2 + 0x90] = a0\n 30978: a4 = a1\n 30980: a0 = s1 + 0x1d00\n 30984: a1 = s1 + 0x1ce0\n 30988: a2 = s1 + 0x1cc0\n 30992: a3 = u64 [s1 + 0x58]\n 30995: u64 [a4 + 0x488] = a3\n 30999: ra = 1188, jump @1393\n      : @1066 [@dyn 594] (gas: 7)\n 31005: a1 = s1 + 0x1858\n 31009: a4 = a1 + 0x400\n 31013: a0 = u64 [a4 + 0xc0]\n 31017: a2 = u64 [a4 + 0xb8]\n 31021: a3 = u64 [a4 + 0xb0]\n 31025: a1 = u64 [a4 + 0xa8]\n 31029: t0 = 1190, jump @1532\n      : @1067 [@dyn 595] (gas: 1)\n 31035: jump @1003 if a0 != 0\n      : @1068 (gas: 2)\n 31039: a0 = s1 + 0x1ca0\n 31043: ra = 1192, jump @23\n      : @1069 [@dyn 596] (gas: 13)\n 31049: a1 = s1 + 0x1858\n 31053: a2 = a1 + 0x400\n 31057: a0 = u64 [a2 + 0x60]\n 31060: u64 [s1 + 0x98] = a0\n 31064: a0 = u64 [a2 + 0x58]\n 31067: u64 [s1 + 0x90] = a0\n 31071: a0 = u64 [a2 + 0x50]\n 31074: u64 [s1 + 0x88] = a0\n 31078: a0 = u64 [a2 + 0x48]\n 31081: u64 [s1 + 0x80] = a0\n 31085: a0 = s1 + 0x1c80\n 31089: a1 = 0x40\n 31092: ra = 1194, jump @23\n      : @1070 [@dyn 597] (gas: 7)\n 31098: a4 = s1 + 0x1858\n 31102: a5 = a4 + 0x400\n 31106: a0 = u64 [a5 + 0x40]\n 31109: a1 = u64 [a5 + 0x38]\n 31112: a2 = u64 [a5 + 0x30]\n 31115: a3 = u64 [a5 + 0x28]\n 31118: t0 = 1196, jump @1566\n      : @1071 [@dyn 598] (gas: 1)\n 31124: jump @1003 if a0 != 0\n      : @1072 (gas: 1)\n 31128: t0 = 1198, jump @1567\n      : @1073 [@dyn 599] (gas: 12)\n 31134: a2 = a4 + 0x400\n 31138: u64 [a2 + 0x8] = a0\n 31141: a0 = u64 [s1 + 0x88]\n 31145: u64 [a2 + 0x10] = a0\n 31148: a0 = u64 [s1 + 0x90]\n 31152: u64 [a2 + 0x18] = a0\n 31155: a1 = s1 + 0x1c60\n 31159: a0 = u64 [s1 + 0x98]\n 31163: u64 [a2 + 0x20] = a0\n 31166: a0 = a3\n 31168: u64 [s1 + 0xb0] = a3\n 31172: ra = 1200, jump @25\n      : @1074 [@dyn 600] (gas: 27)\n 31178: a5 = s1 + 0x1858\n 31182: u64 [a5 + 960] = 0\n 31186: a0 = u64 [s1 + 0x78]\n 31189: a4 = a5 + 0x300\n 31193: u64 [a4 + 0xb8] = a0\n 31197: a0 = u64 [s1 + 0xa0]\n 31201: u64 [a4 + 0xb0] = a0\n 31205: a0 = u64 [s1 + 0xa8]\n 31209: u64 [a4 + 0xa8] = a0\n 31213: u64 [a5 + 992] = 0\n 31217: u64 [a5 + 984] = 0\n 31221: u64 [a5 + 976] = 0\n 31225: a0 = u64 [0x20030]\n 31230: a1 = u64 [0x20038]\n 31235: a2 = u64 [0x20040]\n 31240: a3 = u64 [0x20048]\n 31245: u64 [a5 + 0x400] = a0\n 31249: u64 [a4 + 0xf8] = a1\n 31253: u64 [a4 + 0xf0] = a2\n 31257: u64 [a4 + 0xe8] = a3\n 31261: a1 = 0x20\n 31264: a2 = s1 + 0x1c40\n 31268: a3 = s1 + 0x1c20\n 31272: a4 = s1 + 0x1c00\n 31276: u64 [a5 + 968] = 0\n 31280: a0 = u64 [s1 + 0xb0]\n 31284: ra = 1202, jump @34\n      : @1075 [@dyn 601] (gas: 17)\n 31290: a1 = u64 [s1 + 0xd8]\n 31294: a1 = a1 + 0x1\n 31297: a0 = a1 <u 0x1\n 31300: a2 = u64 [s1 + 0xd0]\n 31304: a2 = a2 + a0\n 31307: u64 [s1 + 0xd8] = a1\n 31311: u64 [s1 + 0xd0] = a2\n 31315: a0 = a1 | a2\n 31318: a0 = a0 <u 0x1\n 31321: a1 = u64 [s1 + 0xc0]\n 31325: a0 = a0 + a1\n 31328: a1 = a0 <u a1\n 31331: a2 = u64 [s1 + 0xc8]\n 31335: a2 = a2 + a1\n 31338: u64 [s1 + 0xc8] = a2\n 31342: u64 [s1 + 0xc0] = a0\n 31346: jump @1012\n      : @1076 (gas: 3)\n 31349: a0 = s1 + 0x2320\n 31353: a1 = 0x40\n 31356: ra = 1204, jump @23\n      : @1077 [@dyn 602] (gas: 16)\n 31362: a2 = s1 + 0x2058\n 31366: a5 = a2 + 0x200\n 31370: a3 = u64 [a5 + 0xe0]\n 31374: a4 = u64 [a5 + 0xd8]\n 31378: a0 = u64 [a5 + 0xd0]\n 31382: a1 = u64 [a5 + 0xc8]\n 31386: u64 [s1 + 0xd0] = a0\n 31390: a0 = a0 | a3\n 31393: u64 [s1 + 0xd8] = a1\n 31397: a1 = a1 | a4\n 31400: a1 = a1 | a0\n 31403: a1 = a1 >> 0x20\n 31406: a0 = a0 | a4\n 31409: a0 = a0 << 0x20\n 31412: a0 = a0 | a1\n 31415: jump @1003 if a0 != 0\n      : @1078 (gas: 10)\n 31419: u64 [a2 + 696] = 0\n 31423: u64 [a2 + 688] = 0\n 31427: u64 [a2 + 680] = 0\n 31431: a0 = 0x8c379a000000000\n 31441: a1 = s1 + 0x2300\n 31445: u64 [a2 + 0x2c0] = a0\n 31449: a0 = u64 [s1 + 0xd8]\n 31453: u64 [s1 + 0xc8] = a3\n 31457: u64 [s1 + 0xc0] = a4\n 31461: ra = 1206, jump @25\n      : @1079 [@dyn 603] (gas: 12)\n 31467: a0 = u64 [s1 + 0xc8]\n 31471: a2 = u64 [s1 + 0xc0]\n 31475: a2 = a2 | a0\n 31478: a3 = 0x100000000\n 31488: a0 = 0xfffffffc\n 31498: a1 = u64 [s1 + 0xd8]\n 31502: a0 = a1 <u a0\n 31505: a1 = u64 [s1 + 0xd0]\n 31509: a0 = 0 if a1 != 0\n 31511: u64 [s1 + 0xc8] = a2\n 31515: a0 = 0 if a2 != 0\n 31517: jump @1003 if a0 == 0\n      : @1080 (gas: 10)\n 31521: a0 = u64 [s1 + 0xd8]\n 31525: i32 a0 = a0 + 0x4\n 31528: a2 = s1 + 0x2058\n 31532: u64 [a2 + 672] = 0\n 31536: u64 [a2 + 664] = 0\n 31540: u64 [a2 + 648] = 0x20\n 31545: a1 = s1 + 0x22e0\n 31549: u64 [a2 + 656] = 0\n 31553: u64 [s1 + 0xc0] = a3\n 31557: ra = 1208, jump @25\n      : @1081 [@dyn 604] (gas: 9)\n 31563: a0 = u64 [s1 + 0xc0]\n 31567: a0 = a0 + 0xffffffffffffffdc\n 31570: a1 = u64 [s1 + 0xd8]\n 31574: a0 = a1 <u a0\n 31577: a1 = u64 [s1 + 0xd0]\n 31581: a0 = 0 if a1 != 0\n 31583: a1 = u64 [s1 + 0xc8]\n 31587: a0 = 0 if a1 != 0\n 31589: jump @1003 if a0 == 0\n      : @1082 (gas: 9)\n 31593: a0 = u64 [s1 + 0xd8]\n 31597: i32 a0 = a0 + 0x24\n 31600: a2 = s1 + 0x2058\n 31604: u64 [a2 + 640] = 0\n 31608: u64 [a2 + 632] = 0\n 31612: u64 [a2 + 616] = 0x16\n 31617: a1 = s1 + 0x22c0\n 31621: u64 [a2 + 624] = 0\n 31625: ra = 1210, jump @25\n      : @1083 [@dyn 605] (gas: 8)\n 31631: a0 = 0xffffffbc\n 31641: a1 = u64 [s1 + 0xd8]\n 31645: a0 = a1 <u a0\n 31648: a1 = u64 [s1 + 0xd0]\n 31652: a0 = 0 if a1 != 0\n 31654: a1 = u64 [s1 + 0xc8]\n 31658: a0 = 0 if a1 != 0\n 31660: jump @1003 if a0 == 0\n      : @1084 (gas: 13)\n 31664: a0 = u64 [s1 + 0xd8]\n 31668: i32 a0 = a0 + 0x44\n 31671: a1 = u64 [0x20090]\n 31676: a2 = u64 [0x20098]\n 31681: a3 = u64 [0x200a0]\n 31686: a4 = s1 + 0x2058\n 31690: a5 = a4 + 0x200\n 31694: u64 [a5 + 0x60] = a1\n 31697: u64 [a5 + 0x58] = a2\n 31700: u64 [a5 + 0x50] = a3\n 31703: a1 = s1 + 0x22a0\n 31707: u64 [a4 + 584] = 0\n 31711: ra = 1212, jump @25\n      : @1085 [@dyn 606] (gas: 3)\n 31717: a1 = 0x64\n 31720: a0 = u64 [s1 + 0xd8]\n 31724: ra = 1214, jump @38\n      : @1086 [@dyn 607] (gas: 5)\n 31730: i32 a1 = a0 + 0\n 31732: a0 = 0x1\n 31735: a2 = 0x64\n 31738: ecalli 7 // 'seal_return'\n 31740: fallthrough\n      : @1087 (gas: 6)\n 31741: a1 = 0x201b0\n 31746: i32 a1 = a1 + 0\n 31748: a0 = 0x1\n 31751: a2 = 0\n 31753: ecalli 7 // 'seal_return'\n 31755: jump @1089\n      : @1088 (gas: 5)\n 31757: i32 a1 = a1 + 0\n 31759: a0 = 0x1\n 31762: a2 = 0\n 31764: ecalli 7 // 'seal_return'\n 31766: fallthrough\n      : @1089 (gas: 6)\n 31767: a1 = 0x201b0\n 31772: i32 a1 = a1 + 0\n 31774: a0 = 0\n 31776: a2 = 0\n 31778: ecalli 7 // 'seal_return'\n 31780: jump @1089\n      : @1090 (gas: 2)\n 31782: a1 = 0x201b0\n 31787: jump @1088\n      : @1091 (gas: 2)\n 31789: a1 = 0x201b0\n 31794: jump @1088\n      : @1092 (gas: 2)\n 31796: a1 = 0x201b0\n 31801: jump @1088\n      : @1093 (gas: 2)\n 31803: a1 = 0x201b0\n 31808: jump @1088\n      : @1094 (gas: 2)\n 31810: a1 = 0x201b0\n 31815: jump @1088\n      : @1095 (gas: 2)\n 31817: a1 = 0x201b0\n 31822: jump @1088\n      : @1096 (gas: 9)\n 31824: a2 = s1 + 0x2058\n 31828: u64 [a2 + 1592] = 0\n 31832: u64 [a2 + 1584] = 0\n 31836: u64 [a2 + 1576] = 0\n 31840: a0 = 0x4e487b7100000000\n 31850: a1 = s1 + 0x2680\n 31854: u64 [a2 + 0x640] = a0\n 31858: a0 = 0\n 31860: ra = 1216, jump @25\n      : @1097 [@dyn 608] (gas: 3)\n 31866: t0 = 0x4c2\n 31870: a1 = s1 + 0x2058\n 31874: fallthrough\n      : @1098 [@dyn 609] (gas: 8)\n 31875: u64 [a1 + 1568] = 0\n 31879: u64 [a1 + 1560] = 0\n 31883: u64 [a1 + 1544] = 0x22\n 31888: a2 = a1\n 31890: a0 = 0x4\n 31893: a1 = s1 + 0x2660\n 31897: u64 [a2 + 1552] = 0\n 31901: ra = 1220, jump @25\n      : @1099 [@dyn 610] (gas: 2)\n 31907: a1 = i32 [0x2019c]\n 31912: jump @1101 if a1 >u 63\n      : @1100 (gas: 3)\n 31916: u32 [0x2019c] = 0x40\n 31922: a1 = 0x201b0\n 31927: jump @1126\n      : @1101 (gas: 2)\n 31930: a1 = 0x201b0\n 31935: jump @1126\n      : @1102 (gas: 2)\n 31938: a1 = 0x201b0\n 31943: jump @1088\n      : @1103 (gas: 2)\n 31946: a1 = 0x201b0\n 31951: jump @1088\n      : @1104 (gas: 2)\n 31954: a1 = 0x201b0\n 31959: jump @1088\n      : @1105 (gas: 2)\n 31962: a1 = 0x201b0\n 31967: jump @1088\n      : @1106 (gas: 6)\n 31970: u64 [s1 + 272] = 0\n 31974: u64 [s1 + 264] = 0\n 31978: u64 [s1 + 256] = 0\n 31982: t0 = 0x4c6\n 31986: a0 = 0x4e487b7100000000\n 31996: fallthrough\n      : @1107 [@dyn 611] (gas: 4)\n 31997: a1 = s1 + 0x100\n 32001: u64 [s1 + 0x118] = a0\n 32005: a0 = 0\n 32007: ra = 1224, jump @25\n      : @1108 [@dyn 612] (gas: 7)\n 32013: u64 [s1 + 248] = 0\n 32017: u64 [s1 + 240] = 0\n 32021: u64 [s1 + 224] = 0x22\n 32026: a0 = 0x4\n 32029: a1 = s1 + 0xe0\n 32033: u64 [s1 + 232] = 0\n 32037: ra = 1226, jump @25\n      : @1109 [@dyn 613] (gas: 2)\n 32043: a1 = i32 [0x2019c]\n 32048: jump @1111 if a1 >u 63\n      : @1110 (gas: 3)\n 32052: u32 [0x2019c] = 0x40\n 32058: a1 = 0x201b0\n 32063: jump @1126\n      : @1111 (gas: 2)\n 32066: a1 = 0x201b0\n 32071: jump @1126\n      : @1112 (gas: 2)\n 32074: a1 = 0x201b0\n 32079: jump @1088\n      : @1113 (gas: 2)\n 32082: a1 = 0x201b0\n 32087: jump @1088\n      : @1114 (gas: 2)\n 32090: a1 = 0x201b0\n 32095: jump @1088\n      : @1115 (gas: 2)\n 32098: a1 = 0x201b0\n 32103: jump @1088\n      : @1116 (gas: 2)\n 32106: a1 = 0x201b0\n 32111: jump @1088\n      : @1117 (gas: 2)\n 32114: a1 = 0x201b0\n 32119: jump @1088\n      : @1118 (gas: 2)\n 32122: a1 = 0x201b0\n 32127: jump @1088\n      : @1119 (gas: 2)\n 32130: a1 = 0x201b0\n 32135: jump @1088\n      : @1120 (gas: 10)\n 32138: a0 = s1 + 0x1058\n 32142: u64 [a0 + 2040] = 0\n 32146: u64 [a0 + 2032] = 0\n 32150: u64 [a0 + 2024] = 0\n 32154: a0 = 0x4e487b7100000000\n 32164: a1 = s1 + 0x1840\n 32168: a2 = s1 + 0x1858\n 32172: u64 [a2] = a0\n 32174: a0 = 0\n 32176: ra = 1228, jump @25\n      : @1121 [@dyn 614] (gas: 3)\n 32182: t0 = 0x4ce\n 32186: a1 = s1 + 0x1058\n 32190: fallthrough\n      : @1122 [@dyn 615] (gas: 8)\n 32191: u64 [a1 + 2016] = 0\n 32195: u64 [a1 + 2008] = 0\n 32199: u64 [a1 + 1992] = 0x11\n 32204: a2 = a1\n 32206: a0 = 0x4\n 32209: a1 = s1 + 0x1820\n 32213: u64 [a2 + 2000] = 0\n 32217: ra = 1232, jump @25\n      : @1123 [@dyn 616] (gas: 2)\n 32223: a1 = i32 [0x2019c]\n 32228: jump @1125 if a1 >u 63\n      : @1124 (gas: 3)\n 32232: u32 [0x2019c] = 0x40\n 32238: a1 = 0x201b0\n 32243: jump @1126\n      : @1125 (gas: 2)\n 32245: a1 = 0x201b0\n 32250: fallthrough\n      : @1126 (gas: 6)\n 32251: i32 a1 = a1 + 0\n 32253: a0 = 0x1\n 32256: a2 = 0x24\n 32259: ecalli 7 // 'seal_return'\n 32261: a1 = 0x201b0\n 32266: jump @1088\n      : @1127 (gas: 2)\n 32269: a1 = 0x201b0\n 32274: jump @1088\n      : @1128 (gas: 2)\n 32277: a1 = 0x201b0\n 32282: jump @1088\n      : @1129 (gas: 2)\n 32285: a1 = 0x201b0\n 32290: jump @1088\n      : @1130 (gas: 2)\n 32293: a1 = 0x201b0\n 32298: jump @1088\n      : @1131 (gas: 2)\n 32301: a1 = 0x201b0\n 32306: jump @1088\n      : @1132 (gas: 2)\n 32309: a1 = 0x201b0\n 32314: jump @1088\n      : @1133 (gas: 1)\n 32317: jump @1137 if a0 != 4076725131\n      : @1134 (gas: 9)\n 32324: a0 = s1 + 0x3858\n 32328: u64 [a0 + 1472] = 0\n 32332: u64 [a0 + 1464] = 0\n 32336: u64 [a0 + 1456] = 0\n 32340: u64 [a0 + 1448] = 0\n 32344: a0 = s1 + 0x4000\n 32348: i32 a0 = a0 + 0xfffffffffffffe00\n 32352: ecalli 10 // 'value_transferred'\n 32354: fallthrough\n      : @1135 (gas: 10)\n 32355: a3 = s1 + 0x3858\n 32359: a4 = a3 + 0x500\n 32363: a0 = u64 [a4 + 0xb8]\n 32367: a1 = u64 [a4 + 0xc0]\n 32371: a2 = u64 [a4 + 0xb0]\n 32375: a3 = u64 [a4 + 0xa8]\n 32379: a1 = a1 | a2\n 32382: a0 = a0 | a3\n 32385: a0 = a0 | a1\n 32388: jump @1155 if a0 == 0\n      : @1136 (gas: 2)\n 32392: a1 = 0x201b0\n 32397: jump @1088\n      : @1137 (gas: 2)\n 32400: a1 = 0x201b0\n 32405: jump @1088\n      : @1138 (gas: 2)\n 32408: a1 = 0x201b0\n 32413: jump @1088\n      : @1139 (gas: 2)\n 32416: a1 = 0x201b0\n 32421: jump @1088\n      : @1140 (gas: 2)\n 32424: a1 = 0x201b0\n 32429: jump @1088\n      : @1141 (gas: 2)\n 32432: a1 = 0x201b0\n 32437: jump @1088\n      : @1142 (gas: 2)\n 32440: a1 = 0x201b0\n 32445: jump @1088\n      : @1143 (gas: 2)\n 32448: a1 = 0x201b0\n 32453: jump @1088\n      : @1144 (gas: 2)\n 32456: a1 = 0x201b0\n 32461: jump @1088\n      : @1145 (gas: 2)\n 32464: a1 = 0x201b0\n 32469: jump @1088\n      : @1146 (gas: 2)\n 32472: a1 = 0x201b0\n 32477: jump @1088\n      : @1147 (gas: 2)\n 32480: a1 = 0x201b0\n 32485: jump @1088\n      : @1148 (gas: 2)\n 32488: a1 = 0x201b0\n 32493: jump @1088\n      : @1149 (gas: 2)\n 32496: a1 = 0x201b0\n 32501: jump @1088\n      : @1150 (gas: 2)\n 32504: a1 = 0x201b0\n 32509: jump @1088\n      : @1151 (gas: 2)\n 32512: a1 = 0x201b0\n 32517: jump @1088\n      : @1152 (gas: 2)\n 32520: a1 = 0x201b0\n 32525: jump @1088\n      : @1153 (gas: 3)\n 32528: a0 = a2\n 32530: u64 [s1 + 0xd8] = a1\n 32534: ra = 1234, jump @38\n      : @1154 [@dyn 617] (gas: 5)\n 32540: i32 a1 = a0 + 0\n 32542: a2 = i32 [s1 + 0xd8]\n 32546: a0 = 0\n 32548: ecalli 7 // 'seal_return'\n 32550: jump @945\n      : @1155 (gas: 4)\n 32553: a0 = u64 [s1 + 0x18]\n 32556: a0 = i32 [a0]\n 32558: a1 = 0x23\n 32561: jump @1160 if a1 <u a0\n      : @1156 (gas: 2)\n 32564: a1 = 0x201b0\n 32569: jump @1088\n      : @1157 (gas: 2)\n 32572: a1 = 0x201b0\n 32577: jump @1088\n      : @1158 (gas: 2)\n 32580: a1 = 0x201b0\n 32585: jump @1088\n      : @1159 (gas: 2)\n 32588: a1 = 0x201b0\n 32593: jump @1088\n      : @1160 (gas: 4)\n 32596: a0 = s1 + 0x34e0\n 32600: ra = 0x4d4\n 32604: t0 = 0x504\n 32608: jump @1574\n      : @1161 [@dyn 618] (gas: 15)\n 32611: a1 = s1 + 0x3058\n 32615: a0 = u64 [a1 + 0x490]\n 32619: u64 [s1 + 0xd8] = a0\n 32623: a0 = u64 [a1 + 0x488]\n 32627: u64 [s1 + 0xd0] = a0\n 32631: a0 = u32 [a1 + 0x498]\n 32635: u64 [s1 + 0xc8] = a0\n 32639: a1 = s1 + 0x3858\n 32643: u64 [a1 + 1504] = 0\n 32647: u64 [a1 + 1496] = 0\n 32651: u64 [a1 + 1488] = 0\n 32655: u64 [a1 + 1480] = 0x6\n 32660: a0 = s1 + 0x34c0\n 32664: a1 = s1 + 0x3e20\n 32668: ra = 1238, jump @27\n      : @1162 [@dyn 619] (gas: 18)\n 32674: a0 = s1 + 0x3058\n 32678: a2 = a0 + 0x400\n 32682: a1 = u64 [a2 + 0x80]\n 32686: u64 [s1 + 0xb8] = a1\n 32690: a1 = u64 [a2 + 0x70]\n 32693: u64 [s1 + 0xb0] = a1\n 32697: a1 = u64 [a2 + 0x68]\n 32700: u64 [s1 + 0xa8] = a1\n 32704: a1 = u64 [a2 + 0x78]\n 32707: u64 [s1 + 0xc0] = a1\n 32711: a0 = 0x301b0\n 32716: u64 [s1 + 0xa0] = a0\n 32720: i32 a0 = a0 + 0\n 32722: ra = 0x4d8\n 32726: ecalli 3 // 'caller'\n 32728: a2 = u64 [s1 + 0xa0]\n 32732: t0 = 0x4da\n 32736: jump @1530\n      : @1163 [@dyn 620] (gas: 2)\n 32739: a2 = u64 [s1 + 0xa0]\n 32743: t0 = 1242, jump @1530\n      : @1164 [@dyn 621] (gas: 18)\n 32749: a2 = u64 [s1 + 0xc0]\n 32753: a2 = a2 << 0x20\n 32756: a2 = a2 >> 0x20\n 32759: a1 = a1 ^ a2\n 32762: a2 = u64 [s1 + 0xa8]\n 32766: a0 = a0 ^ a2\n 32769: a0 = a0 | a1\n 32772: a1 = u64 [s1 + 0xb0]\n 32776: a1 = a1 ^ a3\n 32779: a0 = a0 | a1\n 32782: a0 = a0 <u 0x1\n 32785: a1 = s1 + 0x3058\n 32789: u64 [a1 + 1120] = 0\n 32793: u64 [a1 + 1112] = 0\n 32797: u64 [a1 + 0x448] = a0\n 32801: a0 = s1 + 0x34a0\n 32805: u64 [a1 + 1104] = 0\n 32809: ra = 1244, jump @1352\n      : @1165 [@dyn 622] (gas: 15)\n 32815: a0 = u64 [s1 + 0xd0]\n 32819: a1 = u64 [s1 + 0xc8]\n 32823: a0 = a0 | a1\n 32826: a1 = u64 [s1 + 0xd8]\n 32830: a0 = a0 | a1\n 32833: a0 = a0 >u 0\n 32835: a1 = s1 + 0x3058\n 32839: u64 [a1 + 1088] = 0\n 32843: u64 [a1 + 1080] = 0\n 32847: u64 [a1 + 0x428] = a0\n 32851: a0 = s1 + 0x3480\n 32855: u64 [a1 + 1072] = 0\n 32859: ra = 0x4de\n 32863: t0 = 0x582\n 32867: jump @1542\n      : @1166 [@dyn 623] (gas: 21)\n 32870: a0 = u64 [s1 + 0xc0]\n 32874: a0 = a0 >> 0x20\n 32877: a0 = a0 << 0x20\n 32880: a1 = u64 [s1 + 0xc8]\n 32884: a0 = a0 | a1\n 32887: a1 = s1 + 0x3858\n 32891: u64 [a1 + 1536] = 0\n 32895: u64 [a1 + 1528] = 0\n 32899: u64 [a1 + 1520] = 0\n 32903: u64 [a1 + 1512] = 0x6\n 32908: a2 = u64 [s1 + 0xb8]\n 32912: a3 = a1 + 0x600\n 32916: u64 [a3 + 0x20] = a2\n 32919: u64 [a3 + 0x18] = a0\n 32922: a0 = u64 [s1 + 0xd8]\n 32926: u64 [a3 + 0x10] = a0\n 32929: a0 = u64 [s1 + 0xd0]\n 32933: u64 [a3 + 0x8] = a0\n 32936: a0 = s1 + 0x3e40\n 32940: a1 = s1 + 0x3e60\n 32944: ra = 1248, jump @31\n      : @1167 [@dyn 624] (gas: 6)\n 32950: a1 = 0x201b0\n 32955: i32 a1 = a1 + 0\n 32957: a0 = 0\n 32959: a2 = 0\n 32961: ecalli 7 // 'seal_return'\n 32963: jump @1089\n      : @1168 (gas: 33)\n 32966: sp = sp + 0xffffffffffffffa0\n 32969: u64 [sp + 0x58] = ra\n 32972: u64 [sp + 0x50] = s0\n 32975: u64 [sp + 0x48] = s1\n 32978: s0 = sp + 0x60\n 32981: sp = sp & 0xfffffffffffffff0\n 32984: a2 = u64 [a1 + 0x10]\n 32987: a5 = u64 [a1 + 0x8]\n 32990: a4 = u64 [a1]\n 32992: a1 = u64 [a1 + 0x18]\n 32995: t0 = a2 << 0x3f\n 32998: a3 = a5 >> 0x1\n 33001: t0 = a3 | t0\n 33004: a3 = a1 << 0x3f\n 33007: a2 = a2 >> 0x1\n 33010: a3 = a3 | a2\n 33013: a5 = a5 << 0x3f\n 33016: a2 = a4 >> 0x1\n 33019: a5 = a5 | a2\n 33022: t1 = a1 >> 0x1\n 33025: a4 = a4 & 0x1\n 33028: a1 = -a4\n 33030: s1 = a4 <u 0x1\n 33033: a2 = a5 & 0x7f\n 33036: t2 = a1 & a3\n 33039: a3 = a1 & t0\n 33042: a2 = a5 if a4 != 0\n 33045: a4 = a1 & t1\n 33048: a1 = a2 <u 0x20\n 33051: a1 = 0 if a3 != 0\n 33053: a5 = t2 | a4\n 33056: a1 = 0 if a5 != 0\n 33058: jump @1171 if s1 != a1\n      : @1169 (gas: 5)\n 33061: u64 [a0] = a2\n 33063: u64 [a0 + 0x8] = a3\n 33066: u64 [a0 + 0x10] = t2\n 33069: u64 [a0 + 0x18] = a4\n 33072: t0 = 1250, jump @1572\n      : @1170 [@dyn 625] (gas: 1)\n 33078: ret\n      : @1171 (gas: 1)\n 33080: t0 = 1252, jump @1533\n      : @1172 [@dyn 626] (gas: 1)\n 33086: ra = 1254, jump @25\n      : @1173 [@dyn 627] (gas: 7)\n 33092: u64 [sp + 24] = 0\n 33095: u64 [sp + 16] = 0\n 33098: u64 [sp + 0] = 0x22\n 33101: a0 = 0x4\n 33104: a1 = sp\n 33106: u64 [sp + 8] = 0\n 33109: ra = 1256, jump @25\n      : @1174 [@dyn 628] (gas: 2)\n 33115: a1 = i32 [0x2019c]\n 33120: jump @1176 if a1 >u 63\n      : @1175 (gas: 2)\n 33124: u32 [0x2019c] = 0x40\n 33130: fallthrough\n      : @1176 (gas: 7)\n 33131: a1 = 0x201b0\n 33136: i32 a1 = a1 + 0\n 33138: a0 = 0x1\n 33141: a2 = 0x24\n 33144: ra = 0x4ea\n 33148: ecalli 7 // 'seal_return'\n 33150: fallthrough\n      : @1177 [@dyn 629] (gas: 46)\n 33151: sp = sp + 0xffffffffffffff70\n 33155: u64 [sp + 0x88] = ra\n 33159: u64 [sp + 0x80] = s0\n 33163: u64 [sp + 0x78] = s1\n 33166: s0 = sp + 0x90\n 33170: sp = sp & 0xfffffffffffffff0\n 33173: t0 = a0\n 33175: a2 = u64 [a1]\n 33177: t2 = u64 [a0 + 0x8]\n 33180: a5 = u64 [a1 + 0x8]\n 33183: t1 = u64 [a0]\n 33185: a3 = a2 + 0x1f\n 33188: ra = a3 <u a2\n 33191: a2 = a5 + ra\n 33194: a3 = a3 & 0xffffffffffffffe0\n 33197: u64 [sp + 0x8] = t1\n 33200: t1 = t1 + a3\n 33203: a4 = t1 <u a3\n 33206: a3 = a2 + t2\n 33209: a3 = a3 + a4\n 33212: s1 = a3 ^ a2\n 33215: a0 = a3 <u a2\n 33218: a0 = a4 if s1 == 0\n 33221: a4 = u64 [t0 + 0x18]\n 33224: a5 = a2 <u a5\n 33227: s1 = u64 [a1 + 0x10]\n 33230: t0 = u64 [t0 + 0x10]\n 33233: a1 = u64 [a1 + 0x18]\n 33236: a5 = ra if ra == 0\n 33239: a5 = a5 + s1\n 33242: s1 = a5 <u s1\n 33245: a2 = a5 + t0\n 33248: a0 = a0 + a2\n 33251: a5 = a2 <u a5\n 33254: a2 = a0 <u a2\n 33257: a1 = a1 + a4\n 33260: a1 = a1 + s1\n 33263: a1 = a1 + a5\n 33266: a5 = a1 + a2\n 33269: a1 = a5 >u 0\n 33271: a2 = a0 >u 0\n 33273: a2 = a1 if a5 != 0\n 33276: a1 = a0 | a5\n 33279: s1 = a3 >u 0\n 33281: s1 = a2 if a1 != 0\n 33284: jump @1181 if s1 != 0\n      : @1178 (gas: 13)\n 33287: a1 = u64 [sp + 0x8]\n 33290: a1 = t1 <u a1\n 33293: a2 = a3 ^ t2\n 33296: s1 = a3 <u t2\n 33299: s1 = a1 if a2 == 0\n 33302: a1 = a0 <u t0\n 33305: a2 = a5 ^ a4\n 33308: a4 = a5 <u a4\n 33311: a4 = a1 if a2 == 0\n 33314: a1 = a0 ^ t0\n 33317: a1 = a1 | a2\n 33320: a4 = s1 if a1 == 0\n 33323: jump @1181 if a4 != 0\n      : @1179 (gas: 7)\n 33326: u64 [sp + 0x50] = t1\n 33329: u64 [sp + 0x58] = a3\n 33332: u64 [sp + 0x60] = a0\n 33335: a0 = 0x40\n 33338: a1 = sp + 0x50\n 33341: u64 [sp + 0x68] = a5\n 33344: ra = 1260, jump @25\n      : @1180 [@dyn 630] (gas: 6)\n 33350: sp = s0 + 0xffffffffffffff70\n 33354: ra = u64 [sp + 0x88]\n 33358: s0 = u64 [sp + 0x80]\n 33362: s1 = u64 [sp + 0x78]\n 33365: sp = sp + 0x90\n 33369: ret\n      : @1181 (gas: 1)\n 33371: t0 = 1262, jump @1568\n      : @1182 [@dyn 631] (gas: 1)\n 33377: ra = 1264, jump @25\n      : @1183 [@dyn 632] (gas: 7)\n 33383: u64 [sp + 40] = 0\n 33386: u64 [sp + 32] = 0\n 33389: u64 [sp + 16] = 0x41\n 33393: a0 = 0x4\n 33396: a1 = sp + 0x10\n 33399: u64 [sp + 24] = 0\n 33402: ra = 1266, jump @25\n      : @1184 [@dyn 633] (gas: 2)\n 33408: a1 = i32 [0x2019c]\n 33413: jump @1186 if a1 >u 63\n      : @1185 (gas: 2)\n 33417: u32 [0x2019c] = 0x40\n 33423: fallthrough\n      : @1186 (gas: 7)\n 33424: a1 = 0x201b0\n 33429: i32 a1 = a1 + 0\n 33431: a0 = 0x1\n 33434: a2 = 0x24\n 33437: ra = 0x4f4\n 33441: ecalli 7 // 'seal_return'\n 33443: fallthrough\n      : @1187 [@dyn 634] (gas: 22)\n 33444: sp = sp + 0xfffffffffffffee0\n 33448: u64 [sp + 0x118] = ra\n 33452: u64 [sp + 0x110] = s0\n 33456: u64 [sp + 0x108] = s1\n 33460: s0 = sp + 0x120\n 33464: sp = sp & 0xfffffffffffffff0\n 33467: a4 = u64 [a1 + 0x10]\n 33470: a3 = u64 [a1 + 0x18]\n 33473: a5 = u64 [a1 + 0x8]\n 33476: t0 = u64 [a1]\n 33478: u64 [sp + 0x68] = a3\n 33481: u64 [sp + 0x78] = a5\n 33484: a1 = a5 | a3\n 33487: a3 = t0 | a4\n 33490: a3 = a3 | a1\n 33493: a3 = a3 >> 0x20\n 33496: u64 [sp + 0x70] = a4\n 33499: a1 = a1 | a4\n 33502: a1 = a1 << 0x20\n 33505: a1 = a1 | a3\n 33508: u64 [sp + 0x8] = a0\n 33511: jump @1202 if a1 != 0\n      : @1188 (gas: 15)\n 33515: a0 = u64 [a2 + 0x18]\n 33518: u64 [sp + 0x48] = a0\n 33521: s1 = u64 [a2 + 0x10]\n 33524: a0 = u64 [a2 + 0x8]\n 33527: u64 [sp + 0x50] = a0\n 33530: a0 = u64 [a2]\n 33532: u64 [sp + 0x58] = a0\n 33535: u64 [sp + 248] = 0\n 33539: u64 [sp + 240] = 0\n 33543: u64 [sp + 232] = 0\n 33547: a1 = sp + 0xe0\n 33551: u64 [sp + 224] = 0x20\n 33556: a0 = t0\n 33558: u64 [sp + 0x60] = t0\n 33561: ra = 1270, jump @25\n      : @1189 [@dyn 635] (gas: 12)\n 33567: a1 = u64 [sp + 0x58]\n 33570: a0 = a1 | s1\n 33573: a2 = u64 [sp + 0x48]\n 33576: a3 = u64 [sp + 0x50]\n 33579: a2 = a2 | a3\n 33582: a0 = a0 | a2\n 33585: a0 = a0 >> 0x20\n 33588: u64 [sp + 0x20] = s1\n 33591: a2 = a2 | s1\n 33594: a2 = a2 << 0x20\n 33597: a0 = a0 | a2\n 33600: jump @1202 if a0 != 0\n      : @1190 (gas: 2)\n 33604: a0 = sp + 0xc0\n 33608: ra = 1272, jump @23\n      : @1191 [@dyn 636] (gas: 13)\n 33615: a0 = u64 [sp + 0x70]\n 33618: a1 = u64 [sp + 0x68]\n 33621: a1 = a1 | a0\n 33624: a0 = 0x100000000\n 33634: u64 [sp + 0x10] = a0\n 33637: a0 = 0xffffffe0\n 33647: a2 = u64 [sp + 0x60]\n 33650: a0 = a2 <u a0\n 33653: a3 = u64 [sp + 0x78]\n 33656: a0 = 0 if a3 != 0\n 33658: u64 [sp + 0x18] = a1\n 33661: a0 = 0 if a1 != 0\n 33663: jump @1202 if a0 == 0\n      : @1192 (gas: 16)\n 33667: a3 = u64 [sp + 0xd8]\n 33671: a4 = u64 [sp + 0xd0]\n 33675: a5 = u64 [sp + 0xc8]\n 33679: a1 = u64 [sp + 0xc0]\n 33683: i32 a0 = a2 + 0x20\n 33686: u64 [sp + 0x28] = a1\n 33689: u64 [sp + 0xa0] = a1\n 33693: u64 [sp + 0x30] = a5\n 33696: u64 [sp + 0xa8] = a5\n 33700: u64 [sp + 0x38] = a4\n 33703: u64 [sp + 0xb0] = a4\n 33707: a1 = sp + 0xa0\n 33711: u64 [sp + 0x40] = a3\n 33714: u64 [sp + 0xb8] = a3\n 33718: s1 = a2\n 33720: ra = 1274, jump @25\n      : @1193 [@dyn 637] (gas: 8)\n 33727: a0 = u64 [sp + 0x10]\n 33730: a0 = a0 + 0xffffffffffffffc0\n 33733: a0 = s1 <u a0\n 33736: a1 = u64 [sp + 0x78]\n 33739: a0 = 0 if a1 != 0\n 33741: a1 = u64 [sp + 0x18]\n 33744: a0 = 0 if a1 != 0\n 33746: jump @1202 if a0 == 0\n      : @1194 (gas: 10)\n 33750: a0 = u64 [sp + 0x48]\n 33753: a1 = u64 [sp + 0x20]\n 33756: a0 = a0 | a1\n 33759: a1 = 0xffffffe0\n 33769: a3 = u64 [sp + 0x58]\n 33772: a1 = a3 <u a1\n 33775: a4 = u64 [sp + 0x50]\n 33778: a1 = 0 if a4 != 0\n 33780: a1 = 0 if a0 != 0\n 33782: jump @1202 if a1 == 0\n      : @1195 (gas: 13)\n 33786: a2 = s1\n 33788: a1 = u64 [sp + 0x28]\n 33791: a5 = u64 [sp + 0x38]\n 33794: a0 = a1 | a5\n 33797: a4 = u64 [sp + 0x40]\n 33800: s1 = u64 [sp + 0x30]\n 33803: a4 = a4 | s1\n 33806: a0 = a0 | a4\n 33809: a0 = a0 >> 0x20\n 33812: a4 = a4 | a5\n 33815: a4 = a4 << 0x20\n 33818: a0 = a0 | a4\n 33821: jump @1202 if a0 != 0\n      : @1196 (gas: 5)\n 33825: i32 a0 = a2 + 0x40\n 33828: i32 a3 = a3 + 0x20\n 33831: u64 [sp + 0x58] = a3\n 33834: s1 = a1\n 33836: ra = 1276, jump @38\n      : @1197 [@dyn 638] (gas: 4)\n 33842: u64 [sp + 0x50] = a0\n 33845: a0 = u64 [sp + 0x58]\n 33848: a1 = s1\n 33850: ra = 1278, jump @38\n      : @1198 [@dyn 639] (gas: 4)\n 33856: a1 = a0\n 33858: a0 = u64 [sp + 0x50]\n 33861: a2 = s1\n 33863: ra = 1280, jump @6\n      : @1199 [@dyn 640] (gas: 27)\n 33870: a0 = u64 [sp + 0x60]\n 33873: a0 = a0 + s1\n 33876: a1 = a0 <u s1\n 33879: a2 = u64 [sp + 0x78]\n 33882: a4 = u64 [sp + 0x30]\n 33885: a2 = a2 + a4\n 33888: a2 = a2 + a1\n 33891: a3 = a2 ^ a4\n 33894: a4 = a2 <u a4\n 33897: a4 = a1 if a3 == 0\n 33900: a1 = u64 [sp + 0x70]\n 33903: a3 = u64 [sp + 0x38]\n 33906: a1 = a1 + a3\n 33909: a3 = a1 <u a3\n 33912: a5 = u64 [sp + 0x68]\n 33915: s1 = u64 [sp + 0x40]\n 33918: a5 = a5 + s1\n 33921: a3 = a3 + a5\n 33924: a4 = a4 + a1\n 33927: a1 = a4 <u a1\n 33930: a1 = a1 + a3\n 33933: a1 = a1 | a4\n 33936: a3 = 0xffffffc0\n 33946: a3 = a0 <u a3\n 33949: a3 = 0 if a2 != 0\n 33951: a3 = 0 if a1 != 0\n 33953: jump @1202 if a3 == 0\n      : @1200 (gas: 7)\n 33957: i32 a0 = a0 + 0x40\n 33960: u64 [sp + 152] = 0\n 33964: u64 [sp + 144] = 0\n 33968: u64 [sp + 136] = 0\n 33972: a1 = sp + 0x80\n 33976: u64 [sp + 128] = 0\n 33980: ra = 1282, jump @25\n      : @1201 [@dyn 641] (gas: 35)\n 33987: s1 = u64 [sp + 0x28]\n 33990: s1 = s1 + 0x1f\n 33993: a0 = 0x1ffffffe0\n 34003: a0 = a0 & s1\n 34006: a1 = u64 [sp + 0x60]\n 34009: a0 = a0 + a1\n 34012: a1 = a0 <u a1\n 34015: a3 = u64 [sp + 0x78]\n 34018: a2 = a3 + a1\n 34021: a3 = a2 <u a3\n 34024: a3 = a1 if a1 == 0\n 34027: a1 = u64 [sp + 0x70]\n 34030: a3 = a3 + a1\n 34033: a1 = a3 <u a1\n 34036: a4 = u64 [sp + 0x68]\n 34039: a1 = a1 + a4\n 34042: a4 = a0 + 0x40\n 34045: a0 = a4 <u a0\n 34048: a5 = a2 + a0\n 34051: a2 = a5 <u a2\n 34054: a2 = a0 if a0 == 0\n 34057: a2 = a2 + a3\n 34060: a0 = a2 <u a3\n 34063: a0 = a0 + a1\n 34066: a1 = u64 [sp + 0x8]\n 34069: u64 [a1] = a4\n 34071: u64 [a1 + 0x8] = a5\n 34074: u64 [a1 + 0x10] = a2\n 34077: u64 [a1 + 0x18] = a0\n 34080: sp = s0 + 0xfffffffffffffee0\n 34084: ra = u64 [sp + 0x118]\n 34088: s0 = u64 [sp + 0x110]\n 34092: s1 = u64 [sp + 0x108]\n 34096: sp = sp + 0x120\n 34100: ret\n      : @1202 (gas: 1)\n 34102: trap\n      : @1203 [@dyn 642] (gas: 5)\n 34103: a1 = 0x4\n 34106: ra = 0x506\n 34110: ecalli 1 // 'call_data_load'\n 34112: t0 = 0x508\n 34116: jump @1555\n      : @1204 [@dyn 643] (gas: 1)\n 34119: t0 = 1288, jump @1555\n      : @1205 [@dyn 644] (gas: 1)\n 34125: jump @1208 if a3 == 0\n      : @1206 (gas: 1)\n 34128: t0 = 1290, jump @1565\n      : @1207 [@dyn 645] (gas: 1)\n 34134: ret\n      : @1208 (gas: 8)\n 34136: a1 = 0x201b0\n 34141: i32 a1 = a1 + 0\n 34143: a0 = 0x1\n 34146: a2 = 0\n 34148: ra = 0x50c\n 34152: ecalli 7 // 'seal_return'\n 34154: t0 = 0x50e\n 34158: jump @1574\n      : @1209 [@dyn 646] (gas: 1)\n 34161: t0 = 1294, jump @1574\n      : @1210 [@dyn 647] (gas: 5)\n 34167: a1 = 0x24\n 34170: ra = 0x510\n 34174: ecalli 1 // 'call_data_load'\n 34176: t0 = 0x512\n 34180: jump @1555\n      : @1211 [@dyn 648] (gas: 1)\n 34183: t0 = 1298, jump @1555\n      : @1212 [@dyn 649] (gas: 1)\n 34189: jump @1215 if a3 == 0\n      : @1213 (gas: 1)\n 34192: t0 = 1300, jump @1565\n      : @1214 [@dyn 650] (gas: 1)\n 34198: ret\n      : @1215 (gas: 7)\n 34200: a1 = 0x201b0\n 34205: i32 a1 = a1 + 0\n 34207: a0 = 0x1\n 34210: a2 = 0\n 34212: ra = 0x516\n 34216: ecalli 7 // 'seal_return'\n 34218: fallthrough\n      : @1216 [@dyn 651] (gas: 10)\n 34219: a4 = u64 [a1 + 0x18]\n 34222: a3 = u64 [a1 + 0x10]\n 34225: t1 = u64 [a1 + 0x8]\n 34228: t0 = a4 >u 0\n 34230: a5 = a3 >u 0\n 34232: a5 = t0 if a4 != 0\n 34235: t0 = a3 | a4\n 34238: a2 = t1 >u 0\n 34240: a2 = a5 if t0 != 0\n 34243: jump @1218 if a2 != 0\n      : @1217 (gas: 24)\n 34246: a1 = u64 [a1]\n 34248: a2 = a3 >> 0x3b\n 34251: a4 = a4 << 0x5\n 34254: t0 = a4 | a2\n 34257: a4 = t1 >> 0x3b\n 34260: a3 = a3 << 0x5\n 34263: a3 = a3 | a4\n 34266: a4 = a1 >> 0x3b\n 34269: t1 = t1 << 0x5\n 34272: a4 = t1 | a4\n 34275: a1 = a1 << 0x5\n 34278: a5 = a1 + 0x20\n 34281: a1 = a5 <u a1\n 34284: a2 = a4 + a1\n 34287: a4 = a2 <u a4\n 34290: a4 = a1 if a1 == 0\n 34293: a4 = a4 + a3\n 34296: a1 = a4 <u a3\n 34299: a1 = a1 + t0\n 34302: u64 [a0] = a5\n 34304: u64 [a0 + 0x8] = a2\n 34307: u64 [a0 + 0x10] = a4\n 34310: u64 [a0 + 0x18] = a1\n 34313: ret\n      : @1218 (gas: 6)\n 34315: sp = sp + 0xffffffffffffffb0\n 34318: u64 [sp + 0x48] = ra\n 34321: u64 [sp + 0x40] = s0\n 34324: s0 = sp + 0x50\n 34327: sp = sp & 0xfffffffffffffff0\n 34330: t0 = 1304, jump @1533\n      : @1219 [@dyn 652] (gas: 1)\n 34336: ra = 1306, jump @25\n      : @1220 [@dyn 653] (gas: 7)\n 34343: u64 [sp + 24] = 0\n 34346: u64 [sp + 16] = 0\n 34349: u64 [sp + 0] = 0x41\n 34352: a0 = 0x4\n 34355: a1 = sp\n 34357: u64 [sp + 8] = 0\n 34360: ra = 1308, jump @25\n      : @1221 [@dyn 654] (gas: 2)\n 34367: a1 = i32 [0x2019c]\n 34372: jump @1223 if a1 >u 63\n      : @1222 (gas: 2)\n 34376: u32 [0x2019c] = 0x40\n 34382: fallthrough\n      : @1223 (gas: 7)\n 34383: a1 = 0x201b0\n 34388: i32 a1 = a1 + 0\n 34390: a0 = 0x1\n 34393: a2 = 0x24\n 34396: ra = 0x51e\n 34400: ecalli 7 // 'seal_return'\n 34402: fallthrough\n      : @1224 [@dyn 655] (gas: 9)\n 34403: sp = sp + 0xffffffffffffff40\n 34407: u64 [sp + 0xb8] = ra\n 34411: u64 [sp + 0xb0] = s0\n 34415: u64 [sp + 0xa8] = s1\n 34419: s0 = sp + 0xc0\n 34423: sp = sp & 0xfffffffffffffff0\n 34426: a1 = u8 [a1]\n 34428: a2 = 0x4d\n 34431: jump @1227 if a2 <u a1\n      : @1225 (gas: 13)\n 34434: s1 = a0\n 34436: u64 [sp + 88] = 0\n 34439: u64 [sp + 80] = 0\n 34442: u64 [sp + 72] = 0\n 34445: u64 [sp + 0x40] = a1\n 34448: u64 [sp + 120] = 0\n 34451: u64 [sp + 112] = 0\n 34454: u64 [sp + 96] = 0xa\n 34458: a0 = sp + 0x80\n 34462: a1 = sp + 0x60\n 34465: a2 = sp + 0x40\n 34468: u64 [sp + 104] = 0\n 34471: ra = 1312, jump @0\n      : @1226 [@dyn 656] (gas: 14)\n 34478: a0 = u64 [sp + 0x90]\n 34482: a1 = u64 [sp + 0x98]\n 34486: a2 = u64 [sp + 0x80]\n 34490: a3 = u64 [sp + 0x88]\n 34494: u64 [s1 + 0x10] = a0\n 34497: u64 [s1 + 0x18] = a1\n 34500: u64 [s1] = a2\n 34502: u64 [s1 + 0x8] = a3\n 34505: sp = s0 + 0xffffffffffffff40\n 34509: ra = u64 [sp + 0xb8]\n 34513: s0 = u64 [sp + 0xb0]\n 34517: s1 = u64 [sp + 0xa8]\n 34521: sp = sp + 0xc0\n 34525: ret\n      : @1227 (gas: 1)\n 34527: t0 = 1314, jump @1533\n      : @1228 [@dyn 657] (gas: 1)\n 34533: ra = 1316, jump @25\n      : @1229 [@dyn 658] (gas: 7)\n 34540: u64 [sp + 24] = 0\n 34543: u64 [sp + 16] = 0\n 34546: u64 [sp + 0] = 0x11\n 34549: a0 = 0x4\n 34552: a1 = sp\n 34554: u64 [sp + 8] = 0\n 34557: ra = 1318, jump @25\n      : @1230 [@dyn 659] (gas: 2)\n 34564: a1 = i32 [0x2019c]\n 34569: jump @1232 if a1 >u 63\n      : @1231 (gas: 2)\n 34573: u32 [0x2019c] = 0x40\n 34579: fallthrough\n      : @1232 (gas: 7)\n 34580: a1 = 0x201b0\n 34585: i32 a1 = a1 + 0\n 34587: a0 = 0x1\n 34590: a2 = 0x24\n 34593: ra = 0x528\n 34597: ecalli 7 // 'seal_return'\n 34599: fallthrough\n      : @1233 [@dyn 660] (gas: 16)\n 34600: sp = sp + 0xfffffffffffffef0\n 34604: u64 [sp + 0x108] = ra\n 34608: u64 [sp + 0x100] = s0\n 34612: u64 [sp + 0xf8] = s1\n 34616: s0 = sp + 0x110\n 34620: sp = sp & 0xfffffffffffffff0\n 34623: t1 = u64 [a2 + 0x10]\n 34626: a5 = u64 [a2 + 0x18]\n 34629: s1 = u64 [a2 + 0x8]\n 34632: a2 = u64 [a2]\n 34634: a4 = s1 | a5\n 34637: a3 = a2 | t1\n 34640: a3 = a3 | a4\n 34643: u64 [sp] = a0\n 34645: u64 [sp + 0xa8] = a3\n 34649: jump @1253 if a3 == 0\n      : @1234 (gas: 73)\n 34653: a0 = u64 [a1 + 0x18]\n 34656: ra = u64 [a1 + 0x10]\n 34659: t0 = u64 [a1 + 0x8]\n 34662: t2 = u64 [a1]\n 34664: u64 [sp + 0x60] = t2\n 34667: a1 = clz t1\n 34669: a1 = a1 + 0x40\n 34672: a4 = clz a5\n 34674: a4 = a1 if a5 == 0\n 34677: u64 [sp + 0x30] = a2\n 34680: a1 = clz a2\n 34682: a2 = a1 + 0x40\n 34685: a1 = clz s1\n 34687: u64 [sp + 0x38] = s1\n 34690: a1 = a2 if s1 == 0\n 34693: a2 = a1 + 0x80\n 34697: u64 [sp + 0x40] = a5\n 34700: u64 [sp + 0x48] = t1\n 34703: a3 = t1 | a5\n 34706: a4 = a2 if a3 == 0\n 34709: a2 = a2 <u a1\n 34712: a2 = 0 if a3 != 0\n 34714: a1 = clz ra\n 34716: a1 = a1 + 0x40\n 34719: a5 = clz a0\n 34721: a5 = a1 if a0 == 0\n 34724: a1 = clz t2\n 34726: a1 = a1 + 0x40\n 34729: a3 = clz t0\n 34731: a3 = a1 if t0 == 0\n 34734: a1 = a3 + 0x80\n 34738: s1 = ra | a0\n 34741: a5 = a1 if s1 == 0\n 34744: a1 = a1 <u a3\n 34747: a1 = 0 if s1 != 0\n 34749: t1 = a2 ^ a1\n 34752: s1 = a2 <u a1\n 34755: a3 = a4 <u a5\n 34758: s1 = a3 if t1 == 0\n 34761: a2 = a2 - a1\n 34764: t2 = s1 <u 0x1\n 34767: t2 = t2 + 0xffffffffffffffff\n 34770: a3 = a2 - a3\n 34773: t1 = -s1\n 34775: a1 = a4 - a5\n 34778: a2 = t1 >u 0\n 34780: a4 = t2 >u 0\n 34782: a4 = a2 if t2 == 0\n 34785: u64 [sp + 0xa0] = a1\n 34789: a2 = a1 <u 0x100\n 34793: a2 = a2 ^ 0x1\n 34796: a5 = a3 >u 0\n 34798: a2 = a5 if a3 != 0\n 34801: a2 = a4 if s1 != 0\n 34804: s1 = u64 [sp + 0x60]\n 34807: a4 = s1 | ra\n 34810: a5 = t0 | a0\n 34813: a4 = a4 | a5\n 34816: a1 = u64 [sp + 0xa8]\n 34820: a5 = a1 <u 0x1\n 34823: a4 = a4 <u 0x1\n 34826: a4 = a4 | a5\n 34829: a2 = a2 | a4\n 34832: u64 [sp + 0x68] = a0\n 34835: a1 = a0\n 34837: a1 = 0 if a2 != 0\n 34839: a4 = ra\n 34841: a4 = 0 if a2 != 0\n 34843: u64 [sp + 0x58] = t0\n 34846: a5 = t0\n 34848: a5 = 0 if a2 != 0\n 34850: s1 = 0 if a2 != 0\n 34852: jump @1251 if a2 != 0\n      : @1235 (gas: 7)\n 34856: a0 = u64 [sp + 0xa0]\n 34860: a2 = a0 ^ 0xff\n 34864: t0 = a2 | t1\n 34867: a2 = a3 | t2\n 34870: a2 = t0 | a2\n 34873: a0 = u64 [sp]\n 34875: jump @1252 if a2 == 0\n      : @1236 (gas: 15)\n 34879: a2 = u64 [sp + 0xa0]\n 34883: a1 = a2 + 0x1\n 34886: u64 [sp + 0xa8] = a1\n 34890: u64 [sp + 0x50] = ra\n 34893: a0 = a1 <u 0x1\n 34896: a0 = a0 + a3\n 34899: u64 [sp + 0x80] = a0\n 34903: a0 = a0 | a1\n 34906: a0 = a0 <u 0x1\n 34909: a0 = a0 + t1\n 34912: u64 [sp + 0x70] = a0\n 34915: a0 = a0 <u t1\n 34918: a0 = a0 + t2\n 34921: u64 [sp + 0x78] = a0\n 34924: t0 = 1322, jump @1549\n      : @1237 [@dyn 661] (gas: 4)\n 34930: u64 [sp + 0x28] = s1\n 34933: a0 = u64 [sp + 0x60]\n 34936: a1 = u64 [sp + 0x58]\n 34939: ra = 1324, jump @1580\n      : @1238 [@dyn 662] (gas: 6)\n 34945: u64 [sp + 0x98] = a0\n 34949: u64 [sp + 0x90] = a1\n 34953: a0 = u64 [sp + 0x50]\n 34956: a1 = u64 [sp + 0x68]\n 34959: a2 = s1\n 34961: ra = 1326, jump @1585\n      : @1239 [@dyn 663] (gas: 10)\n 34967: u64 [sp + 0x88] = a0\n 34971: a0 = u64 [sp + 0x90]\n 34975: a0 = a0 | a1\n 34978: u64 [sp + 0x90] = a0\n 34982: a1 = u64 [sp + 0xa0]\n 34986: a2 = 0x7f - a1\n 34989: a0 = u64 [sp + 0x60]\n 34992: s1 = u64 [sp + 0x58]\n 34995: a1 = s1\n 34997: ra = 1328, jump @1585\n      : @1240 [@dyn 664] (gas: 18)\n 35003: a2 = u64 [sp + 0x28]\n 35006: a3 = a2 <u 0x80\n 35010: u64 [sp + 0xa0] = a3\n 35014: a4 = u64 [sp + 0x90]\n 35018: a1 = a4 if a3 != 0\n 35021: a4 = u64 [sp + 0x68]\n 35024: a1 = a4 if a2 == 0\n 35027: u64 [sp + 0x90] = a1\n 35031: a1 = u64 [sp + 0x98]\n 35035: a4 = u64 [sp + 0x88]\n 35039: a1 = a1 | a4\n 35042: a1 = a0 if a3 == 0\n 35045: a0 = u64 [sp + 0x50]\n 35048: a1 = a0 if a2 == 0\n 35051: u64 [sp + 0x98] = a1\n 35055: a0 = u64 [sp + 0x60]\n 35058: a1 = s1\n 35060: ra = 1330, jump @1585\n      : @1241 [@dyn 665] (gas: 13)\n 35066: a5 = u64 [sp + 0x70]\n 35069: a2 = u64 [sp + 0x78]\n 35072: a3 = u64 [sp + 0x80]\n 35076: a3 = a3 | a2\n 35079: a2 = u64 [sp + 0xa8]\n 35083: a2 = a2 | a5\n 35086: a2 = a2 | a3\n 35089: a3 = u64 [sp + 0xa0]\n 35093: a1 = 0 if a3 == 0\n 35095: u64 [sp + 0x88] = a1\n 35099: a0 = 0 if a3 == 0\n 35101: u64 [sp + 0xa0] = a0\n 35105: jump @1249 if a2 == 0\n      : @1242 (gas: 5)\n 35109: s1 = u64 [sp + 0xa8]\n 35113: a2 = s1 + 0xffffffffffffff80\n 35116: a0 = u64 [sp + 0x50]\n 35119: a1 = u64 [sp + 0x68]\n 35122: ra = 1332, jump @1580\n      : @1243 [@dyn 666] (gas: 6)\n 35128: u64 [sp + 0x28] = a0\n 35131: u64 [sp + 0x18] = a1\n 35134: a0 = u64 [sp + 0x60]\n 35137: a1 = u64 [sp + 0x58]\n 35140: a2 = s1\n 35142: ra = 1334, jump @1580\n      : @1244 [@dyn 667] (gas: 6)\n 35148: u64 [sp + 0x10] = a0\n 35151: u64 [sp + 0x20] = a1\n 35154: a2 = 0x80 - s1\n 35158: a0 = u64 [sp + 0x50]\n 35161: a1 = u64 [sp + 0x68]\n 35164: ra = 1336, jump @1585\n      : @1245 [@dyn 668] (gas: 20)\n 35170: a2 = u64 [sp + 0x20]\n 35173: a1 = a1 | a2\n 35176: a2 = s1 <u 0x80\n 35180: u64 [sp + 0x20] = a2\n 35183: a3 = u64 [sp + 0x18]\n 35186: a1 = a3 if a2 == 0\n 35189: a3 = u64 [sp + 0x58]\n 35192: a3 = a1 if s1 != 0\n 35195: u64 [sp + 0x58] = a3\n 35198: a1 = u64 [sp + 0x10]\n 35201: a0 = a0 | a1\n 35204: a1 = u64 [sp + 0x28]\n 35207: a0 = a1 if a2 == 0\n 35210: a1 = u64 [sp + 0x60]\n 35213: a1 = a0 if s1 != 0\n 35216: u64 [sp + 0x60] = a1\n 35219: a0 = u64 [sp + 0x50]\n 35222: a1 = u64 [sp + 0x68]\n 35225: a2 = s1\n 35227: ra = 1338, jump @1580\n      : @1246 [@dyn 669] (gas: 24)\n 35233: t0 = u64 [sp + 0x58]\n 35236: t2 = 0\n 35238: a2 = u64 [sp + 0x20]\n 35241: a1 = 0 if a2 == 0\n 35243: a0 = 0 if a2 == 0\n 35245: u64 [sp + 0x68] = a0\n 35248: a3 = u64 [sp + 0x30]\n 35251: a0 = a3 <u 0x1\n 35254: a2 = u64 [sp + 0x38]\n 35257: a0 = a2 - a0\n 35260: u64 [sp + 0x20] = a0\n 35263: a0 = a3 | a2\n 35266: a0 = a0 <u 0x1\n 35269: a2 = u64 [sp + 0x48]\n 35272: a4 = a2 - a0\n 35275: u64 [sp + 0x18] = a4\n 35278: a0 = a2 <u a0\n 35281: a2 = u64 [sp + 0x40]\n 35284: a2 = a2 - a0\n 35287: u64 [sp + 0x10] = a2\n 35290: a3 = a3 + 0xffffffffffffffff\n 35293: u64 [sp + 0x8] = a3\n 35296: ra = u64 [sp + 0x60]\n 35299: fallthrough\n      : @1247 (gas: 103)\n 35300: u64 [sp + 40] = 0\n 35303: a4 = ra >> 0x3f\n 35306: a3 = t0 << 0x1\n 35309: s1 = t0\n 35311: t0 = a3 | a4\n 35314: a4 = ra << 0x1\n 35317: ra = u64 [sp + 0x90]\n 35321: a2 = ra >> 0x3f\n 35324: a2 = a2 | a4\n 35327: u64 [sp + 0x60] = a2\n 35330: a0 = u64 [sp + 0x20]\n 35333: t1 = a0 ^ t0\n 35336: a4 = a0 <u t0\n 35339: a0 = u64 [sp + 0x8]\n 35342: a5 = t2\n 35344: t2 = a0 <u a2\n 35347: t2 = a4 if t1 != 0\n 35350: a1 = a1 << 0x1\n 35353: a0 = u64 [sp + 0x68]\n 35356: a2 = a0 >> 0x3f\n 35359: a1 = a1 | a2\n 35362: u64 [sp + 0x58] = a1\n 35365: a2 = s1 >> 0x3f\n 35368: a0 = a0 << 0x1\n 35371: t1 = a0 | a2\n 35374: a0 = ra << 0x1\n 35377: a1 = u64 [sp + 0x98]\n 35381: a2 = a1 >> 0x3f\n 35384: a0 = a0 | a2\n 35387: a2 = a1 << 0x1\n 35390: a1 = u64 [sp + 0x88]\n 35394: a4 = a1 >> 0x3f\n 35397: a2 = a2 | a4\n 35400: a4 = a1 << 0x1\n 35403: s1 = u64 [sp + 0xa0]\n 35407: ra = s1 >> 0x3f\n 35410: a4 = a4 | ra\n 35413: s1 = s1 << 0x1\n 35416: a5 = a5 | s1\n 35419: u64 [sp + 0xa0] = a5\n 35423: a4 = a4 | 0\n 35425: u64 [sp + 0x88] = a4\n 35429: a1 = a2 | 0\n 35431: u64 [sp + 0x98] = a1\n 35435: a0 = a0 | 0\n 35437: u64 [sp + 0x90] = a0\n 35441: a2 = u64 [sp + 0x18]\n 35444: a0 = a2 - t1\n 35447: a0 = a0 <u t2\n 35450: a2 = a2 <u t1\n 35453: a4 = u64 [sp + 0x10]\n 35456: a3 = u64 [sp + 0x58]\n 35459: a4 = a4 - a3\n 35462: a4 = a4 - a2\n 35465: a4 = a4 - a0\n 35468: a4 = a4 >>a 0x3f\n 35471: a0 = u64 [sp + 0x30]\n 35474: a1 = a4 & a0\n 35477: u64 [sp + 0x50] = a1\n 35480: a5 = u64 [sp + 0x38]\n 35483: a5 = a5 & a4\n 35486: a0 = t0 ^ a5\n 35489: s1 = t0 <u a5\n 35492: t2 = u64 [sp + 0x60]\n 35495: ra = t2 <u a1\n 35498: s1 = ra if a0 == 0\n 35501: a2 = u64 [sp + 0x48]\n 35504: a2 = a2 & a4\n 35507: a1 = t1 - a2\n 35510: a0 = a1 - s1\n 35513: u64 [sp + 0x68] = a0\n 35516: a0 = a1 <u s1\n 35519: a2 = t1 <u a2\n 35522: s1 = u64 [sp + 0x40]\n 35525: s1 = s1 & a4\n 35528: a1 = a3 - s1\n 35531: a1 = a1 - a2\n 35534: a1 = a1 - a0\n 35537: a3 = t0 - a5\n 35540: t0 = a3 - ra\n 35543: a0 = u64 [sp + 0x50]\n 35546: ra = t2 - a0\n 35549: a5 = u64 [sp + 0xa8]\n 35553: s1 = u64 [sp + 0x80]\n 35557: a0 = a5 | s1\n 35560: a0 = a0 <u 0x1\n 35563: a3 = u64 [sp + 0x70]\n 35566: a2 = a3 <u a0\n 35569: a0 = a3 - a0\n 35572: a3 = a5 <u 0x1\n 35575: s1 = s1 - a3\n 35578: a3 = u64 [sp + 0x78]\n 35581: a3 = a3 - a2\n 35584: a5 = a5 + 0xffffffffffffffff\n 35587: u64 [sp + 0x80] = s1\n 35591: u64 [sp + 0x78] = a3\n 35594: a2 = s1 | a3\n 35597: u64 [sp + 0xa8] = a5\n 35601: a3 = a5 | a0\n 35604: a2 = a2 | a3\n 35607: t2 = a4 & 0x1\n 35610: u64 [sp + 0x70] = a0\n 35613: jump @1247 if a2 != 0\n      : @1248 (gas: 1)\n 35617: jump @1250\n      : @1249 (gas: 3)\n 35619: t2 = 0\n 35621: u64 [sp + 40] = 0\n 35624: fallthrough\n      : @1250 (gas: 21)\n 35625: a3 = u64 [sp + 0x98]\n 35629: a0 = a3 >> 0x3f\n 35632: a1 = u64 [sp + 0x90]\n 35636: a1 = a1 << 0x1\n 35639: a0 = a0 | a1\n 35642: a5 = u64 [sp + 0x88]\n 35646: a1 = a5 >> 0x3f\n 35649: a3 = a3 << 0x1\n 35652: a1 = a1 | a3\n 35655: a2 = u64 [sp + 0xa0]\n 35659: a3 = a2 >> 0x3f\n 35662: a5 = a5 << 0x1\n 35665: s1 = a2 << 0x1\n 35668: s1 = t2 | s1\n 35671: a2 = u64 [sp + 0x28]\n 35674: a3 = a3 | a2\n 35677: a5 = a5 | a3\n 35680: a4 = a2 | a1\n 35683: a1 = a2 | a0\n 35686: a0 = u64 [sp]\n 35688: jump @1252\n      : @1251 (gas: 2)\n 35690: a0 = u64 [sp]\n 35692: fallthrough\n      : @1252 (gas: 10)\n 35693: u64 [a0] = s1\n 35695: u64 [a0 + 0x8] = a5\n 35698: u64 [a0 + 0x10] = a4\n 35701: u64 [a0 + 0x18] = a1\n 35704: sp = s0 + 0xfffffffffffffef0\n 35708: ra = u64 [sp + 0x108]\n 35712: s0 = u64 [sp + 0x100]\n 35716: s1 = u64 [sp + 0xf8]\n 35720: sp = sp + 0x110\n 35724: ret\n      : @1253 (gas: 6)\n 35726: u64 [sp + 224] = 0\n 35730: u64 [sp + 216] = 0\n 35734: u64 [sp + 208] = 0\n 35738: t0 = 0x53c\n 35742: a0 = 0x4e487b7100000000\n 35752: fallthrough\n      : @1254 [@dyn 670] (gas: 4)\n 35753: a1 = sp + 0xd0\n 35757: u64 [sp + 0xe8] = a0\n 35761: a0 = 0\n 35763: ra = 1342, jump @25\n      : @1255 [@dyn 671] (gas: 7)\n 35770: u64 [sp + 200] = 0\n 35774: u64 [sp + 192] = 0\n 35778: u64 [sp + 176] = 0x12\n 35783: a0 = 0x4\n 35786: a1 = sp + 0xb0\n 35790: u64 [sp + 184] = 0\n 35794: ra = 1344, jump @25\n      : @1256 [@dyn 672] (gas: 2)\n 35801: a1 = i32 [0x2019c]\n 35806: jump @1258 if a1 >u 63\n      : @1257 (gas: 2)\n 35810: u32 [0x2019c] = 0x40\n 35816: fallthrough\n      : @1258 (gas: 7)\n 35817: a1 = 0x201b0\n 35822: i32 a1 = a1 + 0\n 35824: a0 = 0x1\n 35827: a2 = 0x24\n 35830: ra = 0x542\n 35834: ecalli 7 // 'seal_return'\n 35836: fallthrough\n      : @1259 [@dyn 673] (gas: 16)\n 35837: sp = sp + 0xfffffffffffffed0\n 35841: u64 [sp + 0x128] = ra\n 35845: u64 [sp + 0x120] = s0\n 35849: u64 [sp + 0x118] = s1\n 35853: s0 = sp + 0x130\n 35857: sp = sp & 0xfffffffffffffff0\n 35860: a5 = u64 [a2 + 0x10]\n 35863: s1 = u64 [a2 + 0x18]\n 35866: t0 = u64 [a2 + 0x8]\n 35869: a4 = u64 [a2]\n 35871: a2 = t0 | s1\n 35874: a3 = a4 | a5\n 35877: a2 = a2 | a3\n 35880: u64 [sp] = a0\n 35882: u64 [sp + 0xc8] = a2\n 35886: jump @1278 if a2 == 0\n      : @1260 (gas: 78)\n 35890: t2 = u64 [a1 + 0x18]\n 35893: t1 = u64 [a1 + 0x10]\n 35896: ra = u64 [a1 + 0x8]\n 35899: a2 = u64 [a1]\n 35901: a0 = clz a5\n 35903: a1 = a0 + 0x40\n 35906: a0 = clz s1\n 35908: a0 = a1 if s1 == 0\n 35911: u64 [sp + 0x68] = a4\n 35914: a1 = clz a4\n 35916: a1 = a1 + 0x40\n 35919: a3 = clz t0\n 35921: u64 [sp + 0x50] = t0\n 35924: a3 = a1 if t0 == 0\n 35927: a1 = a3 + 0x80\n 35931: u64 [sp + 0x60] = a5\n 35934: u64 [sp + 0x58] = s1\n 35937: a4 = a5 | s1\n 35940: a0 = a1 if a4 == 0\n 35943: a1 = a1 <u a3\n 35946: a1 = 0 if a4 != 0\n 35948: a3 = clz t1\n 35950: a4 = a3 + 0x40\n 35953: a3 = clz t2\n 35955: a3 = a4 if t2 == 0\n 35958: a4 = clz a2\n 35960: t0 = a2\n 35962: a4 = a4 + 0x40\n 35965: a5 = clz ra\n 35967: a5 = a4 if ra == 0\n 35970: a4 = a5 + 0x80\n 35974: s1 = t1 | t2\n 35977: a3 = a4 if s1 == 0\n 35980: a4 = a4 <u a5\n 35983: a4 = 0 if s1 != 0\n 35985: a5 = a1 ^ a4\n 35988: s1 = a1 <u a4\n 35991: a2 = a0 <u a3\n 35994: s1 = a2 if a5 == 0\n 35997: a1 = a1 - a4\n 36000: a4 = s1 <u 0x1\n 36003: a4 = a4 + 0xffffffffffffffff\n 36006: a5 = a1 - a2\n 36009: a1 = -s1\n 36011: a2 = a0 - a3\n 36014: u64 [sp + 0xb0] = a1\n 36018: a0 = a1 >u 0\n 36020: a1 = a4 >u 0\n 36022: u64 [sp + 0xb8] = a4\n 36026: a1 = a0 if a4 == 0\n 36029: u64 [sp + 0xc0] = a2\n 36033: a0 = a2 <u 0x100\n 36037: a0 = a0 ^ 0x1\n 36040: a2 = a5 >u 0\n 36042: a0 = a2 if a5 != 0\n 36045: a0 = a1 if s1 != 0\n 36048: a4 = t0\n 36050: a1 = t0 | t1\n 36053: a2 = ra | t2\n 36056: a1 = a1 | a2\n 36059: a2 = u64 [sp + 0xc8]\n 36063: a2 = a2 <u 0x1\n 36066: a1 = a1 <u 0x1\n 36069: a1 = a1 | a2\n 36072: a0 = a0 | a1\n 36075: u64 [sp + 0x8] = t2\n 36078: a2 = t2\n 36080: a2 = 0 if a0 != 0\n 36082: u64 [sp + 0x10] = t1\n 36085: t0 = t1\n 36087: t0 = 0 if a0 != 0\n 36089: u64 [sp + 0x18] = ra\n 36092: a3 = ra\n 36094: a3 = 0 if a0 != 0\n 36096: ra = a4\n 36098: u64 [sp + 0x20] = a4\n 36101: ra = 0 if a0 != 0\n 36103: jump @1277 if a0 != 0\n      : @1261 (gas: 8)\n 36107: a0 = u64 [sp + 0xc0]\n 36111: a0 = a0 ^ 0xff\n 36115: s1 = u64 [sp + 0xb0]\n 36119: a0 = a0 | s1\n 36122: t1 = u64 [sp + 0xb8]\n 36126: a4 = a5 | t1\n 36129: a0 = a0 | a4\n 36132: jump @1277 if a0 == 0\n      : @1262 (gas: 19)\n 36136: a2 = u64 [sp + 0xc0]\n 36140: a1 = a2 + 0x1\n 36143: u64 [sp + 0xc8] = a1\n 36147: a0 = a1 <u 0x1\n 36150: a0 = a0 + a5\n 36153: u64 [sp + 0xa0] = a0\n 36157: a0 = a0 | a1\n 36160: a0 = a0 <u 0x1\n 36163: a0 = a0 + s1\n 36166: u64 [sp + 0x98] = a0\n 36170: a0 = a0 <u s1\n 36173: a0 = a0 + t1\n 36176: u64 [sp + 0xa8] = a0\n 36180: a1 = 0xff - a2\n 36184: u64 [sp + 0x90] = a1\n 36188: a2 = 0x80 - a1\n 36192: a0 = u64 [sp + 0x20]\n 36195: a1 = u64 [sp + 0x18]\n 36198: ra = 1348, jump @1580\n      : @1263 [@dyn 674] (gas: 7)\n 36204: u64 [sp + 0xb8] = a0\n 36208: u64 [sp + 0xb0] = a1\n 36212: a0 = u64 [sp + 0x10]\n 36215: s1 = u64 [sp + 0x8]\n 36218: a1 = s1\n 36220: a2 = u64 [sp + 0x90]\n 36224: ra = 1350, jump @1585\n      : @1264 [@dyn 675] (gas: 9)\n 36230: u64 [sp + 0x88] = a0\n 36234: a0 = u64 [sp + 0xb0]\n 36238: a0 = a0 | a1\n 36241: u64 [sp + 0xb0] = a0\n 36245: a1 = u64 [sp + 0xc0]\n 36249: a2 = 0x7f - a1\n 36252: a0 = u64 [sp + 0x20]\n 36255: a1 = u64 [sp + 0x18]\n 36258: ra = 1352, jump @1585\n      : @1265 [@dyn 676] (gas: 17)\n 36264: a2 = u64 [sp + 0x90]\n 36268: a3 = a2 <u 0x80\n 36272: u64 [sp + 0xc0] = a3\n 36276: a4 = u64 [sp + 0xb0]\n 36280: a1 = a4 if a3 != 0\n 36283: a1 = s1 if a2 == 0\n 36286: u64 [sp + 0xb0] = a1\n 36290: a1 = u64 [sp + 0xb8]\n 36294: a4 = u64 [sp + 0x88]\n 36298: a1 = a1 | a4\n 36301: a1 = a0 if a3 == 0\n 36304: a0 = u64 [sp + 0x10]\n 36307: a1 = a0 if a2 == 0\n 36310: u64 [sp + 0xb8] = a1\n 36314: a0 = u64 [sp + 0x20]\n 36317: a1 = u64 [sp + 0x18]\n 36320: ra = 1354, jump @1585\n      : @1266 [@dyn 677] (gas: 13)\n 36326: a3 = u64 [sp + 0x98]\n 36330: a2 = u64 [sp + 0xa8]\n 36334: a5 = u64 [sp + 0xa0]\n 36338: a5 = a5 | a2\n 36341: s1 = u64 [sp + 0xc8]\n 36345: s1 = s1 | a3\n 36348: a5 = a5 | s1\n 36351: a2 = u64 [sp + 0xc0]\n 36355: a1 = 0 if a2 == 0\n 36357: u64 [sp + 0x90] = a1\n 36361: a0 = 0 if a2 == 0\n 36363: u64 [sp + 0xc0] = a0\n 36367: jump @1275 if a5 == 0\n      : @1267 (gas: 5)\n 36371: s1 = u64 [sp + 0xc8]\n 36375: a2 = s1 + 0xffffffffffffff80\n 36378: a0 = u64 [sp + 0x10]\n 36381: a1 = u64 [sp + 0x8]\n 36384: ra = 1356, jump @1580\n      : @1268 [@dyn 678] (gas: 6)\n 36390: u64 [sp + 0x88] = a0\n 36394: u64 [sp + 0x78] = a1\n 36397: a0 = u64 [sp + 0x20]\n 36400: a1 = u64 [sp + 0x18]\n 36403: a2 = s1\n 36405: ra = 1358, jump @1580\n      : @1269 [@dyn 679] (gas: 6)\n 36411: u64 [sp + 0x70] = a0\n 36414: u64 [sp + 0x80] = a1\n 36418: a2 = 0x80 - s1\n 36422: a0 = u64 [sp + 0x10]\n 36425: a1 = u64 [sp + 0x8]\n 36428: ra = 1360, jump @1585\n      : @1270 [@dyn 680] (gas: 19)\n 36434: a4 = u64 [sp + 0x80]\n 36438: a4 = a4 | a1\n 36441: a2 = s1\n 36443: a1 = s1 <u 0x80\n 36447: u64 [sp + 0x80] = a1\n 36451: a3 = u64 [sp + 0x78]\n 36454: a4 = a3 if a1 == 0\n 36457: a3 = u64 [sp + 0x18]\n 36460: a4 = a3 if s1 == 0\n 36463: u64 [sp + 0x78] = a4\n 36466: s1 = u64 [sp + 0x70]\n 36469: s1 = s1 | a0\n 36472: a0 = u64 [sp + 0x88]\n 36476: s1 = a0 if a1 == 0\n 36479: a0 = u64 [sp + 0x20]\n 36482: s1 = a0 if a2 == 0\n 36485: a0 = u64 [sp + 0x10]\n 36488: a1 = u64 [sp + 0x8]\n 36491: ra = 1362, jump @1580\n      : @1271 [@dyn 681] (gas: 24)\n 36497: t2 = s1\n 36499: t1 = u64 [sp + 0x78]\n 36502: t0 = a0\n 36504: ra = 0\n 36506: a0 = u64 [sp + 0x80]\n 36510: a1 = 0 if a0 == 0\n 36512: t0 = 0 if a0 == 0\n 36514: a2 = u64 [sp + 0x68]\n 36517: a0 = a2 <u 0x1\n 36520: a3 = u64 [sp + 0x50]\n 36523: a0 = a3 - a0\n 36526: u64 [sp + 0x40] = a0\n 36529: a0 = a2 | a3\n 36532: a0 = a0 <u 0x1\n 36535: a3 = u64 [sp + 0x60]\n 36538: a4 = a3 - a0\n 36541: u64 [sp + 0x38] = a4\n 36544: a0 = a3 <u a0\n 36547: a3 = u64 [sp + 0x58]\n 36550: a3 = a3 - a0\n 36553: u64 [sp + 0x30] = a3\n 36556: a2 = a2 + 0xffffffffffffffff\n 36559: u64 [sp + 0x28] = a2\n 36562: fallthrough\n      : @1272 (gas: 93)\n 36563: u64 [sp + 0x88] = ra\n 36567: u64 [sp + 72] = 0\n 36570: a4 = t2 >> 0x3f\n 36573: a3 = t1 << 0x1\n 36576: a3 = a3 | a4\n 36579: a4 = t2 << 0x1\n 36582: ra = u64 [sp + 0xb0]\n 36586: a2 = ra >> 0x3f\n 36589: a2 = a2 | a4\n 36592: u64 [sp + 0x78] = a2\n 36595: a0 = u64 [sp + 0x40]\n 36598: s1 = a0 ^ a3\n 36601: a4 = a0 <u a3\n 36604: a0 = u64 [sp + 0x28]\n 36607: t2 = a0 <u a2\n 36610: t2 = a4 if s1 != 0\n 36613: a1 = a1 << 0x1\n 36616: a2 = t0 >> 0x3f\n 36619: a1 = a1 | a2\n 36622: u64 [sp + 0x80] = a1\n 36626: a2 = t1 >> 0x3f\n 36629: a0 = t0 << 0x1\n 36632: t1 = a0 | a2\n 36635: a0 = ra << 0x1\n 36638: a4 = u64 [sp + 0xb8]\n 36642: a2 = a4 >> 0x3f\n 36645: a0 = a0 | a2\n 36648: a2 = a4 << 0x1\n 36651: s1 = u64 [sp + 0x90]\n 36655: a4 = s1 >> 0x3f\n 36658: a2 = a2 | a4\n 36661: a4 = s1 << 0x1\n 36664: s1 = u64 [sp + 0xc0]\n 36668: ra = s1 >> 0x3f\n 36671: a4 = a4 | ra\n 36674: s1 = s1 << 0x1\n 36677: a1 = u64 [sp + 0x88]\n 36681: s1 = s1 | a1\n 36684: u64 [sp + 0xc0] = s1\n 36688: a4 = a4 | 0\n 36690: u64 [sp + 0x90] = a4\n 36694: a2 = a2 | 0\n 36696: u64 [sp + 0xb8] = a2\n 36700: a0 = a0 | 0\n 36702: u64 [sp + 0xb0] = a0\n 36706: a2 = u64 [sp + 0x38]\n 36709: a0 = a2 - t1\n 36712: a0 = a0 <u t2\n 36715: a2 = a2 <u t1\n 36718: a4 = u64 [sp + 0x30]\n 36721: t2 = u64 [sp + 0x80]\n 36725: a4 = a4 - t2\n 36728: a4 = a4 - a2\n 36731: a4 = a4 - a0\n 36734: a4 = a4 >>a 0x3f\n 36737: a0 = u64 [sp + 0x68]\n 36740: a1 = a4 & a0\n 36743: u64 [sp + 0x70] = a1\n 36746: a5 = u64 [sp + 0x50]\n 36749: a5 = a5 & a4\n 36752: a0 = a3 ^ a5\n 36755: s1 = a3 <u a5\n 36758: t0 = u64 [sp + 0x78]\n 36761: ra = t0 <u a1\n 36764: s1 = ra if a0 == 0\n 36767: a2 = u64 [sp + 0x60]\n 36770: a2 = a2 & a4\n 36773: a1 = t1 - a2\n 36776: a0 = a1 - s1\n 36779: u64 [sp + 0x88] = a0\n 36783: a0 = a1 <u s1\n 36786: a2 = t1 <u a2\n 36789: s1 = u64 [sp + 0x58]\n 36792: s1 = s1 & a4\n 36795: a1 = t2 - s1\n 36798: a1 = a1 - a2\n 36801: a1 = a1 - a0\n 36804: a3 = a3 - a5\n 36807: t1 = a3 - ra\n 36810: a0 = u64 [sp + 0x70]\n 36813: t2 = t0 - a0\n 36816: a5 = u64 [sp + 0xc8]\n 36820: a2 = u64 [sp + 0xa0]\n 36824: a0 = a5 | a2\n 36827: a0 = a0 <u 0x1\n 36830: a3 = u64 [sp + 0x98]\n 36834: s1 = a3 <u a0\n 36837: a0 = a3 - a0\n 36840: a3 = a5 <u 0x1\n 36843: a2 = a2 - a3\n 36846: a3 = u64 [sp + 0xa8]\n 36850: a3 = a3 - s1\n 36853: fallthrough\n      : @1273 (gas: 11)\n 36854: t0 = u64 [sp + 0x88]\n 36858: a5 = a5 + 0xffffffffffffffff\n 36861: u64 [sp + 0xa8] = a3\n 36865: u64 [sp + 0xa0] = a2\n 36869: a2 = a2 | a3\n 36872: u64 [sp + 0xc8] = a5\n 36876: a3 = a5 | a0\n 36879: a2 = a2 | a3\n 36882: ra = a4 & 0x1\n 36885: u64 [sp + 0x98] = a0\n 36889: jump @1272 if a2 != 0\n      : @1274 (gas: 1)\n 36893: jump @1276\n      : @1275 (gas: 3)\n 36895: ra = 0\n 36897: u64 [sp + 72] = 0\n 36900: fallthrough\n      : @1276 (gas: 20)\n 36901: a3 = u64 [sp + 0xb8]\n 36905: a0 = a3 >> 0x3f\n 36908: a1 = u64 [sp + 0xb0]\n 36912: a1 = a1 << 0x1\n 36915: a0 = a0 | a1\n 36918: a5 = u64 [sp + 0x90]\n 36922: a1 = a5 >> 0x3f\n 36925: a3 = a3 << 0x1\n 36928: a1 = a1 | a3\n 36931: a2 = u64 [sp + 0xc0]\n 36935: a3 = a2 >> 0x3f\n 36938: a5 = a5 << 0x1\n 36941: s1 = a2 << 0x1\n 36944: ra = ra | s1\n 36947: a2 = u64 [sp + 0x48]\n 36950: a3 = a3 | a2\n 36953: a3 = a3 | a5\n 36956: t0 = a2 | a1\n 36959: a2 = a2 | a0\n 36962: fallthrough\n      : @1277 (gas: 76)\n 36963: s1 = u64 [sp + 0x68]\n 36966: a0 = s1 mulhu ra\n 36969: a1 = u64 [sp + 0x50]\n 36972: a4 = a1 * ra\n 36975: a0 = a0 + a4\n 36978: a4 = a0 <u a4\n 36981: a5 = a1 mulhu ra\n 36984: a5 = a5 + a4\n 36987: a4 = s1 * a3\n 36990: t2 = a4 + a0\n 36993: a4 = t2 <u a4\n 36996: a0 = a2\n 36998: a2 = s1 mulhu a3\n 37001: a2 = a2 + a4\n 37004: a2 = a2 + a5\n 37007: a4 = a2 <u a5\n 37010: a5 = a1 mulhu a3\n 37013: a4 = a4 + a5\n 37016: a5 = a1 * a3\n 37019: a2 = a2 + a5\n 37022: a5 = a2 <u a5\n 37025: a4 = a4 + a5\n 37028: u64 [sp + 0xc8] = a4\n 37032: a5 = t0 * a1\n 37035: a4 = t0 mulhu s1\n 37038: a4 = a4 + a5\n 37041: a5 = a0 * s1\n 37044: t1 = a4 + a5\n 37047: a0 = u64 [sp + 0x58]\n 37050: a5 = ra * a0\n 37053: a4 = u64 [sp + 0x60]\n 37056: a0 = ra mulhu a4\n 37059: a0 = a0 + a5\n 37062: a3 = a3 * a4\n 37065: a0 = a0 + a3\n 37068: a0 = a0 + t1\n 37071: a3 = ra * a4\n 37074: a1 = t0 * s1\n 37077: a3 = a3 + a1\n 37080: a1 = a3 <u a1\n 37083: a0 = a0 + a1\n 37086: a1 = u64 [sp + 0xc8]\n 37090: a0 = a0 + a1\n 37093: a3 = a3 + a2\n 37096: a1 = a3 <u a2\n 37099: t0 = s1 * ra\n 37102: a2 = u64 [sp + 0x8]\n 37105: a1 = a2 - a1\n 37108: t1 = a1 - a0\n 37111: a1 = u64 [sp + 0x18]\n 37114: a0 = a1 ^ t2\n 37117: a4 = a1 <u t2\n 37120: a2 = u64 [sp + 0x20]\n 37123: a5 = a2 <u t0\n 37126: a4 = a5 if a0 == 0\n 37129: s1 = u64 [sp + 0x10]\n 37132: a0 = s1 <u a3\n 37135: a3 = s1 - a3\n 37138: s1 = a3 <u a4\n 37141: a0 = a0 + s1\n 37144: s1 = t1 - a0\n 37147: a3 = a3 - a4\n 37150: a0 = a1 - a5\n 37153: a0 = a0 - t2\n 37156: a2 = a2 - t0\n 37159: a1 = u64 [sp]\n 37161: u64 [a1] = a2\n 37163: u64 [a1 + 0x8] = a0\n 37166: u64 [a1 + 0x10] = a3\n 37169: u64 [a1 + 0x18] = s1\n 37172: sp = s0 + 0xfffffffffffffed0\n 37176: ra = u64 [sp + 0x128]\n 37180: s0 = u64 [sp + 0x120]\n 37184: s1 = u64 [sp + 0x118]\n 37188: sp = sp + 0x130\n 37192: ret\n      : @1278 (gas: 6)\n 37194: u64 [sp + 256] = 0\n 37198: u64 [sp + 248] = 0\n 37202: u64 [sp + 240] = 0\n 37206: t0 = 0x554\n 37210: a0 = 0x4e487b7100000000\n 37220: fallthrough\n      : @1279 [@dyn 682] (gas: 4)\n 37221: a1 = sp + 0xf0\n 37225: u64 [sp + 0x108] = a0\n 37229: a0 = 0\n 37231: ra = 1366, jump @25\n      : @1280 [@dyn 683] (gas: 7)\n 37238: u64 [sp + 232] = 0\n 37242: u64 [sp + 224] = 0\n 37246: u64 [sp + 208] = 0x12\n 37251: a0 = 0x4\n 37254: a1 = sp + 0xd0\n 37258: u64 [sp + 216] = 0\n 37262: ra = 1368, jump @25\n      : @1281 [@dyn 684] (gas: 2)\n 37269: a1 = i32 [0x2019c]\n 37274: jump @1283 if a1 >u 63\n      : @1282 (gas: 2)\n 37278: u32 [0x2019c] = 0x40\n 37284: fallthrough\n      : @1283 (gas: 7)\n 37285: a1 = 0x201b0\n 37290: i32 a1 = a1 + 0\n 37292: a0 = 0x1\n 37295: a2 = 0x24\n 37298: ra = 0x55a\n 37302: ecalli 7 // 'seal_return'\n 37304: fallthrough\n      : @1284 [@dyn 685] (gas: 18)\n 37305: a2 = u8 [a1]\n 37307: t2 = a2 + 0xfffffffffffffffe\n 37310: a4 = t2 <u a2\n 37313: a2 = a4 + 0xffffffffffffffff\n 37316: a4 = 0 if a2 != 0\n 37318: a3 = a4 >u 0\n 37320: a3 = a3 + 0xffffffffffffffff\n 37323: a4 = a4 + 0xffffffffffffffff\n 37326: t0 = a4 >u 0\n 37328: a5 = a3 >u 0\n 37330: a5 = t0 if a3 == 0\n 37333: t0 = a4 | a3\n 37336: t1 = a2 >u 0\n 37338: a1 = t2 <u 0x100\n 37342: a1 = a1 ^ 0x1\n 37345: a1 = t1 if a2 != 0\n 37348: a1 = a5 if t0 != 0\n 37351: jump @1286 if a1 != 0\n      : @1285 (gas: 5)\n 37354: u64 [a0] = t2\n 37356: u64 [a0 + 0x8] = a2\n 37359: u64 [a0 + 0x10] = a4\n 37362: u64 [a0 + 0x18] = a3\n 37365: ret\n      : @1286 (gas: 6)\n 37367: sp = sp + 0xffffffffffffffb0\n 37370: u64 [sp + 0x48] = ra\n 37373: u64 [sp + 0x40] = s0\n 37376: s0 = sp + 0x50\n 37379: sp = sp & 0xfffffffffffffff0\n 37382: t0 = 1372, jump @1533\n      : @1287 [@dyn 686] (gas: 1)\n 37388: ra = 1374, jump @25\n      : @1288 [@dyn 687] (gas: 7)\n 37395: u64 [sp + 24] = 0\n 37398: u64 [sp + 16] = 0\n 37401: u64 [sp + 0] = 0x11\n 37404: a0 = 0x4\n 37407: a1 = sp\n 37409: u64 [sp + 8] = 0\n 37412: ra = 1376, jump @25\n      : @1289 [@dyn 688] (gas: 2)\n 37419: a1 = i32 [0x2019c]\n 37424: jump @1291 if a1 >u 63\n      : @1290 (gas: 2)\n 37428: u32 [0x2019c] = 0x40\n 37434: fallthrough\n      : @1291 (gas: 8)\n 37435: a1 = 0x201b0\n 37440: i32 a1 = a1 + 0\n 37442: a0 = 0x1\n 37445: a2 = 0x24\n 37448: ra = 0x562\n 37452: ecalli 7 // 'seal_return'\n 37454: t0 = 0x564\n 37458: jump @1542\n      : @1292 [@dyn 689] (gas: 1)\n 37461: t0 = 1380, jump @1542\n      : @1293 [@dyn 690] (gas: 1)\n 37467: jump @1296 if a0 == 0\n      : @1294 (gas: 1)\n 37470: t0 = 1382, jump @1578\n      : @1295 [@dyn 691] (gas: 1)\n 37476: ret\n      : @1296 (gas: 3)\n 37478: a0 = sp + 0xa0\n 37482: a1 = 0x40\n 37485: ra = 1384, jump @23\n      : @1297 [@dyn 692] (gas: 1)\n 37492: t0 = 1386, jump @1541\n      : @1298 [@dyn 693] (gas: 1)\n 37498: jump @1310 if a0 != 0\n      : @1299 (gas: 1)\n 37501: t0 = 1388, jump @1551\n      : @1300 [@dyn 694] (gas: 1)\n 37507: ra = 1390, jump @25\n      : @1301 [@dyn 695] (gas: 1)\n 37514: t0 = 1392, jump @1527\n      : @1302 [@dyn 696] (gas: 1)\n 37520: jump @1310 if a0 == 0\n      : @1303 (gas: 1)\n 37523: t0 = 1394, jump @1556\n      : @1304 [@dyn 697] (gas: 1)\n 37529: ra = 1396, jump @25\n      : @1305 [@dyn 698] (gas: 1)\n 37536: t0 = 1398, jump @1539\n      : @1306 [@dyn 699] (gas: 1)\n 37542: jump @1310 if a0 == 0\n      : @1307 (gas: 8)\n 37545: s1 = u64 [sp + 0x18]\n 37548: i32 a0 = s1 + 0x24\n 37551: u64 [sp + 88] = 0\n 37554: u64 [sp + 80] = 0\n 37557: u64 [sp + 64] = 0x14\n 37561: a1 = sp + 0x40\n 37564: u64 [sp + 72] = 0\n 37567: ra = 1400, jump @25\n      : @1308 [@dyn 700] (gas: 1)\n 37574: t0 = 1402, jump @1545\n      : @1309 [@dyn 701] (gas: 1)\n 37580: jump @1311 if a0 != 0\n      : @1310 (gas: 1)\n 37583: trap\n      : @1311 (gas: 11)\n 37584: s1 = u64 [sp + 0x18]\n 37587: i32 a0 = s1 + 0x44\n 37590: a1 = u64 [0x20130]\n 37595: a2 = u64 [0x20138]\n 37600: u64 [sp + 0x38] = a1\n 37603: u64 [sp + 0x30] = a2\n 37606: a1 = 0x616e636500000000\n 37616: u64 [sp + 0x28] = a1\n 37619: a1 = sp + 0x20\n 37622: u64 [sp + 32] = 0\n 37625: ra = 1404, jump @25\n      : @1312 [@dyn 702] (gas: 3)\n 37632: a1 = 0x64\n 37635: a0 = s1\n 37637: ra = 1406, jump @38\n      : @1313 [@dyn 703] (gas: 7)\n 37644: i32 a1 = a0 + 0\n 37646: a0 = 0x1\n 37649: a2 = 0x64\n 37652: ra = 0x580\n 37656: ecalli 7 // 'seal_return'\n 37658: t0 = 0x582\n 37662: jump @1542\n      : @1314 [@dyn 704] (gas: 1)\n 37665: t0 = 1410, jump @1542\n      : @1315 [@dyn 705] (gas: 1)\n 37671: jump @1318 if a0 == 0\n      : @1316 (gas: 1)\n 37674: t0 = 1412, jump @1578\n      : @1317 [@dyn 706] (gas: 1)\n 37680: ret\n      : @1318 (gas: 3)\n 37682: a0 = sp + 0xa0\n 37686: a1 = 0x40\n 37689: ra = 1414, jump @23\n      : @1319 [@dyn 707] (gas: 1)\n 37696: t0 = 1416, jump @1541\n      : @1320 [@dyn 708] (gas: 1)\n 37702: jump @1332 if a0 != 0\n      : @1321 (gas: 1)\n 37705: t0 = 1418, jump @1551\n      : @1322 [@dyn 709] (gas: 1)\n 37711: ra = 1420, jump @25\n      : @1323 [@dyn 710] (gas: 1)\n 37718: t0 = 1422, jump @1527\n      : @1324 [@dyn 711] (gas: 1)\n 37724: jump @1332 if a0 == 0\n      : @1325 (gas: 1)\n 37727: t0 = 1424, jump @1556\n      : @1326 [@dyn 712] (gas: 1)\n 37733: ra = 1426, jump @25\n      : @1327 [@dyn 713] (gas: 1)\n 37740: t0 = 1428, jump @1539\n      : @1328 [@dyn 714] (gas: 1)\n 37746: jump @1332 if a0 == 0\n      : @1329 (gas: 8)\n 37749: s1 = u64 [sp + 0x18]\n 37752: i32 a0 = s1 + 0x24\n 37755: u64 [sp + 88] = 0\n 37758: u64 [sp + 80] = 0\n 37761: u64 [sp + 64] = 0x1f\n 37765: a1 = sp + 0x40\n 37768: u64 [sp + 72] = 0\n 37771: ra = 1430, jump @25\n      : @1330 [@dyn 715] (gas: 1)\n 37778: t0 = 1432, jump @1545\n      : @1331 [@dyn 716] (gas: 1)\n 37784: jump @1333 if a0 != 0\n      : @1332 (gas: 1)\n 37787: trap\n      : @1333 (gas: 12)\n 37788: s1 = u64 [sp + 0x18]\n 37791: i32 a0 = s1 + 0x44\n 37794: a1 = u64 [0x20140]\n 37799: u64 [sp + 0x38] = a1\n 37802: a1 = u64 [0x20148]\n 37807: a2 = u64 [0x20150]\n 37812: a3 = u64 [0x20158]\n 37817: u64 [sp + 0x30] = a1\n 37820: u64 [sp + 0x28] = a2\n 37823: a1 = sp + 0x20\n 37826: u64 [sp + 0x20] = a3\n 37829: ra = 1434, jump @25\n      : @1334 [@dyn 717] (gas: 3)\n 37836: a1 = 0x64\n 37839: a0 = s1\n 37841: ra = 1436, jump @38\n      : @1335 [@dyn 718] (gas: 6)\n 37848: i32 a1 = a0 + 0\n 37850: a0 = 0x1\n 37853: a2 = 0x64\n 37856: ra = 0x59e\n 37860: ecalli 7 // 'seal_return'\n 37862: fallthrough\n      : @1336 [@dyn 719] (gas: 30)\n 37863: sp = sp + 0xffffffffffffff80\n 37866: u64 [sp + 0x78] = ra\n 37869: u64 [sp + 0x70] = s0\n 37872: u64 [sp + 0x68] = s1\n 37875: s0 = sp + 0x80\n 37879: sp = sp & 0xfffffffffffffff0\n 37882: a4 = u64 [a2]\n 37884: a3 = u64 [a1]\n 37886: s1 = u64 [a2 + 0x8]\n 37889: t1 = u64 [a1 + 0x8]\n 37892: t2 = u64 [a2 + 0x10]\n 37895: a5 = u64 [a1 + 0x10]\n 37898: a2 = u64 [a2 + 0x18]\n 37901: a1 = u64 [a1 + 0x18]\n 37904: t0 = t1 ^ s1\n 37907: u64 [sp + 0x8] = s1\n 37910: s1 = t1 <u s1\n 37913: u64 [sp + 0x18] = a4\n 37916: u64 [sp + 0x10] = a3\n 37919: a3 = a3 <u a4\n 37922: u64 [sp] = a3\n 37924: s1 = a3 if t0 == 0\n 37927: a3 = a1 ^ a2\n 37930: ra = a1 <u a2\n 37933: t0 = a5 <u t2\n 37936: ra = t0 if a3 == 0\n 37939: a4 = a5 ^ t2\n 37942: a3 = a3 | a4\n 37945: ra = s1 if a3 == 0\n 37948: jump @1338 if ra != 0\n      : @1337 (gas: 23)\n 37951: a3 = a5 - t2\n 37954: a1 = a1 - a2\n 37957: a1 = a1 - t0\n 37960: a2 = a3 <u s1\n 37963: a1 = a1 - a2\n 37966: a3 = a3 - s1\n 37969: a2 = u64 [sp + 0x8]\n 37972: a2 = t1 - a2\n 37975: a4 = u64 [sp]\n 37977: a2 = a2 - a4\n 37980: a4 = u64 [sp + 0x18]\n 37983: a5 = u64 [sp + 0x10]\n 37986: a4 = a5 - a4\n 37989: u64 [a0] = a4\n 37991: u64 [a0 + 0x8] = a2\n 37994: u64 [a0 + 0x10] = a3\n 37997: u64 [a0 + 0x18] = a1\n 38000: sp = s0 + 0xffffffffffffff80\n 38003: ra = u64 [sp + 0x78]\n 38006: s0 = u64 [sp + 0x70]\n 38009: s1 = u64 [sp + 0x68]\n 38012: sp = sp + 0x80\n 38016: ret\n      : @1338 (gas: 6)\n 38018: u64 [sp + 80] = 0\n 38021: u64 [sp + 72] = 0\n 38024: u64 [sp + 64] = 0\n 38027: t0 = 0x5a0\n 38031: a0 = 0x4e487b7100000000\n 38041: fallthrough\n      : @1339 [@dyn 720] (gas: 4)\n 38042: a1 = sp + 0x40\n 38045: u64 [sp + 0x58] = a0\n 38048: a0 = 0\n 38050: ra = 1442, jump @25\n      : @1340 [@dyn 721] (gas: 7)\n 38057: u64 [sp + 56] = 0\n 38060: u64 [sp + 48] = 0\n 38063: u64 [sp + 32] = 0x11\n 38067: a0 = 0x4\n 38070: a1 = sp + 0x20\n 38073: u64 [sp + 40] = 0\n 38076: ra = 1444, jump @25\n      : @1341 [@dyn 722] (gas: 2)\n 38083: a1 = i32 [0x2019c]\n 38088: jump @1343 if a1 >u 63\n      : @1342 (gas: 2)\n 38092: u32 [0x2019c] = 0x40\n 38098: fallthrough\n      : @1343 (gas: 7)\n 38099: a1 = 0x201b0\n 38104: i32 a1 = a1 + 0\n 38106: a0 = 0x1\n 38109: a2 = 0x24\n 38112: ra = 0x5a6\n 38116: ecalli 7 // 'seal_return'\n 38118: fallthrough\n      : @1344 [@dyn 723] (gas: 45)\n 38119: sp = sp + 0xffffffffffffff90\n 38122: u64 [sp + 0x68] = ra\n 38125: u64 [sp + 0x60] = s0\n 38128: u64 [sp + 0x58] = s1\n 38131: s0 = sp + 0x70\n 38134: sp = sp & 0xfffffffffffffff0\n 38137: a3 = u64 [a1 + 0x18]\n 38140: u64 [sp + 0x8] = a3\n 38143: a4 = u64 [a2 + 0x18]\n 38146: t2 = u64 [a1]\n 38148: u64 [sp] = t2\n 38150: a3 = u64 [a1 + 0x8]\n 38153: s1 = u64 [a2 + 0x8]\n 38156: a5 = u64 [a2]\n 38158: t1 = u64 [a1 + 0x10]\n 38161: t0 = u64 [a2 + 0x10]\n 38164: a2 = s1 + a3\n 38167: t2 = t2 + a5\n 38170: a5 = t2 <u a5\n 38173: a2 = a2 + a5\n 38176: ra = a2 ^ s1\n 38179: s1 = a2 <u s1\n 38182: s1 = a5 if ra == 0\n 38185: a1 = t0 + t1\n 38188: a5 = u64 [sp + 0x8]\n 38191: a5 = a5 + a4\n 38194: a4 = a1 <u t0\n 38197: a4 = a4 + a5\n 38200: a5 = a1 + s1\n 38203: a1 = a5 <u a1\n 38206: ra = a4 + a1\n 38209: a4 = a2 ^ a3\n 38212: a3 = a2 <u a3\n 38215: a1 = u64 [sp]\n 38217: s1 = t2 <u a1\n 38220: s1 = a3 if a4 != 0\n 38223: t0 = a5 <u t1\n 38226: a1 = u64 [sp + 0x8]\n 38229: a4 = ra ^ a1\n 38232: a3 = ra <u a1\n 38235: a3 = t0 if a4 == 0\n 38238: a1 = a5 ^ t1\n 38241: a1 = a1 | a4\n 38244: s1 = a3 if a1 != 0\n 38247: jump @1346 if s1 != 0\n      : @1345 (gas: 10)\n 38250: u64 [a0] = t2\n 38252: u64 [a0 + 0x8] = a2\n 38255: u64 [a0 + 0x10] = a5\n 38258: u64 [a0 + 0x18] = ra\n 38261: sp = s0 + 0xffffffffffffff90\n 38264: ra = u64 [sp + 0x68]\n 38267: s0 = u64 [sp + 0x60]\n 38270: s1 = u64 [sp + 0x58]\n 38273: sp = sp + 0x70\n 38276: ret\n      : @1346 (gas: 1)\n 38278: t0 = 1448, jump @1568\n      : @1347 [@dyn 724] (gas: 1)\n 38284: ra = 1450, jump @25\n      : @1348 [@dyn 725] (gas: 7)\n 38291: u64 [sp + 40] = 0\n 38294: u64 [sp + 32] = 0\n 38297: u64 [sp + 16] = 0x11\n 38301: a0 = 0x4\n 38304: a1 = sp + 0x10\n 38307: u64 [sp + 24] = 0\n 38310: ra = 1452, jump @25\n      : @1349 [@dyn 726] (gas: 2)\n 38317: a1 = i32 [0x2019c]\n 38322: jump @1351 if a1 >u 63\n      : @1350 (gas: 2)\n 38326: u32 [0x2019c] = 0x40\n 38332: fallthrough\n      : @1351 (gas: 7)\n 38333: a1 = 0x201b0\n 38338: i32 a1 = a1 + 0\n 38340: a0 = 0x1\n 38343: a2 = 0x24\n 38346: ra = 0x5ae\n 38350: ecalli 7 // 'seal_return'\n 38352: fallthrough\n      : @1352 [@dyn 727] (gas: 14)\n 38353: sp = sp + 0xffffffffffffff00\n 38357: u64 [sp + 0xf8] = ra\n 38361: u64 [sp + 0xf0] = s0\n 38365: u64 [sp + 0xe8] = s1\n 38369: s0 = sp + 0x100\n 38373: sp = sp & 0xfffffffffffffff0\n 38376: a1 = u64 [a0 + 0x10]\n 38379: a2 = u64 [a0 + 0x18]\n 38382: a3 = u64 [a0 + 0x8]\n 38385: a0 = u64 [a0]\n 38387: a2 = a2 | a3\n 38390: a0 = a0 | a1\n 38393: a0 = a0 | a2\n 38396: jump @1354 if a0 == 0\n      : @1353 (gas: 6)\n 38399: sp = s0 + 0xffffffffffffff00\n 38403: ra = u64 [sp + 0xf8]\n 38407: s0 = u64 [sp + 0xf0]\n 38411: s1 = u64 [sp + 0xe8]\n 38415: sp = sp + 0x100\n 38419: ret\n      : @1354 (gas: 3)\n 38421: a0 = sp + 0xc0\n 38425: a1 = 0x40\n 38428: ra = 1456, jump @23\n      : @1355 [@dyn 728] (gas: 15)\n 38435: a2 = u64 [sp + 0xd8]\n 38439: s1 = u64 [sp + 0xd0]\n 38443: a0 = u64 [sp + 0xc8]\n 38447: a1 = u64 [sp + 0xc0]\n 38451: u64 [sp + 0x10] = a0\n 38454: u64 [sp + 0x8] = a2\n 38457: a0 = a0 | a2\n 38460: u64 [sp + 0x18] = a1\n 38463: a1 = a1 | s1\n 38466: a1 = a1 | a0\n 38469: a1 = a1 >> 0x20\n 38472: a0 = a0 | s1\n 38475: a0 = a0 << 0x20\n 38478: a0 = a0 | a1\n 38481: jump @1367 if a0 != 0\n      : @1356 (gas: 8)\n 38485: u64 [sp + 176] = 0\n 38489: u64 [sp + 168] = 0\n 38493: u64 [sp + 160] = 0\n 38497: a0 = 0x8c379a000000000\n 38507: a1 = sp + 0xa0\n 38511: u64 [sp + 0xb8] = a0\n 38515: a0 = u64 [sp + 0x18]\n 38518: ra = 1458, jump @25\n      : @1357 [@dyn 729] (gas: 1)\n 38525: t0 = 1460, jump @1527\n      : @1358 [@dyn 730] (gas: 1)\n 38531: jump @1367 if a0 == 0\n      : @1359 (gas: 8)\n 38535: a0 = u64 [sp + 0x18]\n 38538: i32 a0 = a0 + 0x4\n 38541: u64 [sp + 152] = 0\n 38545: u64 [sp + 144] = 0\n 38549: u64 [sp + 128] = 0x20\n 38554: a1 = sp + 0x80\n 38558: u64 [sp + 136] = 0\n 38562: ra = 1462, jump @25\n      : @1360 [@dyn 731] (gas: 1)\n 38569: t0 = 1464, jump @1539\n      : @1361 [@dyn 732] (gas: 1)\n 38575: jump @1367 if a0 == 0\n      : @1362 (gas: 8)\n 38578: s1 = u64 [sp + 0x18]\n 38581: i32 a0 = s1 + 0x24\n 38584: u64 [sp + 120] = 0\n 38587: u64 [sp + 112] = 0\n 38590: u64 [sp + 96] = 0x22\n 38594: a1 = sp + 0x60\n 38597: u64 [sp + 104] = 0\n 38600: ra = 1466, jump @25\n      : @1363 [@dyn 733] (gas: 3)\n 38607: a0 = 0x100000000\n 38617: u64 [sp] = a0\n 38619: t0 = 1468, jump @1545\n      : @1364 [@dyn 734] (gas: 1)\n 38625: jump @1367 if a0 == 0\n      : @1365 (gas: 12)\n 38628: s1 = u64 [sp + 0x18]\n 38631: i32 a0 = s1 + 0x44\n 38634: a1 = u64 [0x20160]\n 38639: u64 [sp + 0x58] = a1\n 38642: a1 = u64 [0x20168]\n 38647: a2 = u64 [0x20170]\n 38652: a3 = u64 [0x20178]\n 38657: u64 [sp + 0x50] = a1\n 38660: u64 [sp + 0x48] = a2\n 38663: a1 = sp + 0x40\n 38666: u64 [sp + 0x40] = a3\n 38669: ra = 1470, jump @25\n      : @1366 [@dyn 735] (gas: 8)\n 38676: a0 = u64 [sp]\n 38678: a0 = a0 + 0xffffffffffffff9c\n 38681: a0 = s1 <u a0\n 38684: a1 = u64 [sp + 0x10]\n 38687: a0 = 0 if a1 != 0\n 38689: a1 = u64 [sp + 0x8]\n 38692: a0 = 0 if a1 != 0\n 38694: jump @1368 if a0 != 0\n      : @1367 (gas: 1)\n 38697: trap\n      : @1368 (gas: 9)\n 38698: s1 = u64 [sp + 0x18]\n 38701: i32 a0 = s1 + 0x64\n 38704: u64 [sp + 48] = 0\n 38707: u64 [sp + 40] = 0\n 38710: a1 = 0x6f6e000000000000\n 38720: u64 [sp + 0x38] = a1\n 38723: a1 = sp + 0x20\n 38726: u64 [sp + 32] = 0\n 38729: ra = 1472, jump @25\n      : @1369 [@dyn 736] (gas: 3)\n 38736: a1 = 0x84\n 38740: a0 = s1\n 38742: ra = 1474, jump @38\n      : @1370 [@dyn 737] (gas: 7)\n 38749: i32 a1 = a0 + 0\n 38751: a0 = 0x1\n 38754: a2 = 0x84\n 38758: ra = 0x5c4\n 38762: ecalli 7 // 'seal_return'\n 38764: t0 = 0x5c6\n 38768: jump @1542\n      : @1371 [@dyn 738] (gas: 1)\n 38771: t0 = 1478, jump @1542\n      : @1372 [@dyn 739] (gas: 1)\n 38777: jump @1375 if a0 == 0\n      : @1373 (gas: 1)\n 38780: t0 = 1480, jump @1578\n      : @1374 [@dyn 740] (gas: 1)\n 38786: ret\n      : @1375 (gas: 3)\n 38788: a0 = sp + 0xa0\n 38792: a1 = 0x40\n 38795: ra = 1482, jump @23\n      : @1376 [@dyn 741] (gas: 1)\n 38802: t0 = 1484, jump @1541\n      : @1377 [@dyn 742] (gas: 1)\n 38808: jump @1389 if a0 != 0\n      : @1378 (gas: 1)\n 38811: t0 = 1486, jump @1551\n      : @1379 [@dyn 743] (gas: 1)\n 38817: ra = 1488, jump @25\n      : @1380 [@dyn 744] (gas: 1)\n 38824: t0 = 1490, jump @1527\n      : @1381 [@dyn 745] (gas: 1)\n 38830: jump @1389 if a0 == 0\n      : @1382 (gas: 1)\n 38833: t0 = 1492, jump @1556\n      : @1383 [@dyn 746] (gas: 1)\n 38839: ra = 1494, jump @25\n      : @1384 [@dyn 747] (gas: 1)\n 38846: t0 = 1496, jump @1539\n      : @1385 [@dyn 748] (gas: 1)\n 38852: jump @1389 if a0 == 0\n      : @1386 (gas: 8)\n 38855: s1 = u64 [sp + 0x18]\n 38858: i32 a0 = s1 + 0x24\n 38861: u64 [sp + 88] = 0\n 38864: u64 [sp + 80] = 0\n 38867: u64 [sp + 64] = 0x1b\n 38871: a1 = sp + 0x40\n 38874: u64 [sp + 72] = 0\n 38877: ra = 1498, jump @25\n      : @1387 [@dyn 749] (gas: 1)\n 38884: t0 = 1500, jump @1545\n      : @1388 [@dyn 750] (gas: 1)\n 38890: jump @1390 if a0 != 0\n      : @1389 (gas: 1)\n 38893: trap\n      : @1390 (gas: 12)\n 38894: s1 = u64 [sp + 0x18]\n 38897: i32 a0 = s1 + 0x44\n 38900: a1 = u64 [0x20180]\n 38905: a2 = u64 [0x20188]\n 38910: a3 = u64 [0x20190]\n 38915: u64 [sp + 0x38] = a1\n 38918: u64 [sp + 0x30] = a2\n 38921: u64 [sp + 0x28] = a3\n 38924: a2 = 0x6573730000000000\n 38934: a1 = sp + 0x20\n 38937: u64 [sp + 0x20] = a2\n 38940: ra = 1502, jump @25\n      : @1391 [@dyn 751] (gas: 3)\n 38947: a1 = 0x64\n 38950: a0 = s1\n 38952: ra = 1504, jump @38\n      : @1392 [@dyn 752] (gas: 6)\n 38959: i32 a1 = a0 + 0\n 38961: a0 = 0x1\n 38964: a2 = 0x64\n 38967: ra = 0x5e2\n 38971: ecalli 7 // 'seal_return'\n 38973: fallthrough\n      : @1393 [@dyn 753] (gas: 22)\n 38974: sp = sp + 0xffffffffffffff40\n 38978: u64 [sp + 0xb8] = ra\n 38982: u64 [sp + 0xb0] = s0\n 38986: u64 [sp + 0xa8] = s1\n 38990: s0 = sp + 0xc0\n 38994: sp = sp & 0xfffffffffffffff0\n 38997: a4 = u64 [a1 + 0x10]\n 39000: a3 = u64 [a1 + 0x18]\n 39003: a5 = u64 [a1 + 0x8]\n 39006: a1 = u64 [a1]\n 39008: u64 [sp + 0x28] = a3\n 39011: u64 [sp + 0x20] = a5\n 39014: a5 = a5 | a3\n 39017: a3 = a1 | a4\n 39020: a3 = a3 | a5\n 39023: a3 = a3 >> 0x20\n 39026: u64 [sp + 0x30] = a4\n 39029: a4 = a4 | a5\n 39032: a4 = a4 << 0x20\n 39035: a3 = a3 | a4\n 39038: u64 [sp + 0x38] = a0\n 39041: jump @1397 if a3 != 0\n      : @1394 (gas: 10)\n 39045: a0 = u64 [a2 + 0x18]\n 39048: u64 [sp + 0x10] = a0\n 39051: s1 = u64 [a2 + 0x10]\n 39054: a0 = u64 [a2 + 0x8]\n 39057: u64 [sp + 0x8] = a0\n 39060: a0 = u64 [a2]\n 39062: u64 [sp] = a0\n 39064: a0 = sp + 0x80\n 39068: u64 [sp + 0x18] = a1\n 39071: ra = 1508, jump @23\n      : @1395 [@dyn 754] (gas: 19)\n 39078: t0 = u64 [sp + 0x10]\n 39081: a5 = u64 [sp + 0x8]\n 39084: t1 = u64 [sp]\n 39086: a0 = u64 [sp + 0x88]\n 39090: a1 = u64 [sp + 0x98]\n 39094: a2 = u64 [sp + 0x80]\n 39098: a3 = u64 [sp + 0x90]\n 39102: a4 = a0 ^ a5\n 39105: a0 = a5 <u a0\n 39108: a2 = t1 <u a2\n 39111: a2 = a0 if a4 != 0\n 39114: a0 = s1 <u a3\n 39117: a4 = a1 ^ t0\n 39120: a1 = t0 <u a1\n 39123: a1 = a0 if a4 == 0\n 39126: a3 = a3 ^ s1\n 39129: a3 = a3 | a4\n 39132: a1 = a2 if a3 == 0\n 39135: jump @1398 if a1 == 0\n      : @1396 (gas: 47)\n 39139: a0 = s1 >> 0x3b\n 39142: a1 = t0 << 0x5\n 39145: t0 = a1 | a0\n 39148: a1 = a5 >> 0x3b\n 39151: s1 = s1 << 0x5\n 39154: a1 = a1 | s1\n 39157: a2 = t1 >> 0x3b\n 39160: a3 = a5 << 0x5\n 39163: a2 = a2 | a3\n 39166: a3 = t1 << 0x5\n 39169: a0 = u64 [sp + 0x18]\n 39172: a3 = a3 + a0\n 39175: a4 = a3 <u a0\n 39178: a5 = u64 [sp + 0x20]\n 39181: a2 = a2 + a5\n 39184: a2 = a2 + a4\n 39187: a0 = a2 ^ a5\n 39190: s1 = a2 <u a5\n 39193: s1 = a4 if a0 == 0\n 39196: a5 = u64 [sp + 0x30]\n 39199: a1 = a1 + a5\n 39202: s1 = s1 + a1\n 39205: a4 = s1 <u a1\n 39208: a1 = a1 <u a5\n 39211: a5 = u64 [sp + 0x28]\n 39214: a0 = a5 + t0\n 39217: a0 = a0 + a1\n 39220: a0 = a0 + a4\n 39223: a1 = a3 + 0x20\n 39226: a3 = a1 <u a3\n 39229: a4 = a2 + a3\n 39232: a2 = a4 <u a2\n 39235: a2 = a3 if a3 == 0\n 39238: a2 = a2 + s1\n 39241: a3 = a2 <u s1\n 39244: a0 = a0 + a3\n 39247: a3 = u64 [sp + 0x38]\n 39250: u64 [a3] = a1\n 39252: u64 [a3 + 0x8] = a4\n 39255: u64 [a3 + 0x10] = a2\n 39258: u64 [a3 + 0x18] = a0\n 39261: sp = s0 + 0xffffffffffffff40\n 39265: ra = u64 [sp + 0xb8]\n 39269: s0 = u64 [sp + 0xb0]\n 39273: s1 = u64 [sp + 0xa8]\n 39277: sp = sp + 0xc0\n 39281: ret\n      : @1397 (gas: 1)\n 39283: trap\n      : @1398 (gas: 6)\n 39284: u64 [sp + 112] = 0\n 39287: u64 [sp + 104] = 0\n 39290: u64 [sp + 96] = 0\n 39293: t0 = 0x5e6\n 39297: a0 = 0x4e487b7100000000\n 39307: fallthrough\n      : @1399 [@dyn 755] (gas: 4)\n 39308: a1 = sp + 0x60\n 39311: u64 [sp + 0x78] = a0\n 39314: a0 = 0\n 39316: ra = 1512, jump @25\n      : @1400 [@dyn 756] (gas: 7)\n 39323: u64 [sp + 88] = 0\n 39326: u64 [sp + 80] = 0\n 39329: u64 [sp + 64] = 0x32\n 39333: a0 = 0x4\n 39336: a1 = sp + 0x40\n 39339: u64 [sp + 72] = 0\n 39342: ra = 1514, jump @25\n      : @1401 [@dyn 757] (gas: 2)\n 39349: a1 = i32 [0x2019c]\n 39354: jump @1403 if a1 >u 63\n      : @1402 (gas: 2)\n 39358: u32 [0x2019c] = 0x40\n 39364: fallthrough\n      : @1403 (gas: 7)\n 39365: a1 = 0x201b0\n 39370: i32 a1 = a1 + 0\n 39372: a0 = 0x1\n 39375: a2 = 0x24\n 39378: ra = 0x5ec\n 39382: ecalli 7 // 'seal_return'\n 39384: fallthrough\n      : @1404 [@dyn 758] (gas: 10)\n 39385: a3 = u64 [a1 + 0x18]\n 39388: a4 = u64 [a1 + 0x10]\n 39391: t0 = u64 [a1 + 0x8]\n 39394: a5 = a3 >u 0\n 39396: a2 = a4 >u 0\n 39398: a2 = a5 if a3 != 0\n 39401: a3 = a3 | a4\n 39404: a4 = t0 >u 0\n 39406: a4 = a2 if a3 != 0\n 39409: jump @1406 if a4 != 0\n      : @1405 (gas: 16)\n 39412: a1 = u64 [a1]\n 39414: a2 = a1 + 0x1f\n 39417: a1 = a2 <u a1\n 39420: a1 = a1 + t0\n 39423: a1 = a1 & 0x1\n 39426: a2 = a2 & 0xffffffffffffffe0\n 39429: a3 = a2 + 0x20\n 39432: a2 = a3 <u a2\n 39435: a4 = a1 + a2\n 39438: a1 = a4 <u a1\n 39441: a1 = a2 if a2 == 0\n 39444: u64 [a0 + 24] = 0\n 39447: u64 [a0] = a3\n 39449: u64 [a0 + 0x8] = a4\n 39452: u64 [a0 + 0x10] = a1\n 39455: ret\n      : @1406 (gas: 6)\n 39457: sp = sp + 0xffffffffffffffb0\n 39460: u64 [sp + 0x48] = ra\n 39463: u64 [sp + 0x40] = s0\n 39466: s0 = sp + 0x50\n 39469: sp = sp & 0xfffffffffffffff0\n 39472: t0 = 1518, jump @1533\n      : @1407 [@dyn 759] (gas: 1)\n 39478: ra = 1520, jump @25\n      : @1408 [@dyn 760] (gas: 7)\n 39485: u64 [sp + 24] = 0\n 39488: u64 [sp + 16] = 0\n 39491: u64 [sp + 0] = 0x41\n 39494: a0 = 0x4\n 39497: a1 = sp\n 39499: u64 [sp + 8] = 0\n 39502: ra = 1522, jump @25\n      : @1409 [@dyn 761] (gas: 2)\n 39509: a1 = i32 [0x2019c]\n 39514: jump @1411 if a1 >u 63\n      : @1410 (gas: 2)\n 39518: u32 [0x2019c] = 0x40\n 39524: fallthrough\n      : @1411 (gas: 7)\n 39525: a1 = 0x201b0\n 39530: i32 a1 = a1 + 0\n 39532: a0 = 0x1\n 39535: a2 = 0x24\n 39538: ra = 0x5f4\n 39542: ecalli 7 // 'seal_return'\n 39544: fallthrough\n      : @1412 [@dyn 762] (gas: 16)\n 39545: sp = sp + 0xfffffffffffffc50\n 39549: a2 = sp + 0x300\n 39553: u64 [a2 + 0xa8] = ra\n 39557: u64 [a2 + 0xa0] = s0\n 39561: u64 [a2 + 0x98] = s1\n 39565: s0 = sp + 0x3b0\n 39569: sp = sp & 0xfffffffffffffff0\n 39572: a3 = u64 [a1 + 0x10]\n 39575: s1 = u64 [a1 + 0x18]\n 39578: a5 = u64 [a1 + 0x8]\n 39581: t0 = u64 [a1]\n 39583: a1 = a5 | s1\n 39586: a2 = t0 | a3\n 39589: a1 = a1 | a2\n 39592: u64 [sp] = a0\n 39594: jump @1468 if a1 == 0\n      : @1413 (gas: 11)\n 39598: u64 [sp + 128] = 0\n 39602: u64 [sp + 120] = 0\n 39605: a0 = 0\n 39607: u64 [sp + 112] = 0\n 39610: u64 [sp + 0x88] = t0\n 39614: u64 [sp + 0x108] = a5\n 39618: a4 = a5\n 39620: u64 [sp + 0x68] = a3\n 39623: u64 [sp + 0x60] = s1\n 39626: a1 = s1\n 39628: fallthrough\n      : @1414 (gas: 6)\n 39629: u64 [sp + 0x100] = a0\n 39633: s1 = a1\n 39635: a0 = t0 | a3\n 39638: a1 = a1 | a4\n 39641: a0 = a0 | a1\n 39644: jump @1432 if a0 == 0\n      : @1415 (gas: 22)\n 39648: t1 = a3\n 39650: t2 = a4\n 39652: a3 = u64 [sp + 0x80]\n 39656: a3 = a3 + 0x1\n 39659: a1 = a3 <u 0x1\n 39662: a4 = u64 [sp + 0x78]\n 39665: a4 = a4 + a1\n 39668: a1 = a3 | a4\n 39671: a1 = a1 <u 0x1\n 39674: a2 = u64 [sp + 0x100]\n 39678: a5 = a2 + a1\n 39681: a1 = a5 <u a2\n 39684: a2 = u64 [sp + 0x70]\n 39687: a2 = a2 + a1\n 39690: u64 [sp + 0x70] = a2\n 39693: u64 [sp + 0x78] = a4\n 39696: a1 = a4 | a2\n 39699: u64 [sp + 0x80] = a3\n 39703: u64 [sp + 0x58] = a5\n 39706: a2 = a3 | a5\n 39709: a1 = a1 | a2\n 39712: jump @1477 if a1 == 0\n      : @1416 (gas: 50)\n 39716: a0 = a0 <u 0x1\n 39719: u64 [sp + 0x100] = a0\n 39723: a0 = clz t1\n 39725: a0 = a0 + 0x40\n 39728: a2 = clz s1\n 39730: a2 = a0 if s1 == 0\n 39733: a0 = clz t0\n 39735: a0 = a0 + 0x40\n 39738: a3 = clz t2\n 39740: a3 = a0 if t2 == 0\n 39743: a0 = a3 + 0x80\n 39747: a4 = t1 | s1\n 39750: a2 = a0 if a4 == 0\n 39753: a3 = a0 <u a3\n 39756: a3 = 0 if a4 != 0\n 39758: a4 = a3 >u 0\n 39760: a0 = a2 <u 0xfd\n 39764: a1 = a0 ^ 0x1\n 39767: a4 = a1 if a3 == 0\n 39770: a0 = a4 <u 0x1\n 39773: u64 [sp + 0xb0] = t1\n 39777: u64 [sp + 0xb8] = s1\n 39781: a5 = a0 + 0xffffffffffffffff\n 39784: t1 = -a4\n 39786: a3 = -a3\n 39788: a3 = a3 - a1\n 39791: ra = 0xfc - a2\n 39795: a1 = t1 >u 0\n 39797: s1 = a5 >u 0\n 39799: s1 = a1 if a5 == 0\n 39802: a2 = a3 >u 0\n 39804: a1 = ra <u 0x100\n 39808: a1 = a1 ^ 0x1\n 39811: u64 [sp + 0xf0] = a3\n 39815: a1 = a2 if a3 != 0\n 39818: a1 = s1 if a4 != 0\n 39821: a2 = u64 [sp + 0x100]\n 39825: a2 = a2 | a1\n 39828: a1 = u64 [sp + 0xb8]\n 39832: a3 = u64 [sp + 0xb0]\n 39836: a1 = 0 if a2 != 0\n 39838: a3 = 0 if a2 != 0\n 39840: u64 [sp + 0x100] = t2\n 39844: a4 = t2\n 39846: a4 = 0 if a2 != 0\n 39848: u64 [sp + 0xa8] = t0\n 39852: t0 = 0 if a2 != 0\n 39854: s1 = u64 [sp + 0x58]\n 39857: a0 = s1\n 39859: jump @1414 if a2 != 0\n      : @1417 (gas: 7)\n 39863: a2 = ra ^ 0xff\n 39867: a2 = a2 | t1\n 39870: a0 = u64 [sp + 0xf0]\n 39874: a0 = a0 | a5\n 39877: a2 = a2 | a0\n 39880: a0 = s1\n 39882: jump @1414 if a2 == 0\n      : @1418 (gas: 18)\n 39886: a1 = ra + 0x1\n 39889: u64 [sp + 0xf8] = a1\n 39893: a0 = a1 <u 0x1\n 39896: a2 = u64 [sp + 0xf0]\n 39900: a0 = a0 + a2\n 39903: u64 [sp + 0xd0] = a0\n 39907: a0 = a0 | a1\n 39910: a0 = a0 <u 0x1\n 39913: a0 = a0 + t1\n 39916: u64 [sp + 0xc0] = a0\n 39920: a0 = a0 <u t1\n 39923: a0 = a0 + a5\n 39926: u64 [sp + 0xc8] = a0\n 39930: s1 = 0xff - ra\n 39934: a2 = 0x80 - s1\n 39938: a0 = u64 [sp + 0xa8]\n 39942: a1 = u64 [sp + 0x100]\n 39946: ra = 1526, jump @1580\n      : @1419 [@dyn 763] (gas: 6)\n 39952: u64 [sp + 0xf0] = a0\n 39956: u64 [sp + 0xe0] = a1\n 39960: a0 = u64 [sp + 0xb0]\n 39964: a1 = u64 [sp + 0xb8]\n 39968: a2 = s1\n 39970: ra = 1528, jump @1585\n      : @1420 [@dyn 764] (gas: 8)\n 39976: u64 [sp + 0xe8] = a0\n 39980: a0 = u64 [sp + 0xe0]\n 39984: a0 = a0 | a1\n 39987: u64 [sp + 0xe0] = a0\n 39991: a2 = s1 + 0xffffffffffffff80\n 39994: a0 = u64 [sp + 0xa8]\n 39998: a1 = u64 [sp + 0x100]\n 40002: ra = 1530, jump @1585\n      : @1421 [@dyn 765] (gas: 18)\n 40008: a2 = s1 <u 0x80\n 40012: u64 [sp + 0xa0] = a2\n 40016: a3 = u64 [sp + 0xe0]\n 40020: a1 = a3 if a2 != 0\n 40023: a3 = u64 [sp + 0xb8]\n 40027: a1 = a3 if s1 == 0\n 40030: u64 [sp + 0xe0] = a1\n 40034: a1 = u64 [sp + 0xf0]\n 40038: a3 = u64 [sp + 0xe8]\n 40042: a1 = a1 | a3\n 40045: a1 = a0 if a2 == 0\n 40048: a0 = u64 [sp + 0xb0]\n 40052: a1 = a0 if s1 == 0\n 40055: u64 [sp + 0xe8] = a1\n 40059: a0 = u64 [sp + 0xa8]\n 40063: a1 = u64 [sp + 0x100]\n 40067: a2 = s1\n 40069: ra = 1532, jump @1585\n      : @1422 [@dyn 766] (gas: 13)\n 40075: a2 = u64 [sp + 0xc0]\n 40079: a3 = u64 [sp + 0xc8]\n 40083: a5 = u64 [sp + 0xd0]\n 40087: a5 = a5 | a3\n 40090: s1 = u64 [sp + 0xf8]\n 40094: s1 = s1 | a2\n 40097: a5 = a5 | s1\n 40100: a2 = u64 [sp + 0xa0]\n 40104: a1 = 0 if a2 == 0\n 40106: u64 [sp + 0xd8] = a1\n 40110: a0 = 0 if a2 == 0\n 40112: u64 [sp + 0xf0] = a0\n 40116: jump @1430 if a5 == 0\n      : @1423 (gas: 5)\n 40120: s1 = u64 [sp + 0xf8]\n 40124: a2 = s1 + 0xffffffffffffff80\n 40127: a0 = u64 [sp + 0xb0]\n 40131: a1 = u64 [sp + 0xb8]\n 40135: ra = 1534, jump @1580\n      : @1424 [@dyn 767] (gas: 6)\n 40141: u64 [sp + 0xa0] = a0\n 40145: u64 [sp + 0x90] = a1\n 40149: a0 = u64 [sp + 0xa8]\n 40153: a1 = u64 [sp + 0x100]\n 40157: a2 = s1\n 40159: ra = 1536, jump @1580\n      : @1425 [@dyn 768] (gas: 6)\n 40165: u64 [sp + 0x50] = a0\n 40168: u64 [sp + 0x98] = a1\n 40172: a2 = 0x80 - s1\n 40176: a0 = u64 [sp + 0xb0]\n 40180: a1 = u64 [sp + 0xb8]\n 40184: ra = 1538, jump @1585\n      : @1426 [@dyn 769] (gas: 20)\n 40190: a2 = u64 [sp + 0x98]\n 40194: a1 = a1 | a2\n 40197: a2 = s1 <u 0x80\n 40201: u64 [sp + 0x98] = a2\n 40205: a3 = u64 [sp + 0x90]\n 40209: a1 = a3 if a2 == 0\n 40212: a3 = u64 [sp + 0x100]\n 40216: a3 = a1 if s1 != 0\n 40219: u64 [sp + 0x100] = a3\n 40223: a1 = u64 [sp + 0x50]\n 40226: a0 = a0 | a1\n 40229: a1 = u64 [sp + 0xa0]\n 40233: a0 = a1 if a2 == 0\n 40236: a1 = u64 [sp + 0xa8]\n 40240: a1 = a0 if s1 != 0\n 40243: u64 [sp + 0xa8] = a1\n 40247: a0 = u64 [sp + 0xb0]\n 40251: a1 = u64 [sp + 0xb8]\n 40255: a2 = s1\n 40257: ra = 1540, jump @1580\n      : @1427 [@dyn 770] (gas: 8)\n 40263: a5 = 0\n 40265: a2 = u64 [sp + 0x98]\n 40269: a1 = 0 if a2 == 0\n 40271: a0 = 0 if a2 == 0\n 40273: u64 [sp + 152] = 0x9\n 40278: u64 [sp + 144] = 0\n 40282: t0 = u64 [sp + 0xa8]\n 40286: fallthrough\n      : @1428 (gas: 85)\n 40287: u64 [sp + 0xa8] = a1\n 40291: u64 [sp + 0xb0] = a5\n 40295: u64 [sp + 160] = 0\n 40299: a2 = t0 >> 0x3f\n 40302: a5 = u64 [sp + 0x100]\n 40306: a3 = a5 << 0x1\n 40309: a3 = a3 | a2\n 40312: t0 = t0 << 0x1\n 40315: t1 = u64 [sp + 0xe0]\n 40319: a4 = t1 >> 0x3f\n 40322: a1 = t0 | a4\n 40325: u64 [sp + 0xb8] = a1\n 40329: t2 = u64 [sp + 0x90]\n 40333: ra = t2 ^ a3\n 40336: a4 = t2 <u a3\n 40339: s1 = u64 [sp + 0x98]\n 40343: t0 = s1 <u a1\n 40346: t0 = a4 if ra != 0\n 40349: a1 = u64 [sp + 0xa8]\n 40353: a1 = a1 << 0x1\n 40356: a4 = a0 >> 0x3f\n 40359: ra = a1 | a4\n 40362: a4 = a5 >> 0x3f\n 40365: a0 = a0 << 0x1\n 40368: a4 = a4 | a0\n 40371: a0 = t1 << 0x1\n 40374: a1 = u64 [sp + 0xe8]\n 40378: s1 = a1 >> 0x3f\n 40381: t1 = a0 | s1\n 40384: s1 = a1 << 0x1\n 40387: a1 = u64 [sp + 0xd8]\n 40391: a5 = a1 >> 0x3f\n 40394: a5 = a5 | s1\n 40397: a0 = a1 << 0x1\n 40400: s1 = u64 [sp + 0xf0]\n 40404: a1 = s1 >> 0x3f\n 40407: a1 = a1 | a0\n 40410: s1 = s1 << 0x1\n 40413: a0 = u64 [sp + 0xb0]\n 40417: s1 = s1 | a0\n 40420: u64 [sp + 0xf0] = s1\n 40424: a1 = a1 | 0\n 40426: u64 [sp + 0xd8] = a1\n 40430: a1 = a5 | 0\n 40432: u64 [sp + 0xe8] = a1\n 40436: a0 = t1 | 0\n 40438: u64 [sp + 0xe0] = a0\n 40442: a0 = t2 - a4\n 40445: a0 = a0 <u t0\n 40448: a1 = t2 <u a4\n 40451: a5 = t2 - ra\n 40454: a5 = a5 - a1\n 40457: a5 = a5 - a0\n 40460: a5 = a5 >>a 0x3f\n 40463: a0 = a5 & 0xa\n 40466: a1 = u64 [sp + 0xb8]\n 40470: t0 = a1 - a0\n 40473: a1 = a1 <u a0\n 40476: a0 = a3 - a1\n 40479: u64 [sp + 0x100] = a0\n 40483: a1 = 0 if a3 != 0\n 40485: a0 = a4 - a1\n 40488: a1 = a4 <u a1\n 40491: a1 = ra - a1\n 40494: s1 = u64 [sp + 0xf8]\n 40498: a3 = u64 [sp + 0xd0]\n 40502: a2 = s1 | a3\n 40505: a2 = a2 <u 0x1\n 40508: a4 = u64 [sp + 0xc0]\n 40512: t1 = a4 <u a2\n 40515: a2 = a4 - a2\n 40518: a4 = s1 <u 0x1\n 40521: a3 = a3 - a4\n 40524: a4 = u64 [sp + 0xc8]\n 40528: a4 = a4 - t1\n 40531: s1 = s1 + 0xffffffffffffffff\n 40534: u64 [sp + 0xd0] = a3\n 40538: u64 [sp + 0xc8] = a4\n 40542: a3 = a3 | a4\n 40545: u64 [sp + 0xf8] = s1\n 40549: a4 = s1 | a2\n 40552: a3 = a3 | a4\n 40555: a5 = a5 & 0x1\n 40558: u64 [sp + 0xc0] = a2\n 40562: jump @1428 if a3 != 0\n      : @1429 (gas: 1)\n 40566: jump @1431\n      : @1430 (gas: 2)\n 40568: u64 [sp + 160] = 0\n 40572: fallthrough\n      : @1431 (gas: 21)\n 40573: a2 = u64 [sp + 0xe8]\n 40577: a0 = a2 >> 0x3f\n 40580: a1 = u64 [sp + 0xe0]\n 40584: a1 = a1 << 0x1\n 40587: a0 = a0 | a1\n 40590: a3 = u64 [sp + 0xd8]\n 40594: a1 = a3 >> 0x3f\n 40597: a2 = a2 << 0x1\n 40600: s1 = a2 | a1\n 40603: a4 = u64 [sp + 0xf0]\n 40607: a2 = a4 >> 0x3f\n 40610: a3 = a3 << 0x1\n 40613: a4 = a4 << 0x1\n 40616: t0 = a5 | a4\n 40619: a1 = u64 [sp + 0xa0]\n 40623: a5 = a1 | a2\n 40626: a4 = a5 | a3\n 40629: a3 = a1 | s1\n 40632: a1 = a1 | a0\n 40635: a0 = u64 [sp + 0x58]\n 40638: jump @1414\n      : @1432 (gas: 12)\n 40641: a0 = u64 [sp + 0x80]\n 40645: a3 = sp + 0x300\n 40649: u64 [a3 + 0x10] = a0\n 40652: a0 = u64 [sp + 0x78]\n 40655: u64 [a3 + 0x18] = a0\n 40658: a0 = u64 [sp + 0x100]\n 40662: u64 [a3 + 0x20] = a0\n 40665: a0 = sp + 0x330\n 40669: a1 = sp + 0x310\n 40673: a2 = u64 [sp + 0x70]\n 40676: u64 [a3 + 0x28] = a2\n 40679: ra = 1542, jump @1404\n      : @1433 [@dyn 771] (gas: 12)\n 40685: a1 = sp + 0x300\n 40689: a0 = u64 [a1 + 0x30]\n 40692: u64 [sp + 0xf8] = a0\n 40696: a0 = u64 [a1 + 0x38]\n 40699: u64 [sp + 0xf0] = a0\n 40703: a0 = u64 [a1 + 0x40]\n 40706: u64 [sp + 0xe8] = a0\n 40710: a0 = u64 [a1 + 0x48]\n 40713: u64 [sp + 0xe0] = a0\n 40717: a0 = sp + 0x2f0\n 40721: a1 = 0x40\n 40724: ra = 1544, jump @23\n      : @1434 [@dyn 772] (gas: 23)\n 40731: a0 = u64 [sp + 0x308]\n 40735: u64 [sp + 0x18] = a0\n 40738: s1 = u64 [sp + 0x300]\n 40742: a4 = sp + 0x200\n 40746: a2 = u64 [a4 + 0xf8]\n 40750: u64 [sp + 0x10] = a2\n 40753: a3 = u64 [a4 + 0xf0]\n 40757: u64 [sp + 0x40] = a3\n 40760: a1 = u64 [sp + 0xe0]\n 40764: u64 [a4 + 0xc8] = a1\n 40768: a1 = u64 [sp + 0xe8]\n 40772: u64 [a4 + 0xc0] = a1\n 40776: a1 = u64 [sp + 0xf0]\n 40780: u64 [a4 + 0xb8] = a1\n 40784: a1 = u64 [sp + 0xf8]\n 40788: u64 [a4 + 0xb0] = a1\n 40792: u64 [a4 + 0xe8] = a0\n 40796: u64 [a4 + 0xe0] = s1\n 40800: u64 [a4 + 0xd8] = a2\n 40804: a0 = sp + 0x2d0\n 40808: a1 = sp + 0x2b0\n 40812: u64 [a4 + 0xd0] = a3\n 40816: ra = 1546, jump @1177\n      : @1435 [@dyn 773] (gas: 12)\n 40822: a0 = u64 [sp + 0x40]\n 40825: a1 = u64 [sp + 0x18]\n 40828: a2 = u64 [sp + 0x10]\n 40831: a2 = a2 | a1\n 40834: a1 = a0 | s1\n 40837: a1 = a1 | a2\n 40840: a1 = a1 >> 0x20\n 40843: u64 [sp + 0x8] = s1\n 40846: a2 = a2 | s1\n 40849: a2 = a2 << 0x20\n 40852: a1 = a1 | a2\n 40855: jump @1476 if a1 != 0\n      : @1436 (gas: 11)\n 40859: a1 = u64 [sp + 0x80]\n 40863: a2 = sp + 0x200\n 40867: u64 [a2 + 0x90] = a1\n 40871: a1 = u64 [sp + 0x78]\n 40874: u64 [a2 + 0x98] = a1\n 40878: a1 = u64 [sp + 0x100]\n 40882: u64 [a2 + 0xa0] = a1\n 40886: a1 = sp + 0x290\n 40890: s1 = u64 [sp + 0x70]\n 40893: u64 [a2 + 0xa8] = s1\n 40897: ra = 1548, jump @25\n      : @1437 [@dyn 774] (gas: 11)\n 40904: a3 = sp + 0x200\n 40908: u64 [a3 + 0x68] = s1\n 40911: a0 = u64 [sp + 0x100]\n 40915: u64 [a3 + 0x60] = a0\n 40918: a0 = u64 [sp + 0x78]\n 40921: u64 [a3 + 0x58] = a0\n 40924: a0 = sp + 0x270\n 40928: a1 = sp + 0x250\n 40932: a2 = u64 [sp + 0x80]\n 40936: u64 [a3 + 0x50] = a2\n 40939: ra = 1550, jump @1404\n      : @1438 [@dyn 775] (gas: 26)\n 40945: a1 = sp + 0x200\n 40949: a0 = u64 [a1 + 0x70]\n 40952: s1 = u64 [a1 + 0x88]\n 40956: a2 = u64 [a1 + 0x78]\n 40959: a3 = u64 [a1 + 0x80]\n 40963: a1 = a0 + 0xffffffffffffffe0\n 40966: a0 = a1 <u a0\n 40969: a4 = a2 + a0\n 40972: a4 = a4 + 0xffffffffffffffff\n 40975: a5 = a4 ^ a2\n 40978: a2 = a4 <u a2\n 40981: a2 = a0 if a5 == 0\n 40984: a0 = a3 + 0xffffffffffffffff\n 40987: a2 = a2 + a0\n 40990: a0 = a2 <u a0\n 40993: a3 = a3 <u 0x1\n 40996: s1 = s1 - a3\n 40999: a0 = a0 + s1\n 41002: a3 = a1 | a2\n 41005: a0 = a0 | a4\n 41008: a3 = a3 | a0\n 41011: a3 = a3 >> 0x20\n 41014: a0 = a0 | a2\n 41017: a0 = a0 << 0x20\n 41020: a0 = a0 | a3\n 41023: jump @1476 if a0 != 0\n      : @1439 (gas: 10)\n 41027: a0 = u64 [sp + 0x18]\n 41030: a2 = u64 [sp + 0x8]\n 41033: a0 = a0 | a2\n 41036: a3 = 0xffffffe0\n 41046: a2 = u64 [sp + 0x40]\n 41049: a3 = a2 <u a3\n 41052: a4 = u64 [sp + 0x10]\n 41055: a3 = 0 if a4 != 0\n 41057: a3 = 0 if a0 != 0\n 41059: jump @1476 if a3 == 0\n      : @1440 (gas: 5)\n 41063: a0 = i32 [0x20198]\n 41068: u64 [sp + 0xf8] = a0\n 41072: i32 a0 = a2 + 0x20\n 41075: s1 = a1\n 41077: ra = 1552, jump @38\n      : @1441 [@dyn 776] (gas: 29)\n 41084: i32 a0 = a0 + 0\n 41086: i32 a1 = s1 + 0\n 41088: a2 = u64 [sp + 0xf8]\n 41092: ecalli 0 // 'call_data_copy'\n 41093: a1 = u64 [sp + 0x40]\n 41096: a0 = a1 + 0x1f\n 41099: u64 [sp + 0x38] = a0\n 41102: a0 = a0 <u a1\n 41105: a3 = u64 [sp + 0x10]\n 41108: a2 = a3 + a0\n 41111: u64 [sp + 0x30] = a2\n 41114: a2 = a2 <u a3\n 41117: a2 = a0 if a0 == 0\n 41120: a0 = u64 [sp + 0x8]\n 41123: a2 = a2 + a0\n 41126: u64 [sp + 0x28] = a2\n 41129: a0 = a2 <u a0\n 41132: a2 = u64 [sp + 0x18]\n 41135: a0 = a0 + a2\n 41138: u64 [sp + 0x20] = a0\n 41141: t1 = u64 [sp + 0x88]\n 41145: t2 = u64 [sp + 0x68]\n 41148: a2 = u64 [sp + 0x60]\n 41151: t0 = u64 [sp + 0x70]\n 41154: a5 = u64 [sp + 0x80]\n 41158: a4 = u64 [sp + 0x78]\n 41161: a3 = u64 [sp + 0x100]\n 41165: s1 = u64 [sp + 0x108]\n 41169: fallthrough\n      : @1442 (gas: 5)\n 41170: a0 = t1 | t2\n 41173: u64 [sp + 0x108] = s1\n 41177: s1 = s1 | a2\n 41180: a0 = a0 | s1\n 41183: jump @1467 if a0 == 0\n      : @1443 (gas: 8)\n 41187: u64 [sp + 0xf8] = a0\n 41191: u64 [sp + 0x60] = a2\n 41194: u64 [sp + 0x68] = t2\n 41197: u64 [sp + 0x88] = t1\n 41201: a0 = a5 | a3\n 41204: a2 = a4 | t0\n 41207: a0 = a0 | a2\n 41210: jump @1483 if a0 == 0\n      : @1444 (gas: 17)\n 41214: a0 = a5 | a4\n 41217: a0 = a0 <u 0x1\n 41220: a2 = a3 <u a0\n 41223: a2 = t0 - a2\n 41226: u64 [sp + 0x90] = a2\n 41230: a0 = a3 - a0\n 41233: u64 [sp + 0x58] = a0\n 41236: a0 = a5 <u 0x1\n 41239: s1 = a4 - a0\n 41242: a0 = a5 + 0xffffffffffffffff\n 41245: u64 [sp + 0x50] = a0\n 41248: a0 = sp + 0x230\n 41252: u64 [sp + 0x70] = t0\n 41255: u64 [sp + 0x80] = a5\n 41259: u64 [sp + 0x78] = a4\n 41262: u64 [sp + 0x100] = a3\n 41266: ra = 1554, jump @23\n      : @1445 [@dyn 777] (gas: 21)\n 41273: a4 = sp + 0x200\n 41277: a0 = u64 [a4 + 0x38]\n 41280: a1 = u64 [a4 + 0x48]\n 41283: a2 = u64 [a4 + 0x30]\n 41286: a3 = u64 [a4 + 0x40]\n 41289: a4 = s1 ^ a0\n 41292: u64 [sp + 0x48] = s1\n 41295: a0 = s1 <u a0\n 41298: a5 = u64 [sp + 0x50]\n 41301: a2 = a5 <u a2\n 41304: a2 = a0 if a4 != 0\n 41307: a5 = u64 [sp + 0x58]\n 41310: a0 = a5 <u a3\n 41313: a4 = u64 [sp + 0x90]\n 41317: s1 = a4 ^ a1\n 41320: a1 = a4 <u a1\n 41323: a1 = a0 if s1 == 0\n 41326: a0 = a5 ^ a3\n 41329: a0 = a0 | s1\n 41332: a1 = a2 if a0 == 0\n 41335: jump @1489 if a1 == 0\n      : @1446 (gas: 32)\n 41339: a0 = u64 [sp + 0x38]\n 41342: a5 = u64 [sp + 0x80]\n 41346: a5 = a5 + a0\n 41349: a0 = a5 <u a0\n 41352: a3 = u64 [sp + 0x30]\n 41355: a1 = u64 [sp + 0x78]\n 41358: a1 = a1 + a3\n 41361: a1 = a1 + a0\n 41364: a2 = a1 ^ a3\n 41367: a3 = a1 <u a3\n 41370: a3 = a0 if a2 == 0\n 41373: a4 = u64 [sp + 0x28]\n 41376: a0 = u64 [sp + 0x100]\n 41380: a0 = a0 + a4\n 41383: a3 = a3 + a0\n 41386: a2 = a3 <u a0\n 41389: a0 = a0 <u a4\n 41392: a4 = u64 [sp + 0x20]\n 41395: s1 = u64 [sp + 0x70]\n 41398: a4 = a4 + s1\n 41401: a0 = a0 + a4\n 41404: a0 = a0 + a2\n 41407: u64 [sp + 0x80] = a5\n 41411: a2 = a5 | a3\n 41414: a0 = a0 | a1\n 41417: a2 = a2 | a0\n 41420: a2 = a2 >> 0x20\n 41423: a0 = a0 | a3\n 41426: a0 = a0 << 0x20\n 41429: a0 = a0 | a2\n 41432: t2 = u64 [sp + 0x88]\n 41436: jump @1476 if a0 != 0\n      : @1447 (gas: 48)\n 41440: a0 = u64 [sp + 0xf8]\n 41444: a0 = a0 <u 0x1\n 41447: u64 [sp + 0x100] = a0\n 41451: t0 = u64 [sp + 0x68]\n 41454: a0 = clz t0\n 41456: a0 = a0 + 0x40\n 41459: t1 = u64 [sp + 0x60]\n 41462: a2 = clz t1\n 41464: a2 = a0 if t1 == 0\n 41467: a0 = clz t2\n 41469: a0 = a0 + 0x40\n 41472: ra = u64 [sp + 0x108]\n 41476: a1 = clz ra\n 41478: a1 = a0 if ra == 0\n 41481: a0 = a1 + 0x80\n 41485: a3 = t0 | t1\n 41488: a2 = a0 if a3 == 0\n 41491: a5 = a0 <u a1\n 41494: a5 = 0 if a3 != 0\n 41496: s1 = a5 >u 0\n 41498: a0 = a2 <u 0xfd\n 41502: a3 = a0 ^ 0x1\n 41505: s1 = a3 if a5 == 0\n 41508: a0 = s1 <u 0x1\n 41511: a0 = a0 + 0xffffffffffffffff\n 41514: a4 = -s1\n 41516: a5 = -a5\n 41518: a3 = a5 - a3\n 41521: a2 = 0xfc - a2\n 41525: u64 [sp + 0xf8] = a4\n 41529: a5 = a4 >u 0\n 41531: a4 = a0 >u 0\n 41533: a4 = a5 if a0 == 0\n 41536: a5 = a3 >u 0\n 41538: a1 = a2 <u 0x100\n 41542: a1 = a1 ^ 0x1\n 41545: a1 = a5 if a3 != 0\n 41548: a1 = a4 if s1 != 0\n 41551: a4 = u64 [sp + 0x100]\n 41555: a1 = a1 | a4\n 41558: t1 = 0 if a1 != 0\n 41560: a5 = t0\n 41562: a5 = 0 if a1 != 0\n 41564: ra = 0 if a1 != 0\n 41566: a4 = t2\n 41568: a4 = 0 if a1 != 0\n 41570: u64 [sp + 0x100] = a4\n 41574: jump @1462 if a1 != 0\n      : @1448 (gas: 7)\n 41578: a1 = a2 ^ 0xff\n 41582: s1 = u64 [sp + 0xf8]\n 41586: a1 = a1 | s1\n 41589: a4 = a3 | a0\n 41592: a1 = a1 | a4\n 41595: t0 = 0xa\n 41598: jump @1465 if a1 == 0\n      : @1449 (gas: 13)\n 41602: a4 = a2 + 0x1\n 41605: u64 [sp + 0x100] = a4\n 41609: a1 = a4 <u 0x1\n 41612: a1 = a1 + a3\n 41615: u64 [sp + 0xd8] = a1\n 41619: a1 = a1 | a4\n 41622: a1 = a1 <u 0x1\n 41625: a1 = a1 + s1\n 41628: u64 [sp + 0xc8] = a1\n 41632: a1 = a1 <u s1\n 41635: a0 = a0 + a1\n 41638: u64 [sp + 0xd0] = a0\n 41642: t0 = 1556, jump @1549\n      : @1450 [@dyn 778] (gas: 3)\n 41648: a0 = t2\n 41650: a1 = u64 [sp + 0x108]\n 41654: ra = 1558, jump @1580\n      : @1451 [@dyn 779] (gas: 6)\n 41660: u64 [sp + 0xf8] = a0\n 41664: u64 [sp + 0xe8] = a1\n 41668: a0 = u64 [sp + 0x68]\n 41671: a1 = u64 [sp + 0x60]\n 41674: a2 = s1\n 41676: ra = 1560, jump @1585\n      : @1452 [@dyn 780] (gas: 8)\n 41682: u64 [sp + 0xf0] = a0\n 41686: a0 = u64 [sp + 0xe8]\n 41690: a0 = a0 | a1\n 41693: u64 [sp + 0xe8] = a0\n 41697: a2 = s1 + 0xffffffffffffff80\n 41700: a0 = u64 [sp + 0x88]\n 41704: a1 = u64 [sp + 0x108]\n 41708: ra = 1562, jump @1585\n      : @1453 [@dyn 781] (gas: 18)\n 41714: a2 = s1 <u 0x80\n 41718: u64 [sp + 0xc0] = a2\n 41722: a3 = u64 [sp + 0xe8]\n 41726: a1 = a3 if a2 != 0\n 41729: a3 = u64 [sp + 0x60]\n 41732: a1 = a3 if s1 == 0\n 41735: u64 [sp + 0xe8] = a1\n 41739: a1 = u64 [sp + 0xf8]\n 41743: a3 = u64 [sp + 0xf0]\n 41747: a1 = a1 | a3\n 41750: a1 = a0 if a2 == 0\n 41753: a0 = u64 [sp + 0x68]\n 41756: a1 = a0 if s1 == 0\n 41759: u64 [sp + 0xf0] = a1\n 41763: a0 = u64 [sp + 0x88]\n 41767: a1 = u64 [sp + 0x108]\n 41771: a2 = s1\n 41773: ra = 1564, jump @1585\n      : @1454 [@dyn 782] (gas: 13)\n 41779: a2 = u64 [sp + 0xc8]\n 41783: a3 = u64 [sp + 0xd0]\n 41787: a5 = u64 [sp + 0xd8]\n 41791: a5 = a5 | a3\n 41794: s1 = u64 [sp + 0x100]\n 41798: s1 = s1 | a2\n 41801: a5 = a5 | s1\n 41804: a2 = u64 [sp + 0xc0]\n 41808: a1 = 0 if a2 == 0\n 41810: u64 [sp + 0xe0] = a1\n 41814: a0 = 0 if a2 == 0\n 41816: u64 [sp + 0xf8] = a0\n 41820: jump @1463 if a5 == 0\n      : @1455 (gas: 5)\n 41824: s1 = u64 [sp + 0x100]\n 41828: a2 = s1 + 0xffffffffffffff80\n 41831: a0 = u64 [sp + 0x68]\n 41834: a1 = u64 [sp + 0x60]\n 41837: ra = 1566, jump @1580\n      : @1456 [@dyn 783] (gas: 6)\n 41843: u64 [sp + 0xc0] = a0\n 41847: u64 [sp + 0xb0] = a1\n 41851: a0 = u64 [sp + 0x88]\n 41855: a1 = u64 [sp + 0x108]\n 41859: a2 = s1\n 41861: ra = 1568, jump @1580\n      : @1457 [@dyn 784] (gas: 6)\n 41867: u64 [sp + 0xa8] = a0\n 41871: u64 [sp + 0xb8] = a1\n 41875: a2 = 0x80 - s1\n 41879: a0 = u64 [sp + 0x68]\n 41882: a1 = u64 [sp + 0x60]\n 41885: ra = 1570, jump @1585\n      : @1458 [@dyn 785] (gas: 19)\n 41891: a2 = u64 [sp + 0xb8]\n 41895: a1 = a1 | a2\n 41898: a2 = s1\n 41900: a3 = s1 <u 0x80\n 41904: u64 [sp + 0xb8] = a3\n 41908: a4 = u64 [sp + 0xb0]\n 41912: a1 = a4 if a3 == 0\n 41915: a4 = u64 [sp + 0x108]\n 41919: a4 = a1 if s1 != 0\n 41922: u64 [sp + 0x108] = a4\n 41926: s1 = u64 [sp + 0xa8]\n 41930: s1 = s1 | a0\n 41933: a0 = u64 [sp + 0xc0]\n 41937: s1 = a0 if a3 == 0\n 41940: a0 = u64 [sp + 0x88]\n 41944: s1 = a0 if a2 == 0\n 41947: a0 = u64 [sp + 0x68]\n 41950: a1 = u64 [sp + 0x60]\n 41953: ra = 1572, jump @1580\n      : @1459 [@dyn 786] (gas: 8)\n 41959: t2 = s1\n 41961: a5 = 0\n 41963: a2 = u64 [sp + 0xb8]\n 41967: a1 = 0 if a2 == 0\n 41969: a0 = 0 if a2 == 0\n 41971: u64 [sp + 160] = 0x9\n 41976: u64 [sp + 152] = 0\n 41980: fallthrough\n      : @1460 (gas: 86)\n 41981: u64 [sp + 0xb0] = a1\n 41985: u64 [sp + 0xb8] = a5\n 41989: u64 [sp + 168] = 0\n 41993: a2 = t2 >> 0x3f\n 41996: a5 = u64 [sp + 0x108]\n 42000: a3 = a5 << 0x1\n 42003: a3 = a3 | a2\n 42006: t2 = t2 << 0x1\n 42009: t1 = u64 [sp + 0xe8]\n 42013: a4 = t1 >> 0x3f\n 42016: a1 = t2 | a4\n 42019: u64 [sp + 0xc0] = a1\n 42023: t2 = u64 [sp + 0x98]\n 42027: ra = t2 ^ a3\n 42030: a4 = t2 <u a3\n 42033: s1 = u64 [sp + 0xa0]\n 42037: t0 = s1 <u a1\n 42040: t0 = a4 if ra != 0\n 42043: a1 = u64 [sp + 0xb0]\n 42047: a1 = a1 << 0x1\n 42050: a4 = a0 >> 0x3f\n 42053: ra = a1 | a4\n 42056: a4 = a5 >> 0x3f\n 42059: a0 = a0 << 0x1\n 42062: a4 = a4 | a0\n 42065: a0 = t1 << 0x1\n 42068: a1 = u64 [sp + 0xf0]\n 42072: s1 = a1 >> 0x3f\n 42075: t1 = a0 | s1\n 42078: s1 = a1 << 0x1\n 42081: a1 = u64 [sp + 0xe0]\n 42085: a5 = a1 >> 0x3f\n 42088: a5 = a5 | s1\n 42091: a0 = a1 << 0x1\n 42094: s1 = u64 [sp + 0xf8]\n 42098: a1 = s1 >> 0x3f\n 42101: a1 = a1 | a0\n 42104: s1 = s1 << 0x1\n 42107: a0 = u64 [sp + 0xb8]\n 42111: s1 = s1 | a0\n 42114: u64 [sp + 0xf8] = s1\n 42118: a1 = a1 | 0\n 42120: u64 [sp + 0xe0] = a1\n 42124: a1 = a5 | 0\n 42126: u64 [sp + 0xf0] = a1\n 42130: a0 = t1 | 0\n 42132: u64 [sp + 0xe8] = a0\n 42136: a0 = t2 - a4\n 42139: a0 = a0 <u t0\n 42142: t0 = 0xa\n 42145: a1 = t2 <u a4\n 42148: a5 = t2 - ra\n 42151: a5 = a5 - a1\n 42154: a5 = a5 - a0\n 42157: a5 = a5 >>a 0x3f\n 42160: a0 = a5 & t0\n 42163: a1 = u64 [sp + 0xc0]\n 42167: t2 = a1 - a0\n 42170: a1 = a1 <u a0\n 42173: a0 = a3 - a1\n 42176: u64 [sp + 0x108] = a0\n 42180: a1 = 0 if a3 != 0\n 42182: a0 = a4 - a1\n 42185: a1 = a4 <u a1\n 42188: a1 = ra - a1\n 42191: s1 = u64 [sp + 0x100]\n 42195: a3 = u64 [sp + 0xd8]\n 42199: a2 = s1 | a3\n 42202: a2 = a2 <u 0x1\n 42205: a4 = u64 [sp + 0xc8]\n 42209: t1 = a4 <u a2\n 42212: a2 = a4 - a2\n 42215: a4 = s1 <u 0x1\n 42218: a3 = a3 - a4\n 42221: a4 = u64 [sp + 0xd0]\n 42225: a4 = a4 - t1\n 42228: s1 = s1 + 0xffffffffffffffff\n 42231: u64 [sp + 0xd8] = a3\n 42235: u64 [sp + 0xd0] = a4\n 42239: a3 = a3 | a4\n 42242: u64 [sp + 0x100] = s1\n 42246: a4 = s1 | a2\n 42249: a3 = a3 | a4\n 42252: a5 = a5 & 0x1\n 42255: u64 [sp + 0xc8] = a2\n 42259: jump @1460 if a3 != 0\n      : @1461 (gas: 1)\n 42263: jump @1464\n      : @1462 (gas: 2)\n 42265: t0 = 0xa\n 42268: jump @1465\n      : @1463 (gas: 3)\n 42270: u64 [sp + 168] = 0\n 42274: t0 = 0xa\n 42277: fallthrough\n      : @1464 (gas: 22)\n 42278: a2 = u64 [sp + 0xf0]\n 42282: a0 = a2 >> 0x3f\n 42285: a1 = u64 [sp + 0xe8]\n 42289: a1 = a1 << 0x1\n 42292: a0 = a0 | a1\n 42295: a3 = u64 [sp + 0xe0]\n 42299: a1 = a3 >> 0x3f\n 42302: a2 = a2 << 0x1\n 42305: a1 = a1 | a2\n 42308: a4 = u64 [sp + 0xf8]\n 42312: a2 = a4 >> 0x3f\n 42315: a3 = a3 << 0x1\n 42318: a4 = a4 << 0x1\n 42321: a4 = a4 | a5\n 42324: u64 [sp + 0x100] = a4\n 42328: a4 = u64 [sp + 0xa8]\n 42332: a2 = a2 | a4\n 42335: ra = a2 | a3\n 42338: a5 = a4 | a1\n 42341: t1 = a4 | a0\n 42344: t2 = u64 [sp + 0x88]\n 42348: fallthrough\n      : @1465 (gas: 11)\n 42349: u64 [sp + 0xf0] = ra\n 42353: u64 [sp + 0xf8] = a5\n 42357: u64 [sp + 0x108] = t1\n 42361: s1 = u64 [sp + 0x100]\n 42365: a0 = s1 * 0xa\n 42368: i32 a0 = t2 - a0\n 42371: a0 = a0 | 0x30\n 42374: u64 [sp + 0xe8] = a0\n 42378: a1 = 0x1\n 42381: a0 = u64 [sp + 0x80]\n 42385: ra = 1574, jump @38\n      : @1466 [@dyn 787] (gas: 12)\n 42392: a1 = u64 [sp + 0xe8]\n 42396: u8 [a0] = a1\n 42398: a5 = u64 [sp + 0x50]\n 42401: a4 = u64 [sp + 0x48]\n 42404: a3 = u64 [sp + 0x58]\n 42407: t0 = u64 [sp + 0x90]\n 42411: t1 = s1\n 42413: s1 = u64 [sp + 0xf0]\n 42417: t2 = u64 [sp + 0xf8]\n 42421: a2 = u64 [sp + 0x108]\n 42425: a1 = u64 [sp + 0x40]\n 42428: jump @1442\n      : @1467 (gas: 5)\n 42431: a0 = u64 [sp]\n 42433: a3 = u64 [sp + 0x18]\n 42436: a2 = u64 [sp + 0x8]\n 42439: s1 = u64 [sp + 0x10]\n 42442: jump @1475\n      : @1468 (gas: 3)\n 42445: a0 = sp + 0x190\n 42449: a1 = 0x40\n 42452: ra = 1576, jump @23\n      : @1469 [@dyn 788] (gas: 18)\n 42459: a0 = u64 [sp + 0x1a8]\n 42463: u64 [sp + 0x18] = a0\n 42466: s1 = u64 [sp + 0x1a0]\n 42470: a1 = u64 [sp + 0x198]\n 42474: u64 [sp + 0x10] = a1\n 42477: a2 = u64 [sp + 0x190]\n 42481: u64 [sp + 0x40] = a2\n 42484: u64 [sp + 360] = 0\n 42488: u64 [sp + 352] = 0\n 42492: u64 [sp + 344] = 0\n 42496: u64 [sp + 336] = 0x40\n 42501: u64 [sp + 0x188] = a0\n 42505: u64 [sp + 0x180] = s1\n 42509: u64 [sp + 0x178] = a1\n 42513: a0 = sp + 0x170\n 42517: a1 = sp + 0x150\n 42521: u64 [sp + 0x170] = a2\n 42525: ra = 1578, jump @1177\n      : @1470 [@dyn 789] (gas: 12)\n 42531: a0 = u64 [sp + 0x40]\n 42534: a2 = u64 [sp + 0x18]\n 42537: a1 = u64 [sp + 0x10]\n 42540: a2 = a2 | a1\n 42543: a1 = a0 | s1\n 42546: a1 = a1 | a2\n 42549: a1 = a1 >> 0x20\n 42552: u64 [sp + 0x8] = s1\n 42555: a2 = a2 | s1\n 42558: a2 = a2 << 0x20\n 42561: a1 = a1 | a2\n 42564: jump @1476 if a1 != 0\n      : @1471 (gas: 7)\n 42568: u64 [sp + 328] = 0\n 42572: u64 [sp + 320] = 0\n 42576: u64 [sp + 312] = 0\n 42580: s1 = 0x1\n 42583: a1 = sp + 0x130\n 42587: u64 [sp + 0x130] = s1\n 42591: ra = 1580, jump @25\n      : @1472 [@dyn 790] (gas: 11)\n 42598: a2 = u64 [sp + 0x40]\n 42601: a1 = u64 [sp + 0x18]\n 42604: a0 = u64 [sp + 0x8]\n 42607: a0 = a0 | a1\n 42610: s1 = s1 << 0x20\n 42613: s1 = s1 + 0xffffffffffffffe0\n 42616: a1 = a2 <u s1\n 42619: s1 = u64 [sp + 0x10]\n 42622: a1 = 0 if s1 != 0\n 42624: a1 = 0 if a0 != 0\n 42626: jump @1476 if a1 == 0\n      : @1473 (gas: 8)\n 42629: i32 a0 = a2 + 0x20\n 42632: u64 [sp + 288] = 0\n 42636: u64 [sp + 280] = 0\n 42640: a1 = 0x3000000000000000\n 42650: u64 [sp + 0x128] = a1\n 42654: a1 = sp + 0x110\n 42658: u64 [sp + 272] = 0\n 42662: ra = 1582, jump @25\n      : @1474 [@dyn 791] (gas: 5)\n 42669: a1 = u64 [sp + 0x40]\n 42672: a0 = u64 [sp]\n 42674: a3 = u64 [sp + 0x18]\n 42677: a2 = u64 [sp + 0x8]\n 42680: fallthrough\n      : @1475 (gas: 11)\n 42681: u64 [a0] = a1\n 42683: u64 [a0 + 0x8] = s1\n 42686: u64 [a0 + 0x10] = a2\n 42689: u64 [a0 + 0x18] = a3\n 42692: sp = s0 + 0xfffffffffffffc50\n 42696: a0 = sp + 0x300\n 42700: ra = u64 [a0 + 0xa8]\n 42704: s0 = u64 [a0 + 0xa0]\n 42708: s1 = u64 [a0 + 0x98]\n 42712: sp = sp + 0x3b0\n 42716: ret\n      : @1476 (gas: 1)\n 42718: trap\n      : @1477 (gas: 7)\n 42719: a2 = sp + 0x300\n 42723: u64 [a2 + 128] = 0\n 42727: u64 [a2 + 120] = 0\n 42730: u64 [a2 + 112] = 0\n 42733: t0 = 0x630\n 42737: a0 = 0x4e487b7100000000\n 42747: fallthrough\n      : @1478 [@dyn 792] (gas: 4)\n 42748: a1 = sp + 0x370\n 42752: u64 [a2 + 0x88] = a0\n 42756: a0 = 0\n 42758: ra = 1586, jump @25\n      : @1479 [@dyn 793] (gas: 8)\n 42765: a2 = sp + 0x300\n 42769: u64 [a2 + 104] = 0\n 42772: u64 [a2 + 96] = 0\n 42775: u64 [a2 + 80] = 0x11\n 42779: a0 = 0x4\n 42782: a1 = sp + 0x350\n 42786: u64 [a2 + 88] = 0\n 42789: ra = 1588, jump @25\n      : @1480 [@dyn 794] (gas: 2)\n 42796: a1 = i32 [0x2019c]\n 42801: jump @1482 if a1 >u 63\n      : @1481 (gas: 3)\n 42805: u32 [0x2019c] = 0x40\n 42811: a1 = 0x201b0\n 42816: jump @1495\n      : @1482 (gas: 2)\n 42819: a1 = 0x201b0\n 42824: jump @1495\n      : @1483 (gas: 6)\n 42827: u64 [sp + 480] = 0\n 42831: u64 [sp + 472] = 0\n 42835: u64 [sp + 464] = 0\n 42839: t0 = 0x636\n 42843: a0 = 0x4e487b7100000000\n 42853: fallthrough\n      : @1484 [@dyn 795] (gas: 4)\n 42854: a1 = sp + 0x1d0\n 42858: u64 [sp + 0x1e8] = a0\n 42862: a0 = 0\n 42864: ra = 1592, jump @25\n      : @1485 [@dyn 796] (gas: 7)\n 42871: u64 [sp + 456] = 0\n 42875: u64 [sp + 448] = 0\n 42879: u64 [sp + 432] = 0x11\n 42884: a0 = 0x4\n 42887: a1 = sp + 0x1b0\n 42891: u64 [sp + 440] = 0\n 42895: ra = 1594, jump @25\n      : @1486 [@dyn 797] (gas: 2)\n 42902: a1 = i32 [0x2019c]\n 42907: jump @1488 if a1 >u 63\n      : @1487 (gas: 3)\n 42911: u32 [0x2019c] = 0x40\n 42917: a1 = 0x201b0\n 42922: jump @1495\n      : @1488 (gas: 2)\n 42924: a1 = 0x201b0\n 42929: jump @1495\n      : @1489 (gas: 7)\n 42931: a2 = sp + 0x200\n 42935: u64 [a2 + 32] = 0\n 42938: u64 [a2 + 24] = 0\n 42941: u64 [a2 + 16] = 0\n 42944: t0 = 0x63c\n 42948: a0 = 0x4e487b7100000000\n 42958: fallthrough\n      : @1490 [@dyn 798] (gas: 4)\n 42959: a1 = sp + 0x210\n 42963: u64 [a2 + 0x28] = a0\n 42966: a0 = 0\n 42968: ra = 1598, jump @25\n      : @1491 [@dyn 799] (gas: 7)\n 42975: u64 [sp + 520] = 0\n 42979: u64 [sp + 512] = 0\n 42983: u64 [sp + 496] = 0x32\n 42988: a0 = 0x4\n 42991: a1 = sp + 0x1f0\n 42995: u64 [sp + 504] = 0\n 42999: ra = 1600, jump @25\n      : @1492 [@dyn 800] (gas: 2)\n 43006: a1 = i32 [0x2019c]\n 43011: jump @1494 if a1 >u 63\n      : @1493 (gas: 3)\n 43015: u32 [0x2019c] = 0x40\n 43021: a1 = 0x201b0\n 43026: jump @1495\n      : @1494 (gas: 2)\n 43028: a1 = 0x201b0\n 43033: fallthrough\n      : @1495 (gas: 6)\n 43034: i32 a1 = a1 + 0\n 43036: a0 = 0x1\n 43039: a2 = 0x24\n 43042: ra = 0x642\n 43046: ecalli 7 // 'seal_return'\n 43048: fallthrough\n      : @1496 [@dyn 801] (gas: 22)\n 43049: sp = sp + 0xfffffffffffffe50\n 43053: u64 [sp + 0x1a8] = ra\n 43057: u64 [sp + 0x1a0] = s0\n 43061: u64 [sp + 0x198] = s1\n 43065: s0 = sp + 0x1b0\n 43069: sp = sp & 0xfffffffffffffff0\n 43072: a2 = u64 [a1 + 0x18]\n 43075: a3 = u64 [a1 + 0x10]\n 43078: a4 = u64 [a1]\n 43080: a1 = u64 [a1 + 0x8]\n 43083: u64 [sp + 0x50] = a0\n 43086: a0 = a3 | a2\n 43089: s1 = a4 <u 0xa\n 43092: s1 = 0 if a1 != 0\n 43094: s1 = 0 if a0 != 0\n 43096: u64 [sp + 0x168] = a2\n 43100: u64 [sp + 0x160] = a3\n 43104: u64 [sp + 0x158] = a1\n 43108: a0 = sp + 0x170\n 43112: a1 = sp + 0x150\n 43116: u64 [sp + 0x150] = a4\n 43120: ra = 1604, jump @1412\n      : @1497 [@dyn 802] (gas: 5)\n 43126: a2 = u64 [sp + 0x188]\n 43130: a4 = u64 [sp + 0x180]\n 43134: a3 = u64 [sp + 0x178]\n 43138: a1 = u64 [sp + 0x170]\n 43142: jump @1516 if s1 == 0\n      : @1498 (gas: 7)\n 43146: u64 [sp + 0x30] = a4\n 43149: u64 [sp + 0x38] = a2\n 43152: u64 [sp + 0x40] = a3\n 43155: u64 [sp + 0x48] = a1\n 43158: a0 = sp + 0x130\n 43162: a1 = 0x40\n 43165: ra = 1606, jump @23\n      : @1499 [@dyn 803] (gas: 16)\n 43172: s1 = u64 [sp + 0x130]\n 43176: a4 = u64 [sp + 0x148]\n 43180: a3 = u64 [sp + 0x138]\n 43184: a5 = u64 [sp + 0x140]\n 43188: a0 = s1 + 0x20\n 43191: a1 = a0 <u s1\n 43194: a2 = a3 + a1\n 43197: u64 [sp + 0x60] = a3\n 43200: a3 = a2 <u a3\n 43203: a3 = a1 if a1 == 0\n 43206: a3 = a3 + a5\n 43209: u64 [sp + 0x58] = a5\n 43212: a1 = a3 <u a5\n 43215: u64 [sp + 0x68] = a4\n 43218: a1 = a1 + a4\n 43221: t0 = 1608, jump @1537\n      : @1500 [@dyn 804] (gas: 1)\n 43227: jump @1517 if a1 != 0\n      : @1501 (gas: 7)\n 43231: u64 [sp + 288] = 0\n 43235: u64 [sp + 280] = 0\n 43239: a1 = 0x3000000000000000\n 43249: u64 [sp + 0x128] = a1\n 43253: a1 = sp + 0x110\n 43257: u64 [sp + 272] = 0\n 43261: ra = 1610, jump @25\n      : @1502 [@dyn 805] (gas: 12)\n 43268: a1 = u64 [sp + 0x48]\n 43271: a4 = u64 [sp + 0x30]\n 43274: a0 = a1 | a4\n 43277: a2 = u64 [sp + 0x40]\n 43280: a3 = u64 [sp + 0x38]\n 43283: a2 = a2 | a3\n 43286: a0 = a0 | a2\n 43289: a0 = a0 >> 0x20\n 43292: a2 = a2 | a4\n 43295: a2 = a2 << 0x20\n 43298: a0 = a0 | a2\n 43301: jump @1517 if a0 != 0\n      : @1503 (gas: 2)\n 43305: a0 = sp + 0xf0\n 43309: ra = 1612, jump @23\n      : @1504 [@dyn 806] (gas: 20)\n 43316: a4 = s1 + 0x21\n 43319: a0 = a4 <u s1\n 43322: a1 = u64 [sp + 0x60]\n 43325: a5 = a1 + a0\n 43328: a1 = a5 <u a1\n 43331: a1 = a0 if a0 == 0\n 43334: a0 = u64 [sp + 0x58]\n 43337: a3 = a0 + a1\n 43340: a0 = a3 <u a0\n 43343: a1 = u64 [sp + 0x68]\n 43346: a2 = s1\n 43348: s1 = a1 + a0\n 43351: a0 = a4 | a3\n 43354: a1 = a5 | s1\n 43357: a0 = a0 | a1\n 43360: a0 = a0 >> 0x20\n 43363: a1 = a1 | a3\n 43366: a1 = a1 << 0x20\n 43369: a0 = a0 | a1\n 43372: jump @1517 if a0 != 0\n      : @1505 (gas: 11)\n 43376: u64 [sp + 0x28] = a2\n 43379: a0 = u64 [sp + 0x38]\n 43382: a1 = u64 [sp + 0x30]\n 43385: t0 = a1 | a0\n 43388: a1 = 0xffffffe0\n 43398: a0 = u64 [sp + 0x48]\n 43401: a1 = a0 <u a1\n 43404: a2 = u64 [sp + 0x40]\n 43407: a1 = 0 if a2 != 0\n 43409: a1 = 0 if t0 != 0\n 43411: jump @1517 if a1 == 0\n      : @1506 (gas: 19)\n 43415: a2 = a0\n 43417: u64 [sp + 0x10] = a5\n 43420: u64 [sp + 0x18] = s1\n 43423: u64 [sp + 0x20] = a3\n 43426: a5 = u64 [sp + 0x108]\n 43430: a3 = u64 [sp + 0x100]\n 43434: a1 = u64 [sp + 0xf0]\n 43438: s1 = u64 [sp + 0xf8]\n 43442: a0 = a1 | a3\n 43445: u64 [sp + 0x30] = s1\n 43448: u64 [sp + 0x40] = a5\n 43451: a5 = a5 | s1\n 43454: a0 = a0 | a5\n 43457: a0 = a0 >> 0x20\n 43460: u64 [sp + 0x38] = a3\n 43463: a3 = a3 | a5\n 43466: a3 = a3 << 0x20\n 43469: a0 = a0 | a3\n 43472: jump @1517 if a0 != 0\n      : @1507 (gas: 6)\n 43476: i32 a0 = a2 + 0x20\n 43479: u64 [sp + 0x8] = a0\n 43482: a0 = a4\n 43484: s1 = a1\n 43486: u64 [sp + 0x48] = a4\n 43489: ra = 1614, jump @38\n      : @1508 [@dyn 807] (gas: 4)\n 43496: u64 [sp] = a0\n 43498: a0 = u64 [sp + 0x8]\n 43501: a1 = s1\n 43503: ra = 1616, jump @38\n      : @1509 [@dyn 808] (gas: 4)\n 43510: a1 = a0\n 43512: a0 = u64 [sp]\n 43514: a2 = s1\n 43516: ra = 1618, jump @6\n      : @1510 [@dyn 809] (gas: 30)\n 43523: u64 [sp + 0x8] = s1\n 43526: a1 = u64 [sp + 0x48]\n 43529: a0 = a1 + s1\n 43532: a1 = a0 <u a1\n 43535: a2 = u64 [sp + 0x30]\n 43538: a4 = u64 [sp + 0x10]\n 43541: a2 = a2 + a4\n 43544: a2 = a2 + a1\n 43547: a3 = a2 ^ a4\n 43550: a4 = a2 <u a4\n 43553: a4 = a1 if a3 == 0\n 43556: a5 = u64 [sp + 0x20]\n 43559: a1 = u64 [sp + 0x38]\n 43562: a1 = a1 + a5\n 43565: a4 = a4 + a1\n 43568: a3 = a4 <u a1\n 43571: a1 = a1 <u a5\n 43574: a5 = u64 [sp + 0x18]\n 43577: s1 = u64 [sp + 0x40]\n 43580: a5 = a5 + s1\n 43583: a1 = a1 + a5\n 43586: a1 = a1 + a3\n 43589: a3 = a0 | a4\n 43592: a1 = a1 | a2\n 43595: a3 = a3 | a1\n 43598: a3 = a3 >> 0x20\n 43601: a1 = a1 | a4\n 43604: a1 = a1 << 0x20\n 43607: a1 = a1 | a3\n 43610: jump @1517 if a1 != 0\n      : @1511 (gas: 6)\n 43614: u64 [sp + 232] = 0\n 43618: u64 [sp + 224] = 0\n 43622: u64 [sp + 216] = 0\n 43626: a1 = sp + 0xd0\n 43630: u64 [sp + 208] = 0\n 43634: ra = 1620, jump @25\n      : @1512 [@dyn 810] (gas: 12)\n 43641: a0 = u64 [sp + 0x28]\n 43644: a2 = u64 [sp + 0x58]\n 43647: a3 = a0 | a2\n 43650: a1 = u64 [sp + 0x60]\n 43653: a4 = u64 [sp + 0x68]\n 43656: a1 = a1 | a4\n 43659: a3 = a3 | a1\n 43662: a3 = a3 >> 0x20\n 43665: a1 = a1 | a2\n 43668: a1 = a1 << 0x20\n 43671: a1 = a1 | a3\n 43674: jump @1517 if a1 != 0\n      : @1513 (gas: 31)\n 43678: a4 = u64 [sp + 0x8]\n 43681: t1 = a4 + 0x1\n 43684: a1 = t1 <u 0x1\n 43687: a5 = u64 [sp + 0x30]\n 43690: t0 = a5 + a1\n 43693: a2 = t1 | t0\n 43696: a2 = a2 <u 0x1\n 43699: s1 = u64 [sp + 0x38]\n 43702: a2 = a2 + s1\n 43705: a3 = a2 <u s1\n 43708: a1 = u64 [sp + 0x40]\n 43711: t2 = a1 + a3\n 43714: a3 = a4 + 0x21\n 43717: u64 [sp + 0x48] = a3\n 43720: a4 = a3 <u a4\n 43723: a3 = a5 + a4\n 43726: u64 [sp + 0x20] = a3\n 43729: a5 = a3 <u a5\n 43732: a5 = a4 if a4 == 0\n 43735: a5 = a5 + s1\n 43738: u64 [sp + 0x30] = a5\n 43741: a4 = a5 <u s1\n 43744: a1 = a1 + a4\n 43747: u64 [sp + 0x40] = a1\n 43750: u64 [sp + 0xb0] = t1\n 43754: u64 [sp + 0xb8] = t0\n 43758: u64 [sp + 0xc0] = a2\n 43762: a1 = sp + 0xb0\n 43766: u64 [sp + 0xc8] = t2\n 43770: s1 = a0\n 43772: ra = 1622, jump @25\n      : @1514 [@dyn 811] (gas: 18)\n 43779: a0 = u64 [sp + 0x40]\n 43782: u64 [sp + 0x88] = a0\n 43786: a0 = u64 [sp + 0x30]\n 43789: u64 [sp + 0x80] = a0\n 43793: a0 = u64 [sp + 0x20]\n 43796: u64 [sp + 0x78] = a0\n 43799: a0 = u64 [sp + 0x48]\n 43802: u64 [sp + 0x70] = a0\n 43805: a0 = u64 [sp + 0x68]\n 43808: u64 [sp + 0xa8] = a0\n 43812: a0 = u64 [sp + 0x58]\n 43815: u64 [sp + 0xa0] = a0\n 43819: a0 = u64 [sp + 0x60]\n 43822: u64 [sp + 0x98] = a0\n 43826: a0 = sp + 0x90\n 43830: a1 = sp + 0x70\n 43833: u64 [sp + 0x90] = s1\n 43837: ra = 1624, jump @1177\n      : @1515 [@dyn 812] (gas: 5)\n 43843: a1 = s1\n 43845: a2 = u64 [sp + 0x68]\n 43848: a3 = u64 [sp + 0x60]\n 43851: a4 = u64 [sp + 0x58]\n 43854: fallthrough\n      : @1516 (gas: 11)\n 43855: a0 = u64 [sp + 0x50]\n 43858: u64 [a0] = a1\n 43860: u64 [a0 + 0x8] = a3\n 43863: u64 [a0 + 0x10] = a4\n 43866: u64 [a0 + 0x18] = a2\n 43869: sp = s0 + 0xfffffffffffffe50\n 43873: ra = u64 [sp + 0x1a8]\n 43877: s0 = u64 [sp + 0x1a0]\n 43881: s1 = u64 [sp + 0x198]\n 43885: sp = sp + 0x1b0\n 43889: ret\n      : @1517 (gas: 1)\n 43891: trap\n      : @1518 [export #0: 'call'] (gas: 2)\n 43892: a0 = 0\n 43894: ra = 1626, jump @44\n      : @1519 [@dyn 813] [export #1: 'deploy'] (gas: 2)\n 43901: a0 = 0x1\n 43904: ra = 1628, jump @44\n      : @1520 [@dyn 814] (gas: 15)\n 43911: a0 = u64 [a2 + 0x8]\n 43914: a1 = i32 [a2 + 0x10]\n 43917: a2 = u64 [a2]\n 43919: a0 = reverse a0\n 43921: a3 = a0 << 0x20\n 43924: a1 = reverse a1\n 43926: a1 = a1 >> 0x20\n 43929: a3 = a3 | a1\n 43932: a0 = a0 >> 0x20\n 43935: a1 = reverse a2\n 43937: a2 = a1 << 0x20\n 43940: a0 = a0 | a2\n 43943: a1 = a1 >> 0x20\n 43946: a2 = s1 + 0x2858\n 43950: jump [t0]\n      : @1521 (gas: 15)\n 43952: a0 = u64 [a2 + 0x8]\n 43955: a1 = i32 [a2 + 0x10]\n 43958: a2 = u64 [a2]\n 43960: a0 = reverse a0\n 43962: a3 = a0 << 0x20\n 43965: a1 = reverse a1\n 43967: a1 = a1 >> 0x20\n 43970: a3 = a3 | a1\n 43973: a0 = a0 >> 0x20\n 43976: a1 = reverse a2\n 43978: a2 = a1 << 0x20\n 43981: a0 = a0 | a2\n 43984: a1 = a1 >> 0x20\n 43987: a2 = s1 + 0x1058\n 43991: jump [t0]\n      : @1522 (gas: 8)\n 43993: a0 = u64 [a2 + 0x8]\n 43996: a1 = i32 [a2 + 0x10]\n 43999: a2 = u64 [a2]\n 44001: a3 = reverse a0\n 44003: a0 = a3 << 0x20\n 44006: a1 = reverse a1\n 44008: a1 = a1 >> 0x20\n 44011: jump [t0]\n      : @1523 (gas: 15)\n 44013: a0 = u64 [a3 + 0x18]\n 44016: a1 = u64 [a3 + 0x10]\n 44019: a2 = u64 [a3 + 0x8]\n 44022: a3 = u64 [a3]\n 44024: a0 = reverse a0\n 44026: a4 = reverse a1\n 44028: a2 = reverse a2\n 44030: a3 = reverse a3\n 44032: a1 = u64 [s1 + 0x88]\n 44036: u64 [a1 + 0x18] = a3\n 44039: u64 [a1 + 0x10] = a2\n 44042: u64 [a1 + 0x8] = a4\n 44045: u64 [a1] = a0\n 44047: a0 = s1 + 0x7ff\n 44051: jump [t0]\n      : @1524 (gas: 11)\n 44053: a1 = u64 [s1 + 0xd8]\n 44057: a0 = u64 [s1 + 0xc8]\n 44061: a3 = u64 [s1 + 0xc0]\n 44065: a3 = a3 | a0\n 44068: a4 = 0x100000000\n 44078: a0 = 0xfffffffc\n 44088: a0 = a1 <u a0\n 44091: a2 = u64 [s1 + 0xd0]\n 44095: a0 = 0 if a2 != 0\n 44097: a0 = 0 if a3 != 0\n 44099: jump [t0]\n      : @1525 (gas: 26)\n 44101: t2 = u64 [s1 + 0x30]\n 44104: a0 = u64 [t2 + 0x18]\n 44107: a1 = u64 [t2 + 0x10]\n 44110: t1 = reverse a0\n 44112: ra = reverse a1\n 44114: a0 = u64 [s1 + 0x40]\n 44117: a1 = a0 + 0x1f\n 44120: a0 = a1 <u a0\n 44123: a3 = u64 [s1 + 0x48]\n 44126: a2 = a3 + a0\n 44129: a3 = a2 <u a3\n 44132: a3 = a0 if a0 == 0\n 44135: a5 = u64 [s1 + 0x50]\n 44138: a0 = a5 + a3\n 44141: a3 = a0 << 0x3b\n 44144: a4 = a2 >> 0x5\n 44147: a3 = a3 | a4\n 44150: a2 = a2 << 0x3b\n 44153: a1 = a1 >> 0x5\n 44156: a1 = a1 | a2\n 44159: a1 = a1 + t1\n 44162: u64 [s1 + 0x38] = a1\n 44165: a1 = a1 <u t1\n 44168: a2 = ra + a1\n 44171: a3 = a3 + a2\n 44174: jump [t0]\n      : @1526 (gas: 8)\n 44176: a0 = a0 | a2\n 44179: a2 = a4 | a1\n 44182: a2 = a2 | a0\n 44185: a2 = a2 >> 0x20\n 44188: a0 = a0 | a1\n 44191: a0 = a0 << 0x20\n 44194: a0 = a0 | a2\n 44197: jump [t0]\n      : @1527 (gas: 11)\n 44199: a2 = u64 [sp + 0x8]\n 44202: a2 = a2 | s1\n 44205: s1 = 0x100000000\n 44215: a0 = 0xfffffffc\n 44225: a1 = u64 [sp + 0x18]\n 44228: a0 = a1 <u a0\n 44231: a1 = u64 [sp + 0x10]\n 44234: a0 = 0 if a1 != 0\n 44236: u64 [sp + 0x8] = a2\n 44239: a0 = 0 if a2 != 0\n 44241: jump [t0]\n      : @1528 (gas: 8)\n 44243: a4 = a4 | a2\n 44246: a2 = a0 | a1\n 44249: a2 = a2 | a4\n 44252: a2 = a2 >> 0x20\n 44255: a1 = a1 | a4\n 44258: a1 = a1 << 0x20\n 44261: a1 = a1 | a2\n 44264: jump [t0]\n      : @1529 (gas: 9)\n 44266: a0 = u64 [a3 + 0x18]\n 44269: a1 = u64 [a3 + 0x10]\n 44272: a2 = u64 [a3 + 0x8]\n 44275: a3 = u64 [a3]\n 44277: a0 = reverse a0\n 44279: a4 = reverse a1\n 44281: a2 = reverse a2\n 44283: a3 = reverse a3\n 44285: jump [t0]\n      : @1530 (gas: 14)\n 44287: a0 = u64 [a2 + 0x8]\n 44290: a1 = u64 [a2]\n 44292: a2 = i32 [a2 + 0x10]\n 44295: a0 = reverse a0\n 44297: a3 = a0 >> 0x20\n 44300: a1 = reverse a1\n 44302: a4 = a1 << 0x20\n 44305: a3 = a3 | a4\n 44308: a0 = a0 << 0x20\n 44311: a2 = reverse a2\n 44313: a2 = a2 >> 0x20\n 44316: a0 = a0 | a2\n 44319: a1 = a1 >> 0x20\n 44322: jump [t0]\n      : @1531 (gas: 14)\n 44324: a0 = u64 [a2 + 0x8]\n 44327: a1 = i32 [a2 + 0x10]\n 44330: a2 = u64 [a2]\n 44332: a0 = reverse a0\n 44334: a3 = a0 << 0x20\n 44337: a1 = reverse a1\n 44339: a1 = a1 >> 0x20\n 44342: a3 = a3 | a1\n 44345: a0 = a0 >> 0x20\n 44348: a1 = reverse a2\n 44350: a2 = a1 << 0x20\n 44353: a0 = a0 | a2\n 44356: a1 = a1 >> 0x20\n 44359: jump [t0]\n      : @1532 (gas: 8)\n 44361: a0 = a0 | a3\n 44364: a3 = a1 | a2\n 44367: a3 = a3 | a0\n 44370: a3 = a3 >> 0x20\n 44373: a0 = a0 | a2\n 44376: a0 = a0 << 0x20\n 44379: a0 = a0 | a3\n 44382: jump [t0]\n      : @1533 (gas: 8)\n 44384: u64 [sp + 48] = 0\n 44387: u64 [sp + 40] = 0\n 44390: u64 [sp + 32] = 0\n 44393: a0 = 0x4e487b7100000000\n 44403: a1 = sp + 0x20\n 44406: u64 [sp + 0x38] = a0\n 44409: a0 = 0\n 44411: jump [t0]\n      : @1534 (gas: 8)\n 44413: a3 = u64 [s1 + 0xd8]\n 44417: a0 = 0xffffffbc\n 44427: a0 = a3 <u a0\n 44430: a1 = u64 [s1 + 0xd0]\n 44434: a0 = 0 if a1 != 0\n 44436: a1 = u64 [s1 + 0xc8]\n 44440: a0 = 0 if a1 != 0\n 44442: jump [t0]\n      : @1535 (gas: 5)\n 44444: sp = a0\n 44446: i32 a2 = a0 + 0\n 44448: a1 = 0x40\n 44451: a0 = u64 [s1 + 0xd0]\n 44455: jump [t0]\n      : @1536 (gas: 14)\n 44457: a0 = u64 [a3 + 0x18]\n 44460: a1 = u64 [a3 + 0x10]\n 44463: a2 = u64 [a3 + 0x8]\n 44466: a3 = u64 [a3]\n 44468: a0 = reverse a0\n 44470: a4 = reverse a1\n 44472: a2 = reverse a2\n 44474: a3 = reverse a3\n 44476: a1 = u64 [s1 + 0xb0]\n 44480: u64 [a1 + 0x18] = a3\n 44483: u64 [a1 + 0x10] = a2\n 44486: u64 [a1 + 0x8] = a4\n 44489: u64 [a1] = a0\n 44491: jump [t0]\n      : @1537 (gas: 8)\n 44493: a4 = a0 | a3\n 44496: a1 = a1 | a2\n 44499: a4 = a4 | a1\n 44502: a4 = a4 >> 0x20\n 44505: a1 = a1 | a3\n 44508: a1 = a1 << 0x20\n 44511: a1 = a1 | a4\n 44514: jump [t0]\n      : @1538 (gas: 10)\n 44516: a0 = u64 [a3 + 0x18]\n 44519: a1 = u64 [a3 + 0x10]\n 44522: a2 = u64 [a3 + 0x8]\n 44525: a3 = u64 [a3]\n 44527: a0 = reverse a0\n 44529: a1 = reverse a1\n 44531: a2 = reverse a2\n 44533: a3 = reverse a3\n 44535: a4 = s1 + 0x3858\n 44539: jump [t0]\n      : @1539 (gas: 8)\n 44541: a0 = s1 + 0xffffffffffffffdc\n 44544: a1 = u64 [sp + 0x18]\n 44547: a0 = a1 <u a0\n 44550: a1 = u64 [sp + 0x10]\n 44553: a0 = 0 if a1 != 0\n 44555: a1 = u64 [sp + 0x8]\n 44558: a0 = 0 if a1 != 0\n 44560: jump [t0]\n      : @1540 (gas: 15)\n 44562: t2 = u64 [s1 + 0xd8]\n 44566: t1 = u64 [s1 + 0xc0]\n 44570: ra = u64 [s1 + 0xc8]\n 44574: a1 = u64 [s1 + 0x70]\n 44577: a0 = a1 + t2\n 44580: a1 = a0 <u a1\n 44583: a4 = u64 [s1 + 0x68]\n 44586: a2 = a4 + t1\n 44589: a2 = a2 + a1\n 44592: a5 = a2 ^ a4\n 44595: a4 = a2 <u a4\n 44598: a4 = a1 if a5 == 0\n 44601: a5 = u64 [s1 + 0x60]\n 44604: a1 = a5 + ra\n 44607: jump [t0]\n      : @1541 (gas: 15)\n 44609: a2 = u64 [sp + 0xb8]\n 44613: s1 = u64 [sp + 0xb0]\n 44617: a0 = u64 [sp + 0xa8]\n 44621: a1 = u64 [sp + 0xa0]\n 44625: u64 [sp + 0x10] = a0\n 44628: u64 [sp + 0x8] = a2\n 44631: a0 = a0 | a2\n 44634: u64 [sp + 0x18] = a1\n 44637: a1 = a1 | s1\n 44640: a1 = a1 | a0\n 44643: a1 = a1 >> 0x20\n 44646: a0 = a0 | s1\n 44649: a0 = a0 << 0x20\n 44652: a0 = a0 | a1\n 44655: jump [t0]\n      : @1542 (gas: 14)\n 44657: sp = sp + 0xffffffffffffff20\n 44661: u64 [sp + 0xd8] = ra\n 44665: u64 [sp + 0xd0] = s0\n 44669: u64 [sp + 0xc8] = s1\n 44673: s0 = sp + 0xe0\n 44677: sp = sp & 0xfffffffffffffff0\n 44680: a1 = u64 [a0 + 0x10]\n 44683: a2 = u64 [a0 + 0x18]\n 44686: a3 = u64 [a0 + 0x8]\n 44689: a0 = u64 [a0]\n 44691: a2 = a2 | a3\n 44694: a0 = a0 | a1\n 44697: a0 = a0 | a2\n 44700: jump [t0]\n      : @1543 (gas: 17)\n 44702: a2 = u64 [s1 + 0x90]\n 44706: a0 = u64 [a2 + 0x8]\n 44709: a1 = i32 [a2 + 0x10]\n 44712: a2 = u64 [a2]\n 44714: a0 = reverse a0\n 44716: a3 = a0 << 0x20\n 44719: a1 = reverse a1\n 44721: a1 = a1 >> 0x20\n 44724: a3 = a3 | a1\n 44727: a0 = a0 >> 0x20\n 44730: a1 = reverse a2\n 44732: a2 = a1 << 0x20\n 44735: a0 = a0 | a2\n 44738: a1 = a1 >> 0x20\n 44741: a2 = s1 + 0x7ff\n 44745: a2 = a2 + 0x51\n 44748: jump [t0]\n      : @1544 (gas: 16)\n 44750: a0 = u64 [s1 + 0xd8]\n 44754: a1 = u64 [s1 + 0x98]\n 44758: a3 = a1 + a0\n 44761: a0 = a3 <u a1\n 44764: a1 = u64 [s1 + 0xd0]\n 44768: a2 = u64 [s1 + 0x80]\n 44772: a1 = a1 + a2\n 44775: a4 = a1 + a0\n 44778: a1 = a4 ^ a2\n 44781: a2 = a4 <u a2\n 44784: a2 = a0 if a1 == 0\n 44787: a0 = u64 [s1 + 0xc8]\n 44791: a1 = u64 [s1 + 0x88]\n 44795: a0 = a0 + a1\n 44798: a5 = a0 + a2\n 44801: jump [t0]\n      : @1545 (gas: 7)\n 44803: a0 = 0xffffffbc\n 44813: a0 = s1 <u a0\n 44816: a1 = u64 [sp + 0x10]\n 44819: a0 = 0 if a1 != 0\n 44821: a1 = u64 [sp + 0x8]\n 44824: a0 = 0 if a1 != 0\n 44826: jump [t0]\n      : @1546 (gas: 18)\n 44828: a3 = u64 [s1 + 0xc8]\n 44832: a0 = u64 [a3 + 0x18]\n 44835: a1 = u64 [a3 + 0x10]\n 44838: a2 = u64 [a3 + 0x8]\n 44841: a3 = u64 [a3]\n 44843: a0 = reverse a0\n 44845: u64 [s1 + 0x98] = a0\n 44849: a0 = reverse a1\n 44851: u64 [s1 + 0x90] = a0\n 44855: a0 = reverse a2\n 44857: u64 [s1 + 0x88] = a0\n 44861: a0 = reverse a3\n 44863: u64 [s1 + 0x80] = a0\n 44867: a0 = sp + 0xffffffffffffffe0\n 44870: a0 = a0 & 0xffffffffffffffe0\n 44873: u64 [s1 + 0xc8] = a0\n 44877: sp = a0\n 44879: jump [t0]\n      : @1547 (gas: 9)\n 44881: a4 = u64 [s1 + 0xc8]\n 44885: a3 = u64 [s1 + 0xd0]\n 44889: a1 = u64 [s1 + 0xd8]\n 44893: a0 = u64 [s1 + 0xc0]\n 44897: a0 = a0 + 0xffffffffffffffdc\n 44900: a0 = a1 <u a0\n 44903: a0 = 0 if a3 != 0\n 44905: a0 = 0 if a4 != 0\n 44907: jump [t0]\n      : @1548 (gas: 14)\n 44909: a4 = u64 [s1 + 0x18]\n 44912: t2 = u64 [s1 + 0x48]\n 44915: ra = u64 [s1 + 0x50]\n 44918: t1 = u64 [s1 + 0x58]\n 44921: t1 = t1 + 0x1\n 44924: a0 = t1 <u 0x1\n 44927: ra = ra + a0\n 44930: a0 = t1 | ra\n 44933: a0 = a0 <u 0x1\n 44936: a1 = u64 [s1 + 0x40]\n 44939: a0 = a0 + a1\n 44942: a1 = a0 <u a1\n 44945: t2 = t2 + a1\n 44948: jump [t0]\n      : @1549 (gas: 4)\n 44950: s1 = 0xff - a2\n 44954: a0 = 0x80\n 44958: a2 = a0 - s1\n 44961: jump [t0]\n      : @1550 (gas: 15)\n 44963: a0 = u64 [a3 + 0x18]\n 44966: a1 = u64 [a3 + 0x10]\n 44969: a2 = u64 [a3 + 0x8]\n 44972: a3 = u64 [a3]\n 44974: a0 = reverse a0\n 44976: u64 [s1 + 0x98] = a0\n 44980: a0 = reverse a1\n 44982: u64 [s1 + 0x90] = a0\n 44986: a0 = reverse a2\n 44988: u64 [s1 + 0x88] = a0\n 44992: a0 = reverse a3\n 44994: u64 [s1 + 0x80] = a0\n 44998: a0 = sp + 0xffffffffffffffe0\n 45001: a0 = a0 & 0xffffffffffffffe0\n 45004: jump [t0]\n      : @1551 (gas: 8)\n 45006: u64 [sp + 144] = 0\n 45010: u64 [sp + 136] = 0\n 45014: u64 [sp + 128] = 0\n 45018: a0 = 0x8c379a000000000\n 45028: a1 = sp + 0x80\n 45032: u64 [sp + 0x98] = a0\n 45036: a0 = u64 [sp + 0x18]\n 45039: jump [t0]\n      : @1552 (gas: 15)\n 45041: a0 = u64 [a3 + 0x18]\n 45044: a1 = u64 [a3 + 0x10]\n 45047: a2 = u64 [a3 + 0x8]\n 45050: a3 = u64 [a3]\n 45052: a0 = reverse a0\n 45054: a4 = reverse a1\n 45056: a2 = reverse a2\n 45058: a3 = reverse a3\n 45060: a1 = u64 [s1 + 0x90]\n 45064: u64 [a1 + 0x18] = a3\n 45067: u64 [a1 + 0x10] = a2\n 45070: u64 [a1 + 0x8] = a4\n 45073: u64 [a1] = a0\n 45075: a0 = 0x3000\n 45079: jump [t0]\n      : @1553 (gas: 10)\n 45081: a0 = u64 [a3 + 0x18]\n 45084: a1 = u64 [a3 + 0x10]\n 45087: a2 = u64 [a3 + 0x8]\n 45090: a3 = u64 [a3]\n 45092: a0 = reverse a0\n 45094: a1 = reverse a1\n 45096: a2 = reverse a2\n 45098: a3 = reverse a3\n 45100: a4 = s1 + 0x3058\n 45104: jump [t0]\n      : @1554 (gas: 10)\n 45106: a0 = u64 [s1 + 0x40]\n 45109: a1 = u64 [s1 + 0x38]\n 45112: a0 = a0 | a1\n 45115: a1 = 0xffffffe0\n 45125: a3 = u64 [s1 + 0x50]\n 45128: a1 = a3 <u a1\n 45131: a2 = u64 [s1 + 0x48]\n 45134: a1 = 0 if a2 != 0\n 45136: a1 = 0 if a0 != 0\n 45138: jump [t0]\n      : @1555 (gas: 10)\n 45140: a0 = u64 [sp + 0x10]\n 45143: a1 = u64 [sp + 0x18]\n 45146: a2 = 0x100000000\n 45156: a2 = a2 ^ a0\n 45159: a2 = a2 | a1\n 45162: a3 = a0 >> 0x20\n 45165: a3 = a3 <u 0x1\n 45168: a3 = 0 if a1 != 0\n 45170: a3 = 0 if a2 == 0\n 45172: jump [t0]\n      : @1556 (gas: 8)\n 45174: a0 = u64 [sp + 0x18]\n 45177: i32 a0 = a0 + 0x4\n 45180: u64 [sp + 120] = 0\n 45183: u64 [sp + 112] = 0\n 45186: u64 [sp + 96] = 0x20\n 45190: a1 = sp + 0x60\n 45193: u64 [sp + 104] = 0\n 45196: jump [t0]\n      : @1557 (gas: 8)\n 45198: a0 = u64 [a4 + 0x18]\n 45201: a1 = u64 [a4 + 0x20]\n 45204: a2 = u64 [a4 + 0x10]\n 45207: a3 = u64 [a4 + 0x8]\n 45210: a1 = a1 | a2\n 45213: a0 = a0 | a3\n 45216: a0 = a0 | a1\n 45219: jump [t0]\n      : @1558 (gas: 4)\n 45221: a1 = reverse a1\n 45223: a2 = reverse a2\n 45225: a3 = reverse a3\n 45227: jump [t0]\n      : @1559 (gas: 11)\n 45229: a4 = a4 + a1\n 45232: a1 = a4 <u a1\n 45235: a1 = a1 + a5\n 45238: a1 = a1 | a2\n 45241: a2 = a0 | a4\n 45244: a2 = a2 | a1\n 45247: a1 = a1 | a4\n 45250: a2 = a2 >> 0x20\n 45253: a1 = a1 << 0x20\n 45256: a1 = a1 | a2\n 45259: jump [t0]\n      : @1560 (gas: 12)\n 45261: a1 = u64 [s1 + 0x98]\n 45265: a4 = u64 [s1 + 0x80]\n 45269: a0 = a1 | a4\n 45272: a2 = u64 [s1 + 0x90]\n 45276: a3 = u64 [s1 + 0x88]\n 45280: a2 = a2 | a3\n 45283: a0 = a0 | a2\n 45286: a0 = a0 >> 0x20\n 45289: a2 = a2 | a4\n 45292: a2 = a2 << 0x20\n 45295: a0 = a0 | a2\n 45298: jump [t0]\n      : @1561 (gas: 12)\n 45300: a4 = u64 [s1 + 0xc8]\n 45304: a2 = u64 [s1 + 0xc0]\n 45308: a0 = u64 [s1 + 0xd8]\n 45312: a0 = a0 | a4\n 45315: a3 = u64 [s1 + 0xd0]\n 45319: a1 = a2 | a3\n 45322: a1 = a1 | a0\n 45325: a1 = a1 >> 0x20\n 45328: a0 = a0 | a3\n 45331: a0 = a0 << 0x20\n 45334: a0 = a0 | a1\n 45337: jump [t0]\n      : @1562 (gas: 8)\n 45339: a3 = a3 | a2\n 45342: a2 = a0 | a1\n 45345: a2 = a2 | a3\n 45348: a2 = a2 >> 0x20\n 45351: a1 = a1 | a3\n 45354: a1 = a1 << 0x20\n 45357: a1 = a1 | a2\n 45360: jump [t0]\n      : @1563 (gas: 13)\n 45362: a1 = u64 [s1 + 0xc0]\n 45366: a2 = a1\n 45368: a0 = u64 [s1 + 0xd0]\n 45372: a0 = a0 | a1\n 45375: a3 = u64 [s1 + 0xc8]\n 45379: a1 = u64 [s1 + 0xd8]\n 45383: a1 = a1 | a3\n 45386: a1 = a1 | a0\n 45389: a1 = a1 >> 0x20\n 45392: a0 = a0 | a3\n 45395: a0 = a0 << 0x20\n 45398: a0 = a0 | a1\n 45401: jump [t0]\n      : @1564 (gas: 12)\n 45403: a1 = u64 [s1 + 0xc0]\n 45407: a0 = u64 [s1 + 0xd0]\n 45411: a2 = u64 [s1 + 0xd8]\n 45415: a0 = a0 | a2\n 45418: a3 = u64 [s1 + 0xc8]\n 45422: a2 = a1 | a3\n 45425: a2 = a2 | a0\n 45428: a2 = a2 >> 0x20\n 45431: a0 = a0 | a3\n 45434: a0 = a0 << 0x20\n 45437: a0 = a0 | a2\n 45440: jump [t0]\n      : @1565 (gas: 12)\n 45442: a2 = u64 [sp]\n 45444: a3 = u64 [sp + 0x8]\n 45447: u64 [s1] = a2\n 45449: u64 [s1 + 0x8] = a3\n 45452: u64 [s1 + 0x10] = a0\n 45455: u64 [s1 + 0x18] = a1\n 45458: sp = s0 + 0xffffffffffffffc0\n 45461: ra = u64 [sp + 0x38]\n 45464: s0 = u64 [sp + 0x30]\n 45467: s1 = u64 [sp + 0x28]\n 45470: sp = sp + 0x40\n 45473: jump [t0]\n      : @1566 (gas: 8)\n 45475: a0 = a0 | a2\n 45478: a2 = a3 | a1\n 45481: a2 = a2 | a0\n 45484: a2 = a2 >> 0x20\n 45487: a0 = a0 | a1\n 45490: a0 = a0 << 0x20\n 45493: a0 = a0 | a2\n 45496: jump [t0]\n      : @1567 (gas: 12)\n 45498: a0 = u64 [s1 + 0xb8]\n 45502: a1 = u64 [s1 + 0xa0]\n 45506: a0 = a0 & a1\n 45509: u64 [s1 + 0x78] = a0\n 45512: a1 = u64 [s1 + 0xa8]\n 45516: a1 = a1 & 0xffffffffffffffff\n 45519: u64 [s1 + 0xa0] = a1\n 45523: a1 = u64 [s1 + 0xb0]\n 45527: a0 = a1 & 0xffffffffffffffff\n 45530: u64 [s1 + 0xa8] = a0\n 45534: a0 = u64 [s1 + 0x80]\n 45538: jump [t0]\n      : @1568 (gas: 8)\n 45540: u64 [sp + 64] = 0\n 45543: u64 [sp + 56] = 0\n 45546: u64 [sp + 48] = 0\n 45549: a0 = 0x4e487b7100000000\n 45559: a1 = sp + 0x30\n 45562: u64 [sp + 0x48] = a0\n 45565: a0 = 0\n 45567: jump [t0]\n      : @1569 (gas: 10)\n 45569: a3 = s1 + a0\n 45572: a4 = a3 + 0x500\n 45576: a0 = u64 [a4 + 0x38]\n 45579: a1 = u64 [a4 + 0x40]\n 45582: a2 = u64 [a4 + 0x30]\n 45585: a3 = u64 [a4 + 0x28]\n 45588: a1 = a1 | a2\n 45591: a0 = a0 | a3\n 45594: a0 = a0 | a1\n 45597: jump [t0]\n      : @1570 (gas: 12)\n 45599: a0 = u64 [s1 + 0xb8]\n 45603: a2 = u64 [s1 + 0xa8]\n 45607: a0 = a0 | a2\n 45610: a1 = u64 [s1 + 0xb0]\n 45614: a3 = u64 [s1 + 0xa0]\n 45618: a1 = a1 | a3\n 45621: a0 = a0 | a1\n 45624: a0 = a0 >> 0x20\n 45627: a1 = a1 | a2\n 45630: a1 = a1 << 0x20\n 45633: a0 = a0 | a1\n 45636: jump [t0]\n      : @1571 (gas: 8)\n 45638: a0 = u64 [a4 + 0x98]\n 45642: a1 = u64 [a4 + 0xa0]\n 45646: a2 = u64 [a4 + 0x90]\n 45650: a3 = u64 [a4 + 0x88]\n 45654: a1 = a1 | a2\n 45657: a0 = a0 | a3\n 45660: a0 = a0 | a1\n 45663: jump [t0]\n      : @1572 (gas: 6)\n 45665: sp = s0 + 0xffffffffffffffa0\n 45668: ra = u64 [sp + 0x58]\n 45671: s0 = u64 [sp + 0x50]\n 45674: s1 = u64 [sp + 0x48]\n 45677: sp = sp + 0x60\n 45680: jump [t0]\n      : @1573 (gas: 7)\n 45682: a0 = u64 [a4 + 0xe8]\n 45686: a1 = u64 [a4 + 0xe0]\n 45690: a2 = u64 [a4 + 0xd8]\n 45694: a3 = u64 [a4 + 0xd0]\n 45698: a4 = s1 + 0x3058\n 45702: a5 = a4 + 0x600\n 45706: jump [t0]\n      : @1574 (gas: 9)\n 45708: sp = sp + 0xffffffffffffffc0\n 45711: u64 [sp + 0x38] = ra\n 45714: u64 [sp + 0x30] = s0\n 45717: u64 [sp + 0x28] = s1\n 45720: s0 = sp + 0x40\n 45723: sp = sp & 0xffffffffffffffe0\n 45726: s1 = a0\n 45728: i32 a0 = sp + 0\n 45730: jump [t0]\n      : @1575 (gas: 9)\n 45732: a2 = u64 [s1 + 0xc0]\n 45736: a0 = a2 >> 0x3b\n 45739: a1 = u64 [s1 + 0xd8]\n 45743: a1 = a1 << 0x5\n 45746: a1 = a1 | a0\n 45749: a2 = a2 << 0x5\n 45752: a0 = u64 [s1 + 0x80]\n 45756: t2 = a0 + 0x24\n 45759: jump [t0]\n      : @1576 (gas: 4)\n 45761: i32 a0 = a0 + 0xfffffffffffff858\n 45765: a3 = s1 + a0\n 45768: a4 = a3 + 0x400\n 45772: jump [t0]\n      : @1577 (gas: 4)\n 45774: i32 a0 = a0 + 0xfffffffffffff858\n 45778: a3 = s1 + a0\n 45781: a4 = a3 + 0x200\n 45785: jump [t0]\n      : @1578 (gas: 6)\n 45787: sp = s0 + 0xffffffffffffff20\n 45791: ra = u64 [sp + 0xd8]\n 45795: s0 = u64 [sp + 0xd0]\n 45799: s1 = u64 [sp + 0xc8]\n 45803: sp = sp + 0xe0\n 45807: jump [t0]\n      : @1579 (gas: 6)\n 45809: a0 = u64 [a3 + 0x18]\n 45812: a1 = u64 [a3 + 0x10]\n 45815: a2 = u64 [a3 + 0x8]\n 45818: a3 = u64 [a3]\n 45820: a0 = reverse a0\n 45822: jump [t0]\n      : @1580 (gas: 2)\n 45824: a3 = a2 & 0x40\n 45827: jump @1584 if a3 != 0\n      : @1581 (gas: 1)\n 45830: jump @1583 if a2 == 0\n      : @1582 (gas: 6)\n 45833: i32 a3 = 0x40 - a2\n 45836: a3 = a1 << a3\n 45839: a1 = a1 >> a2\n 45842: a0 = a0 >> a2\n 45845: a0 = a0 | a3\n 45848: ret\n      : @1583 (gas: 1)\n 45850: ret\n      : @1584 (gas: 4)\n 45852: a0 = a2 + 0xffffffffffffffc0\n 45855: a0 = a1 >> a0\n 45858: a1 = 0\n 45860: ret\n      : @1585 (gas: 2)\n 45862: a3 = a2 & 0x40\n 45865: jump @1589 if a3 != 0\n      : @1586 (gas: 1)\n 45868: jump @1588 if a2 == 0\n      : @1587 (gas: 6)\n 45871: i32 a3 = 0x40 - a2\n 45874: a3 = a0 >> a3\n 45877: a0 = a0 << a2\n 45880: a1 = a1 << a2\n 45883: a1 = a1 | a3\n 45886: ret\n      : @1588 (gas: 1)\n 45888: ret\n      : @1589 (gas: 4)\n 45890: a1 = a2 + 0xffffffffffffffc0\n 45893: a1 = a0 << a1\n 45896: a0 = 0\n 45898: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "amountInUSD(uint256)": "c7b8ea74",
              "approve(address,uint256)": "095ea7b3",
              "balanceOf(address)": "70a08231",
              "balanceOfInUSD(address)": "14e7ee41",
              "batchMint(address[],uint256[])": "68573107",
              "burn(uint256)": "42966c68",
              "decimals()": "313ce567",
              "decreaseAllowance(address,uint256)": "a457c2d7",
              "faucet(uint256)": "57915897",
              "increaseAllowance(address,uint256)": "39509351",
              "mint(address,uint256)": "40c10f19",
              "name()": "06fdde03",
              "owner()": "8da5cb5b",
              "symbol()": "95d89b41",
              "totalSupply()": "18160ddd",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd",
              "transferOwnership(address)": "f2fde38b"
            }
          },
          "irOptimized": "/// @use-src 0:\"contracts/MockUSDStableCoin.sol\"\nobject \"MockUSDStableCoin_779\" {\n    code {\n        {\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue() { revert(0, 0) }\n            /// @src 0:112:129  \"\\\"Mock USD Stable\\\"\"\n            let _1 := 0x00\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            let oldLen := extract_byte_array_length(sload(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00))\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            if gt(oldLen, 31)\n            {\n                mstore(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00, 0x00)\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                let data := keccak256(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20)\n                let deleteStart := add(data, 1)\n                deleteStart := data\n                let _2 := add(data, shr(5, add(oldLen, 31)))\n                let start := data\n                for { } lt(start, _2) { start := add(start, 1) }\n                {\n                    sstore(start, /** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00)\n                }\n            }\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            sstore(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ add(\"Mock USD Stable\", 30))\n            let oldLen_1 := extract_byte_array_length(sload(/** @src 0:158:164  \"\\\"MUSD\\\"\" */ 0x01))\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            if gt(oldLen_1, 31)\n            {\n                mstore(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00, /** @src 0:158:164  \"\\\"MUSD\\\"\" */ 0x01)\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                let data_1 := keccak256(/** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20)\n                let deleteStart_1 := add(data_1, /** @src 0:158:164  \"\\\"MUSD\\\"\" */ 0x01)\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                deleteStart_1 := data_1\n                let _3 := add(data_1, shr(5, add(oldLen_1, 31)))\n                let start_1 := data_1\n                for { }\n                lt(start_1, _3)\n                {\n                    start_1 := add(start_1, /** @src 0:158:164  \"\\\"MUSD\\\"\" */ 0x01)\n                }\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                {\n                    sstore(start_1, /** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00)\n                }\n            }\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            sstore(/** @src 0:158:164  \"\\\"MUSD\\\"\" */ 0x01, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ add(\"MUSD\", 8))\n            sstore(/** @src 0:194:195  \"6\" */ 0x02, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ or(and(sload(/** @src 0:194:195  \"6\" */ 0x02), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ not(255)), /** @src 0:194:195  \"6\" */ 0x06))\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            sstore(/** @src 0:194:195  \"6\" */ 0x06, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ or(and(sload(/** @src 0:194:195  \"6\" */ 0x06), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ not(sub(shl(160, 1), 1))), /** @src 0:736:746  \"msg.sender\" */ caller()))\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            _1 := /** @src 0:112:129  \"\\\"Mock USD Stable\\\"\" */ 0x00\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            _1 := /** @src -1:-1:-1 */ 0\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            mstore(/** @src -1:-1:-1 */ 0, /** @src 0:736:746  \"msg.sender\" */ caller())\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            mstore(0x20, 4)\n            sstore(keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 64), 0xe8d4a51000)\n            sstore(/** @src 0:921:948  \"totalSupply = initialSupply\" */ 0x03, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0xe8d4a51000)\n            /// @src 0:963:1010  \"Transfer(address(0), msg.sender, initialSupply)\"\n            let _4 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n            mstore(_4, 0xe8d4a51000)\n            /// @src 0:963:1010  \"Transfer(address(0), msg.sender, initialSupply)\"\n            log3(_4, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20, /** @src 0:963:1010  \"Transfer(address(0), msg.sender, initialSupply)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src -1:-1:-1 */ 0, /** @src 0:736:746  \"msg.sender\" */ caller())\n            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n            let _5 := mload(64)\n            let _6 := datasize(\"MockUSDStableCoin_779_deployed\")\n            codecopy(_5, dataoffset(\"MockUSDStableCoin_779_deployed\"), _6)\n            return(_5, _6)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := shr(1, data)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32))\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n        }\n    }\n    /// @use-src 0:\"contracts/MockUSDStableCoin.sol\"\n    object \"MockUSDStableCoin_779_deployed\" {\n        code {\n            {\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x06fdde03 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:91:129  \"string public name = \\\"Mock USD Stable\\\"\"\n                        let value := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0\n                        let slot := 0\n                        slot := 0\n                        let memPtr := mload(64)\n                        let ret := 0\n                        let slotValue := sload(0)\n                        let length := 0\n                        length := shr(1, slotValue)\n                        let outOfPlaceEncoding := and(slotValue, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr, length)\n                        switch outOfPlaceEncoding\n                        case 0 {\n                            mstore(add(memPtr, 32), and(slotValue, not(255)))\n                            ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, 0)\n                            let dataPos := keccak256(0, 32)\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 32) }\n                            {\n                                mstore(add(add(memPtr, i), 32), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(add(memPtr, i), 32)\n                        }\n                        finalize_allocation(memPtr, sub(ret, memPtr))\n                        value := memPtr\n                        let memPos := mload(64)\n                        return(memPos, sub(abi_encode_string(memPos, memPtr), memPos))\n                    }\n                    case 0x095ea7b3 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let value_1 := calldataload(36)\n                        mstore(0, /** @src 0:2157:2167  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2147:2156  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot := keccak256(0, 64)\n                        /// @src 0:2147:2177  \"allowance[msg.sender][spender]\"\n                        let dataSlot_1 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2147:2177  \"allowance[msg.sender][spender]\" */ value0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2147:2168  \"allowance[msg.sender]\" */ dataSlot)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_1 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        sstore(/** @src 0:2147:2177  \"allowance[msg.sender][spender]\" */ dataSlot_1, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ value_1)\n                        /// @src 0:2201:2238  \"Approval(msg.sender, spender, amount)\"\n                        let _1 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_1, value_1)\n                        /// @src 0:2201:2238  \"Approval(msg.sender, spender, amount)\"\n                        log3(_1, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:2201:2238  \"Approval(msg.sender, spender, amount)\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 0:2157:2167  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2201:2238  \"Approval(msg.sender, spender, amount)\" */ value0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, 1)\n                        return(memPos_1, 32)\n                    }\n                    case 0x14e7ee41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        let _2 := sload(keccak256(0, 64))\n                        let value_2 := and(sload(/** @src 0:5013:5021  \"decimals\" */ 0x02), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0xff)\n                        /// @src 0:4999:5021  \"balance / 10**decimals\"\n                        let expr := checked_div_uint256(_2, /** @src 0:5009:5021  \"10**decimals\" */ checked_exp_rational_by_uint8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ value_2))\n                        /// @src 0:5048:5070  \"balance % 10**decimals\"\n                        let expr_1 := mod_uint256(_2, /** @src 0:5058:5070  \"10**decimals\" */ checked_exp_rational_by_uint8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ value_2))\n                        /// @src 0:5047:5090  \"(balance % 10**decimals) / 10**(decimals-2)\"\n                        let expr_2 := checked_div_uint256(expr_1, /** @src 0:5074:5090  \"10**(decimals-2)\" */ checked_exp_rational_by_uint8(/** @src 0:5079:5089  \"decimals-2\" */ checked_sub_uint8(value_2)))\n                        /// @src 0:5131:5152  \"uintToString(dollars)\"\n                        let expr_mpos := fun_uintToString(expr)\n                        /// @src 0:5159:5179  \"centsToString(cents)\"\n                        let expr_mpos_1 := fun_centsToString(expr_2)\n                        /// @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        let expr_mpos_2 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        let length_1 := mload(expr_mpos)\n                        mcopy(/** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ add(expr_mpos_2, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32), add(expr_mpos, 32), length_1)\n                        let _3 := add(/** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ expr_mpos_2, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ length_1)\n                        mstore(add(_3, 32), \".\")\n                        let length_2 := mload(expr_mpos_1)\n                        mcopy(add(_3, 33), add(expr_mpos_1, 32), length_2)\n                        let _4 := add(add(_3, length_2), 32)\n                        mstore(add(_4, 1), 0)\n                        /// @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        let _5 := add(sub(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _4, /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ expr_mpos_2), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 1)\n                        /// @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        mstore(expr_mpos_2, add(_5, not(31)))\n                        finalize_allocation(expr_mpos_2, _5)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_2 := mload(64)\n                        return(memPos_2, sub(abi_encode_string(memPos_2, expr_mpos_2), memPos_2))\n                    }\n                    case 0x18160ddd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _6 := sload(/** @src 0:240:266  \"uint256 public totalSupply\" */ 3)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, _6)\n                        return(memPos_3, 32)\n                    }\n                    case 0x23b872dd {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        let value1 := abi_decode_address_11322()\n                        let value_3 := calldataload(68)\n                        let _7 := and(value0_1, sub(shl(160, 1), 1))\n                        mstore(0, _7)\n                        mstore(32, 4)\n                        /// @src 0:1641:1699  \"require(balanceOf[from] >= amount, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral(/** @src 0:1649:1674  \"balanceOf[from] >= amount\" */ iszero(lt(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(keccak256(0, 64)), /** @src 0:1649:1674  \"balanceOf[from] >= amount\" */ value_3)))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(0, _7)\n                        mstore(32, /** @src 0:1717:1726  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_2 := keccak256(0, 64)\n                        /// @src 0:1717:1744  \"allowance[from][msg.sender]\"\n                        let dataSlot_3 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:1733:1743  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:1717:1744  \"allowance[from][msg.sender]\" */ dataSlot_2)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_3 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        if /** @src 0:1717:1754  \"allowance[from][msg.sender] >= amount\" */ lt(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1717:1744  \"allowance[from][msg.sender]\" */ dataSlot_3), /** @src 0:1717:1754  \"allowance[from][msg.sender] >= amount\" */ value_3)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, 4), 32)\n                            mstore(add(memPtr_1, 36), 22)\n                            mstore(add(memPtr_1, 68), \"Insufficient allowance\")\n                            revert(memPtr_1, 100)\n                        }\n                        let _8 := and(/** @src 0:1799:1815  \"to != address(0)\" */ value1, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:1791:1851  \"require(to != address(0), \\\"Cannot transfer to zero address\\\")\"\n                        require_helper_stringliteral_bb6e(/** @src 0:1799:1815  \"to != address(0)\" */ iszero(iszero(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _8)))\n                        mstore(0, _7)\n                        mstore(32, 4)\n                        let dataSlot_4 := keccak256(0, 64)\n                        sstore(dataSlot_4, /** @src 0:1870:1895  \"balanceOf[from] -= amount\" */ checked_sub_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1870:1895  \"balanceOf[from] -= amount\" */ dataSlot_4), value_3))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(0, _8)\n                        mstore(32, 4)\n                        let dataSlot_5 := keccak256(0, 64)\n                        sstore(dataSlot_5, /** @src 0:1905:1928  \"balanceOf[to] += amount\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1905:1928  \"balanceOf[to] += amount\" */ dataSlot_5), value_3))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(0, _7)\n                        mstore(32, /** @src 0:1717:1726  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_6 := keccak256(0, 64)\n                        /// @src 0:1938:1965  \"allowance[from][msg.sender]\"\n                        let dataSlot_7 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:1733:1743  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:1938:1953  \"allowance[from]\" */ dataSlot_6)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_7 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        sstore(/** @src 0:1938:1965  \"allowance[from][msg.sender]\" */ dataSlot_7, /** @src 0:1938:1975  \"allowance[from][msg.sender] -= amount\" */ checked_sub_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1938:1965  \"allowance[from][msg.sender]\" */ dataSlot_7), /** @src 0:1938:1975  \"allowance[from][msg.sender] -= amount\" */ value_3))\n                        /// @src 0:1999:2025  \"Transfer(from, to, amount)\"\n                        let _9 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_9, value_3)\n                        /// @src 0:1999:2025  \"Transfer(from, to, amount)\"\n                        log3(_9, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:1999:2025  \"Transfer(from, to, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, _7, _8)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, 1)\n                        return(memPos_4, 32)\n                    }\n                    case 0x313ce567 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_4 := and(sload(/** @src 0:170:195  \"uint8 public decimals = 6\" */ 2), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0xff)\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, value_4)\n                        return(memPos_5, 32)\n                    }\n                    case 0x39509351 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        mstore(0, /** @src 0:2450:2460  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2440:2449  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_8 := keccak256(0, 64)\n                        /// @src 0:2440:2470  \"allowance[msg.sender][spender]\"\n                        let dataSlot_9 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2440:2470  \"allowance[msg.sender][spender]\" */ value0_2, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2440:2461  \"allowance[msg.sender]\" */ dataSlot_8)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_9 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        sstore(/** @src 0:2440:2470  \"allowance[msg.sender][spender]\" */ dataSlot_9, /** @src 0:2440:2484  \"allowance[msg.sender][spender] += addedValue\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:2440:2470  \"allowance[msg.sender][spender]\" */ dataSlot_9), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ calldataload(36)))\n                        mstore(0, /** @src 0:2450:2460  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2440:2449  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_10 := keccak256(0, 64)\n                        /// @src 0:2529:2559  \"allowance[msg.sender][spender]\"\n                        let dataSlot_11 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2529:2559  \"allowance[msg.sender][spender]\" */ value0_2, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2529:2550  \"allowance[msg.sender]\" */ dataSlot_10)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_11 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        let _10 := sload(/** @src 0:2529:2559  \"allowance[msg.sender][spender]\" */ dataSlot_11)\n                        /// @src 0:2499:2560  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\"\n                        let _11 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_11, _10)\n                        /// @src 0:2499:2560  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\"\n                        log3(_11, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:2499:2560  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 0:2450:2460  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2499:2560  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\" */ value0_2, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, 1)\n                        return(memPos_6, 32)\n                    }\n                    case 0x40c10f19 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_3 := abi_decode_address()\n                        let value_5 := calldataload(36)\n                        /// @src 0:1058:1124  \"require(msg.sender == owner, \\\"Only owner can perform this action\\\")\"\n                        require_helper_stringliteral_f119(/** @src 0:1066:1085  \"msg.sender == owner\" */ eq(/** @src 0:1066:1076  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(sload(/** @src 0:1080:1085  \"owner\" */ 0x06), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))))\n                        let _12 := and(/** @src 0:3171:3187  \"to != address(0)\" */ value0_3, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:3163:3219  \"require(to != address(0), \\\"Cannot mint to zero address\\\")\"\n                        require_helper_stringliteral_2ee0(/** @src 0:3171:3187  \"to != address(0)\" */ iszero(iszero(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _12)))\n                        mstore(0, _12)\n                        mstore(32, 4)\n                        let dataSlot_12 := keccak256(0, 64)\n                        sstore(dataSlot_12, /** @src 0:3238:3261  \"balanceOf[to] += amount\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:3238:3261  \"balanceOf[to] += amount\" */ dataSlot_12), value_5))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        sstore(/** @src 0:3271:3292  \"totalSupply += amount\" */ 0x03, checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:3271:3292  \"totalSupply += amount\" */ 0x03), value_5))\n                        /// @src 0:3316:3332  \"Mint(to, amount)\"\n                        let _13 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_13, value_5)\n                        /// @src 0:3316:3332  \"Mint(to, amount)\"\n                        log2(_13, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:3316:3332  \"Mint(to, amount)\" */ 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, _12)\n                        /// @src 0:3347:3379  \"Transfer(address(0), to, amount)\"\n                        let _14 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_14, value_5)\n                        /// @src 0:3347:3379  \"Transfer(address(0), to, amount)\"\n                        log3(_14, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:3347:3379  \"Transfer(address(0), to, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0, /** @src 0:3347:3379  \"Transfer(address(0), to, amount)\" */ _12)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        return(0, 0)\n                    }\n                    case 0x42966c68 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_6 := calldataload(4)\n                        mstore(0, /** @src 0:3496:3506  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, 4)\n                        if /** @src 0:3486:3517  \"balanceOf[msg.sender] >= amount\" */ lt(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(keccak256(0, 64)), /** @src 0:3486:3517  \"balanceOf[msg.sender] >= amount\" */ value_6)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            let memPtr_2 := mload(64)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, 4), 32)\n                            mstore(add(memPtr_2, 36), 28)\n                            mstore(add(memPtr_2, 68), \"Insufficient balance to burn\")\n                            revert(memPtr_2, 100)\n                        }\n                        mstore(0, /** @src 0:3496:3506  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, 4)\n                        let dataSlot_13 := keccak256(0, 64)\n                        sstore(dataSlot_13, /** @src 0:3569:3600  \"balanceOf[msg.sender] -= amount\" */ checked_sub_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:3569:3600  \"balanceOf[msg.sender] -= amount\" */ dataSlot_13), value_6))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        sstore(/** @src 0:3610:3631  \"totalSupply -= amount\" */ 0x03, checked_sub_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:3610:3631  \"totalSupply -= amount\" */ 0x03), value_6))\n                        /// @src 0:3655:3679  \"Burn(msg.sender, amount)\"\n                        let _15 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_15, value_6)\n                        /// @src 0:3655:3679  \"Burn(msg.sender, amount)\"\n                        log2(_15, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:3655:3679  \"Burn(msg.sender, amount)\" */ 0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, /** @src 0:3496:3506  \"msg.sender\" */ caller())\n                        /// @src 0:3694:3734  \"Transfer(msg.sender, address(0), amount)\"\n                        let _16 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_16, value_6)\n                        /// @src 0:3694:3734  \"Transfer(msg.sender, address(0), amount)\"\n                        log3(_16, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:3694:3734  \"Transfer(msg.sender, address(0), amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:3496:3506  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0)\n                        return(0, 0)\n                    }\n                    case 0x57915897 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_7 := calldataload(4)\n                        /// @src 0:3896:3908  \"10**decimals\"\n                        let _17 := checked_exp_rational_by_uint8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(sload(/** @src 0:3900:3908  \"decimals\" */ 0x02), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0xff))\n                        let product := mul(/** @src 0:3889:3893  \"1000\" */ 0x03e8, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _17)\n                        if iszero(eq(_17, div(product, /** @src 0:3889:3893  \"1000\" */ 0x03e8)))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 0x24)\n                        }\n                        if /** @src 0:3879:3908  \"amount <= 1000 * 10**decimals\" */ gt(value_7, product)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            let memPtr_3 := mload(64)\n                            mstore(memPtr_3, shl(229, 4594637))\n                            mstore(add(memPtr_3, 4), 32)\n                            mstore(add(memPtr_3, 36), 32)\n                            mstore(add(memPtr_3, 68), \"Faucet limit: 1000 MUSD per call\")\n                            revert(memPtr_3, 100)\n                        }\n                        mstore(0, /** @src 0:3974:3984  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, 4)\n                        let dataSlot_14 := keccak256(0, 64)\n                        sstore(dataSlot_14, /** @src 0:3964:3995  \"balanceOf[msg.sender] += amount\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:3964:3995  \"balanceOf[msg.sender] += amount\" */ dataSlot_14), value_7))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        sstore(/** @src 0:4005:4026  \"totalSupply += amount\" */ 0x03, checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:4005:4026  \"totalSupply += amount\" */ 0x03), value_7))\n                        /// @src 0:4050:4074  \"Mint(msg.sender, amount)\"\n                        let _18 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_18, value_7)\n                        /// @src 0:4050:4074  \"Mint(msg.sender, amount)\"\n                        log2(_18, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:4050:4074  \"Mint(msg.sender, amount)\" */ 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, /** @src 0:3974:3984  \"msg.sender\" */ caller())\n                        /// @src 0:4089:4129  \"Transfer(address(0), msg.sender, amount)\"\n                        let _19 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_19, value_7)\n                        /// @src 0:4089:4129  \"Transfer(address(0), msg.sender, amount)\"\n                        log3(_19, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:4089:4129  \"Transfer(address(0), msg.sender, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0, /** @src 0:3974:3984  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        return(0, 0)\n                    }\n                    case 0x68573107 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset, 35), calldatasize())) { revert(0, 0) }\n                        let length_3 := calldataload(add(4, offset))\n                        let _20 := array_allocation_size_array_address_dyn(length_3)\n                        let memPtr_4 := mload(64)\n                        finalize_allocation(memPtr_4, _20)\n                        let dst := memPtr_4\n                        mstore(memPtr_4, length_3)\n                        dst := add(memPtr_4, 0x20)\n                        let srcEnd := add(add(offset, shl(5, length_3)), 36)\n                        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n                        let src := add(offset, 36)\n                        for { } lt(src, srcEnd) { src := add(src, 0x20) }\n                        {\n                            let value_8 := 0\n                            value_8 := calldataload(src)\n                            if iszero(eq(value_8, and(value_8, sub(shl(160, 1), 1)))) { revert(0, 0) }\n                            mstore(dst, value_8)\n                            dst := add(dst, 0x20)\n                        }\n                        let offset_1 := calldataload(36)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(0, 0) }\n                        let length_4 := calldataload(add(4, offset_1))\n                        let _21 := array_allocation_size_array_address_dyn(length_4)\n                        let memPtr_5 := mload(64)\n                        finalize_allocation(memPtr_5, _21)\n                        let dst_1 := memPtr_5\n                        mstore(memPtr_5, length_4)\n                        dst_1 := add(memPtr_5, 0x20)\n                        let srcEnd_1 := add(add(offset_1, shl(5, length_4)), 36)\n                        if gt(srcEnd_1, calldatasize()) { revert(0, 0) }\n                        let src_1 := add(offset_1, 36)\n                        for { } lt(src_1, srcEnd_1) { src_1 := add(src_1, 0x20) }\n                        {\n                            mstore(dst_1, calldataload(src_1))\n                            dst_1 := add(dst_1, 0x20)\n                        }\n                        /// @src 0:1058:1124  \"require(msg.sender == owner, \\\"Only owner can perform this action\\\")\"\n                        require_helper_stringliteral_f119(/** @src 0:1066:1085  \"msg.sender == owner\" */ eq(/** @src 0:1066:1076  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(sload(/** @src 0:1080:1085  \"owner\" */ 0x06), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 0:4319:4336  \"recipients.length\"\n                        let expr_3 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(/** @src 0:4319:4336  \"recipients.length\" */ memPtr_4)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        if iszero(/** @src 0:4319:4354  \"recipients.length == amounts.length\" */ eq(expr_3, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(/** @src 0:4340:4354  \"amounts.length\" */ memPtr_5)))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            let memPtr_6 := mload(64)\n                            mstore(memPtr_6, shl(229, 4594637))\n                            mstore(add(memPtr_6, 4), 0x20)\n                            mstore(add(memPtr_6, 36), 22)\n                            mstore(add(memPtr_6, 68), \"Arrays length mismatch\")\n                            revert(memPtr_6, 100)\n                        }\n                        /// @src 0:4405:4418  \"uint256 i = 0\"\n                        let var_i := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0\n                        /// @src 0:4400:4773  \"for (uint256 i = 0; i < recipients.length; i++) {...\"\n                        for { }\n                        /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 1\n                        /// @src 0:4405:4418  \"uint256 i = 0\"\n                        {\n                            /// @src 0:4443:4446  \"i++\"\n                            var_i := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ add(/** @src 0:4443:4446  \"i++\" */ var_i, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 1)\n                        }\n                        /// @src 0:4443:4446  \"i++\"\n                        {\n                            /// @src 0:4420:4441  \"i < recipients.length\"\n                            if iszero(lt(var_i, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(/** @src 0:4424:4441  \"recipients.length\" */ memPtr_4)))\n                            /// @src 0:4420:4441  \"i < recipients.length\"\n                            { break }\n                            /// @src 0:4462:4529  \"require(recipients[i] != address(0), \\\"Cannot mint to zero address\\\")\"\n                            require_helper_stringliteral_2ee0(/** @src 0:4470:4497  \"recipients[i] != address(0)\" */ iszero(iszero(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(mload(/** @src 0:4470:4483  \"recipients[i]\" */ memory_array_index_access_address_dyn(memPtr_4, var_i)), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))))\n                            let _22 := mload(/** @src 0:4584:4594  \"amounts[i]\" */ memory_array_index_access_address_dyn(memPtr_5, var_i))\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            mstore(0, and(mload(/** @src 0:4566:4579  \"recipients[i]\" */ memory_array_index_access_address_dyn(memPtr_4, var_i)), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                            mstore(0x20, 4)\n                            let dataSlot_15 := keccak256(0, 64)\n                            sstore(dataSlot_15, /** @src 0:4556:4594  \"balanceOf[recipients[i]] += amounts[i]\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:4556:4594  \"balanceOf[recipients[i]] += amounts[i]\" */ dataSlot_15), _22))\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            sstore(/** @src 0:4608:4633  \"totalSupply += amounts[i]\" */ 0x03, checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:4608:4633  \"totalSupply += amounts[i]\" */ 0x03), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(/** @src 0:4623:4633  \"amounts[i]\" */ memory_array_index_access_address_dyn(memPtr_5, var_i))))\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            let cleaned := and(mload(/** @src 0:4670:4683  \"recipients[i]\" */ memory_array_index_access_address_dyn(memPtr_4, var_i)), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                            let _23 := mload(/** @src 0:4685:4695  \"amounts[i]\" */ memory_array_index_access_address_dyn(memPtr_5, var_i))\n                            /// @src 0:4665:4696  \"Mint(recipients[i], amounts[i])\"\n                            let _24 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                            mstore(_24, _23)\n                            /// @src 0:4665:4696  \"Mint(recipients[i], amounts[i])\"\n                            log2(_24, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20, /** @src 0:4665:4696  \"Mint(recipients[i], amounts[i])\" */ 0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, cleaned)\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            let cleaned_1 := and(mload(/** @src 0:4736:4749  \"recipients[i]\" */ memory_array_index_access_address_dyn(memPtr_4, var_i)), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                            let _25 := mload(/** @src 0:4751:4761  \"amounts[i]\" */ memory_array_index_access_address_dyn(memPtr_5, var_i))\n                            /// @src 0:4715:4762  \"Transfer(address(0), recipients[i], amounts[i])\"\n                            let _26 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                            mstore(_26, _25)\n                            /// @src 0:4715:4762  \"Transfer(address(0), recipients[i], amounts[i])\"\n                            log3(_26, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20, /** @src 0:4715:4762  \"Transfer(address(0), recipients[i], amounts[i])\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0, /** @src 0:4715:4762  \"Transfer(address(0), recipients[i], amounts[i])\" */ cleaned_1)\n                        }\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        return(0, 0)\n                    }\n                    case 0x70a08231 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        mstore(0, and(abi_decode_address(), sub(shl(160, 1), 1)))\n                        mstore(32, 4)\n                        let _27 := sload(keccak256(0, 64))\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, _27)\n                        return(memPos_7, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_9 := and(sload(/** @src 0:402:422  \"address public owner\" */ 6), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, value_9)\n                        return(memPos_8, 32)\n                    }\n                    case 0x95d89b41 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\"\n                        let value_10 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0\n                        let offset_2 := 0\n                        offset_2 := 0\n                        let memPtr_7 := mload(64)\n                        let ret_1 := 0\n                        let slotValue_1 := sload(/** @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\" */ 1)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let length_5 := 0\n                        length_5 := shr(/** @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\" */ 1, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ slotValue_1)\n                        let outOfPlaceEncoding_1 := and(slotValue_1, /** @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\" */ 1)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        if iszero(outOfPlaceEncoding_1)\n                        {\n                            length_5 := and(length_5, 0x7f)\n                        }\n                        if eq(outOfPlaceEncoding_1, lt(length_5, 32))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x22)\n                            revert(0, 0x24)\n                        }\n                        mstore(memPtr_7, length_5)\n                        switch outOfPlaceEncoding_1\n                        case 0 {\n                            mstore(add(memPtr_7, 32), and(slotValue_1, not(255)))\n                            ret_1 := add(add(memPtr_7, shl(5, iszero(iszero(length_5)))), 32)\n                        }\n                        case 1 {\n                            mstore(0, /** @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\" */ 1)\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            let dataPos_1 := keccak256(0, 32)\n                            let i_1 := 0\n                            for { } lt(i_1, length_5) { i_1 := add(i_1, 32) }\n                            {\n                                mstore(add(add(memPtr_7, i_1), 32), sload(dataPos_1))\n                                dataPos_1 := add(dataPos_1, /** @src 0:135:164  \"string public symbol = \\\"MUSD\\\"\" */ 1)\n                            }\n                            /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                            ret_1 := add(add(memPtr_7, i_1), 32)\n                        }\n                        finalize_allocation(memPtr_7, sub(ret_1, memPtr_7))\n                        value_10 := memPtr_7\n                        let memPos_9 := mload(64)\n                        return(memPos_9, sub(abi_encode_string(memPos_9, memPtr_7), memPos_9))\n                    }\n                    case 0xa457c2d7 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let value_11 := calldataload(36)\n                        mstore(0, /** @src 0:2738:2748  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2728:2737  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_16 := keccak256(0, 64)\n                        /// @src 0:2728:2758  \"allowance[msg.sender][spender]\"\n                        let dataSlot_17 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2728:2758  \"allowance[msg.sender][spender]\" */ value0_4, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2728:2749  \"allowance[msg.sender]\" */ dataSlot_16)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_17 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        let _28 := sload(/** @src 0:2728:2758  \"allowance[msg.sender][spender]\" */ dataSlot_17)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        if /** @src 0:2776:2811  \"currentAllowance >= subtractedValue\" */ lt(_28, value_11)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        {\n                            let memPtr_8 := mload(64)\n                            mstore(memPtr_8, shl(229, 4594637))\n                            mstore(add(memPtr_8, 4), 32)\n                            mstore(add(memPtr_8, 36), 30)\n                            mstore(add(memPtr_8, 68), \"Decreased allowance below zero\")\n                            revert(memPtr_8, 100)\n                        }\n                        /// @src 0:2889:2923  \"currentAllowance - subtractedValue\"\n                        let expr_4 := checked_sub_uint256(_28, value_11)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(0, /** @src 0:2738:2748  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2728:2737  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_18 := keccak256(0, 64)\n                        /// @src 0:2856:2886  \"allowance[msg.sender][spender]\"\n                        let dataSlot_19 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2856:2886  \"allowance[msg.sender][spender]\" */ value0_4, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2856:2877  \"allowance[msg.sender]\" */ dataSlot_18)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_19 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        sstore(/** @src 0:2856:2886  \"allowance[msg.sender][spender]\" */ dataSlot_19, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ expr_4)\n                        mstore(0, /** @src 0:2738:2748  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, /** @src 0:2728:2737  \"allowance\" */ 0x05)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_20 := keccak256(0, 64)\n                        /// @src 0:2968:2998  \"allowance[msg.sender][spender]\"\n                        let dataSlot_21 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2968:2998  \"allowance[msg.sender][spender]\" */ value0_4, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:2968:2989  \"allowance[msg.sender]\" */ dataSlot_20)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_21 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        let _29 := sload(/** @src 0:2968:2998  \"allowance[msg.sender][spender]\" */ dataSlot_21)\n                        /// @src 0:2938:2999  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\"\n                        let _30 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_30, _29)\n                        /// @src 0:2938:2999  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\"\n                        log3(_30, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:2938:2999  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\" */ 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, /** @src 0:2738:2748  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:2938:2999  \"Approval(msg.sender, spender, allowance[msg.sender][spender])\" */ value0_4, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, 1)\n                        return(memPos_10, 32)\n                    }\n                    case 0xa9059cbb {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let value_12 := calldataload(36)\n                        mstore(0, /** @src 0:1250:1260  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, 4)\n                        /// @src 0:1232:1296  \"require(balanceOf[msg.sender] >= amount, \\\"Insufficient balance\\\")\"\n                        require_helper_stringliteral(/** @src 0:1240:1271  \"balanceOf[msg.sender] >= amount\" */ iszero(lt(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(keccak256(0, 64)), /** @src 0:1240:1271  \"balanceOf[msg.sender] >= amount\" */ value_12)))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let _31 := and(/** @src 0:1314:1330  \"to != address(0)\" */ value0_5, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:1306:1366  \"require(to != address(0), \\\"Cannot transfer to zero address\\\")\"\n                        require_helper_stringliteral_bb6e(/** @src 0:1314:1330  \"to != address(0)\" */ iszero(iszero(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _31)))\n                        mstore(0, /** @src 0:1250:1260  \"msg.sender\" */ caller())\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(32, 4)\n                        let dataSlot_22 := keccak256(0, 64)\n                        sstore(dataSlot_22, /** @src 0:1385:1416  \"balanceOf[msg.sender] -= amount\" */ checked_sub_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1385:1416  \"balanceOf[msg.sender] -= amount\" */ dataSlot_22), value_12))\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(0, _31)\n                        mstore(32, 4)\n                        let dataSlot_23 := keccak256(0, 64)\n                        sstore(dataSlot_23, /** @src 0:1426:1449  \"balanceOf[to] += amount\" */ checked_add_uint256(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sload(/** @src 0:1426:1449  \"balanceOf[to] += amount\" */ dataSlot_23), value_12))\n                        /// @src 0:1473:1505  \"Transfer(msg.sender, to, amount)\"\n                        let _32 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        mstore(_32, value_12)\n                        /// @src 0:1473:1505  \"Transfer(msg.sender, to, amount)\"\n                        log3(_32, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32, /** @src 0:1473:1505  \"Transfer(msg.sender, to, amount)\" */ 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, /** @src 0:1250:1260  \"msg.sender\" */ caller(), /** @src 0:1473:1505  \"Transfer(msg.sender, to, amount)\" */ _31)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_11 := mload(64)\n                        mstore(memPos_11, 1)\n                        return(memPos_11, 32)\n                    }\n                    case 0xc7b8ea74 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_13 := calldataload(4)\n                        let value_14 := and(sload(/** @src 0:5314:5322  \"decimals\" */ 0x02), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0xff)\n                        /// @src 0:5301:5322  \"amount / 10**decimals\"\n                        let expr_5 := checked_div_uint256(value_13, /** @src 0:5310:5322  \"10**decimals\" */ checked_exp_rational_by_uint8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ value_14))\n                        /// @src 0:5349:5370  \"amount % 10**decimals\"\n                        let expr_6 := mod_uint256(value_13, /** @src 0:5358:5370  \"10**decimals\" */ checked_exp_rational_by_uint8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ value_14))\n                        /// @src 0:5348:5390  \"(amount % 10**decimals) / 10**(decimals-2)\"\n                        let expr_7 := checked_div_uint256(expr_6, /** @src 0:5374:5390  \"10**(decimals-2)\" */ checked_exp_rational_by_uint8(/** @src 0:5379:5389  \"decimals-2\" */ checked_sub_uint8(value_14)))\n                        /// @src 0:5431:5452  \"uintToString(dollars)\"\n                        let expr_mpos_3 := fun_uintToString(expr_5)\n                        /// @src 0:5459:5479  \"centsToString(cents)\"\n                        let expr_mpos_4 := fun_centsToString(expr_7)\n                        /// @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        let expr_mpos_5 := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                        let length_6 := mload(expr_mpos_3)\n                        mcopy(/** @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ add(expr_mpos_5, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 32), add(expr_mpos_3, 32), length_6)\n                        let _33 := add(/** @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ expr_mpos_5, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ length_6)\n                        mstore(add(_33, 32), \".\")\n                        let length_7 := mload(expr_mpos_4)\n                        mcopy(add(_33, 33), add(expr_mpos_4, 32), length_7)\n                        let _34 := add(add(_33, length_7), 32)\n                        mstore(add(_34, 1), 0)\n                        /// @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        let _35 := add(sub(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _34, /** @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ expr_mpos_5), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 1)\n                        /// @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        mstore(expr_mpos_5, add(_35, /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31)))\n                        /// @src 0:5414:5480  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\"\n                        finalize_allocation(expr_mpos_5, _35)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_12 := mload(64)\n                        return(memPos_12, sub(abi_encode_string(memPos_12, expr_mpos_5), memPos_12))\n                    }\n                    case 0xdd62ed3e {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0_6 := abi_decode_address()\n                        let value1_1 := abi_decode_address_11322()\n                        mstore(0, and(value0_6, sub(shl(160, 1), 1)))\n                        mstore(32, /** @src 0:327:391  \"mapping(address => mapping(address => uint256)) public allowance\" */ 5)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let dataSlot_24 := keccak256(0, 64)\n                        /// @src 0:327:391  \"mapping(address => mapping(address => uint256)) public allowance\"\n                        let dataSlot_25 := /** @src -1:-1:-1 */ 0\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(/** @src 0:327:391  \"mapping(address => mapping(address => uint256)) public allowance\" */ value1_1, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1)))\n                        mstore(0x20, /** @src 0:327:391  \"mapping(address => mapping(address => uint256)) public allowance\" */ dataSlot_24)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        dataSlot_25 := keccak256(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x40)\n                        let _36 := sload(/** @src 0:327:391  \"mapping(address => mapping(address => uint256)) public allowance\" */ dataSlot_25)\n                        /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                        let memPos_13 := mload(64)\n                        mstore(memPos_13, _36)\n                        return(memPos_13, 32)\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_7 := abi_decode_address()\n                        let _37 := sload(/** @src 0:1080:1085  \"owner\" */ 0x06)\n                        /// @src 0:1058:1124  \"require(msg.sender == owner, \\\"Only owner can perform this action\\\")\"\n                        require_helper_stringliteral_f119(/** @src 0:1066:1085  \"msg.sender == owner\" */ eq(/** @src 0:1066:1076  \"msg.sender\" */ caller(), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(_37, sub(shl(160, 1), 1))))\n                        let _38 := and(/** @src 0:6420:6442  \"newOwner != address(0)\" */ value0_7, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sub(shl(160, 1), 1))\n                        /// @src 0:6412:6478  \"require(newOwner != address(0), \\\"Cannot transfer to zero address\\\")\"\n                        require_helper_stringliteral_bb6e(/** @src 0:6420:6442  \"newOwner != address(0)\" */ iszero(iszero(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _38)))\n                        sstore(/** @src 0:1080:1085  \"owner\" */ 0x06, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ or(and(_37, shl(160, 0xffffffffffffffffffffffff)), _38))\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31)))\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                mstore(headStart, 32)\n                let length := mload(value0)\n                mstore(add(headStart, 32), length)\n                mcopy(add(headStart, 64), add(value0, 32), length)\n                mstore(add(add(headStart, length), 64), 0)\n                tail := add(add(headStart, and(add(length, 31), /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31))), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 64)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function abi_decode_address_11322() -> value\n            {\n                value := calldataload(36)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function array_allocation_size_array_address_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(shl(5, length), 0x20)\n            }\n            function checked_exp_rational_by_uint8(exponent) -> power\n            {\n                let exponent_1 := and(exponent, 0xff)\n                if gt(exponent_1, 77)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n                power := exp(10, exponent_1)\n            }\n            function checked_div_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := div(x, y)\n            }\n            function mod_uint256(x, y) -> r\n            {\n                if iszero(y)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x12)\n                    revert(0, 0x24)\n                }\n                r := mod(x, y)\n            }\n            function checked_sub_uint8(x) -> diff\n            {\n                diff := add(and(x, 0xff), not(1))\n                if gt(diff, 0xff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 20)\n                    mstore(add(memPtr, 68), \"Insufficient balance\")\n                    revert(memPtr, 100)\n                }\n            }\n            function require_helper_stringliteral_bb6e(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 31)\n                    mstore(add(memPtr, 68), \"Cannot transfer to zero address\")\n                    revert(memPtr, 100)\n                }\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                diff := sub(x, y)\n                if gt(diff, x)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function require_helper_stringliteral_f119(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 34)\n                    mstore(add(memPtr, 68), \"Only owner can perform this acti\")\n                    mstore(add(memPtr, 100), \"on\")\n                    revert(memPtr, 132)\n                }\n            }\n            function require_helper_stringliteral_2ee0(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 27)\n                    mstore(add(memPtr, 68), \"Cannot mint to zero address\")\n                    revert(memPtr, 100)\n                }\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(and(add(length, 31), /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31)), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x20)\n            }\n            /// @ast-id 728 @src 0:5544:6066  \"function uintToString(uint256 value) internal pure returns (string memory) {...\"\n            function fun_uintToString(var_value) -> var_mpos\n            {\n                /// @src 0:5604:5617  \"string memory\"\n                var_mpos := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 96\n                /// @src 0:5629:5655  \"if (value == 0) return \\\"0\\\"\"\n                if /** @src 0:5633:5643  \"value == 0\" */ iszero(var_value)\n                /// @src 0:5629:5655  \"if (value == 0) return \\\"0\\\"\"\n                {\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    let size := /** @src 0:5642:5643  \"0\" */ 0x00\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    let _1 := /** @src 0:5642:5643  \"0\" */ 0x00\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    _1 := /** @src 0:5642:5643  \"0\" */ 0x00\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    size := 64\n                    let memPtr := mload(64)\n                    finalize_allocation(memPtr, 64)\n                    mstore(memPtr, 1)\n                    mstore(add(memPtr, 32), \"0\")\n                    /// @src 0:5645:5655  \"return \\\"0\\\"\"\n                    var_mpos := memPtr\n                    leave\n                }\n                /// @src 0:5674:5694  \"uint256 temp = value\"\n                let var_temp := var_value\n                /// @src 0:5704:5718  \"uint256 digits\"\n                let var_digits := /** @src 0:5642:5643  \"0\" */ 0x00\n                /// @src 0:5704:5718  \"uint256 digits\"\n                var_digits := /** @src 0:5642:5643  \"0\" */ 0x00\n                /// @src 0:5728:5803  \"while (temp != 0) {...\"\n                for { }\n                /** @src 0:5735:5744  \"temp != 0\" */ var_temp\n                /// @src 0:5728:5803  \"while (temp != 0) {...\"\n                { }\n                {\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    if eq(var_digits, not(0))\n                    {\n                        mstore(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x24)\n                    }\n                    /// @src 0:5760:5768  \"digits++\"\n                    var_digits := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ add(var_digits, 1)\n                    /// @src 0:5782:5792  \"temp /= 10\"\n                    var_temp := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ div(var_temp, /** @src 0:5790:5792  \"10\" */ 0x0a)\n                }\n                /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                let _2 := array_allocation_size_string(var_digits)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _2)\n                mstore(memPtr_1, var_digits)\n                calldatacopy(add(memPtr_1, 32), calldatasize(), add(array_allocation_size_string(var_digits), /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31)))\n                /// @src 0:5870:6020  \"while (value != 0) {...\"\n                for { }\n                /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 1\n                /// @src 0:5870:6020  \"while (value != 0) {...\"\n                { }\n                {\n                    /// @src 0:5877:5887  \"value != 0\"\n                    let var_digits_1 := var_digits\n                    if iszero(var_value) { break }\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    let diff := add(var_digits, not(0))\n                    if gt(diff, var_digits)\n                    {\n                        mstore(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x24)\n                    }\n                    /// @src 0:5903:5914  \"digits -= 1\"\n                    var_digits := diff\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    let sum := add(/** @src 0:5958:5960  \"48\" */ 0x30, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mod(var_value, /** @src 0:5790:5792  \"10\" */ 0x0a))\n                    /// @src 0:58:6513  \"contract MockUSDStableCoin {...\"\n                    if gt(/** @src 0:5958:5960  \"48\" */ 0x30, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ sum)\n                    {\n                        mstore(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x24)\n                    }\n                    if iszero(lt(diff, mload(memPtr_1)))\n                    {\n                        mstore(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ shl(224, 0x4e487b71))\n                        mstore(4, 0x32)\n                        revert(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 0x24)\n                    }\n                    /// @src 0:5928:5984  \"buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))\"\n                    mstore8(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ add(add(memPtr_1, var_digits_1), 31), /** @src 0:5928:5984  \"buffer[digits] = bytes1(uint8(48 + uint256(value % 10)))\" */ byte(/** @src 0:5642:5643  \"0\" */ 0x00, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ and(shl(248, sum), shl(248, 255))))\n                    /// @src 0:5998:6009  \"value /= 10\"\n                    var_value := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ div(var_value, /** @src 0:5790:5792  \"10\" */ 0x0a)\n                }\n                /// @src 0:6038:6059  \"return string(buffer)\"\n                var_mpos := memPtr_1\n            }\n            /// @ast-id 756 @src 0:6076:6302  \"function centsToString(uint256 cents) internal pure returns (string memory) {...\"\n            function fun_centsToString(var_cents) -> var__mpos\n            {\n                /// @src 0:6137:6150  \"string memory\"\n                var__mpos := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 96\n                /// @src 0:6162:6260  \"if (cents < 10) {...\"\n                if /** @src 0:6166:6176  \"cents < 10\" */ lt(var_cents, /** @src 0:6174:6176  \"10\" */ 0x0a)\n                /// @src 0:6162:6260  \"if (cents < 10) {...\"\n                {\n                    /// @src 0:6228:6247  \"uintToString(cents)\"\n                    let expr_745_mpos := fun_uintToString(var_cents)\n                    /// @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\"\n                    let expr_746_mpos := /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ mload(64)\n                    mstore(/** @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\" */ add(expr_746_mpos, 0x20), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ \"0\")\n                    let length := mload(expr_745_mpos)\n                    mcopy(add(/** @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\" */ expr_746_mpos, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 33), add(expr_745_mpos, /** @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\" */ 0x20), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ length)\n                    let _1 := add(/** @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\" */ expr_746_mpos, /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ length)\n                    mstore(add(_1, 33), /** @src -1:-1:-1 */ 0)\n                    /// @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\"\n                    let _2 := add(sub(/** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ _1, /** @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\" */ expr_746_mpos), /** @src 0:58:6513  \"contract MockUSDStableCoin {...\" */ 33)\n                    /// @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\"\n                    mstore(expr_746_mpos, add(_2, /** @src 0:5114:5180  \"abi.encodePacked(uintToString(dollars), \\\".\\\", centsToString(cents))\" */ not(31)))\n                    /// @src 0:6206:6248  \"abi.encodePacked(\\\"0\\\", uintToString(cents))\"\n                    finalize_allocation(expr_746_mpos, _2)\n                    /// @src 0:6192:6249  \"return string(abi.encodePacked(\\\"0\\\", uintToString(cents)))\"\n                    var__mpos := expr_746_mpos\n                    leave\n                }\n                /// @src 0:6269:6295  \"return uintToString(cents)\"\n                var__mpos := /** @src 0:6276:6295  \"uintToString(cents)\" */ fun_uintToString(var_cents)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201a93c09f9295f20e3d3a9e02ed0363491d84afa57704ad56462e49f969b1d42964736f6c634300081c0033\"\n    }\n}\n",
          "hash": "67cf2522082dbacb00a6b679f435a7a17bf780e75ccfb99b262c166758e10a7d",
          "factoryDependencies": {}
        }
      },
      "contracts/OnChainExpenses.sol": {
        "IERC20": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "owner",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "spender",
                  "type": "address"
                }
              ],
              "name": "allowance",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "balanceOf",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transfer",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "name": "transferFrom",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnChainExpenses.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OnChainExpenses.sol\":{\"keccak256\":\"0xe96fb2ee98693baff4d12b988d9ab948ea7de4ae9ddcda89478c3c0effe105c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://48961b8bad8453a1a60bf2e1030fa1d2ea0c554616bb9abcfe56332f941b6893\",\"dweb:/ipfs/QmckwxZ5acLorpgHKxFNQQFXAk7ASTR1g8Vv6WJHJVLAhh\"]}},\"version\":1}",
          "evm": {
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "allowance(address,address)": "dd62ed3e",
              "balanceOf(address)": "70a08231",
              "transfer(address,uint256)": "a9059cbb",
              "transferFrom(address,address,uint256)": "23b872dd"
            }
          },
          "irOptimized": ""
        },
        "OnChainExpenses": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_iAppPublicKey",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "_stableCoinAddress",
                  "type": "address"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                }
              ],
              "name": "ExpenseCreated",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "ipfsHash",
                  "type": "string"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "string",
                  "name": "category",
                  "type": "string"
                }
              ],
              "name": "ItemAdded",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256[]",
                  "name": "itemIds",
                  "type": "uint256[]"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ],
              "name": "ItemsPaidBatch",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ],
              "name": "PaymentCompleted",
              "type": "event"
            },
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                }
              ],
              "name": "ReadyForReview",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_ipfsHash",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "_amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "_category",
                  "type": "string"
                }
              ],
              "name": "addExpenseItem",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256[]",
                  "name": "itemIds",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                }
              ],
              "name": "batchPayItems",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "string",
                  "name": "_title",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "_payer",
                  "type": "address"
                }
              ],
              "name": "createExpenseRequest",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                }
              ],
              "name": "getAllExpenseItems",
              "outputs": [
                {
                  "internalType": "string[]",
                  "name": "ipfsHashes",
                  "type": "string[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "string[]",
                  "name": "categories",
                  "type": "string[]"
                },
                {
                  "internalType": "bool[]",
                  "name": "paidStatus",
                  "type": "bool[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "timestamps",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                }
              ],
              "name": "getCreatorExpenses",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "getExpenseCounter",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemId",
                  "type": "uint256"
                }
              ],
              "name": "getExpenseItem",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "ipfsHash",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "category",
                  "type": "string"
                },
                {
                  "internalType": "bool",
                  "name": "paid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                }
              ],
              "name": "getExpenseRequest",
              "outputs": [
                {
                  "internalType": "string",
                  "name": "title",
                  "type": "string"
                },
                {
                  "internalType": "address",
                  "name": "creator",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "readyToReview",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "fullyPaid",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "totalPaidAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "itemCount",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "payer",
                  "type": "address"
                }
              ],
              "name": "getExpensesReadyForReview",
              "outputs": [
                {
                  "internalType": "uint256[]",
                  "name": "",
                  "type": "uint256[]"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                }
              ],
              "name": "getUnpaidTotal",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "iAppPublicKey",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "owner",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "expenseId",
                  "type": "uint256"
                }
              ],
              "name": "setReadyForReview",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [],
              "name": "stableCoin",
              "outputs": [
                {
                  "internalType": "contract IERC20",
                  "name": "",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_newIAppPublicKey",
                  "type": "address"
                }
              ],
              "name": "updateIAppPublicKey",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "_newStableCoinAddress",
                  "type": "address"
                }
              ],
              "name": "updateStableCoin",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iAppPublicKey\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stableCoinAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"}],\"name\":\"ExpenseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"ItemsPaidBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"ReadyForReview\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"addExpenseItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"itemIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"name\":\"batchPayItems\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_payer\",\"type\":\"address\"}],\"name\":\"createExpenseRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"getAllExpenseItems\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"categories\",\"type\":\"string[]\"},{\"internalType\":\"bool[]\",\"name\":\"paidStatus\",\"type\":\"bool[]\"},{\"internalType\":\"uint256[]\",\"name\":\"timestamps\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorExpenses\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpenseCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getExpenseItem\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"paid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"getExpenseRequest\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"readyToReview\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"fullyPaid\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalPaidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"itemCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"}],\"name\":\"getExpensesReadyForReview\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"getUnpaidTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"iAppPublicKey\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expenseId\",\"type\":\"uint256\"}],\"name\":\"setReadyForReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newIAppPublicKey\",\"type\":\"address\"}],\"name\":\"updateIAppPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStableCoinAddress\",\"type\":\"address\"}],\"name\":\"updateStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OnChainExpenses.sol\":\"OnChainExpenses\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OnChainExpenses.sol\":{\"keccak256\":\"0xe96fb2ee98693baff4d12b988d9ab948ea7de4ae9ddcda89478c3c0effe105c9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://48961b8bad8453a1a60bf2e1030fa1d2ea0c554616bb9abcfe56332f941b6893\",\"dweb:/ipfs/QmckwxZ5acLorpgHKxFNQQFXAk7ASTR1g8Vv6WJHJVLAhh\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 488/66080 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 16373\n// Code size = 59055 bytes\n\n      : @0 (gas: 1)\n     0: jump @14 if a0 == a1\n      : @1 (gas: 9)\n     3: a3 = a1 << 0x20\n     6: a3 = a3 >> 0x20\n     9: a4 = a0 << 0x20\n    12: a4 = a4 >> 0x20\n    15: a4 = a4 + a2\n    18: a3 = a3 - a4\n    21: a4 = a2 << 0x1\n    24: a4 = -a4\n    26: jump @7 if a4 >=u a3\n      : @2 (gas: 1)\n    29: jump @11 if a0 >=u a1\n      : @3 (gas: 1)\n    32: jump @14 if a2 == 0\n      : @4 (gas: 3)\n    35: a2 = a2 + a0\n    38: a3 = a0\n    40: fallthrough\n      : @5 (gas: 6)\n    41: a4 = u8 [a1]\n    43: a1 = a1 + 0x1\n    46: a5 = a3 + 0x1\n    49: u8 [a3] = a4\n    51: a3 = a5\n    53: jump @5 if a5 != a2\n      : @6 (gas: 1)\n    56: jump @14\n      : @7 (gas: 1)\n    58: jump @14 if a2 == 0\n      : @8 (gas: 3)\n    61: a2 = a2 + a0\n    64: a3 = a0\n    66: fallthrough\n      : @9 (gas: 6)\n    67: a4 = u8 [a1]\n    69: a1 = a1 + 0x1\n    72: a5 = a3 + 0x1\n    75: u8 [a3] = a4\n    77: a3 = a5\n    79: jump @9 if a5 != a2\n      : @10 (gas: 1)\n    82: jump @14\n      : @11 (gas: 1)\n    84: jump @14 if a2 == 0\n      : @12 (gas: 2)\n    87: i32 a3 = a2 + 0xffffffffffffffff\n    90: fallthrough\n      : @13 (gas: 7)\n    91: a4 = a1 + a3\n    94: a4 = u8 [a4]\n    96: a2 = a2 + 0xffffffffffffffff\n    99: a5 = a0 + a3\n   102: u8 [a5] = a4\n   104: i32 a3 = a3 + 0xffffffffffffffff\n   107: jump @13 if a2 != 0\n      : @14 (gas: 1)\n   110: ret\n      : @15 (gas: 2)\n   112: a1 = i32 [0x201f0]\n   117: jump @60 if a1 == 0\n      : @16 (gas: 4)\n   121: a0 = 0x30220\n   126: i32 a0 = a0 + 0\n   128: ecalli 14 // 'set_immutable_data'\n   130: jump @60\n      : @17 (gas: 8)\n   133: sp = sp + 0xfffffffffffffff0\n   136: u64 [sp + 0x8] = ra\n   139: u64 [sp] = s0\n   141: a2 = a1\n   143: s0 = a0\n   145: a1 = 0x20\n   148: a0 = a2\n   150: ra = 2, jump @28\n      : @18 [@dyn 1] (gas: 100)\n   155: a1 = u8 [a0 + 0x1]\n   158: a2 = u8 [a0]\n   160: a3 = u8 [a0 + 0x2]\n   163: a4 = u8 [a0 + 0x3]\n   166: a1 = a1 << 0x8\n   169: a1 = a1 | a2\n   172: a3 = a3 << 0x10\n   175: a4 = a4 << 0x18\n   178: a3 = a3 | a4\n   181: a1 = a1 | a3\n   184: a2 = u8 [a0 + 0x5]\n   187: a3 = u8 [a0 + 0x4]\n   190: a4 = u8 [a0 + 0x6]\n   193: a5 = u8 [a0 + 0x7]\n   196: a2 = a2 << 0x8\n   199: a2 = a2 | a3\n   202: a4 = a4 << 0x10\n   205: a5 = a5 << 0x18\n   208: a4 = a4 | a5\n   211: a2 = a2 | a4\n   214: a2 = a2 << 0x20\n   217: t0 = a2 | a1\n   220: a2 = u8 [a0 + 0x9]\n   223: a3 = u8 [a0 + 0x8]\n   226: a4 = u8 [a0 + 0xa]\n   229: a5 = u8 [a0 + 0xb]\n   232: a2 = a2 << 0x8\n   235: a2 = a2 | a3\n   238: a4 = a4 << 0x10\n   241: a5 = a5 << 0x18\n   244: a4 = a4 | a5\n   247: a2 = a2 | a4\n   250: a3 = u8 [a0 + 0xd]\n   253: a4 = u8 [a0 + 0xc]\n   256: a5 = u8 [a0 + 0xe]\n   259: a1 = u8 [a0 + 0xf]\n   262: a3 = a3 << 0x8\n   265: a3 = a3 | a4\n   268: a5 = a5 << 0x10\n   271: a1 = a1 << 0x18\n   274: a1 = a1 | a5\n   277: a1 = a1 | a3\n   280: a1 = a1 << 0x20\n   283: t1 = a1 | a2\n   286: a1 = u8 [a0 + 0x11]\n   289: a3 = u8 [a0 + 0x10]\n   292: a4 = u8 [a0 + 0x12]\n   295: a5 = u8 [a0 + 0x13]\n   298: a1 = a1 << 0x8\n   301: a1 = a1 | a3\n   304: a4 = a4 << 0x10\n   307: a5 = a5 << 0x18\n   310: a4 = a4 | a5\n   313: a1 = a1 | a4\n   316: a3 = u8 [a0 + 0x15]\n   319: a4 = u8 [a0 + 0x14]\n   322: a5 = u8 [a0 + 0x16]\n   325: a2 = u8 [a0 + 0x17]\n   328: a3 = a3 << 0x8\n   331: a3 = a3 | a4\n   334: a5 = a5 << 0x10\n   337: a2 = a2 << 0x18\n   340: a2 = a2 | a5\n   343: a2 = a2 | a3\n   346: a2 = a2 << 0x20\n   349: a3 = a2 | a1\n   352: a1 = u8 [a0 + 0x19]\n   355: a2 = u8 [a0 + 0x18]\n   358: a4 = u8 [a0 + 0x1a]\n   361: a5 = u8 [a0 + 0x1b]\n   364: a1 = a1 << 0x8\n   367: a1 = a1 | a2\n   370: a4 = a4 << 0x10\n   373: a5 = a5 << 0x18\n   376: a4 = a4 | a5\n   379: a1 = a1 | a4\n   382: a2 = u8 [a0 + 0x1d]\n   385: a4 = u8 [a0 + 0x1c]\n   388: a5 = u8 [a0 + 0x1e]\n   391: a0 = u8 [a0 + 0x1f]\n   394: a2 = a2 << 0x8\n   397: a2 = a2 | a4\n   400: a5 = a5 << 0x10\n   403: a0 = a0 << 0x18\n   406: a0 = a0 | a5\n   409: a0 = a0 | a2\n   412: a0 = a0 << 0x20\n   415: a0 = a0 | a1\n   418: a0 = reverse a0\n   420: a1 = reverse a3\n   422: a2 = reverse t1\n   424: a3 = reverse t0\n   426: u64 [s0 + 0x18] = a3\n   429: u64 [s0 + 0x10] = a2\n   432: u64 [s0 + 0x8] = a1\n   435: u64 [s0] = a0\n   437: ra = u64 [sp + 0x8]\n   440: s0 = u64 [sp]\n   442: sp = sp + 0x10\n   445: ret\n      : @19 (gas: 12)\n   447: sp = sp + 0xffffffffffffffd8\n   450: u64 [sp + 0x20] = ra\n   453: u64 [sp + 0x18] = s0\n   456: u64 [sp + 0x10] = s1\n   459: a2 = u64 [a1]\n   461: u64 [sp + 0x8] = a2\n   464: a2 = u64 [a1 + 0x8]\n   467: u64 [sp] = a2\n   469: s0 = u64 [a1 + 0x10]\n   472: s1 = u64 [a1 + 0x18]\n   475: a1 = 0x20\n   478: ra = 4, jump @28\n      : @20 [@dyn 2] (gas: 71)\n   483: a1 = reverse s1\n   485: a2 = reverse s0\n   487: a3 = u64 [sp]\n   489: a3 = reverse a3\n   491: a4 = u64 [sp + 0x8]\n   494: a4 = reverse a4\n   496: u8 [a0 + 0x18] = a4\n   499: u8 [a0 + 0x10] = a3\n   502: u8 [a0 + 0x8] = a2\n   505: u8 [a0] = a1\n   507: a5 = a4 >> 0x38\n   510: u8 [a0 + 0x1f] = a5\n   513: a5 = a4 >> 0x30\n   516: u8 [a0 + 0x1e] = a5\n   519: a5 = a4 >> 0x28\n   522: u8 [a0 + 0x1d] = a5\n   525: a5 = a4 >> 0x20\n   528: u8 [a0 + 0x1c] = a5\n   531: a5 = a4 >> 0x18\n   534: u8 [a0 + 0x1b] = a5\n   537: a5 = a4 >> 0x10\n   540: u8 [a0 + 0x1a] = a5\n   543: a4 = a4 >> 0x8\n   546: u8 [a0 + 0x19] = a4\n   549: a4 = a3 >> 0x38\n   552: u8 [a0 + 0x17] = a4\n   555: a4 = a3 >> 0x30\n   558: u8 [a0 + 0x16] = a4\n   561: a4 = a3 >> 0x28\n   564: u8 [a0 + 0x15] = a4\n   567: a4 = a3 >> 0x20\n   570: u8 [a0 + 0x14] = a4\n   573: a4 = a3 >> 0x18\n   576: u8 [a0 + 0x13] = a4\n   579: a4 = a3 >> 0x10\n   582: u8 [a0 + 0x12] = a4\n   585: a3 = a3 >> 0x8\n   588: u8 [a0 + 0x11] = a3\n   591: a3 = a2 >> 0x38\n   594: u8 [a0 + 0xf] = a3\n   597: a3 = a2 >> 0x30\n   600: u8 [a0 + 0xe] = a3\n   603: a3 = a2 >> 0x28\n   606: u8 [a0 + 0xd] = a3\n   609: a3 = a2 >> 0x20\n   612: u8 [a0 + 0xc] = a3\n   615: a3 = a2 >> 0x18\n   618: u8 [a0 + 0xb] = a3\n   621: a3 = a2 >> 0x10\n   624: u8 [a0 + 0xa] = a3\n   627: a2 = a2 >> 0x8\n   630: u8 [a0 + 0x9] = a2\n   633: a2 = a1 >> 0x38\n   636: u8 [a0 + 0x7] = a2\n   639: a2 = a1 >> 0x30\n   642: u8 [a0 + 0x6] = a2\n   645: a2 = a1 >> 0x28\n   648: u8 [a0 + 0x5] = a2\n   651: a2 = a1 >> 0x20\n   654: u8 [a0 + 0x4] = a2\n   657: a2 = a1 >> 0x18\n   660: u8 [a0 + 0x3] = a2\n   663: a2 = a1 >> 0x10\n   666: u8 [a0 + 0x2] = a2\n   669: a1 = a1 >> 0x8\n   672: u8 [a0 + 0x1] = a1\n   675: ra = u64 [sp + 0x20]\n   678: s0 = u64 [sp + 0x18]\n   681: s1 = u64 [sp + 0x10]\n   684: sp = sp + 0x28\n   687: ret\n      : @21 (gas: 43)\n   689: sp = sp + 0xffffffffffffffa0\n   692: u64 [sp + 0x58] = ra\n   695: u64 [sp + 0x50] = s0\n   698: u64 [sp + 0x48] = s1\n   701: s0 = sp + 0x60\n   704: sp = sp & 0xffffffffffffffe0\n   707: s1 = a0\n   709: a0 = u64 [a1 + 0x18]\n   712: a2 = u64 [a1 + 0x10]\n   715: a3 = u64 [a1 + 0x8]\n   718: a1 = u64 [a1]\n   720: a0 = reverse a0\n   722: a2 = reverse a2\n   724: a3 = reverse a3\n   726: a1 = reverse a1\n   728: u64 [sp + 0x18] = a1\n   731: u64 [sp + 0x10] = a3\n   734: u64 [sp + 0x8] = a2\n   737: u64 [sp] = a0\n   739: u64 [sp + 56] = 0\n   742: u64 [sp + 48] = 0\n   745: u64 [sp + 40] = 0\n   748: u64 [sp + 32] = 0\n   751: u32 [sp + 64] = 0x20\n   755: i32 a1 = sp + 0\n   757: i32 a3 = sp + 0x20\n   760: i32 a4 = sp + 0x40\n   763: a2 = 0xffffffffffffffff\n   766: a0 = 0\n   768: ecalli 7 // 'get_storage'\n   770: a0 = u64 [sp + 0x38]\n   773: a1 = u64 [sp + 0x30]\n   776: a2 = u64 [sp + 0x28]\n   779: a3 = u64 [sp + 0x20]\n   782: a0 = reverse a0\n   784: a1 = reverse a1\n   786: a2 = reverse a2\n   788: a3 = reverse a3\n   790: u64 [s1 + 0x18] = a3\n   793: u64 [s1 + 0x10] = a2\n   796: u64 [s1 + 0x8] = a1\n   799: u64 [s1] = a0\n   801: t0 = 6, jump @2030\n      : @22 [@dyn 3] (gas: 1)\n   807: ret\n      : @23 (gas: 40)\n   809: sp = sp + 0xffffffffffffffa0\n   812: u64 [sp + 0x58] = ra\n   815: u64 [sp + 0x50] = s0\n   818: s0 = sp + 0x60\n   821: sp = sp & 0xffffffffffffffe0\n   824: t0 = u64 [a0]\n   826: a3 = u64 [a0 + 0x8]\n   829: a4 = u64 [a0 + 0x10]\n   832: a0 = u64 [a0 + 0x18]\n   835: t1 = u64 [a1]\n   837: a2 = u64 [a1 + 0x8]\n   840: a5 = u64 [a1 + 0x10]\n   843: a1 = u64 [a1 + 0x18]\n   846: t2 = reverse a0\n   848: a4 = reverse a4\n   850: a3 = reverse a3\n   852: a0 = reverse t0\n   854: t0 = reverse a1\n   856: a5 = reverse a5\n   858: a2 = reverse a2\n   860: a1 = reverse t1\n   862: u64 [sp + 0x18] = a0\n   865: u64 [sp + 0x10] = a3\n   868: u64 [sp + 0x8] = a4\n   871: u64 [sp] = t2\n   873: u64 [sp + 0x38] = a1\n   876: u64 [sp + 0x30] = a2\n   879: u64 [sp + 0x28] = a5\n   882: u64 [sp + 0x20] = t0\n   885: i32 a1 = sp + 0\n   887: i32 a3 = sp + 0x20\n   890: a2 = 0xffffffffffffffff\n   893: a4 = 0x20\n   896: a0 = 0\n   898: ecalli 15 // 'set_storage'\n   900: sp = s0 + 0xffffffffffffffa0\n   903: ra = u64 [sp + 0x58]\n   906: s0 = u64 [sp + 0x50]\n   909: sp = sp + 0x60\n   912: ret\n      : @24 (gas: 24)\n   914: sp = sp + 0xffffffffffffff60\n   918: u64 [sp + 0x98] = ra\n   922: u64 [sp + 0x90] = s0\n   926: u64 [sp + 0x88] = s1\n   930: s0 = sp + 0xa0\n   934: sp = sp & 0xffffffffffffffe0\n   937: a4 = u64 [a3]\n   939: u64 [sp + 0x38] = a4\n   942: a4 = u64 [a3 + 0x8]\n   945: u64 [sp + 0x30] = a4\n   948: a4 = u64 [a3 + 0x10]\n   951: u64 [sp + 0x28] = a4\n   954: a3 = u64 [a3 + 0x18]\n   957: u64 [sp + 0x20] = a3\n   960: a3 = u64 [a2]\n   962: u64 [sp + 0x18] = a3\n   965: a3 = u64 [a2 + 0x8]\n   968: u64 [sp + 0x10] = a3\n   971: a3 = u64 [a2 + 0x10]\n   974: u64 [sp + 0x8] = a3\n   977: a2 = u64 [a2 + 0x18]\n   980: u64 [sp] = a2\n   982: s1 = a1\n   984: ra = 8, jump @28\n      : @25 [@dyn 4] (gas: 35)\n   989: a1 = u64 [sp]\n   991: a1 = reverse a1\n   993: a2 = u64 [sp + 0x8]\n   996: a2 = reverse a2\n   998: a3 = u64 [sp + 0x10]\n  1001: a3 = reverse a3\n  1003: a4 = u64 [sp + 0x18]\n  1006: a4 = reverse a4\n  1008: u64 [sp + 0x58] = a4\n  1011: u64 [sp + 0x50] = a3\n  1014: u64 [sp + 0x48] = a2\n  1017: u64 [sp + 0x40] = a1\n  1020: a1 = u64 [sp + 0x20]\n  1023: a1 = reverse a1\n  1025: a2 = u64 [sp + 0x28]\n  1028: a2 = reverse a2\n  1030: a3 = u64 [sp + 0x30]\n  1033: a3 = reverse a3\n  1035: a4 = u64 [sp + 0x38]\n  1038: a4 = reverse a4\n  1040: u64 [sp + 0x78] = a4\n  1043: u64 [sp + 0x70] = a3\n  1046: u64 [sp + 0x68] = a2\n  1049: u64 [sp + 0x60] = a1\n  1052: i32 a2 = a0 + 0\n  1054: i32 a3 = s1 + 0\n  1056: i32 a0 = sp + 0x40\n  1059: a1 = 0x2\n  1062: ecalli 6 // 'deposit_event'\n  1064: sp = s0 + 0xffffffffffffff60\n  1068: ra = u64 [sp + 0x98]\n  1072: s0 = u64 [sp + 0x90]\n  1076: s1 = u64 [sp + 0x88]\n  1080: sp = sp + 0xa0\n  1084: ret\n      : @26 [@dyn 5] (gas: 2)\n  1086: u64 [sp + 0x58] = a1\n  1089: ra = 12, jump @28\n      : @27 [@dyn 6] (gas: 58)\n  1094: a1 = reverse s1\n  1096: u64 [sp + 0x98] = a1\n  1100: a1 = u64 [sp]\n  1102: a1 = reverse a1\n  1104: u64 [sp + 0x90] = a1\n  1108: a1 = u64 [sp + 0x8]\n  1111: a1 = reverse a1\n  1113: u64 [sp + 0x88] = a1\n  1117: a1 = u64 [sp + 0x10]\n  1120: a1 = reverse a1\n  1122: u64 [sp + 0x80] = a1\n  1126: a1 = u64 [sp + 0x18]\n  1129: a1 = reverse a1\n  1131: u64 [sp + 0xb8] = a1\n  1135: a1 = u64 [sp + 0x20]\n  1138: a1 = reverse a1\n  1140: u64 [sp + 0xb0] = a1\n  1144: a1 = u64 [sp + 0x28]\n  1147: a1 = reverse a1\n  1149: u64 [sp + 0xa8] = a1\n  1153: a1 = u64 [sp + 0x30]\n  1156: a1 = reverse a1\n  1158: u64 [sp + 0xa0] = a1\n  1162: a1 = u64 [sp + 0x38]\n  1165: a1 = reverse a1\n  1167: u64 [sp + 0xd8] = a1\n  1171: a1 = u64 [sp + 0x40]\n  1174: a1 = reverse a1\n  1176: u64 [sp + 0xd0] = a1\n  1180: a1 = u64 [sp + 0x48]\n  1183: a1 = reverse a1\n  1185: u64 [sp + 0xc8] = a1\n  1189: a1 = u64 [sp + 0x50]\n  1192: a1 = reverse a1\n  1194: u64 [sp + 0xc0] = a1\n  1198: a1 = u64 [sp + 0x60]\n  1201: a1 = reverse a1\n  1203: u64 [sp + 0xf8] = a1\n  1207: a1 = u64 [sp + 0x68]\n  1210: a1 = reverse a1\n  1212: u64 [sp + 0xf0] = a1\n  1216: a1 = u64 [sp + 0x70]\n  1219: a1 = reverse a1\n  1221: u64 [sp + 0xe8] = a1\n  1225: a1 = u64 [sp + 0x78]\n  1228: a1 = reverse a1\n  1230: u64 [sp + 0xe0] = a1\n  1234: i32 a2 = a0 + 0\n  1236: a3 = i32 [sp + 0x58]\n  1239: i32 a0 = sp + 0x80\n  1243: a1 = 0x4\n  1246: ecalli 6 // 'deposit_event'\n  1248: sp = s0 + 0xfffffffffffffee0\n  1252: ra = u64 [sp + 0x118]\n  1256: s0 = u64 [sp + 0x110]\n  1260: s1 = u64 [sp + 0x108]\n  1264: sp = sp + 0x120\n  1268: ret\n      : @28 (gas: 2)\n  1270: i32 a2 = a0 >> 0x10\n  1273: jump @33 if a2 != 0\n      : @29 (gas: 4)\n  1276: a1 = a1 + a0\n  1279: i32 a1 = a1 + 0x1f\n  1282: a1 = a1 & 0xffffffffffffffe0\n  1285: jump @33 if a1 >u 65536\n      : @30 (gas: 3)\n  1291: a2 = 0x201ec\n  1296: a3 = i32 [0x201ec]\n  1301: jump @32 if a3 >=u a1\n      : @31 (gas: 2)\n  1304: u32 [0x201ec] = a1\n  1309: fallthrough\n      : @32 (gas: 4)\n  1310: a1 = 0x20200\n  1315: i32 a0 = a0 + 0\n  1317: a0 = a0 + a1\n  1320: ret\n      : @33 (gas: 1)\n  1322: trap\n      : @34 (gas: 6)\n  1323: sp = sp + 0xfffffffffffffff0\n  1326: u64 [sp + 0x8] = ra\n  1329: u64 [sp] = s0\n  1331: s0 = a0 & 0x1\n  1334: ecalli 4 // 'call_data_size'\n  1336: fallthrough\n      : @35 (gas: 2)\n  1337: u32 [0x201e8] = a0\n  1342: jump @37 if s0 == 0\n      : @36 (gas: 1)\n  1345: ra = 14, jump @38\n      : @37 [@dyn 7] (gas: 1)\n  1349: ra = 16, jump @63\n      : @38 [@dyn 8] (gas: 14)\n  1354: sp = sp + 0xfffffffffffffd00\n  1358: a0 = sp + 0x200\n  1362: u64 [a0 + 0xf8] = ra\n  1366: u64 [a0 + 0xf0] = s0\n  1370: u64 [a0 + 0xe8] = s1\n  1374: s0 = sp + 0x300\n  1378: sp = sp & 0xffffffffffffffe0\n  1381: u64 [sp + 376] = 0\n  1385: u64 [sp + 368] = 0\n  1389: u64 [sp + 360] = 0\n  1393: u64 [sp + 352] = 0\n  1397: i32 a0 = sp + 0x160\n  1401: ecalli 16 // 'value_transferred'\n  1403: fallthrough\n      : @39 (gas: 8)\n  1404: a0 = u64 [sp + 0x170]\n  1408: a1 = u64 [sp + 0x178]\n  1412: a2 = u64 [sp + 0x168]\n  1416: a3 = u64 [sp + 0x160]\n  1420: a1 = a1 | a2\n  1423: a0 = a0 | a3\n  1426: a0 = a0 | a1\n  1429: jump @56 if a0 != 0\n      : @40 (gas: 15)\n  1433: s1 = i32 [0x201e8]\n  1438: a0 = s1 << 0x20\n  1441: a0 = a0 >> 0x20\n  1444: a0 = a0 + 0x1f\n  1447: a0 = a0 & 0xffffffffffffffe0\n  1450: a1 = a0 + 0x80\n  1454: a0 = a1 <u a0\n  1457: u64 [sp + 344] = 0\n  1461: u64 [sp + 0x140] = a1\n  1465: u64 [sp + 0x148] = a0\n  1469: a0 = 0 if a0 != 0\n  1471: u64 [sp + 0x150] = a0\n  1475: a0 = 0x40\n  1478: a1 = sp + 0x140\n  1482: ra = 18, jump @19\n      : @41 [@dyn 9] (gas: 3)\n  1487: a0 = 0x80\n  1491: a1 = s1\n  1493: ra = 20, jump @28\n      : @42 [@dyn 10] (gas: 5)\n  1498: i32 a0 = a0 + 0\n  1500: a1 = s1\n  1502: a2 = 0\n  1504: ecalli 2 // 'call_data_copy'\n  1506: fallthrough\n      : @43 (gas: 1)\n  1507: jump @57 if s1 <u 64\n      : @44 (gas: 7)\n  1512: u64 [sp + 280] = 0\n  1516: u64 [sp + 272] = 0\n  1520: u64 [sp + 256] = 0x80\n  1526: a0 = sp + 0x120\n  1530: a1 = sp + 0x100\n  1534: u64 [sp + 264] = 0\n  1538: ra = 22, jump @1699\n      : @45 [@dyn 11] (gas: 13)\n  1544: a0 = u64 [sp + 0x120]\n  1548: u64 [sp + 0x20] = a0\n  1551: a0 = u64 [sp + 0x128]\n  1555: u64 [sp + 0x18] = a0\n  1558: a0 = u32 [sp + 0x130]\n  1562: u64 [sp + 0x10] = a0\n  1565: u64 [sp + 216] = 0\n  1569: u64 [sp + 208] = 0\n  1573: u64 [sp + 192] = 0xa0\n  1579: a0 = sp + 0xe0\n  1583: a1 = sp + 0xc0\n  1587: u64 [sp + 200] = 0\n  1591: ra = 24, jump @1699\n      : @46 [@dyn 12] (gas: 31)\n  1597: a0 = u64 [sp + 0xe0]\n  1601: u64 [sp + 0x38] = a0\n  1604: a0 = u64 [sp + 0xe8]\n  1608: u64 [sp + 0x30] = a0\n  1611: a0 = u32 [sp + 0xf0]\n  1615: u64 [sp + 0x28] = a0\n  1618: s1 = 0x30200\n  1623: i32 a0 = s1 + 0\n  1625: ecalli 5 // 'caller'\n  1627: a0 = u64 [0x30208]\n  1632: a1 = i32 [0x30210]\n  1637: a2 = u64 [0x30200]\n  1642: a0 = reverse a0\n  1644: a3 = a0 << 0x20\n  1647: a1 = reverse a1\n  1649: a1 = a1 >> 0x20\n  1652: a1 = a1 | a3\n  1655: u64 [sp + 0x8] = a1\n  1658: a0 = a0 >> 0x20\n  1661: a1 = reverse a2\n  1663: s1 = a1 << 0x20\n  1666: a0 = a0 | s1\n  1669: u64 [sp] = a0\n  1671: s1 = a1 >> 0x20\n  1674: u64 [sp + 408] = 0\n  1678: u64 [sp + 400] = 0\n  1682: u64 [sp + 392] = 0\n  1686: u64 [sp + 384] = 0x3\n  1691: a0 = sp + 0xa0\n  1695: a1 = sp + 0x180\n  1699: ra = 26, jump @21\n      : @47 [@dyn 13] (gas: 17)\n  1704: a0 = u32 [sp + 0xb4]\n  1708: a0 = a0 << 0x20\n  1711: a1 = u64 [sp + 0xb8]\n  1715: a0 = a0 | s1\n  1718: u64 [sp + 440] = 0\n  1722: u64 [sp + 432] = 0\n  1726: u64 [sp + 424] = 0\n  1730: u64 [sp + 416] = 0x3\n  1735: u64 [sp + 0x1d8] = a1\n  1739: a1 = u64 [sp]\n  1741: u64 [sp + 0x1c8] = a1\n  1745: a1 = u64 [sp + 0x8]\n  1748: u64 [sp + 0x1c0] = a1\n  1752: u64 [sp + 0x1d0] = a0\n  1756: a0 = sp + 0x1a0\n  1760: a1 = sp + 0x1c0\n  1764: ra = 28, jump @23\n      : @48 [@dyn 14] (gas: 8)\n  1769: u64 [sp + 504] = 0\n  1773: u64 [sp + 496] = 0\n  1777: u64 [sp + 488] = 0\n  1781: s1 = 0x2\n  1784: u64 [sp + 0x1e0] = s1\n  1788: a0 = sp + 0x80\n  1792: a1 = sp + 0x1e0\n  1796: ra = 30, jump @21\n      : @49 [@dyn 15] (gas: 19)\n  1801: a0 = u32 [sp + 0x94]\n  1805: a0 = a0 << 0x20\n  1808: a1 = u64 [sp + 0x98]\n  1812: a2 = u64 [sp + 0x10]\n  1815: a0 = a0 | a2\n  1818: a3 = sp + 0x200\n  1822: u64 [a3 + 24] = 0\n  1825: u64 [a3 + 16] = 0\n  1828: u64 [a3 + 8] = 0\n  1831: u64 [a3] = s1\n  1833: a2 = u64 [sp + 0x18]\n  1836: u64 [a3 + 0x28] = a2\n  1839: a2 = u64 [sp + 0x20]\n  1842: u64 [a3 + 0x20] = a2\n  1845: u64 [a3 + 0x38] = a1\n  1848: u64 [a3 + 0x30] = a0\n  1851: a0 = sp + 0x200\n  1855: a1 = sp + 0x220\n  1859: ra = 32, jump @23\n      : @50 [@dyn 16] (gas: 9)\n  1864: a0 = sp + 0x200\n  1868: u64 [a0 + 88] = 0\n  1871: u64 [a0 + 80] = 0\n  1874: u64 [a0 + 72] = 0\n  1877: s1 = 0x4\n  1880: u64 [a0 + 0x40] = s1\n  1883: a0 = sp + 0x60\n  1886: a1 = sp + 0x240\n  1890: ra = 34, jump @21\n      : @51 [@dyn 17] (gas: 19)\n  1895: a0 = u32 [sp + 0x74]\n  1898: a0 = a0 << 0x20\n  1901: a1 = u64 [sp + 0x78]\n  1904: a2 = u64 [sp + 0x28]\n  1907: a0 = a0 | a2\n  1910: a3 = sp + 0x200\n  1914: u64 [a3 + 120] = 0\n  1917: u64 [a3 + 112] = 0\n  1920: u64 [a3 + 104] = 0\n  1923: u64 [a3 + 0x60] = s1\n  1926: a2 = u64 [sp + 0x30]\n  1929: u64 [a3 + 0x88] = a2\n  1933: a2 = u64 [sp + 0x38]\n  1936: u64 [a3 + 0x80] = a2\n  1940: u64 [a3 + 0x98] = a1\n  1944: u64 [a3 + 0x90] = a0\n  1948: a0 = sp + 0x260\n  1952: a1 = sp + 0x280\n  1956: ra = 36, jump @23\n      : @52 [@dyn 18] (gas: 12)\n  1961: a1 = sp + 0x200\n  1965: u64 [a1 + 184] = 0\n  1969: u64 [a1 + 176] = 0\n  1973: u64 [a1 + 168] = 0\n  1977: u64 [a1 + 160] = 0x1\n  1982: u64 [a1 + 216] = 0\n  1986: u64 [a1 + 208] = 0\n  1990: u64 [a1 + 200] = 0\n  1994: u64 [a1 + 192] = 0\n  1998: a0 = sp + 0x2a0\n  2002: a1 = sp + 0x2c0\n  2006: ra = 38, jump @23\n      : @53 [@dyn 19] (gas: 3)\n  2011: a0 = sp + 0x40\n  2014: a1 = 0x40\n  2017: ra = 40, jump @17\n      : @54 [@dyn 20] (gas: 12)\n  2022: a0 = u64 [sp + 0x58]\n  2025: a1 = u64 [sp + 0x50]\n  2028: a2 = u64 [sp + 0x48]\n  2031: s1 = u64 [sp + 0x40]\n  2034: a0 = a0 | a2\n  2037: a2 = s1 | a1\n  2040: a2 = a2 | a0\n  2043: a2 = a2 >> 0x20\n  2046: a0 = a0 | a1\n  2049: a0 = a0 << 0x20\n  2052: a0 = a0 | a2\n  2055: jump @58 if a0 == 0\n      : @55 (gas: 1)\n  2058: trap\n      : @56 (gas: 4)\n  2059: a1 = 0x20200\n  2064: i32 a1 = a1 + 0\n  2066: a0 = 0x1\n  2069: jump @62\n      : @57 (gas: 4)\n  2071: a1 = 0x20200\n  2076: i32 a1 = a1 + 0\n  2078: a0 = 0x1\n  2081: jump @62\n      : @58 (gas: 3)\n  2083: a0 = s1\n  2085: a1 = 0\n  2087: ra = 42, jump @28\n      : @59 [@dyn 21] (gas: 5)\n  2092: i32 a0 = a0 + 0\n  2094: a1 = 0\n  2096: a2 = 0\n  2098: ecalli 2 // 'call_data_copy'\n  2100: jump @15\n      : @60 (gas: 3)\n  2103: a0 = s1\n  2105: a1 = 0\n  2107: ra = 44, jump @28\n      : @61 [@dyn 22] (gas: 6)\n  2112: i32 a1 = a0 + 0\n  2114: a0 = 0\n  2116: a2 = 0\n  2118: ra = 0x2e\n  2121: ecalli 13 // 'seal_return'\n  2123: jump @63\n      : @62 (gas: 4)\n  2125: a2 = 0\n  2127: ra = 0x2e\n  2130: ecalli 13 // 'seal_return'\n  2132: fallthrough\n      : @63 [@dyn 23] (gas: 16)\n  2133: sp = sp + 0xfffffffffffffe10\n  2137: u64 [sp + 0x1e8] = ra\n  2141: u64 [sp + 0x1e0] = s0\n  2145: u64 [sp + 0x1d8] = s1\n  2149: s0 = sp + 0x1f0\n  2153: sp = sp + 0xffffffffffffa890\n  2157: sp = sp & 0xffffffffffffffe0\n  2160: s1 = sp\n  2162: a2 = s1 + 0x4138\n  2166: u64 [a2 + 1472] = 0\n  2170: u64 [a2 + 1464] = 0\n  2174: u64 [a2 + 1448] = 0x80\n  2180: a0 = 0x40\n  2183: a1 = s1 + 0x46e0\n  2187: u64 [a2 + 1456] = 0\n  2191: ra = 48, jump @19\n      : @64 [@dyn 24] (gas: 4)\n  2196: a0 = 0x201e8\n  2201: u64 [s1 + 0x1b8] = a0\n  2205: a0 = i32 [0x201e8]\n  2210: jump @66 if a0 >=u 4\n      : @65 (gas: 1)\n  2214: jump @1604\n      : @66 (gas: 8)\n  2218: a0 = s1 + 0x4000\n  2222: i32 a0 = a0 + 0x700\n  2226: a1 = 0\n  2228: ra = 0x32\n  2231: ecalli 3 // 'call_data_load'\n  2233: t0 = 0x34\n  2236: a3 = s1 + 0x4138\n  2240: jump @68\n      : @67 [@dyn 25] (gas: 3)\n  2242: t0 = 0x34\n  2245: a3 = s1 + 0x4138\n  2249: fallthrough\n      : @68 [@dyn 26] (gas: 2)\n  2250: a0 = i32 [a3 + 0x5e4]\n  2254: jump @70 if a0 != 2376452955\n      : @69 (gas: 1)\n  2261: jump @303\n      : @70 (gas: 1)\n  2264: jump @134 if a0 == 2569421541\n      : @71 (gas: 2)\n  2272: a2 = s1 + 0x5138\n  2276: jump @73 if a0 != 3193053574\n      : @72 (gas: 1)\n  2283: jump @457\n      : @73 (gas: 1)\n  2286: jump @185 if a0 == 3268395733\n      : @74 (gas: 1)\n  2294: jump @145 if a0 == 3471626662\n      : @75 (gas: 1)\n  2302: jump @77 if a0 != 3511846196\n      : @76 (gas: 1)\n  2309: jump @517\n      : @77 (gas: 1)\n  2312: jump @79 if a0 != 3770346281\n      : @78 (gas: 1)\n  2319: jump @238\n      : @79 (gas: 1)\n  2322: jump @81 if a0 != 3929341873\n      : @80 (gas: 1)\n  2329: jump @598\n      : @81 (gas: 1)\n  2332: jump @83 if a0 != 4159381654\n      : @82 (gas: 1)\n  2339: jump @350\n      : @83 (gas: 1)\n  2342: jump @85 if a0 != 89252255\n      : @84 (gas: 1)\n  2349: jump @486\n      : @85 (gas: 2)\n  2352: a2 = s1 + 0x4938\n  2356: jump @87 if a0 != 290449221\n      : @86 (gas: 1)\n  2363: jump @414\n      : @87 (gas: 1)\n  2366: jump @175 if a0 == 508174838\n      : @88 (gas: 1)\n  2374: jump @90 if a0 != 540655728\n      : @89 (gas: 1)\n  2381: jump @314\n      : @90 (gas: 1)\n  2384: jump @92 if a0 != 1494239286\n      : @91 (gas: 1)\n  2391: jump @272\n      : @92 (gas: 1)\n  2394: jump @94 if a0 == 1715869594\n      : @93 (gas: 1)\n  2401: jump @383\n      : @94 (gas: 9)\n  2404: u64 [a2 + 1024] = 0\n  2408: u64 [a2 + 1016] = 0\n  2412: u64 [a2 + 1008] = 0\n  2416: u64 [a2 + 1000] = 0\n  2420: a0 = s1 + 0x5000\n  2424: i32 a0 = a0 + 0xfffffffffffffd20\n  2428: ra = 0x36\n  2431: ecalli 16 // 'value_transferred'\n  2433: fallthrough\n      : @95 [@dyn 27] (gas: 10)\n  2434: a3 = s1 + 0x4938\n  2438: a4 = a3 + 0x300\n  2442: a0 = u64 [a4 + 0xf8]\n  2446: a1 = u64 [a3 + 0x400]\n  2450: a2 = u64 [a4 + 0xf0]\n  2454: a3 = u64 [a4 + 0xe8]\n  2458: a1 = a1 | a2\n  2461: a0 = a0 | a3\n  2464: a0 = a0 | a1\n  2467: jump @97 if a0 == 0\n      : @96 (gas: 1)\n  2470: jump @1607\n      : @97 (gas: 1)\n  2474: t0 = 56, jump @2026\n      : @98 [@dyn 28] (gas: 1)\n  2480: jump @100 if a1 <u a0\n      : @99 (gas: 1)\n  2483: jump @1608\n      : @100 (gas: 24)\n  2487: a0 = s1 + 0x5000\n  2491: i32 a0 = a0 + 0xfffffffffffffd40\n  2495: a1 = 0x4\n  2498: ecalli 3 // 'call_data_load'\n  2500: a0 = s1 + 0x4938\n  2504: a5 = a0 + 0x400\n  2508: a4 = u64 [a5 + 0x20]\n  2511: a3 = u64 [a5 + 0x18]\n  2514: a1 = u64 [a5 + 0x10]\n  2517: a2 = u64 [a5 + 0x8]\n  2520: a0 = s1 + 0x1138\n  2524: a5 = s1 + 0x100\n  2528: u64 [a5 + 0x80] = a4\n  2532: u64 [a0 + 0x6e0] = a4\n  2536: u64 [a5 + 0x88] = a3\n  2540: a4 = a0 + 0x600\n  2544: u64 [a4 + 0xd8] = a3\n  2548: u64 [a5 + 0x90] = a1\n  2552: u64 [a4 + 0xd0] = a1\n  2556: a1 = s1 + 0x1800\n  2560: u64 [a5 + 0x98] = a2\n  2564: u64 [a4 + 0xc8] = a2\n  2568: a0 = 0\n  2570: ra = 58, jump @19\n      : @101 [@dyn 29] (gas: 9)\n  2575: a0 = s1 + 0x1138\n  2579: u64 [a0 + 1728] = 0\n  2583: u64 [a0 + 1720] = 0\n  2587: u64 [a0 + 1712] = 0\n  2591: a2 = a0\n  2593: a0 = 0x20\n  2596: a1 = s1 + 0x17e0\n  2600: u64 [a2 + 1704] = 0\n  2604: ra = 60, jump @19\n      : @102 [@dyn 30] (gas: 4)\n  2609: a2 = 0x201ec\n  2614: a0 = i32 [0x201ec]\n  2619: a1 = 0x3f\n  2622: jump @104 if a1 <u a0\n      : @103 (gas: 4)\n  2625: u32 [0x201ec] = 0x40\n  2631: u64 [s1 + 0x170] = a2\n  2635: t0 = 0x3e\n  2638: jump @1993\n      : @104 (gas: 2)\n  2642: u64 [s1 + 0x170] = a2\n  2646: t0 = 62, jump @1993\n      : @105 [@dyn 31] (gas: 9)\n  2652: a0 = 0x20200\n  2657: i32 a0 = a0 + 0\n  2659: i32 a2 = a2 + 0\n  2661: a1 = 0x40\n  2664: u64 [s1 + 0x178] = a0\n  2668: ra = 0x40\n  2671: ecalli 8 // 'hash_keccak_256'\n  2673: t0 = 0x42\n  2676: jump @1941\n      : @106 [@dyn 32] (gas: 1)\n  2680: t0 = 66, jump @1941\n      : @107 [@dyn 33] (gas: 8)\n  2686: a5 = a1 + 0x400\n  2690: u64 [a5 + 0x28] = a3\n  2693: u64 [a5 + 0x30] = a2\n  2696: u64 [a5 + 0x38] = a4\n  2699: u64 [a5 + 0x40] = a0\n  2702: a0 = s1 + 0x17c0\n  2706: a1 = s1 + 0x4d60\n  2710: ra = 68, jump @21\n      : @108 [@dyn 34] (gas: 13)\n  2715: a0 = s1 + 0x1138\n  2719: a1 = u64 [a0 + 0x690]\n  2723: u64 [s1 + 0x1b8] = a1\n  2727: a1 = u64 [a0 + 0x688]\n  2731: u64 [s1 + 0x1b0] = a1\n  2735: a0 = u32 [a0 + 0x698]\n  2739: u64 [s1 + 0x1a8] = a0\n  2743: a0 = 0x30200\n  2748: u64 [s1 + 0x1a0] = a0\n  2752: i32 a0 = a0 + 0\n  2754: ra = 0x46\n  2757: ecalli 5 // 'caller'\n  2759: fallthrough\n      : @109 [@dyn 35] (gas: 3)\n  2760: a5 = s1 + 0x100\n  2764: a2 = u64 [a5 + 0xa0]\n  2768: t0 = 72, jump @1936\n      : @110 [@dyn 36] (gas: 1)\n  2774: jump @112 if a0 != 0\n      : @111 (gas: 1)\n  2777: jump @1609\n      : @112 (gas: 3)\n  2781: a0 = s1 + 0x17a0\n  2785: a1 = 0x40\n  2788: ra = 74, jump @17\n      : @113 [@dyn 37] (gas: 14)\n  2793: a4 = s1 + 0x1138\n  2797: t0 = u64 [a4 + 0x680]\n  2801: a1 = a4 + 0x600\n  2805: a5 = u64 [a1 + 0x78]\n  2808: a3 = u64 [a1 + 0x70]\n  2811: a0 = u64 [a1 + 0x68]\n  2814: a2 = a3 | t0\n  2817: a1 = a0 | a5\n  2820: a1 = a1 | a2\n  2823: a1 = a1 >> 0x20\n  2826: a2 = a2 | a5\n  2829: a2 = a2 << 0x20\n  2832: a1 = a1 | a2\n  2835: jump @115 if a1 == 0\n      : @114 (gas: 1)\n  2838: jump @1603\n      : @115 (gas: 11)\n  2842: u64 [a4 + 1624] = 0\n  2846: u64 [a4 + 1616] = 0\n  2850: u64 [a4 + 1608] = 0\n  2854: u64 [s1 + 0x1b0] = a3\n  2858: a3 = 0x8c379a000000000\n  2868: a1 = s1 + 0x1780\n  2872: u64 [a4 + 0x660] = a3\n  2876: u64 [s1 + 0x1b8] = a0\n  2880: u64 [s1 + 0x1a8] = t0\n  2884: u64 [s1 + 0x1a0] = a5\n  2888: ra = 76, jump @19\n      : @116 [@dyn 38] (gas: 1)\n  2893: t0 = 78, jump @1939\n      : @117 [@dyn 39] (gas: 1)\n  2899: jump @119 if a0 != 0\n      : @118 (gas: 1)\n  2902: jump @1603\n      : @119 (gas: 4)\n  2906: i32 a0 = a1 + 0x4\n  2909: t0 = 0x50\n  2912: a2 = s1 + 0x1138\n  2916: fallthrough\n      : @120 [@dyn 40] (gas: 8)\n  2917: u64 [a2 + 1600] = 0\n  2921: u64 [a2 + 1592] = 0\n  2925: u64 [a2 + 1576] = 0x20\n  2930: a1 = s1 + 0x1760\n  2934: u64 [a2 + 1584] = 0\n  2938: u64 [s1 + 0x1a8] = a3\n  2942: u64 [s1 + 0x1a0] = a4\n  2946: ra = 82, jump @19\n      : @121 [@dyn 41] (gas: 1)\n  2951: t0 = 84, jump @1952\n      : @122 [@dyn 42] (gas: 1)\n  2957: jump @124 if a0 != 0\n      : @123 (gas: 1)\n  2960: jump @1603\n      : @124 (gas: 4)\n  2964: i32 a0 = a1 + 0x24\n  2967: t0 = 0x56\n  2970: a2 = s1 + 0x1138\n  2974: fallthrough\n      : @125 [@dyn 43] (gas: 6)\n  2975: u64 [a2 + 1568] = 0\n  2979: u64 [a2 + 1560] = 0\n  2983: u64 [a2 + 1544] = 0x24\n  2988: a1 = s1 + 0x1740\n  2992: u64 [a2 + 1552] = 0\n  2996: ra = 88, jump @19\n      : @126 [@dyn 44] (gas: 1)\n  3001: t0 = 90, jump @1953\n      : @127 [@dyn 45] (gas: 1)\n  3007: jump @129 if a0 != 0\n      : @128 (gas: 1)\n  3010: jump @1603\n      : @129 (gas: 14)\n  3014: i32 a0 = a1 + 0x44\n  3017: a1 = u64 [0x20148]\n  3022: u64 [s1 + 0x1a0] = a2\n  3026: a4 = s1 + 0x1138\n  3030: u64 [a4 + 0x600] = a1\n  3034: a1 = u64 [0x20150]\n  3039: a2 = u64 [0x20158]\n  3044: a3 = u64 [0x20160]\n  3049: a5 = a4 + 0x500\n  3053: u64 [a5 + 0xf8] = a1\n  3057: u64 [a5 + 0xf0] = a2\n  3061: a1 = s1 + 0x1720\n  3065: u64 [a5 + 0xe8] = a3\n  3069: ra = 92, jump @19\n      : @130 [@dyn 46] (gas: 1)\n  3074: t0 = 94, jump @1951\n      : @131 [@dyn 47] (gas: 1)\n  3080: jump @133 if a0 != 0\n      : @132 (gas: 1)\n  3083: jump @1603\n      : @133 (gas: 10)\n  3087: i32 a0 = a2 + 0x64\n  3090: a3 = s1 + 0x1138\n  3094: u64 [a3 + 1496] = 0\n  3098: u64 [a3 + 1488] = 0\n  3102: a1 = 0x74696f6e00000000\n  3112: u64 [a3 + 0x5e0] = a1\n  3116: a1 = s1 + 0x1700\n  3120: u64 [a3 + 1480] = 0\n  3124: ra = 0x458\n  3128: jump @19\n      : @134 (gas: 9)\n  3131: a0 = s1 + 0x5138\n  3135: u64 [a0 + 128] = 0\n  3139: u64 [a0 + 120] = 0\n  3142: u64 [a0 + 112] = 0\n  3145: u64 [a0 + 104] = 0\n  3148: a0 = s1 + 0x5000\n  3152: i32 a0 = a0 + 0x1a0\n  3156: ecalli 16 // 'value_transferred'\n  3158: fallthrough\n      : @135 (gas: 9)\n  3159: a3 = s1 + 0x5138\n  3163: a0 = u64 [a3 + 0x78]\n  3166: a1 = u64 [a3 + 0x80]\n  3170: a2 = u64 [a3 + 0x70]\n  3173: a3 = u64 [a3 + 0x68]\n  3176: a1 = a1 | a2\n  3179: a0 = a0 | a3\n  3182: a0 = a0 | a1\n  3185: jump @137 if a0 == 0\n      : @136 (gas: 1)\n  3188: jump @1622\n      : @137 (gas: 3)\n  3192: a0 = u64 [s1 + 0x1b8]\n  3196: a0 = i32 [a0]\n  3198: jump @139 if a0 >u 3\n      : @138 (gas: 1)\n  3202: jump @1623\n      : @139 (gas: 8)\n  3206: a1 = s1 + 0x5138\n  3210: u64 [a1 + 160] = 0\n  3214: u64 [a1 + 152] = 0\n  3218: u64 [a1 + 144] = 0\n  3222: u64 [a1 + 136] = 0x4\n  3227: a0 = s1 + 0x2b20\n  3231: a1 = s1 + 0x51c0\n  3235: ra = 96, jump @21\n      : @140 [@dyn 48] (gas: 12)\n  3240: a1 = s1 + 0x2938\n  3244: a2 = a1 + 0x100\n  3248: a0 = u64 [a2 + 0xf8]\n  3252: a1 = s1 + 0x100\n  3256: u64 [a1 + 0xa8] = a0\n  3260: a0 = u64 [a2 + 0xf0]\n  3264: u64 [a1 + 0xb8] = a0\n  3268: a0 = u64 [a2 + 0xe8]\n  3272: u64 [a1 + 0xb0] = a0\n  3276: a0 = s1 + 0x2b00\n  3280: a1 = 0x40\n  3283: ra = 98, jump @17\n      : @141 [@dyn 49] (gas: 7)\n  3288: a3 = s1 + 0x2938\n  3292: a5 = a3 + 0x100\n  3296: a4 = u64 [a5 + 0xe0]\n  3300: a1 = u64 [a5 + 0xd8]\n  3304: a2 = u64 [a5 + 0xd0]\n  3308: a0 = u64 [a5 + 0xc8]\n  3312: t0 = 100, jump @2017\n      : @142 [@dyn 50] (gas: 1)\n  3318: jump @144 if a1 == 0\n      : @143 (gas: 1)\n  3321: jump @1603\n      : @144 (gas: 15)\n  3325: a4 = s1 + 0x100\n  3329: a1 = u64 [a4 + 0xa8]\n  3333: a1 = a1 << 0x20\n  3336: a2 = a1 >> 0x20\n  3339: u64 [a3 + 448] = 0\n  3343: a1 = u64 [a4 + 0xb0]\n  3347: a5 = a3 + 0x100\n  3351: u64 [a5 + 0xa8] = a1\n  3355: a1 = u64 [a4 + 0xb8]\n  3359: u64 [a5 + 0xb0] = a1\n  3363: a1 = s1 + 0x2ae0\n  3367: u64 [a5 + 0xb8] = a2\n  3371: u64 [s1 + 0x1b8] = a0\n  3375: ra = 0x348\n  3379: jump @19\n      : @145 (gas: 8)\n  3382: u64 [a2 + 448] = 0\n  3386: u64 [a2 + 440] = 0\n  3390: u64 [a2 + 432] = 0\n  3394: u64 [a2 + 424] = 0\n  3398: a0 = s1 + 0x5000\n  3402: i32 a0 = a0 + 0x2e0\n  3406: ecalli 16 // 'value_transferred'\n  3408: fallthrough\n      : @146 (gas: 10)\n  3409: a3 = s1 + 0x5138\n  3413: a4 = a3 + 0x100\n  3417: a0 = u64 [a4 + 0xb8]\n  3421: a1 = u64 [a4 + 0xc0]\n  3425: a2 = u64 [a4 + 0xb0]\n  3429: a3 = u64 [a4 + 0xa8]\n  3433: a1 = a1 | a2\n  3436: a0 = a0 | a3\n  3439: a0 = a0 | a1\n  3442: jump @148 if a0 == 0\n      : @147 (gas: 1)\n  3445: jump @1624\n      : @148 (gas: 3)\n  3449: a0 = u64 [s1 + 0x1b8]\n  3453: a0 = i32 [a0]\n  3455: jump @150 if a0 >u 67\n      : @149 (gas: 1)\n  3459: jump @1625\n      : @150 (gas: 21)\n  3463: a0 = s1 + 0x5000\n  3467: i32 a0 = a0 + 0x300\n  3471: a1 = 0x4\n  3474: ecalli 3 // 'call_data_load'\n  3476: a1 = s1 + 0x5138\n  3480: a2 = a1 + 0x100\n  3484: a0 = u64 [a2 + 0xe0]\n  3488: u64 [s1 + 0x1a0] = a0\n  3492: a0 = u64 [a2 + 0xd8]\n  3496: u64 [s1 + 0x1a8] = a0\n  3500: a0 = u64 [a2 + 0xd0]\n  3504: u64 [s1 + 0x1b0] = a0\n  3508: a0 = u64 [a2 + 0xc8]\n  3512: u64 [s1 + 0x1b8] = a0\n  3516: a0 = s1 + 0x5000\n  3520: i32 a0 = a0 + 0x320\n  3524: a1 = 0x24\n  3527: ecalli 3 // 'call_data_load'\n  3529: t0 = 0x66\n  3532: a1 = s1 + 0x5138\n  3536: fallthrough\n      : @151 [@dyn 51] (gas: 23)\n  3537: a0 = u64 [a1 + 0x200]\n  3541: a3 = s1 + 0x100\n  3545: u64 [a3 + 0x70] = a0\n  3548: a2 = a1 + 0x100\n  3552: a0 = u64 [a2 + 0xf8]\n  3556: u64 [a3 + 0x78] = a0\n  3559: a0 = u64 [a2 + 0xf0]\n  3563: u64 [a3 + 0x80] = a0\n  3567: a0 = u64 [a2 + 0xe8]\n  3571: u64 [a3 + 0x88] = a0\n  3575: a2 = s1 + 0x3138\n  3579: a0 = u64 [a3 + 0xa0]\n  3583: a4 = a2 + 0x600\n  3587: u64 [a4 + 0x80] = a0\n  3591: a0 = u64 [a3 + 0xa8]\n  3595: u64 [a4 + 0x78] = a0\n  3598: a0 = u64 [a3 + 0xb0]\n  3602: u64 [a4 + 0x70] = a0\n  3605: a1 = s1 + 0x37a0\n  3609: a0 = u64 [a3 + 0xb8]\n  3613: u64 [a4 + 0x68] = a0\n  3616: a0 = 0\n  3618: ra = 104, jump @19\n      : @152 [@dyn 52] (gas: 9)\n  3623: a0 = s1 + 0x3138\n  3627: u64 [a0 + 1632] = 0\n  3631: u64 [a0 + 1624] = 0\n  3635: u64 [a0 + 1616] = 0\n  3639: a2 = a0\n  3641: a0 = 0x20\n  3644: a1 = s1 + 0x3780\n  3648: u64 [a2 + 1608] = 0\n  3652: ra = 106, jump @19\n      : @153 [@dyn 53] (gas: 3)\n  3657: a2 = 0x201ec\n  3662: a0 = i32 [0x201ec]\n  3667: jump @155 if a0 >u 63\n      : @154 (gas: 2)\n  3671: u32 [0x201ec] = 0x40\n  3677: fallthrough\n      : @155 (gas: 15)\n  3678: u64 [s1 + 0x198] = a2\n  3682: a0 = sp + 0xffffffffffffffe0\n  3685: a2 = a0 & 0xffffffffffffffe0\n  3688: u64 [s1 + 0x168] = a2\n  3692: sp = a2\n  3694: a0 = 0x20200\n  3699: i32 a0 = a0 + 0\n  3701: i32 a2 = a2 + 0\n  3703: a1 = 0x40\n  3706: u64 [s1 + 0x190] = a0\n  3710: ra = 0x6c\n  3713: ecalli 8 // 'hash_keccak_256'\n  3715: a3 = u64 [s1 + 0x168]\n  3719: t0 = 0x6e\n  3722: jump @1946\n      : @156 [@dyn 54] (gas: 2)\n  3726: a3 = u64 [s1 + 0x168]\n  3730: t0 = 110, jump @1946\n      : @157 [@dyn 55] (gas: 8)\n  3736: a5 = a1 + 0x200\n  3740: u64 [a5 + 0x8] = a3\n  3743: u64 [a5 + 0x10] = a2\n  3746: u64 [a5 + 0x18] = a4\n  3749: u64 [a5 + 0x20] = a0\n  3752: a0 = s1 + 0x3760\n  3756: a1 = s1 + 0x5340\n  3760: ra = 112, jump @21\n      : @158 [@dyn 56] (gas: 15)\n  3765: a0 = s1 + 0x3138\n  3769: a1 = u64 [a0 + 0x630]\n  3773: u64 [s1 + 0x160] = a1\n  3777: a1 = u64 [a0 + 0x628]\n  3781: u64 [s1 + 0x158] = a1\n  3785: a0 = u32 [a0 + 0x638]\n  3789: u64 [s1 + 0x150] = a0\n  3793: a0 = 0x30200\n  3798: u64 [s1 + 0x168] = a0\n  3802: i32 a0 = a0 + 0\n  3804: u64 [s1 + 0x148] = a0\n  3808: ra = 0x72\n  3811: ecalli 5 // 'caller'\n  3813: t0 = 0x74\n  3816: jump @1942\n      : @159 [@dyn 57] (gas: 1)\n  3820: t0 = 116, jump @1942\n      : @160 [@dyn 58] (gas: 2)\n  3826: a1 = 0x1\n  3829: jump @162 if a0 != 0\n      : @161 (gas: 1)\n  3832: jump @690\n      : @162 (gas: 13)\n  3835: a0 = u64 [s1 + 0x1b8]\n  3839: a2 = s1 + 0x3138\n  3843: a3 = a2 + 0x600\n  3847: u64 [a3 + 0x8] = a0\n  3850: a0 = u64 [s1 + 0x1b0]\n  3854: u64 [a3 + 0x10] = a0\n  3857: a0 = u64 [s1 + 0x1a8]\n  3861: u64 [a3 + 0x18] = a0\n  3864: a1 = s1 + 0x3740\n  3868: a0 = u64 [s1 + 0x1a0]\n  3872: u64 [a3 + 0x20] = a0\n  3875: a0 = 0\n  3877: ra = 118, jump @19\n      : @163 [@dyn 59] (gas: 9)\n  3882: a0 = s1 + 0x3138\n  3886: u64 [a0 + 1536] = 0\n  3890: u64 [a0 + 1528] = 0\n  3894: u64 [a0 + 1520] = 0\n  3898: a2 = a0\n  3900: a0 = 0x20\n  3903: a1 = s1 + 0x3720\n  3907: u64 [a2 + 1512] = 0\n  3911: ra = 120, jump @19\n      : @164 [@dyn 60] (gas: 3)\n  3916: a2 = u64 [s1 + 0x198]\n  3920: a0 = i32 [a2]\n  3922: jump @166 if a0 >u 63\n      : @165 (gas: 2)\n  3926: u32 [a2 + 0] = 0x40\n  3929: fallthrough\n      : @166 (gas: 4)\n  3930: a0 = sp + 0xffffffffffffffe0\n  3933: a0 = a0 & 0xffffffffffffffe0\n  3936: u64 [s1 + 0x160] = a0\n  3940: t0 = 122, jump @2038\n      : @167 [@dyn 61] (gas: 5)\n  3946: ra = 0x7c\n  3949: ecalli 8 // 'hash_keccak_256'\n  3951: a3 = u64 [s1 + 0x160]\n  3955: t0 = 0x7e\n  3958: jump @1940\n      : @168 [@dyn 62] (gas: 2)\n  3962: a3 = u64 [s1 + 0x160]\n  3966: t0 = 126, jump @1940\n      : @169 [@dyn 63] (gas: 8)\n  3972: a3 = a1 + 0x200\n  3976: u64 [a3 + 0x28] = a4\n  3979: u64 [a3 + 0x30] = a5\n  3982: u64 [a3 + 0x38] = a2\n  3985: u64 [a3 + 0x40] = a0\n  3988: a0 = s1 + 0x3700\n  3992: a1 = s1 + 0x5360\n  3996: ra = 128, jump @21\n      : @170 [@dyn 64] (gas: 12)\n  4002: a0 = s1 + 0x3138\n  4006: a1 = u64 [a0 + 0x5d0]\n  4010: u64 [s1 + 0x160] = a1\n  4014: a1 = u64 [a0 + 0x5c8]\n  4018: u64 [s1 + 0x158] = a1\n  4022: a0 = u32 [a0 + 0x5d8]\n  4026: u64 [s1 + 0x150] = a0\n  4030: a0 = u64 [s1 + 0x148]\n  4034: ra = 0x82\n  4038: ecalli 5 // 'caller'\n  4040: t0 = 0x84\n  4044: jump @1942\n      : @171 [@dyn 65] (gas: 1)\n  4048: t0 = 132, jump @1942\n      : @172 [@dyn 66] (gas: 1)\n  4055: jump @174 if a0 == 0\n      : @173 (gas: 1)\n  4058: jump @682\n      : @174 (gas: 2)\n  4061: a1 = 0x1\n  4064: jump @690\n      : @175 (gas: 8)\n  4067: u64 [a2 + 416] = 0\n  4071: u64 [a2 + 408] = 0\n  4075: u64 [a2 + 400] = 0\n  4079: u64 [a2 + 392] = 0\n  4083: a0 = s1 + 0x5000\n  4087: i32 a0 = a0 + 0xfffffffffffffac0\n  4091: ecalli 16 // 'value_transferred'\n  4093: fallthrough\n      : @176 (gas: 10)\n  4094: a4 = s1 + 0x4938\n  4098: a5 = a4 + 0x100\n  4102: a0 = u64 [a5 + 0x98]\n  4106: a1 = u64 [a5 + 0xa0]\n  4110: a2 = u64 [a5 + 0x90]\n  4114: a3 = u64 [a5 + 0x88]\n  4118: a1 = a1 | a2\n  4121: a0 = a0 | a3\n  4124: a0 = a0 | a1\n  4127: jump @178 if a0 == 0\n      : @177 (gas: 1)\n  4130: jump @1626\n      : @178 (gas: 3)\n  4134: a0 = u64 [s1 + 0x1b8]\n  4138: a0 = i32 [a0]\n  4140: jump @180 if a0 >u 3\n      : @179 (gas: 1)\n  4144: jump @1627\n      : @180 (gas: 7)\n  4148: u64 [a4 + 448] = 0\n  4152: u64 [a4 + 440] = 0\n  4156: u64 [a4 + 432] = 0\n  4160: u64 [a4 + 424] = 0x1\n  4165: a0 = s1 + 0x1140\n  4169: a1 = s1 + 0x4ae0\n  4173: ra = 134, jump @21\n      : @181 [@dyn 67] (gas: 13)\n  4179: a1 = s1 + 0x1138\n  4183: a0 = u64 [a1 + 0x20]\n  4186: a2 = s1 + 0x100\n  4190: u64 [a2 + 0xb8] = a0\n  4194: a0 = u64 [a1 + 0x18]\n  4197: u64 [a2 + 0xb0] = a0\n  4201: a0 = u64 [a1 + 0x10]\n  4204: u64 [a2 + 0xa8] = a0\n  4208: a0 = u64 [a1 + 0x8]\n  4211: u64 [a2 + 0xa0] = a0\n  4215: a0 = s1 + 0x1120\n  4219: a1 = 0x40\n  4222: ra = 136, jump @17\n      : @182 [@dyn 68] (gas: 14)\n  4228: a3 = s1 + 0x1138\n  4232: a0 = u64 [a3]\n  4234: a4 = a3 + 0xffffffffffffff00\n  4238: a1 = u64 [a4 + 0xf8]\n  4242: a2 = u64 [a4 + 0xf0]\n  4246: a3 = u64 [a4 + 0xe8]\n  4250: a0 = a0 | a2\n  4253: a2 = a3 | a1\n  4256: a2 = a2 | a0\n  4259: a2 = a2 >> 0x20\n  4262: a0 = a0 | a1\n  4265: a0 = a0 << 0x20\n  4268: a0 = a0 | a2\n  4271: jump @184 if a0 == 0\n      : @183 (gas: 1)\n  4274: jump @1603\n      : @184 (gas: 17)\n  4278: a0 = s1 + 0x7ff\n  4282: a0 = a0 + 0x139\n  4286: a4 = s1 + 0x100\n  4290: a1 = u64 [a4 + 0xa0]\n  4294: a5 = a0 + 0x700\n  4298: u64 [a5 + 0xc8] = a1\n  4302: a1 = u64 [a4 + 0xa8]\n  4306: u64 [a5 + 0xd0] = a1\n  4310: a1 = u64 [a4 + 0xb0]\n  4314: u64 [a5 + 0xd8] = a1\n  4318: a1 = s1 + 0x1100\n  4322: a2 = u64 [a4 + 0xb8]\n  4326: u64 [a5 + 0xe0] = a2\n  4330: a0 = a3\n  4332: u64 [a4 + 0xb8] = a3\n  4336: ra = 0x348\n  4340: jump @19\n      : @185 (gas: 9)\n  4343: u64 [a2 + 288] = 0\n  4347: u64 [a2 + 280] = 0\n  4351: u64 [a2 + 272] = 0\n  4355: u64 [a2 + 264] = 0\n  4359: a0 = s1 + 0x5000\n  4363: i32 a0 = a0 + 0x240\n  4367: ra = 0x8a\n  4371: ecalli 16 // 'value_transferred'\n  4373: fallthrough\n      : @186 [@dyn 69] (gas: 3)\n  4374: a3 = s1 + 0x5138\n  4378: a4 = a3 + 0x100\n  4382: t0 = 140, jump @2037\n      : @187 [@dyn 70] (gas: 1)\n  4389: jump @189 if a0 == 0\n      : @188 (gas: 1)\n  4392: jump @1628\n      : @189 (gas: 1)\n  4396: t0 = 142, jump @2026\n      : @190 [@dyn 71] (gas: 1)\n  4403: jump @192 if a1 <u a0\n      : @191 (gas: 1)\n  4406: jump @1629\n      : @192 (gas: 5)\n  4410: a0 = 0xffffffff\n  4420: u64 [s1 + 0x158] = a0\n  4424: u64 [s1 + 256] = 0xff00\n  4431: a0 = s1 + 0x32e0\n  4435: ra = 144, jump @1785\n      : @193 [@dyn 72] (gas: 16)\n  4442: a1 = s1 + 0x3138\n  4446: a2 = a1 + 0x100\n  4450: a0 = u64 [a2 + 0xb8]\n  4454: u64 [s1 + 0x150] = a0\n  4458: a0 = u64 [a2 + 0xb0]\n  4462: u64 [s1 + 0x148] = a0\n  4466: a0 = u64 [a2 + 0xa8]\n  4470: u64 [s1 + 0x140] = a0\n  4474: a1 = s1 + 0x5138\n  4478: u64 [a1 + 320] = 0\n  4482: u64 [a1 + 312] = 0\n  4486: u64 [a1 + 304] = 0\n  4490: u64 [a1 + 296] = 0x1\n  4495: a0 = s1 + 0x32c0\n  4499: a1 = s1 + 0x5260\n  4503: ra = 146, jump @21\n      : @194 [@dyn 73] (gas: 17)\n  4509: a4 = s1 + 0x3138\n  4513: a5 = a4 + 0x100\n  4517: a0 = u64 [a5 + 0xa0]\n  4521: a1 = u64 [a5 + 0x98]\n  4525: a2 = u64 [a5 + 0x90]\n  4529: a3 = u64 [a5 + 0x88]\n  4533: u64 [s1 + 0x178] = a0\n  4537: u64 [a5 + 0x60] = a0\n  4540: u64 [s1 + 0x170] = a1\n  4544: u64 [a5 + 0x58] = a1\n  4547: u64 [s1 + 0x168] = a2\n  4551: u64 [a5 + 0x50] = a2\n  4554: a0 = s1 + 0x32a0\n  4558: a1 = s1 + 0x3280\n  4562: u64 [s1 + 0x160] = a3\n  4566: u64 [a5 + 0x48] = a3\n  4569: ra = 148, jump @1836\n      : @195 [@dyn 74] (gas: 2)\n  4576: a0 = 0x3000\n  4580: t0 = 150, jump @2015\n      : @196 [@dyn 75] (gas: 19)\n  4587: a0 = u64 [a2 + 0x80]\n  4591: a1 = s1 + 0x100\n  4595: u64 [a1 + 0x20] = a0\n  4598: a0 = u64 [a2 + 0x78]\n  4601: u64 [a1 + 0x18] = a0\n  4604: a0 = u64 [a2 + 0x70]\n  4607: u64 [a1 + 0x10] = a0\n  4610: a0 = u64 [a2 + 0x68]\n  4613: u64 [a1 + 0x8] = a0\n  4616: u64 [s1 + 312] = 0\n  4620: u64 [s1 + 304] = 0\n  4624: u64 [s1 + 296] = 0\n  4628: u64 [s1 + 384] = 0\n  4632: t1 = 0\n  4634: t2 = 0\n  4636: t0 = 0\n  4638: ra = 0\n  4640: a4 = s1 + 0x2938\n  4644: fallthrough\n      : @197 (gas: 17)\n  4645: a0 = u64 [s1 + 0x160]\n  4649: a0 = t1 <u a0\n  4652: a2 = u64 [s1 + 0x168]\n  4656: a1 = t2 ^ a2\n  4659: a2 = t2 <u a2\n  4662: a2 = a0 if a1 == 0\n  4665: a5 = u64 [s1 + 0x170]\n  4669: a0 = t0 <u a5\n  4672: a3 = u64 [s1 + 0x178]\n  4676: a1 = ra ^ a3\n  4679: a3 = ra <u a3\n  4682: a3 = a0 if a1 == 0\n  4685: a0 = t0 ^ a5\n  4688: a0 = a0 | a1\n  4691: a3 = a2 if a0 == 0\n  4694: a2 = u64 [s1 + 0x180]\n  4698: jump @199 if a3 != 0\n      : @198 (gas: 1)\n  4701: jump @609\n      : @199 (gas: 11)\n  4704: u64 [s1 + 0x1b8] = t1\n  4708: u64 [a4 + 0x748] = t1\n  4712: u64 [s1 + 0x1b0] = t2\n  4716: u64 [a4 + 0x750] = t2\n  4720: u64 [s1 + 0x1a0] = t0\n  4724: u64 [a4 + 0x758] = t0\n  4728: a1 = s1 + 0x3080\n  4732: u64 [s1 + 0x1a8] = ra\n  4736: u64 [a4 + 0x760] = ra\n  4740: a0 = 0\n  4742: ra = 152, jump @19\n      : @200 [@dyn 76] (gas: 2)\n  4748: a0 = 0x2938\n  4752: t0 = 154, jump @2027\n      : @201 [@dyn 77] (gas: 4)\n  4759: i32 a1 = a1 + 0x60\n  4762: a1 = a1 + s1\n  4765: u64 [a2 + 1832] = 0\n  4769: ra = 156, jump @19\n      : @202 [@dyn 78] (gas: 3)\n  4775: a2 = 0x201ec\n  4780: a0 = i32 [0x201ec]\n  4785: jump @204 if a0 >u 63\n      : @203 (gas: 2)\n  4789: u32 [0x201ec] = 0x40\n  4795: fallthrough\n      : @204 (gas: 15)\n  4796: u64 [s1 + 0x190] = a2\n  4800: a0 = sp + 0xffffffffffffffe0\n  4803: a2 = a0 & 0xffffffffffffffe0\n  4806: u64 [s1 + 0x198] = a2\n  4810: sp = a2\n  4812: a0 = 0x20200\n  4817: i32 a0 = a0 + 0\n  4819: i32 a2 = a2 + 0\n  4821: a1 = 0x40\n  4824: u64 [s1 + 0x188] = a0\n  4828: ra = 0x9e\n  4832: ecalli 8 // 'hash_keccak_256'\n  4834: a3 = u64 [s1 + 0x198]\n  4838: t0 = 0xa0\n  4842: jump @1940\n      : @205 [@dyn 79] (gas: 2)\n  4846: a3 = u64 [s1 + 0x198]\n  4850: t0 = 160, jump @1940\n      : @206 [@dyn 80] (gas: 8)\n  4857: a3 = a1 + 0x100\n  4861: u64 [a3 + 0x48] = a4\n  4864: u64 [a3 + 0x50] = a5\n  4867: u64 [a3 + 0x58] = a2\n  4870: u64 [a3 + 0x60] = a0\n  4873: a0 = s1 + 0x3040\n  4877: a1 = s1 + 0x5280\n  4881: ra = 162, jump @21\n      : @207 [@dyn 81] (gas: 3)\n  4887: t0 = 0xa4\n  4891: a4 = s1 + 0x2938\n  4895: fallthrough\n      : @208 [@dyn 82] (gas: 17)\n  4896: a3 = a4 + 0x700\n  4900: a0 = u64 [a3 + 0x8]\n  4903: a1 = u64 [a3 + 0x18]\n  4906: a2 = u64 [a3 + 0x10]\n  4909: a3 = u64 [s1 + 0x140]\n  4913: a0 = a0 ^ a3\n  4916: a3 = u64 [s1 + 0x150]\n  4920: a1 = a1 ^ a3\n  4923: a3 = u64 [s1 + 0x148]\n  4927: a2 = a2 ^ a3\n  4930: a2 = a2 & 0xffffffffffffffff\n  4933: a5 = u64 [s1 + 0x158]\n  4937: a1 = a1 & a5\n  4940: a0 = a0 & 0xffffffffffffffff\n  4943: a0 = a0 | a1\n  4946: a0 = a0 | a2\n  4949: jump @211 if a0 == 0\n      : @209 (gas: 5)\n  4952: t1 = u64 [s1 + 0x1b8]\n  4956: t2 = u64 [s1 + 0x1b0]\n  4960: ra = u64 [s1 + 0x1a8]\n  4964: a1 = u64 [s1 + 0x1a0]\n  4968: fallthrough\n      : @210 (gas: 9)\n  4969: t1 = t1 + 0x1\n  4972: a0 = t1 <u 0x1\n  4975: t2 = t2 + a0\n  4978: a0 = t1 | t2\n  4981: a0 = a0 <u 0x1\n  4984: t0 = a1 + a0\n  4987: a1 = t0 <u a1\n  4990: ra = ra + a1\n  4993: jump @197\n      : @211 (gas: 12)\n  4996: a0 = u64 [s1 + 0x1b8]\n  5000: a1 = a4 + 0x600\n  5004: u64 [a1 + 0xe8] = a0\n  5008: a0 = u64 [s1 + 0x1b0]\n  5012: u64 [a1 + 0xf0] = a0\n  5016: a0 = u64 [s1 + 0x1a0]\n  5020: u64 [a1 + 0xf8] = a0\n  5024: a1 = s1 + 0x3020\n  5028: a0 = u64 [s1 + 0x1a8]\n  5032: u64 [a4 + 0x700] = a0\n  5036: a0 = 0\n  5038: ra = 166, jump @19\n      : @212 [@dyn 83] (gas: 9)\n  5044: a0 = s1 + 0x2938\n  5048: u64 [a0 + 1760] = 0\n  5052: u64 [a0 + 1752] = 0\n  5056: u64 [a0 + 1744] = 0\n  5060: a2 = a0\n  5062: a0 = 0x20\n  5065: a1 = s1 + 0x3000\n  5069: u64 [a2 + 1736] = 0\n  5073: ra = 168, jump @19\n      : @213 [@dyn 84] (gas: 3)\n  5079: a2 = u64 [s1 + 0x190]\n  5083: a0 = i32 [a2]\n  5085: jump @215 if a0 >u 63\n      : @214 (gas: 2)\n  5089: u32 [a2 + 0] = 0x40\n  5092: fallthrough\n      : @215 (gas: 4)\n  5093: a0 = sp + 0xffffffffffffffe0\n  5096: a0 = a0 & 0xffffffffffffffe0\n  5099: u64 [s1 + 0x198] = a0\n  5103: t0 = 170, jump @2005\n      : @216 [@dyn 85] (gas: 4)\n  5110: ra = 0xac\n  5114: ecalli 8 // 'hash_keccak_256'\n  5116: t0 = 0xae\n  5120: jump @1956\n      : @217 [@dyn 86] (gas: 1)\n  5124: t0 = 174, jump @1956\n      : @218 [@dyn 87] (gas: 7)\n  5131: u64 [a3 + 0x68] = a4\n  5134: u64 [a3 + 0x70] = a5\n  5137: u64 [a3 + 0x78] = a2\n  5140: u64 [a3 + 0x80] = a0\n  5144: a0 = s1 + 0x2fe0\n  5148: a1 = s1 + 0x52a0\n  5152: ra = 176, jump @21\n      : @219 [@dyn 88] (gas: 3)\n  5158: t0 = 0xb2\n  5162: a4 = s1 + 0x2938\n  5166: fallthrough\n      : @220 [@dyn 89] (gas: 2)\n  5167: a0 = u8 [a4 + 0x6a8]\n  5171: jump @209 if a0 == 0\n      : @221 (gas: 12)\n  5175: a0 = u64 [s1 + 0x1b8]\n  5179: a2 = a4 + 0x600\n  5183: u64 [a2 + 0x88] = a0\n  5187: a0 = u64 [s1 + 0x1b0]\n  5191: u64 [a2 + 0x90] = a0\n  5195: a0 = u64 [s1 + 0x1a0]\n  5199: u64 [a2 + 0x98] = a0\n  5203: a1 = s1 + 0x2fc0\n  5207: a0 = u64 [s1 + 0x1a8]\n  5211: u64 [a2 + 0xa0] = a0\n  5215: a0 = 0\n  5217: ra = 180, jump @19\n      : @222 [@dyn 90] (gas: 9)\n  5223: a0 = s1 + 0x2938\n  5227: u64 [a0 + 1664] = 0\n  5231: u64 [a0 + 1656] = 0\n  5235: u64 [a0 + 1648] = 0\n  5239: a2 = a0\n  5241: a0 = 0x20\n  5244: a1 = s1 + 0x2fa0\n  5248: u64 [a2 + 1640] = 0\n  5252: ra = 182, jump @19\n      : @223 [@dyn 91] (gas: 3)\n  5258: a2 = u64 [s1 + 0x190]\n  5262: a0 = i32 [a2]\n  5264: jump @225 if a0 >u 63\n      : @224 (gas: 2)\n  5268: u32 [a2 + 0] = 0x40\n  5271: fallthrough\n      : @225 (gas: 4)\n  5272: a0 = sp + 0xffffffffffffffe0\n  5275: a0 = a0 & 0xffffffffffffffe0\n  5278: u64 [s1 + 0x198] = a0\n  5282: t0 = 184, jump @2005\n      : @226 [@dyn 92] (gas: 4)\n  5289: ra = 0xba\n  5293: ecalli 8 // 'hash_keccak_256'\n  5295: t0 = 0xbc\n  5299: jump @1956\n      : @227 [@dyn 93] (gas: 1)\n  5303: t0 = 188, jump @1956\n      : @228 [@dyn 94] (gas: 7)\n  5310: u64 [a3 + 0x88] = a4\n  5314: u64 [a3 + 0x90] = a5\n  5318: u64 [a3 + 0x98] = a2\n  5322: u64 [a3 + 0xa0] = a0\n  5326: a0 = s1 + 0x2f80\n  5330: a1 = s1 + 0x52c0\n  5334: ra = 190, jump @21\n      : @229 [@dyn 95] (gas: 3)\n  5340: t0 = 0xc0\n  5344: a4 = s1 + 0x2938\n  5348: fallthrough\n      : @230 [@dyn 96] (gas: 4)\n  5349: a0 = u64 [a4 + 0x648]\n  5353: a1 = u64 [s1 + 0x100]\n  5357: a0 = a0 & a1\n  5360: jump @209 if a0 != 0\n      : @231 (gas: 22)\n  5364: a5 = s1 + 0x100\n  5368: a0 = u64 [a5 + 0x38]\n  5371: a1 = a4 + 0x500\n  5375: u64 [a1 + 0xe8] = a0\n  5379: a0 = u64 [a5 + 0x8]\n  5382: u64 [a4 + 0x608] = a0\n  5386: a0 = u64 [a5 + 0x30]\n  5389: u64 [a1 + 0xf0] = a0\n  5393: a0 = u64 [a5 + 0x10]\n  5396: u64 [a4 + 0x610] = a0\n  5400: a0 = u64 [a5 + 0x28]\n  5403: u64 [a1 + 0xf8] = a0\n  5407: a0 = u64 [a5 + 0x18]\n  5410: u64 [a4 + 0x618] = a0\n  5414: a0 = u64 [a5 + 0x80]\n  5418: u64 [a4 + 0x600] = a0\n  5422: a0 = s1 + 0x2f60\n  5426: a1 = s1 + 0x2f40\n  5430: a2 = s1 + 0x2f20\n  5434: a3 = u64 [a5 + 0x20]\n  5437: u64 [a4 + 0x620] = a3\n  5441: ra = 194, jump @1858\n      : @232 [@dyn 97] (gas: 7)\n  5448: a4 = s1 + 0x2938\n  5452: a5 = a4 + 0x600\n  5456: a1 = u64 [a5 + 0x40]\n  5459: a2 = u64 [a5 + 0x38]\n  5462: a3 = u64 [a5 + 0x30]\n  5465: a0 = u64 [a5 + 0x28]\n  5468: t0 = 196, jump @1955\n      : @233 [@dyn 98] (gas: 1)\n  5475: jump @235 if a1 == 0\n      : @234 (gas: 1)\n  5478: jump @1603\n      : @235 (gas: 11)\n  5482: a1 = u64 [s1 + 0x1b8]\n  5486: a3 = a4 + 0x500\n  5490: u64 [a3 + 0xc8] = a1\n  5494: a1 = u64 [s1 + 0x1b0]\n  5498: u64 [a3 + 0xd0] = a1\n  5502: a1 = u64 [s1 + 0x1a0]\n  5506: u64 [a3 + 0xd8] = a1\n  5510: a1 = s1 + 0x2f00\n  5514: a2 = u64 [s1 + 0x1a8]\n  5518: u64 [a3 + 0xe0] = a2\n  5522: ra = 198, jump @19\n      : @236 [@dyn 99] (gas: 15)\n  5528: a0 = s1 + 0x2938\n  5532: a1 = u64 [s1 + 0x180]\n  5536: u64 [a0 + 0x5a0] = a1\n  5540: a0 = s1 + 0x2938\n  5544: a1 = u64 [s1 + 0x128]\n  5548: u64 [a0 + 0x598] = a1\n  5552: a0 = s1 + 0x2938\n  5556: a1 = u64 [s1 + 0x130]\n  5560: u64 [a0 + 0x590] = a1\n  5564: a0 = s1 + 0x2ee0\n  5568: a1 = s1 + 0x2ec0\n  5572: a2 = s1 + 0x2938\n  5576: a3 = u64 [s1 + 0x138]\n  5580: u64 [a2 + 0x588] = a3\n  5584: ra = 200, jump @1900\n      : @237 [@dyn 100] (gas: 16)\n  5591: a2 = s1 + 0x100\n  5595: a1 = u64 [a2 + 0xa0]\n  5599: ra = u64 [s1 + 0x1a8]\n  5603: t2 = u64 [s1 + 0x1b0]\n  5607: t1 = u64 [s1 + 0x1b8]\n  5611: a4 = s1 + 0x2938\n  5615: a3 = a4 + 0x500\n  5619: a0 = u64 [a3 + 0xc0]\n  5623: u64 [a2 + 0x80] = a0\n  5627: a0 = u64 [a3 + 0xb8]\n  5631: u64 [a2 + 0x28] = a0\n  5634: a0 = u64 [a3 + 0xb0]\n  5638: u64 [a2 + 0x30] = a0\n  5641: a0 = u64 [a3 + 0xa8]\n  5645: u64 [a2 + 0x38] = a0\n  5648: jump @210\n      : @238 (gas: 9)\n  5651: u64 [a2 + 1568] = 0\n  5655: u64 [a2 + 1560] = 0\n  5659: u64 [a2 + 1552] = 0\n  5663: u64 [a2 + 1544] = 0\n  5667: a0 = s1 + 0x5000\n  5671: i32 a0 = a0 + 0x740\n  5675: ra = 0xca\n  5679: ecalli 16 // 'value_transferred'\n  5681: fallthrough\n      : @239 [@dyn 101] (gas: 3)\n  5682: a3 = s1 + 0x5138\n  5686: a4 = a3 + 0x600\n  5690: t0 = 204, jump @2037\n      : @240 [@dyn 102] (gas: 1)\n  5697: jump @242 if a0 == 0\n      : @241 (gas: 1)\n  5700: jump @1630\n      : @242 (gas: 1)\n  5704: t0 = 206, jump @2026\n      : @243 [@dyn 103] (gas: 1)\n  5711: jump @245 if a1 <u a0\n      : @244 (gas: 1)\n  5714: jump @1631\n      : @245 (gas: 2)\n  5718: a0 = s1 + 0x4280\n  5722: ra = 208, jump @1785\n      : @246 [@dyn 104] (gas: 2)\n  5729: a0 = 0x4000\n  5733: t0 = 210, jump @2015\n      : @247 [@dyn 105] (gas: 14)\n  5740: a0 = u64 [a2 + 0x58]\n  5743: u64 [s1 + 0x188] = a0\n  5747: a0 = u64 [a2 + 0x50]\n  5750: u64 [s1 + 0x190] = a0\n  5754: a0 = u64 [a2 + 0x48]\n  5757: u64 [s1 + 0x198] = a0\n  5761: a1 = s1 + 0x5138\n  5765: u64 [a1 + 1600] = 0\n  5769: u64 [a1 + 1592] = 0\n  5773: u64 [a1 + 1584] = 0\n  5777: u64 [a1 + 1576] = 0x3\n  5782: a0 = s1 + 0x4260\n  5786: a1 = s1 + 0x5760\n  5790: ra = 212, jump @21\n      : @248 [@dyn 106] (gas: 13)\n  5796: a1 = s1 + 0x4138\n  5800: a0 = u64 [a1 + 0x130]\n  5804: u64 [s1 + 0x1b8] = a0\n  5808: a0 = u64 [a1 + 0x128]\n  5812: u64 [s1 + 0x1b0] = a0\n  5816: a0 = u32 [a1 + 0x138]\n  5820: u64 [s1 + 0x1a8] = a0\n  5824: a0 = 0x30200\n  5829: u64 [s1 + 0x1a0] = a0\n  5833: i32 a0 = a0 + 0\n  5835: ra = 0xd6\n  5839: ecalli 5 // 'caller'\n  5841: fallthrough\n      : @249 [@dyn 107] (gas: 3)\n  5842: a5 = s1 + 0x100\n  5846: a2 = u64 [a5 + 0xa0]\n  5850: t0 = 216, jump @1936\n      : @250 [@dyn 108] (gas: 1)\n  5857: jump @252 if a0 != 0\n      : @251 (gas: 1)\n  5860: jump @1632\n      : @252 (gas: 3)\n  5864: a0 = s1 + 0x4240\n  5868: a1 = 0x40\n  5871: ra = 218, jump @17\n      : @253 [@dyn 109] (gas: 14)\n  5877: a4 = s1 + 0x4138\n  5881: t0 = u64 [a4 + 0x120]\n  5885: a1 = a4 + 0x100\n  5889: a5 = u64 [a1 + 0x18]\n  5892: a3 = u64 [a1 + 0x10]\n  5895: a0 = u64 [a1 + 0x8]\n  5898: a2 = a3 | t0\n  5901: a1 = a0 | a5\n  5904: a1 = a1 | a2\n  5907: a1 = a1 >> 0x20\n  5910: a2 = a2 | a5\n  5913: a2 = a2 << 0x20\n  5916: a1 = a1 | a2\n  5919: jump @255 if a1 == 0\n      : @254 (gas: 1)\n  5922: jump @1603\n      : @255 (gas: 11)\n  5926: u64 [a4 + 248] = 0\n  5930: u64 [a4 + 240] = 0\n  5934: u64 [a4 + 232] = 0\n  5938: u64 [s1 + 0x1b0] = a3\n  5942: a3 = 0x8c379a000000000\n  5952: a1 = s1 + 0x4220\n  5956: u64 [a4 + 0x100] = a3\n  5960: u64 [s1 + 0x1b8] = a0\n  5964: u64 [s1 + 0x1a8] = t0\n  5968: u64 [s1 + 0x1a0] = a5\n  5972: ra = 220, jump @19\n      : @256 [@dyn 110] (gas: 1)\n  5978: t0 = 222, jump @1939\n      : @257 [@dyn 111] (gas: 1)\n  5985: jump @259 if a0 != 0\n      : @258 (gas: 1)\n  5988: jump @1603\n      : @259 (gas: 11)\n  5992: i32 a0 = a1 + 0x4\n  5995: a2 = s1 + 0x4138\n  5999: a5 = 0\n  6001: u64 [a2 + 224] = 0\n  6005: u64 [a2 + 216] = 0\n  6009: u64 [a2 + 200] = 0x20\n  6014: a1 = s1 + 0x4200\n  6018: u64 [a2 + 208] = 0\n  6022: u64 [s1 + 0x1a8] = a3\n  6026: u64 [s1 + 0x1a0] = a4\n  6030: ra = 224, jump @19\n      : @260 [@dyn 112] (gas: 1)\n  6036: t0 = 226, jump @1952\n      : @261 [@dyn 113] (gas: 1)\n  6043: jump @263 if a0 != 0\n      : @262 (gas: 1)\n  6046: jump @1603\n      : @263 (gas: 8)\n  6050: i32 a0 = a1 + 0x24\n  6053: a2 = s1 + 0x4138\n  6057: u64 [a2 + 192] = 0\n  6061: u64 [a2 + 184] = 0\n  6065: u64 [a2 + 168] = 0x21\n  6070: a1 = s1 + 0x41e0\n  6074: u64 [a2 + 176] = 0\n  6078: ra = 228, jump @19\n      : @264 [@dyn 114] (gas: 1)\n  6084: t0 = 230, jump @1953\n      : @265 [@dyn 115] (gas: 1)\n  6091: jump @267 if a0 != 0\n      : @266 (gas: 1)\n  6094: jump @1603\n      : @267 (gas: 13)\n  6098: i32 a0 = a1 + 0x44\n  6101: a1 = u64 [0x20000]\n  6106: u64 [s1 + 0x1a0] = a2\n  6110: a4 = s1 + 0x4138\n  6114: u64 [a4 + 0xa0] = a1\n  6118: a1 = u64 [0x20008]\n  6123: a2 = u64 [0x20010]\n  6128: a3 = u64 [0x20018]\n  6133: u64 [a4 + 0x98] = a1\n  6137: u64 [a4 + 0x90] = a2\n  6141: a1 = s1 + 0x41c0\n  6145: u64 [a4 + 0x88] = a3\n  6149: ra = 232, jump @19\n      : @268 [@dyn 116] (gas: 1)\n  6155: t0 = 234, jump @1951\n      : @269 [@dyn 117] (gas: 1)\n  6162: jump @271 if a0 != 0\n      : @270 (gas: 1)\n  6165: jump @1603\n      : @271 (gas: 10)\n  6169: i32 a0 = a2 + 0x64\n  6172: a3 = s1 + 0x4138\n  6176: u64 [a3 + 120] = 0\n  6179: u64 [a3 + 112] = 0\n  6182: a1 = 0x6e00000000000000\n  6192: u64 [a3 + 0x80] = a1\n  6196: a1 = s1 + 0x41a0\n  6200: u64 [a3 + 104] = 0\n  6203: ra = 0x458\n  6207: jump @19\n      : @272 (gas: 9)\n  6210: u64 [a2 + 640] = 0\n  6214: u64 [a2 + 632] = 0\n  6218: u64 [a2 + 624] = 0\n  6222: u64 [a2 + 616] = 0\n  6226: a0 = s1 + 0x5000\n  6230: i32 a0 = a0 + 0xfffffffffffffba0\n  6234: ra = 0xec\n  6238: ecalli 16 // 'value_transferred'\n  6240: fallthrough\n      : @273 [@dyn 118] (gas: 10)\n  6241: a3 = s1 + 0x4938\n  6245: a4 = a3 + 0x200\n  6249: a0 = u64 [a4 + 0x78]\n  6252: a1 = u64 [a4 + 0x80]\n  6256: a2 = u64 [a4 + 0x70]\n  6259: a3 = u64 [a4 + 0x68]\n  6262: a1 = a1 | a2\n  6265: a0 = a0 | a3\n  6268: a0 = a0 | a1\n  6271: jump @275 if a0 == 0\n      : @274 (gas: 1)\n  6274: jump @1635\n      : @275 (gas: 1)\n  6278: t0 = 238, jump @2026\n      : @276 [@dyn 119] (gas: 1)\n  6285: jump @278 if a1 <u a0\n      : @277 (gas: 1)\n  6288: jump @1636\n      : @278 (gas: 24)\n  6292: a0 = s1 + 0x5000\n  6296: i32 a0 = a0 + 0xfffffffffffffbc0\n  6300: a1 = 0x4\n  6303: ecalli 3 // 'call_data_load'\n  6305: a0 = s1 + 0x4938\n  6309: a5 = a0 + 0x200\n  6313: a4 = u64 [a5 + 0xa0]\n  6317: a3 = u64 [a5 + 0x98]\n  6321: a1 = u64 [a5 + 0x90]\n  6325: a2 = u64 [a5 + 0x88]\n  6329: a0 = s1 + 0x1138\n  6333: a5 = s1 + 0x100\n  6337: u64 [a5 + 0x98] = a4\n  6341: u64 [a0 + 0x520] = a4\n  6345: u64 [a5 + 0xa0] = a3\n  6349: a4 = a0 + 0x500\n  6353: u64 [a4 + 0x18] = a3\n  6356: u64 [a5 + 0xa8] = a1\n  6360: u64 [a4 + 0x10] = a1\n  6363: a1 = s1 + 0x1640\n  6367: u64 [a5 + 0xb0] = a2\n  6371: u64 [a4 + 0x8] = a2\n  6374: a0 = 0\n  6376: ra = 240, jump @19\n      : @279 [@dyn 120] (gas: 2)\n  6382: a0 = 0x1138\n  6386: t0 = 242, jump @2035\n      : @280 [@dyn 121] (gas: 3)\n  6393: a1 = s1 + 0x1620\n  6397: u64 [a2 + 1256] = 0\n  6401: ra = 244, jump @19\n      : @281 [@dyn 122] (gas: 4)\n  6407: a2 = 0x201ec\n  6412: a0 = i32 [0x201ec]\n  6417: a1 = 0x3f\n  6420: jump @283 if a1 <u a0\n      : @282 (gas: 4)\n  6423: u32 [0x201ec] = 0x40\n  6429: u64 [s1 + 0x190] = a2\n  6433: t0 = 0xf6\n  6437: jump @1993\n      : @283 (gas: 2)\n  6441: u64 [s1 + 0x190] = a2\n  6445: t0 = 246, jump @1993\n      : @284 [@dyn 123] (gas: 9)\n  6452: a0 = 0x20200\n  6457: i32 a0 = a0 + 0\n  6459: i32 a2 = a2 + 0\n  6461: a1 = 0x40\n  6464: u64 [s1 + 0x188] = a0\n  6468: ra = 0xf8\n  6472: ecalli 8 // 'hash_keccak_256'\n  6474: t0 = 0xfa\n  6478: jump @1941\n      : @285 [@dyn 124] (gas: 1)\n  6482: t0 = 250, jump @1941\n      : @286 [@dyn 125] (gas: 8)\n  6489: a5 = a1 + 0x200\n  6493: u64 [a5 + 0xa8] = a3\n  6497: u64 [a5 + 0xb0] = a2\n  6501: u64 [a5 + 0xb8] = a4\n  6505: u64 [a5 + 0xc0] = a0\n  6509: a0 = s1 + 0x1600\n  6513: a1 = s1 + 0x4be0\n  6517: ra = 252, jump @21\n      : @287 [@dyn 126] (gas: 15)\n  6523: a0 = s1 + 0x1138\n  6527: a1 = u64 [a0 + 0x4d0]\n  6531: u64 [s1 + 0x180] = a1\n  6535: a1 = u64 [a0 + 0x4c8]\n  6539: u64 [s1 + 0x178] = a1\n  6543: a0 = u32 [a0 + 0x4d8]\n  6547: u64 [s1 + 0x170] = a0\n  6551: a0 = 0x30200\n  6556: u64 [s1 + 0x1b8] = a0\n  6560: i32 a0 = a0 + 0\n  6562: u64 [s1 + 0x168] = a0\n  6566: ra = 0xfe\n  6570: ecalli 5 // 'caller'\n  6572: t0 = 0x100\n  6576: jump @1944\n      : @288 [@dyn 127] (gas: 1)\n  6580: t0 = 256, jump @1944\n      : @289 [@dyn 128] (gas: 2)\n  6587: a1 = 0x1\n  6590: jump @291 if a0 != 0\n      : @290 (gas: 1)\n  6593: jump @750\n      : @291 (gas: 4)\n  6596: a0 = u64 [s1 + 0x1b0]\n  6600: t0 = 0x102\n  6604: a2 = s1 + 0x1138\n  6608: fallthrough\n      : @292 [@dyn 129] (gas: 11)\n  6609: a3 = a2 + 0x400\n  6613: u64 [a3 + 0xa8] = a0\n  6617: a0 = u64 [s1 + 0x1a8]\n  6621: u64 [a3 + 0xb0] = a0\n  6625: a0 = u64 [s1 + 0x1a0]\n  6629: u64 [a3 + 0xb8] = a0\n  6633: a1 = s1 + 0x15e0\n  6637: a0 = u64 [s1 + 0x198]\n  6641: u64 [a3 + 0xc0] = a0\n  6645: a0 = 0\n  6647: ra = 260, jump @19\n      : @293 [@dyn 130] (gas: 9)\n  6653: a0 = s1 + 0x1138\n  6657: u64 [a0 + 1184] = 0\n  6661: u64 [a0 + 1176] = 0\n  6665: u64 [a0 + 1168] = 0\n  6669: a2 = a0\n  6671: a0 = 0x20\n  6674: a1 = s1 + 0x15c0\n  6678: u64 [a2 + 1160] = 0\n  6682: ra = 262, jump @19\n      : @294 [@dyn 131] (gas: 3)\n  6688: a2 = u64 [s1 + 0x190]\n  6692: a0 = i32 [a2]\n  6694: jump @296 if a0 >u 63\n      : @295 (gas: 2)\n  6698: u32 [a2 + 0] = 0x40\n  6701: fallthrough\n      : @296 (gas: 4)\n  6702: a0 = sp + 0xffffffffffffffe0\n  6705: a0 = a0 & 0xffffffffffffffe0\n  6708: u64 [s1 + 0x180] = a0\n  6712: t0 = 264, jump @2005\n      : @297 [@dyn 132] (gas: 27)\n  6719: ecalli 8 // 'hash_keccak_256'\n  6721: a3 = u64 [s1 + 0x180]\n  6725: a0 = u64 [a3]\n  6727: a1 = u64 [a3 + 0x8]\n  6730: a2 = u64 [a3 + 0x10]\n  6733: a3 = u64 [a3 + 0x18]\n  6736: a0 = reverse a0\n  6738: a1 = reverse a1\n  6740: a2 = reverse a2\n  6742: a3 = reverse a3\n  6744: a4 = a3 + 0x2\n  6747: a3 = a4 <u a3\n  6750: a5 = a2 + a3\n  6753: a2 = a5 <u a2\n  6756: a2 = a3 if a3 == 0\n  6759: a2 = a2 + a1\n  6762: a1 = a2 <u a1\n  6765: a0 = a0 + a1\n  6768: a1 = s1 + 0x4938\n  6772: a3 = a1 + 0x200\n  6776: u64 [a3 + 0xc8] = a4\n  6780: u64 [a3 + 0xd0] = a5\n  6784: u64 [a3 + 0xd8] = a2\n  6788: u64 [a3 + 0xe0] = a0\n  6792: a0 = s1 + 0x15a0\n  6796: a1 = s1 + 0x4c00\n  6800: ra = 266, jump @21\n      : @298 [@dyn 133] (gas: 12)\n  6806: a0 = s1 + 0x1138\n  6810: a1 = u64 [a0 + 0x470]\n  6814: u64 [s1 + 0x180] = a1\n  6818: a1 = u64 [a0 + 0x468]\n  6822: u64 [s1 + 0x178] = a1\n  6826: a0 = u32 [a0 + 0x478]\n  6830: u64 [s1 + 0x170] = a0\n  6834: a0 = u64 [s1 + 0x168]\n  6838: ra = 0x10c\n  6842: ecalli 5 // 'caller'\n  6844: t0 = 0x10e\n  6848: jump @1944\n      : @299 [@dyn 134] (gas: 1)\n  6852: t0 = 270, jump @1944\n      : @300 [@dyn 135] (gas: 1)\n  6859: jump @302 if a0 == 0\n      : @301 (gas: 1)\n  6862: jump @742\n      : @302 (gas: 2)\n  6865: a1 = 0x1\n  6868: jump @750\n      : @303 (gas: 9)\n  6871: a0 = s1 + 0x5138\n  6875: u64 [a0 + 64] = 0\n  6878: u64 [a0 + 56] = 0\n  6881: u64 [a0 + 48] = 0\n  6884: u64 [a0 + 40] = 0\n  6887: a0 = s1 + 0x5000\n  6891: i32 a0 = a0 + 0x160\n  6895: ecalli 16 // 'value_transferred'\n  6897: fallthrough\n      : @304 (gas: 9)\n  6898: a3 = s1 + 0x5138\n  6902: a0 = u64 [a3 + 0x38]\n  6905: a1 = u64 [a3 + 0x40]\n  6908: a2 = u64 [a3 + 0x30]\n  6911: a3 = u64 [a3 + 0x28]\n  6914: a1 = a1 | a2\n  6917: a0 = a0 | a3\n  6920: a0 = a0 | a1\n  6923: jump @306 if a0 == 0\n      : @305 (gas: 1)\n  6926: jump @1637\n      : @306 (gas: 3)\n  6930: a0 = u64 [s1 + 0x1b8]\n  6934: a1 = i32 [a0]\n  6936: jump @308 if a1 >u 3\n      : @307 (gas: 1)\n  6940: jump @1638\n      : @308 (gas: 8)\n  6944: a1 = s1 + 0x5138\n  6948: u64 [a1 + 96] = 0\n  6951: u64 [a1 + 88] = 0\n  6954: u64 [a1 + 80] = 0\n  6957: u64 [a1 + 72] = 0x3\n  6961: a0 = s1 + 0x2ac0\n  6965: a1 = s1 + 0x5180\n  6969: ra = 272, jump @21\n      : @309 [@dyn 136] (gas: 12)\n  6975: a1 = s1 + 0x2938\n  6979: a2 = a1 + 0x100\n  6983: a0 = u64 [a2 + 0x98]\n  6987: a1 = s1 + 0x100\n  6991: u64 [a1 + 0xa8] = a0\n  6995: a0 = u64 [a2 + 0x90]\n  6999: u64 [a1 + 0xb8] = a0\n  7003: a0 = u64 [a2 + 0x88]\n  7007: u64 [a1 + 0xb0] = a0\n  7011: a0 = s1 + 0x2aa0\n  7015: a1 = 0x40\n  7018: ra = 274, jump @17\n      : @310 [@dyn 137] (gas: 7)\n  7024: a3 = s1 + 0x2938\n  7028: a5 = a3 + 0x100\n  7032: a4 = u64 [a5 + 0x80]\n  7036: a1 = u64 [a5 + 0x78]\n  7039: a2 = u64 [a5 + 0x70]\n  7042: a0 = u64 [a5 + 0x68]\n  7045: t0 = 276, jump @2017\n      : @311 [@dyn 138] (gas: 1)\n  7052: jump @313 if a1 == 0\n      : @312 (gas: 1)\n  7055: jump @1603\n      : @313 (gas: 15)\n  7059: a4 = s1 + 0x100\n  7063: a1 = u64 [a4 + 0xa8]\n  7067: a1 = a1 << 0x20\n  7070: a2 = a1 >> 0x20\n  7073: u64 [a3 + 352] = 0\n  7077: a1 = u64 [a4 + 0xb0]\n  7081: a5 = a3 + 0x100\n  7085: u64 [a5 + 0x48] = a1\n  7088: a1 = u64 [a4 + 0xb8]\n  7092: u64 [a5 + 0x50] = a1\n  7095: a1 = s1 + 0x2a80\n  7099: u64 [a5 + 0x58] = a2\n  7102: u64 [s1 + 0x1b8] = a0\n  7106: ra = 0x348\n  7110: jump @19\n      : @314 (gas: 11)\n  7113: u64 [a2 + 480] = 0\n  7117: u64 [a2 + 472] = 0\n  7121: u64 [a2 + 464] = 0\n  7125: u64 [a2 + 456] = 0\n  7129: a0 = s1 + 0x5000\n  7133: i32 a0 = a0 + 0xfffffffffffffb00\n  7137: ra = 0x116\n  7141: ecalli 16 // 'value_transferred'\n  7143: a0 = 0x5000\n  7147: t0 = 0x118\n  7151: jump @2033\n      : @315 [@dyn 139] (gas: 2)\n  7155: a0 = 0x5000\n  7159: t0 = 280, jump @2033\n      : @316 [@dyn 140] (gas: 8)\n  7166: a0 = u64 [a4 + 0xd8]\n  7170: a1 = u64 [a4 + 0xe0]\n  7174: a2 = u64 [a4 + 0xd0]\n  7178: a3 = u64 [a4 + 0xc8]\n  7182: a1 = a1 | a2\n  7185: a0 = a0 | a3\n  7188: a0 = a0 | a1\n  7191: jump @318 if a0 == 0\n      : @317 (gas: 1)\n  7194: jump @1639\n      : @318 (gas: 1)\n  7198: t0 = 282, jump @2026\n      : @319 [@dyn 141] (gas: 1)\n  7205: jump @321 if a1 <u a0\n      : @320 (gas: 1)\n  7208: jump @1640\n      : @321 (gas: 2)\n  7212: a0 = s1 + 0x1260\n  7216: ra = 284, jump @1785\n      : @322 [@dyn 142] (gas: 2)\n  7223: a0 = 0x1000\n  7227: t0 = 286, jump @2015\n      : @323 [@dyn 143] (gas: 14)\n  7234: a0 = u64 [a2 + 0x38]\n  7237: u64 [s1 + 0x188] = a0\n  7241: a0 = u64 [a2 + 0x30]\n  7244: u64 [s1 + 0x190] = a0\n  7248: a0 = u64 [a2 + 0x28]\n  7251: u64 [s1 + 0x198] = a0\n  7255: a1 = s1 + 0x4938\n  7259: u64 [a1 + 512] = 0\n  7263: u64 [a1 + 504] = 0\n  7267: u64 [a1 + 496] = 0\n  7271: u64 [a1 + 488] = 0x3\n  7276: a0 = s1 + 0x1240\n  7280: a1 = s1 + 0x4b20\n  7284: ra = 288, jump @21\n      : @324 [@dyn 144] (gas: 13)\n  7290: a1 = s1 + 0x1138\n  7294: a0 = u64 [a1 + 0x110]\n  7298: u64 [s1 + 0x1b8] = a0\n  7302: a0 = u64 [a1 + 0x108]\n  7306: u64 [s1 + 0x1b0] = a0\n  7310: a0 = u32 [a1 + 0x118]\n  7314: u64 [s1 + 0x1a8] = a0\n  7318: a0 = 0x30200\n  7323: u64 [s1 + 0x1a0] = a0\n  7327: i32 a0 = a0 + 0\n  7329: ra = 0x122\n  7333: ecalli 5 // 'caller'\n  7335: fallthrough\n      : @325 [@dyn 145] (gas: 3)\n  7336: a5 = s1 + 0x100\n  7340: a2 = u64 [a5 + 0xa0]\n  7344: t0 = 292, jump @1936\n      : @326 [@dyn 146] (gas: 1)\n  7351: jump @328 if a0 != 0\n      : @327 (gas: 1)\n  7354: jump @1641\n      : @328 (gas: 3)\n  7358: a0 = s1 + 0x1220\n  7362: a1 = 0x40\n  7365: ra = 294, jump @17\n      : @329 [@dyn 147] (gas: 13)\n  7371: a4 = s1 + 0x1138\n  7375: t0 = u64 [a4 + 0x100]\n  7379: a5 = u64 [a4 + 0xf8]\n  7383: a3 = u64 [a4 + 0xf0]\n  7387: a0 = u64 [a4 + 0xe8]\n  7391: a2 = a3 | t0\n  7394: a1 = a0 | a5\n  7397: a1 = a1 | a2\n  7400: a1 = a1 >> 0x20\n  7403: a2 = a2 | a5\n  7406: a2 = a2 << 0x20\n  7409: a1 = a1 | a2\n  7412: jump @331 if a1 == 0\n      : @330 (gas: 1)\n  7415: jump @1603\n      : @331 (gas: 11)\n  7419: u64 [a4 + 216] = 0\n  7423: u64 [a4 + 208] = 0\n  7427: u64 [a4 + 200] = 0\n  7431: u64 [s1 + 0x1b0] = a3\n  7435: a3 = 0x8c379a000000000\n  7445: a1 = s1 + 0x1200\n  7449: u64 [a4 + 0xe0] = a3\n  7453: u64 [s1 + 0x1b8] = a0\n  7457: u64 [s1 + 0x1a8] = t0\n  7461: u64 [s1 + 0x1a0] = a5\n  7465: ra = 296, jump @19\n      : @332 [@dyn 148] (gas: 1)\n  7471: t0 = 298, jump @1939\n      : @333 [@dyn 149] (gas: 1)\n  7478: jump @335 if a0 != 0\n      : @334 (gas: 1)\n  7481: jump @1603\n      : @335 (gas: 4)\n  7485: i32 a0 = a1 + 0x4\n  7488: t0 = 0x12c\n  7492: a2 = s1 + 0x1138\n  7496: fallthrough\n      : @336 [@dyn 150] (gas: 9)\n  7497: a5 = 0\n  7499: u64 [a2 + 192] = 0\n  7503: u64 [a2 + 184] = 0\n  7507: u64 [a2 + 168] = 0x20\n  7512: a1 = s1 + 0x11e0\n  7516: u64 [a2 + 176] = 0\n  7520: u64 [s1 + 0x1a8] = a3\n  7524: u64 [s1 + 0x1a0] = a4\n  7528: ra = 302, jump @19\n      : @337 [@dyn 151] (gas: 1)\n  7534: t0 = 304, jump @1952\n      : @338 [@dyn 152] (gas: 1)\n  7541: jump @340 if a0 != 0\n      : @339 (gas: 1)\n  7544: jump @1603\n      : @340 (gas: 4)\n  7548: i32 a0 = a1 + 0x24\n  7551: t0 = 0x132\n  7555: a2 = s1 + 0x1138\n  7559: fallthrough\n      : @341 [@dyn 153] (gas: 6)\n  7560: u64 [a2 + 160] = 0\n  7564: u64 [a2 + 152] = 0\n  7568: u64 [a2 + 136] = 0x25\n  7573: a1 = s1 + 0x11c0\n  7577: u64 [a2 + 144] = 0\n  7581: ra = 308, jump @19\n      : @342 [@dyn 154] (gas: 1)\n  7587: t0 = 310, jump @1953\n      : @343 [@dyn 155] (gas: 1)\n  7594: jump @345 if a0 != 0\n      : @344 (gas: 1)\n  7597: jump @1603\n      : @345 (gas: 13)\n  7601: i32 a0 = a1 + 0x44\n  7604: a1 = u64 [0x20000]\n  7609: u64 [s1 + 0x1a0] = a2\n  7613: a4 = s1 + 0x1138\n  7617: u64 [a4 + 0x80] = a1\n  7621: a1 = u64 [0x20008]\n  7626: a2 = u64 [0x20188]\n  7631: a3 = u64 [0x20190]\n  7636: u64 [a4 + 0x78] = a1\n  7639: u64 [a4 + 0x70] = a2\n  7642: a1 = s1 + 0x11a0\n  7646: u64 [a4 + 0x68] = a3\n  7649: ra = 312, jump @19\n      : @346 [@dyn 156] (gas: 1)\n  7655: t0 = 314, jump @1951\n      : @347 [@dyn 157] (gas: 1)\n  7662: jump @349 if a0 != 0\n      : @348 (gas: 1)\n  7665: jump @1603\n      : @349 (gas: 10)\n  7669: i32 a0 = a2 + 0x64\n  7672: a3 = s1 + 0x1138\n  7676: u64 [a3 + 88] = 0\n  7679: u64 [a3 + 80] = 0\n  7682: a1 = 0x63206b6579000000\n  7692: u64 [a3 + 0x60] = a1\n  7695: a1 = s1 + 0x1180\n  7699: u64 [a3 + 72] = 0\n  7702: ra = 0x458\n  7706: jump @19\n      : @350 (gas: 11)\n  7709: u64 [a2 + 1792] = 0\n  7713: u64 [a2 + 1784] = 0\n  7717: u64 [a2 + 1776] = 0\n  7721: u64 [a2 + 1768] = 0\n  7725: a0 = s1 + 0x6000\n  7729: i32 a0 = a0 + 0xfffffffffffff820\n  7733: ra = 0x13c\n  7737: ecalli 16 // 'value_transferred'\n  7739: a0 = 0x5000\n  7743: t0 = 0x13e\n  7747: jump @2002\n      : @351 [@dyn 158] (gas: 2)\n  7751: a0 = 0x5000\n  7755: t0 = 318, jump @2002\n      : @352 [@dyn 159] (gas: 1)\n  7762: jump @354 if a0 == 0\n      : @353 (gas: 1)\n  7765: jump @1644\n      : @354 (gas: 1)\n  7769: t0 = 320, jump @2026\n      : @355 [@dyn 160] (gas: 1)\n  7776: jump @357 if a1 <u a0\n      : @356 (gas: 1)\n  7779: jump @1645\n      : @357 (gas: 23)\n  7783: a0 = s1 + 0x6000\n  7787: i32 a0 = a0 + 0xfffffffffffff840\n  7791: a1 = 0x4\n  7794: ecalli 3 // 'call_data_load'\n  7796: a0 = s1 + 0x5138\n  7800: a5 = a0 + 0x700\n  7804: a1 = u64 [a5 + 0x20]\n  7807: a2 = u64 [a5 + 0x18]\n  7810: a3 = u64 [a5 + 0x10]\n  7813: a4 = u64 [a5 + 0x8]\n  7816: a0 = s1 + 0x4138\n  7820: u64 [s1 + 0x190] = a1\n  7824: a5 = a0 + 0x500\n  7828: u64 [a5 + 0xa0] = a1\n  7832: u64 [s1 + 0x188] = a2\n  7836: u64 [a5 + 0x98] = a2\n  7840: u64 [s1 + 0x180] = a3\n  7844: u64 [a5 + 0x90] = a3\n  7848: a1 = s1 + 0x46c0\n  7852: u64 [s1 + 0x178] = a4\n  7856: u64 [a5 + 0x88] = a4\n  7860: a0 = 0\n  7862: ra = 322, jump @19\n      : @358 [@dyn 161] (gas: 9)\n  7868: a0 = s1 + 0x4138\n  7872: u64 [a0 + 1408] = 0\n  7876: u64 [a0 + 1400] = 0\n  7880: u64 [a0 + 1392] = 0\n  7884: a2 = a0\n  7886: a0 = 0x20\n  7889: a1 = s1 + 0x46a0\n  7893: u64 [a2 + 1384] = 0\n  7897: ra = 324, jump @19\n      : @359 [@dyn 162] (gas: 5)\n  7903: a0 = 0x201ec\n  7908: u64 [s1 + 0x198] = a0\n  7912: a0 = i32 [0x201ec]\n  7917: a1 = 0x3f\n  7920: jump @361 if a1 <u a0\n      : @360 (gas: 4)\n  7923: a1 = u64 [s1 + 0x198]\n  7927: u32 [a1 + 0] = 0x40\n  7930: t0 = 0x146\n  7934: jump @1993\n      : @361 (gas: 1)\n  7938: t0 = 326, jump @1993\n      : @362 [@dyn 163] (gas: 10)\n  7945: a0 = 0x20200\n  7950: i32 a0 = a0 + 0\n  7952: i32 a2 = a2 + 0\n  7954: a1 = 0x40\n  7957: u64 [s1 + 0x170] = a0\n  7961: ra = 0x148\n  7965: ecalli 8 // 'hash_keccak_256'\n  7967: a3 = u64 [s1 + 0x1b8]\n  7971: t0 = 0x14a\n  7975: jump @1946\n      : @363 [@dyn 164] (gas: 2)\n  7979: a3 = u64 [s1 + 0x1b8]\n  7983: t0 = 330, jump @1946\n      : @364 [@dyn 165] (gas: 8)\n  7990: a5 = a1 + 0x700\n  7994: u64 [a5 + 0x28] = a3\n  7997: u64 [a5 + 0x30] = a2\n  8000: u64 [a5 + 0x38] = a4\n  8003: u64 [a5 + 0x40] = a0\n  8006: a0 = s1 + 0x4680\n  8010: a1 = s1 + 0x5860\n  8014: ra = 332, jump @21\n      : @365 [@dyn 166] (gas: 15)\n  8020: a0 = s1 + 0x4138\n  8024: a1 = u64 [a0 + 0x550]\n  8028: u64 [s1 + 0x1b0] = a1\n  8032: a1 = u64 [a0 + 0x548]\n  8036: u64 [s1 + 0x1a8] = a1\n  8040: a0 = u32 [a0 + 0x558]\n  8044: u64 [s1 + 0x1a0] = a0\n  8048: a0 = 0x30200\n  8053: u64 [s1 + 0x1b8] = a0\n  8057: i32 a0 = a0 + 0\n  8059: u64 [s1 + 0x168] = a0\n  8063: ra = 0x14e\n  8067: ecalli 5 // 'caller'\n  8069: t0 = 0x150\n  8073: jump @1945\n      : @366 [@dyn 167] (gas: 1)\n  8077: t0 = 336, jump @1945\n      : @367 [@dyn 168] (gas: 2)\n  8084: a1 = 0x1\n  8087: jump @369 if a0 != 0\n      : @368 (gas: 1)\n  8090: jump @812\n      : @369 (gas: 3)\n  8093: a0 = u64 [s1 + 0x178]\n  8097: a1 = 0x4000\n  8101: t0 = 338, jump @2040\n      : @370 [@dyn 169] (gas: 10)\n  8108: u64 [a3 + 0x28] = a0\n  8111: a0 = u64 [s1 + 0x180]\n  8115: u64 [a3 + 0x30] = a0\n  8118: a0 = u64 [s1 + 0x188]\n  8122: u64 [a3 + 0x38] = a0\n  8125: a1 = s1 + 0x4660\n  8129: a0 = u64 [s1 + 0x190]\n  8133: u64 [a3 + 0x40] = a0\n  8136: a0 = 0\n  8138: ra = 340, jump @19\n      : @371 [@dyn 170] (gas: 9)\n  8144: a0 = s1 + 0x4138\n  8148: u64 [a0 + 1312] = 0\n  8152: u64 [a0 + 1304] = 0\n  8156: u64 [a0 + 1296] = 0\n  8160: a2 = a0\n  8162: a0 = 0x20\n  8165: a1 = s1 + 0x4640\n  8169: u64 [a2 + 1288] = 0\n  8173: ra = 342, jump @19\n      : @372 [@dyn 171] (gas: 3)\n  8179: a0 = u64 [s1 + 0x198]\n  8183: a0 = i32 [a0]\n  8185: jump @374 if a0 >u 63\n      : @373 (gas: 4)\n  8189: a1 = u64 [s1 + 0x198]\n  8193: u32 [a1 + 0] = 0x40\n  8196: t0 = 0x158\n  8200: jump @1992\n      : @374 (gas: 1)\n  8204: t0 = 344, jump @1992\n      : @375 [@dyn 172] (gas: 6)\n  8211: a0 = u64 [s1 + 0x170]\n  8215: ra = 0x15a\n  8219: ecalli 8 // 'hash_keccak_256'\n  8221: a3 = u64 [s1 + 0x1b0]\n  8225: t0 = 0x15c\n  8229: jump @1940\n      : @376 [@dyn 173] (gas: 2)\n  8233: a3 = u64 [s1 + 0x1b0]\n  8237: t0 = 348, jump @1940\n      : @377 [@dyn 174] (gas: 8)\n  8244: a3 = a1 + 0x700\n  8248: u64 [a3 + 0x48] = a4\n  8251: u64 [a3 + 0x50] = a5\n  8254: u64 [a3 + 0x58] = a2\n  8257: u64 [a3 + 0x60] = a0\n  8260: a0 = s1 + 0x4620\n  8264: a1 = s1 + 0x5880\n  8268: ra = 350, jump @21\n      : @378 [@dyn 175] (gas: 12)\n  8274: a0 = s1 + 0x4138\n  8278: a1 = u64 [a0 + 0x4f0]\n  8282: u64 [s1 + 0x1b0] = a1\n  8286: a1 = u64 [a0 + 0x4e8]\n  8290: u64 [s1 + 0x1a8] = a1\n  8294: a0 = u32 [a0 + 0x4f8]\n  8298: u64 [s1 + 0x1a0] = a0\n  8302: a0 = u64 [s1 + 0x168]\n  8306: ra = 0x160\n  8310: ecalli 5 // 'caller'\n  8312: t0 = 0x162\n  8316: jump @1945\n      : @379 [@dyn 176] (gas: 1)\n  8320: t0 = 354, jump @1945\n      : @380 [@dyn 177] (gas: 1)\n  8327: jump @382 if a0 == 0\n      : @381 (gas: 1)\n  8330: jump @804\n      : @382 (gas: 2)\n  8333: a1 = 0x1\n  8336: jump @812\n      : @383 (gas: 1)\n  8339: jump @385 if a0 == 2142165999\n      : @384 (gas: 1)\n  8346: jump @1604\n      : @385 (gas: 8)\n  8350: u64 [a2 + 1152] = 0\n  8354: u64 [a2 + 1144] = 0\n  8358: u64 [a2 + 1136] = 0\n  8362: u64 [a2 + 1128] = 0\n  8366: a0 = s1 + 0x5000\n  8370: i32 a0 = a0 + 0xfffffffffffffda0\n  8374: ecalli 16 // 'value_transferred'\n  8376: fallthrough\n      : @386 (gas: 10)\n  8377: a3 = s1 + 0x4938\n  8381: a4 = a3 + 0x400\n  8385: a0 = u64 [a4 + 0x78]\n  8388: a1 = u64 [a4 + 0x80]\n  8392: a2 = u64 [a4 + 0x70]\n  8395: a3 = u64 [a4 + 0x68]\n  8398: a1 = a1 | a2\n  8401: a0 = a0 | a3\n  8404: a0 = a0 | a1\n  8407: jump @388 if a0 == 0\n      : @387 (gas: 1)\n  8410: jump @1646\n      : @388 (gas: 3)\n  8414: a0 = u64 [s1 + 0x1b8]\n  8418: a0 = i32 [a0]\n  8420: jump @390 if a0 >u 99\n      : @389 (gas: 1)\n  8424: jump @1647\n      : @390 (gas: 20)\n  8428: a0 = s1 + 0x5000\n  8432: i32 a0 = a0 + 0xfffffffffffffdc0\n  8436: a1 = 0x4\n  8439: ecalli 3 // 'call_data_load'\n  8441: a1 = s1 + 0x4938\n  8445: a2 = a1 + 0x400\n  8449: a0 = u64 [a2 + 0xa0]\n  8453: a1 = s1 + 0x100\n  8457: u64 [a1 + 0x20] = a0\n  8460: a0 = u64 [a2 + 0x98]\n  8464: u64 [a1 + 0x28] = a0\n  8467: a0 = u64 [a2 + 0x90]\n  8471: u64 [a1 + 0x30] = a0\n  8474: a0 = u64 [a2 + 0x88]\n  8478: u64 [a1 + 0x38] = a0\n  8481: a0 = s1 + 0x5000\n  8485: i32 a0 = a0 + 0xfffffffffffffde0\n  8489: a1 = 0x24\n  8492: ecalli 3 // 'call_data_load'\n  8494: fallthrough\n      : @391 (gas: 9)\n  8495: a2 = s1 + 0x4938\n  8499: a0 = a2 + 0x400\n  8503: a5 = u64 [a0 + 0xc0]\n  8507: a3 = u64 [a0 + 0xb8]\n  8511: a4 = u64 [a0 + 0xb0]\n  8515: a0 = a3 | a5\n  8518: a1 = a4 <u 0x1\n  8521: a1 = 0 if a0 != 0\n  8523: jump @393 if a1 != 0\n      : @392 (gas: 1)\n  8526: jump @1648\n      : @393 (gas: 19)\n  8530: a1 = u64 [a2 + 0x4a8]\n  8534: a0 = u64 [s1 + 0x1b8]\n  8538: t2 = u32 [a0]\n  8540: a0 = a1 + 0x23\n  8543: a2 = a0 <u a1\n  8546: t0 = a4 + a2\n  8549: u64 [s1 + 0x158] = a4\n  8553: a4 = t0 <u a4\n  8556: a4 = a2 if a2 == 0\n  8559: a4 = a4 + a3\n  8562: u64 [s1 + 0x168] = a3\n  8566: a2 = a4 <u a3\n  8569: u64 [s1 + 0x170] = a5\n  8573: a2 = a2 + a5\n  8576: a2 = a2 | a4\n  8579: a0 = a0 <u t2\n  8582: a0 = 0 if t0 != 0\n  8584: a0 = 0 if a2 != 0\n  8586: jump @395 if a0 != 0\n      : @394 (gas: 1)\n  8589: jump @1663\n      : @395 (gas: 24)\n  8593: u64 [s1 + 0x160] = a1\n  8597: i32 a1 = a1 + 0x4\n  8600: a0 = s1 + 0x5000\n  8604: i32 a0 = a0 + 0xfffffffffffffe00\n  8608: ecalli 3 // 'call_data_load'\n  8610: a0 = s1 + 0x4938\n  8614: a5 = a0 + 0x400\n  8618: a3 = u64 [a5 + 0xe0]\n  8622: a1 = u64 [a5 + 0xd8]\n  8626: a2 = u64 [a5 + 0xd0]\n  8630: a4 = u64 [a5 + 0xc8]\n  8634: a5 = s1 + 0x2938\n  8638: u64 [s1 + 0x1a0] = a3\n  8642: u64 [a5 + 0x120] = a3\n  8646: u64 [s1 + 0x1a8] = a1\n  8650: a3 = a5 + 0x100\n  8654: u64 [a3 + 0x18] = a1\n  8657: u64 [s1 + 0x1b0] = a2\n  8661: u64 [a3 + 0x10] = a2\n  8664: a0 = s1 + 0x2a60\n  8668: a1 = s1 + 0x2a40\n  8672: u64 [s1 + 0x198] = a4\n  8676: u64 [a3 + 0x8] = a4\n  8679: ra = 356, jump @1791\n      : @396 [@dyn 178] (gas: 13)\n  8686: a0 = s1 + 0x2938\n  8690: a2 = a0 + 0x100\n  8694: a1 = u64 [a2 + 0x28]\n  8697: u64 [s1 + 0x190] = a1\n  8701: a1 = u64 [a2 + 0x30]\n  8704: u64 [s1 + 0x188] = a1\n  8708: a1 = u64 [a2 + 0x38]\n  8711: u64 [s1 + 0x180] = a1\n  8715: a1 = u64 [a2 + 0x40]\n  8718: u64 [s1 + 0x178] = a1\n  8722: a0 = s1 + 0x2a20\n  8726: a1 = 0x40\n  8729: ra = 358, jump @17\n      : @397 [@dyn 179] (gas: 25)\n  8735: a0 = s1 + 0x2938\n  8739: a1 = u64 [a0 + 0x100]\n  8743: u64 [s1 + 0x100] = a1\n  8747: a2 = u64 [a0 + 0xf8]\n  8751: u64 [s1 + 0x108] = a2\n  8755: a4 = u64 [a0 + 0xf0]\n  8759: u64 [s1 + 0x110] = a4\n  8763: a5 = u64 [a0 + 0xe8]\n  8767: u64 [s1 + 0x118] = a5\n  8771: a3 = u64 [s1 + 0x178]\n  8775: u64 [a0 + 0xc0] = a3\n  8779: a3 = u64 [s1 + 0x180]\n  8783: u64 [a0 + 0xb8] = a3\n  8787: a3 = u64 [s1 + 0x188]\n  8791: u64 [a0 + 0xb0] = a3\n  8795: a3 = u64 [s1 + 0x190]\n  8799: u64 [a0 + 0xa8] = a3\n  8803: u64 [a0 + 0xe0] = a1\n  8807: u64 [a0 + 0xd8] = a2\n  8811: u64 [a0 + 0xd0] = a4\n  8815: a2 = a0\n  8817: a0 = s1 + 0x2a00\n  8821: a1 = s1 + 0x29e0\n  8825: u64 [a2 + 0xc8] = a5\n  8829: ra = 360, jump @1749\n      : @398 [@dyn 180] (gas: 7)\n  8836: a4 = s1 + 0x100\n  8840: a0 = u64 [a4 + 0x18]\n  8843: a1 = u64 [a4]\n  8845: a2 = u64 [a4 + 0x10]\n  8848: a2 = a2 | a1\n  8851: a3 = u64 [a4 + 0x8]\n  8854: t0 = 362, jump @2004\n      : @399 [@dyn 181] (gas: 1)\n  8861: jump @401 if a1 == 0\n      : @400 (gas: 1)\n  8864: jump @1603\n      : @401 (gas: 11)\n  8868: a2 = s1 + 0x2938\n  8872: a1 = u64 [s1 + 0x198]\n  8876: u64 [a2 + 0x88] = a1\n  8880: a1 = u64 [s1 + 0x1b0]\n  8884: u64 [a2 + 0x90] = a1\n  8888: a1 = u64 [s1 + 0x1a8]\n  8892: u64 [a2 + 0x98] = a1\n  8896: a1 = s1 + 0x29c0\n  8900: a3 = u64 [s1 + 0x1a0]\n  8904: u64 [a2 + 0xa0] = a3\n  8908: ra = 364, jump @19\n      : @402 [@dyn 182] (gas: 58)\n  8914: a2 = u64 [s1 + 0x198]\n  8918: a0 = a2 >> 0x3b\n  8921: a1 = u64 [s1 + 0x1b0]\n  8925: a1 = a1 << 0x5\n  8928: a1 = a1 | a0\n  8931: a2 = a2 << 0x5\n  8934: a0 = u64 [s1 + 0x160]\n  8938: t2 = a0 + 0x24\n  8941: t0 = t2 <u a0\n  8944: a0 = u64 [s1 + 0x158]\n  8948: ra = a0 + t0\n  8951: a1 = a1 + ra\n  8954: a2 = a2 + t2\n  8957: u64 [s1 + 0x160] = a2\n  8961: a2 = a2 <u t2\n  8964: t1 = a1 + a2\n  8967: a3 = t1 ^ ra\n  8970: a5 = t1 <u ra\n  8973: a5 = a2 if a3 == 0\n  8976: a2 = u64 [s1 + 0x1a0]\n  8980: a2 = a2 << 0x5\n  8983: a4 = u64 [s1 + 0x1a8]\n  8987: a3 = a4 >> 0x3b\n  8990: a2 = a2 | a3\n  8993: a3 = u64 [s1 + 0x1b0]\n  8997: a3 = a3 >> 0x3b\n  9000: a4 = a4 << 0x5\n  9003: a3 = a3 | a4\n  9006: a4 = ra <u a0\n  9009: a4 = t0 if t0 == 0\n  9012: a0 = u64 [s1 + 0x168]\n  9016: t0 = a0 + a4\n  9019: a0 = t0 <u a0\n  9022: a4 = u64 [s1 + 0x170]\n  9026: a4 = a4 + a0\n  9029: a1 = t0 + a3\n  9032: a2 = a2 + a4\n  9035: a0 = a1 <u t0\n  9038: a0 = a0 + a2\n  9041: a3 = a1 + a5\n  9044: a1 = a3 <u a1\n  9047: a5 = a0 + a1\n  9050: a0 = u64 [s1 + 0x1b8]\n  9054: a0 = u32 [a0]\n  9056: a1 = a5 <u 0x1\n  9059: a2 = a3 <u 0x1\n  9062: a2 = a1 if a5 != 0\n  9065: a1 = u64 [s1 + 0x160]\n  9069: a0 = a0 <u a1\n  9072: a0 = a0 ^ 0x1\n  9075: a1 = t1 <u 0x1\n  9078: u64 [s1 + 0x158] = t1\n  9082: a0 = a1 if t1 != 0\n  9085: u64 [s1 + 0x150] = a3\n  9089: u64 [s1 + 0x148] = a5\n  9093: a1 = a3 | a5\n  9096: a0 = a2 if a1 != 0\n  9099: jump @404 if a0 != 0\n      : @403 (gas: 1)\n  9102: jump @1664\n      : @404 (gas: 11)\n  9106: a0 = 0xffffffe0\n  9116: a1 = s1 + 0x100\n  9120: u64 [a1 + 0x40] = a0\n  9123: a0 = u64 [a1 + 0x18]\n  9126: u64 [a1 + 0xb0] = a0\n  9130: a0 = u64 [a1 + 0x10]\n  9133: u64 [a1 + 0xa8] = a0\n  9137: t1 = u64 [s1 + 0x108]\n  9141: a0 = u64 [a1]\n  9143: u64 [a1 + 0xb8] = a0\n  9147: fallthrough\n      : @405 (gas: 16)\n  9148: a0 = u64 [s1 + 0x160]\n  9152: a0 = t2 <u a0\n  9155: a2 = u64 [s1 + 0x158]\n  9159: a1 = ra ^ a2\n  9162: a2 = ra <u a2\n  9165: a2 = a0 if a1 == 0\n  9168: a0 = u64 [s1 + 0x150]\n  9172: a5 = t0 <u a0\n  9175: a3 = u64 [s1 + 0x148]\n  9179: a1 = a4 ^ a3\n  9182: a3 = a4 <u a3\n  9185: a3 = a5 if a1 == 0\n  9188: a0 = t0 ^ a0\n  9191: a0 = a0 | a1\n  9194: a3 = a2 if a0 == 0\n  9197: jump @407 if a3 != 0\n      : @406 (gas: 1)\n  9200: jump @958\n      : @407 (gas: 8)\n  9203: a0 = t2 | t0\n  9206: a1 = ra | a4\n  9209: a0 = a0 | a1\n  9212: a0 = a0 >> 0x20\n  9215: a1 = a1 | t0\n  9218: a1 = a1 << 0x20\n  9221: a0 = a0 | a1\n  9224: jump @409 if a0 == 0\n      : @408 (gas: 1)\n  9227: jump @1603\n      : @409 (gas: 10)\n  9231: u64 [s1 + 0x188] = t0\n  9235: u64 [s1 + 0x190] = a4\n  9239: u64 [s1 + 0x198] = ra\n  9243: i32 a1 = t2 + 0\n  9245: a0 = s1 + 0x5000\n  9249: i32 a0 = a0 + 0xfffffffffffffe20\n  9253: u64 [s1 + 0x180] = t2\n  9257: u64 [s1 + 0x1a0] = t1\n  9261: ecalli 3 // 'call_data_load'\n  9263: fallthrough\n      : @410 (gas: 10)\n  9264: a2 = u64 [s1 + 0x1a0]\n  9268: a5 = u64 [s1 + 0x1b8]\n  9272: a0 = a2 | a5\n  9275: a1 = u64 [s1 + 0x140]\n  9279: a3 = u64 [s1 + 0x1b0]\n  9283: a1 = a3 <u a1\n  9286: a4 = u64 [s1 + 0x1a8]\n  9290: a1 = 0 if a4 != 0\n  9292: a1 = 0 if a0 != 0\n  9294: jump @412 if a1 != 0\n      : @411 (gas: 1)\n  9297: jump @1603\n      : @412 (gas: 26)\n  9301: a1 = a3 + 0x20\n  9304: a0 = a1 <u a3\n  9307: a3 = a1\n  9309: u64 [s1 + 0x168] = a1\n  9313: a1 = a4 + a0\n  9316: u64 [s1 + 0x178] = a1\n  9320: a1 = a1 <u a4\n  9323: a1 = a0 if a0 == 0\n  9326: a4 = s1 + 0x4938\n  9330: t0 = u64 [a4 + 0x4e8]\n  9334: t2 = u64 [a4 + 0x4f0]\n  9338: a0 = u64 [a4 + 0x4f8]\n  9342: a4 = u64 [a4 + 0x500]\n  9346: a1 = a1 + a2\n  9349: u64 [s1 + 0x170] = a1\n  9353: a1 = a1 <u a2\n  9356: a5 = a5 + a1\n  9359: u64 [s1 + 0x1b8] = a5\n  9363: a5 = s1 + 0x1138\n  9367: u64 [a5 + 0x700] = a4\n  9371: u64 [a5 + 0x6f8] = a0\n  9375: u64 [a5 + 0x6f0] = t2\n  9379: a1 = s1 + 0x1820\n  9383: u64 [a5 + 0x6e8] = t0\n  9387: a0 = a3\n  9389: ra = 366, jump @19\n      : @413 [@dyn 183] (gas: 20)\n  9395: a2 = s1 + 0x100\n  9399: a1 = u64 [a2 + 0x80]\n  9403: a0 = a1 + 0x20\n  9406: a1 = a0 <u a1\n  9409: a3 = u64 [a2 + 0x98]\n  9413: ra = a3 + a1\n  9416: a3 = ra <u a3\n  9419: a3 = a1 if a1 == 0\n  9422: a1 = u64 [a2 + 0x88]\n  9426: t0 = a1 + a3\n  9429: a1 = t0 <u a1\n  9432: a4 = u64 [a2 + 0x90]\n  9436: a4 = a4 + a1\n  9439: a1 = u64 [a2 + 0x68]\n  9442: u64 [a2 + 0xb0] = a1\n  9446: a1 = u64 [a2 + 0x78]\n  9449: u64 [a2 + 0xa8] = a1\n  9453: t1 = u64 [s1 + 0x170]\n  9457: t2 = a0\n  9459: jump @405\n      : @414 (gas: 9)\n  9462: u64 [a3 + 1856] = 0\n  9466: u64 [a3 + 1848] = 0\n  9470: u64 [a3 + 1840] = 0\n  9474: u64 [a3 + 1832] = 0\n  9478: a0 = s1 + 0x5000\n  9482: i32 a0 = a0 + 0xfffffffffffff860\n  9486: ecalli 16 // 'value_transferred'\n  9488: a3 = s1 + 0x4138\n  9492: fallthrough\n      : @415 (gas: 9)\n  9493: a4 = a3 + 0x700\n  9497: a0 = u64 [a4 + 0x38]\n  9500: a1 = u64 [a4 + 0x40]\n  9503: a2 = u64 [a4 + 0x30]\n  9506: a3 = u64 [a4 + 0x28]\n  9509: a1 = a1 | a2\n  9512: a0 = a0 | a3\n  9515: a0 = a0 | a1\n  9518: jump @417 if a0 == 0\n      : @416 (gas: 1)\n  9521: jump @1649\n      : @417 (gas: 3)\n  9525: a0 = u64 [s1 + 0x1b8]\n  9529: a0 = i32 [a0]\n  9531: jump @419 if a0 >u 67\n      : @418 (gas: 1)\n  9535: jump @1650\n      : @419 (gas: 5)\n  9539: a0 = s1 + 0x5000\n  9543: i32 a0 = a0 + 0xfffffffffffff880\n  9547: a1 = 0x4\n  9550: ecalli 3 // 'call_data_load'\n  9552: fallthrough\n      : @420 (gas: 9)\n  9553: a5 = s1 + 0x4138\n  9557: a3 = a5 + 0x700\n  9561: a0 = u64 [a3 + 0x60]\n  9564: a1 = u64 [a3 + 0x58]\n  9567: a2 = u64 [a3 + 0x50]\n  9570: a3 = a1 | a0\n  9573: a4 = a2 <u 0x1\n  9576: a4 = 0 if a3 != 0\n  9578: jump @422 if a4 != 0\n      : @421 (gas: 1)\n  9581: jump @1651\n      : @422 (gas: 27)\n  9585: a3 = u64 [a5 + 0x748]\n  9589: a4 = u64 [s1 + 0x1b8]\n  9593: t0 = u32 [a4]\n  9595: a5 = a3 + 0x4\n  9598: a3 = a5 <u a3\n  9601: a4 = a2 + a3\n  9604: a2 = a4 <u a2\n  9607: a2 = a3 if a3 == 0\n  9610: a2 = a2 + a1\n  9613: a1 = a2 <u a1\n  9616: a3 = a0 + a1\n  9619: a0 = s1 + 0x7ff\n  9623: a0 = a0 + 0x139\n  9627: u64 [a0 + 1920] = 0\n  9631: u64 [a0 + 1912] = 0\n  9635: u64 [a0 + 1904] = 0\n  9639: u64 [a0 + 0x768] = t0\n  9643: a1 = a0 + 0x700\n  9647: u64 [a1 + 0x88] = a5\n  9651: u64 [a1 + 0x90] = a4\n  9655: u64 [a1 + 0x98] = a2\n  9659: a4 = a0\n  9661: a0 = s1 + 0x10e0\n  9665: a1 = s1 + 0x10c0\n  9669: a2 = s1 + 0x10a0\n  9673: u64 [a4 + 0x7a0] = a3\n  9677: ra = 368, jump @1759\n      : @423 [@dyn 184] (gas: 17)\n  9684: a1 = s1 + 0x7ff\n  9688: a1 = a1 + 0x139\n  9692: a2 = a1 + 0x700\n  9696: a0 = u64 [a2 + 0xc0]\n  9700: a1 = s1 + 0x100\n  9704: u64 [a1 + 0x38] = a0\n  9707: a0 = u64 [a2 + 0xb8]\n  9711: u64 [a1 + 0x40] = a0\n  9714: a0 = u64 [a2 + 0xb0]\n  9718: u64 [a1 + 0x48] = a0\n  9721: a0 = u64 [a2 + 0xa8]\n  9725: u64 [a1 + 0x50] = a0\n  9728: a0 = s1 + 0x5000\n  9732: i32 a0 = a0 + 0xfffffffffffff8a0\n  9736: a1 = 0x24\n  9739: ecalli 3 // 'call_data_load'\n  9741: fallthrough\n      : @424 (gas: 13)\n  9742: a2 = s1 + 0x4138\n  9746: a1 = u64 [a2 + 0x778]\n  9750: a3 = u64 [a2 + 0x780]\n  9754: a0 = 0x100000000\n  9764: a0 = a0 ^ a1\n  9767: a0 = a0 | a3\n  9770: u64 [s1 + 0xc0] = a1\n  9774: a1 = a1 >> 0x20\n  9777: a1 = a1 <u 0x1\n  9780: u64 [s1 + 0xb0] = a3\n  9784: a1 = 0 if a3 != 0\n  9786: a1 = 0 if a0 == 0\n  9788: jump @426 if a1 != 0\n      : @425 (gas: 1)\n  9791: jump @1652\n      : @426 (gas: 12)\n  9795: a1 = a2 + 0x700\n  9799: a0 = u64 [a1 + 0x70]\n  9802: u64 [s1 + 0xc8] = a0\n  9806: a0 = u64 [a1 + 0x68]\n  9809: u64 [s1 + 0xb8] = a0\n  9813: u64 [a2 + 1952] = 0\n  9817: u64 [a2 + 1944] = 0\n  9821: u64 [a2 + 1936] = 0\n  9825: u64 [a1 + 136] = 0x1\n  9830: a0 = s1 + 0x1080\n  9834: a1 = s1 + 0x48c0\n  9838: ra = 370, jump @21\n      : @427 [@dyn 185] (gas: 19)\n  9844: a0 = s1 + 0x7ff\n  9848: a0 = a0 + 0x139\n  9852: a5 = a0 + 0x700\n  9856: a1 = u64 [a5 + 0x60]\n  9859: u64 [s1 + 0xf8] = a1\n  9863: a3 = u64 [a5 + 0x58]\n  9866: u64 [s1 + 0xf0] = a3\n  9870: a4 = u64 [a5 + 0x50]\n  9873: u64 [s1 + 0xe8] = a4\n  9877: a2 = u64 [a5 + 0x48]\n  9880: u64 [s1 + 0xe0] = a2\n  9884: u64 [a5 + 0x20] = a1\n  9887: u64 [a5 + 0x18] = a3\n  9890: u64 [a5 + 0x10] = a4\n  9893: a3 = a0\n  9895: a0 = s1 + 0x1060\n  9899: a1 = s1 + 0x1040\n  9903: u64 [a3 + 0x708] = a2\n  9907: ra = 372, jump @1900\n      : @428 [@dyn 186] (gas: 20)\n  9914: a3 = s1 + 0x7ff\n  9918: a3 = a3 + 0x139\n  9922: a4 = a3 + 0x700\n  9926: a0 = u64 [a4 + 0x28]\n  9929: a1 = u64 [a4 + 0x30]\n  9932: a2 = u64 [a4 + 0x38]\n  9935: a3 = u64 [a4 + 0x40]\n  9938: a4 = s1 + 0x4138\n  9942: u64 [a4 + 1984] = 0\n  9946: u64 [a4 + 1976] = 0\n  9950: u64 [a4 + 1968] = 0\n  9954: u64 [a4 + 1960] = 0x1\n  9959: a5 = a4 + 0x700\n  9963: u64 [a5 + 0xe0] = a3\n  9967: u64 [a5 + 0xd8] = a2\n  9971: u64 [a5 + 0xd0] = a1\n  9975: u64 [a5 + 0xc8] = a0\n  9979: a0 = s1 + 0x48e0\n  9983: a1 = s1 + 0x4900\n  9987: ra = 374, jump @23\n      : @429 [@dyn 187] (gas: 14)\n  9993: a2 = s1 + 0x7ff\n  9997: a2 = a2 + 0x139\n 10001: a0 = u64 [s1 + 0xf8]\n 10005: u64 [a2 + 0x700] = a0\n 10009: a0 = u64 [s1 + 0xf0]\n 10013: a3 = a2 + 0x600\n 10017: u64 [a3 + 0xf8] = a0\n 10021: a0 = u64 [s1 + 0xe8]\n 10025: u64 [a3 + 0xf0] = a0\n 10029: a1 = s1 + 0x1020\n 10033: a0 = u64 [s1 + 0xe0]\n 10037: u64 [a3 + 0xe8] = a0\n 10041: a0 = 0\n 10043: ra = 376, jump @19\n      : @430 [@dyn 188] (gas: 10)\n 10049: a0 = s1 + 0x7ff\n 10053: a0 = a0 + 0x139\n 10057: u64 [a0 + 1760] = 0\n 10061: u64 [a0 + 1752] = 0\n 10065: u64 [a0 + 1744] = 0\n 10069: a2 = a0\n 10071: a0 = 0x20\n 10074: a1 = s1 + 0x1000\n 10078: u64 [a2 + 1736] = 0\n 10082: ra = 378, jump @19\n      : @431 [@dyn 189] (gas: 8)\n 10088: a0 = sp + 0xffffffffffffffe0\n 10091: a0 = a0 & 0xffffffffffffffe0\n 10094: u64 [s1 + 0x128] = a0\n 10098: sp = a0\n 10100: a2 = 0x201ec\n 10105: a0 = i32 [0x201ec]\n 10110: a1 = 0x3f\n 10113: jump @433 if a1 <u a0\n      : @432 (gas: 4)\n 10116: u32 [0x201ec] = 0x40\n 10122: u64 [s1 + 0x1a8] = a2\n 10126: t0 = 0x17c\n 10130: jump @1993\n      : @433 (gas: 2)\n 10134: u64 [s1 + 0x1a8] = a2\n 10138: t0 = 380, jump @1993\n      : @434 [@dyn 190] (gas: 7)\n 10145: a0 = 0x20200\n 10150: i32 a0 = a0 + 0\n 10152: i32 a2 = a2 + 0\n 10154: a1 = 0x40\n 10157: u64 [s1 + 0x1b0] = a0\n 10161: ecalli 8 // 'hash_keccak_256'\n 10163: fallthrough\n      : @435 (gas: 27)\n 10164: a0 = u64 [s1 + 0x1b8]\n 10168: t0 = u64 [a0 + 0x10]\n 10171: t2 = u64 [a0 + 0x18]\n 10174: a5 = a0\n 10176: a1 = u64 [s1 + 0x150]\n 10180: a4 = u64 [s1 + 0x140]\n 10184: a2 = a1 | a4\n 10187: a3 = u64 [s1 + 0x148]\n 10191: a0 = u64 [s1 + 0x138]\n 10195: a3 = a3 | a0\n 10198: a2 = a2 | a3\n 10201: a2 = a2 >> 0x20\n 10204: a3 = a3 | a4\n 10207: a3 = a3 << 0x20\n 10210: t1 = a3 | a2\n 10213: a3 = u64 [a5 + 0x8]\n 10216: a4 = u64 [a5]\n 10218: a2 = reverse t2\n 10220: a5 = reverse t0\n 10222: a0 = reverse a3\n 10224: a3 = reverse a4\n 10226: a4 = u64 [s1 + 0x128]\n 10230: u64 [a4 + 0x18] = a3\n 10233: u64 [a4 + 0x10] = a0\n 10236: u64 [a4 + 0x8] = a5\n 10239: u64 [a4] = a2\n 10241: jump @437 if t1 == 0\n      : @436 (gas: 1)\n 10244: jump @1603\n      : @437 (gas: 7)\n 10248: u64 [s1 + 0x108] = a2\n 10252: u64 [s1 + 0x110] = a5\n 10256: u64 [s1 + 0x118] = a3\n 10260: u64 [s1 + 0x120] = a0\n 10264: a0 = s1 + 0x7ff\n 10268: a0 = a0 + 0x7e1\n 10272: ra = 382, jump @17\n      : @438 [@dyn 191] (gas: 20)\n 10278: a2 = s1 + 0x7ff\n 10282: a2 = a2 + 0x139\n 10286: a0 = a2 + 0x600\n 10290: a4 = u64 [a0 + 0xc0]\n 10294: a3 = u64 [a0 + 0xb8]\n 10298: a1 = u64 [a0 + 0xb0]\n 10302: a0 = a4 >u 0\n 10304: a5 = a3 >u 0\n 10306: a5 = a0 if a4 != 0\n 10309: u64 [s1 + 0xd8] = a1\n 10313: a0 = a1 >u 0\n 10315: u64 [s1 + 0xd0] = a3\n 10319: u64 [s1 + 0xa8] = a4\n 10323: a3 = a3 | a4\n 10326: a1 = s1 + 0x100\n 10330: u64 [a1 + 0x58] = a0\n 10333: u64 [a1 + 0x60] = a5\n 10336: u64 [a1 + 0x70] = a3\n 10339: a0 = a5 if a3 != 0\n 10342: jump @440 if a0 == 0\n      : @439 (gas: 1)\n 10345: jump @1665\n      : @440 (gas: 6)\n 10349: a0 = u64 [a2 + 0x6a8]\n 10353: u64 [s1 + 0x100] = a0\n 10357: a0 = s1 + 0x7ff\n 10361: a0 = a0 + 0x7c1\n 10365: a1 = u64 [s1 + 0x128]\n 10369: ra = 384, jump @21\n      : @441 [@dyn 192] (gas: 16)\n 10375: a4 = s1 + 0x7ff\n 10379: a4 = a4 + 0x139\n 10383: a5 = a4 + 0x600\n 10387: a2 = u64 [a5 + 0x88]\n 10391: a0 = u64 [a5 + 0x90]\n 10395: a1 = u64 [a5 + 0x98]\n 10399: a3 = u64 [a5 + 0xa0]\n 10403: u64 [a5 + 0x60] = a3\n 10406: u64 [a5 + 0x58] = a1\n 10409: u64 [a5 + 0x50] = a0\n 10412: a0 = s1 + 0x7ff\n 10416: a0 = a0 + 0x7a1\n 10420: a1 = s1 + 0x7ff\n 10424: a1 = a1 + 0x781\n 10428: u64 [a5 + 0x48] = a2\n 10431: ra = 386, jump @1868\n      : @442 [@dyn 193] (gas: 20)\n 10438: a0 = s1 + 0x7ff\n 10442: a0 = a0 + 0x139\n 10446: a1 = a0 + 0x600\n 10450: a3 = u64 [a1 + 0x80]\n 10454: a4 = u64 [a1 + 0x78]\n 10457: a5 = u64 [a1 + 0x70]\n 10460: t0 = u64 [a0 + 0x668]\n 10464: a0 = a3 >u 0\n 10466: a1 = a4 >u 0\n 10468: a1 = a0 if a3 != 0\n 10471: a0 = a5 >u 0\n 10473: a2 = t0 <u 0x20\n 10476: a2 = a2 ^ 0x1\n 10479: a2 = a0 if a5 != 0\n 10482: a0 = a4 | a3\n 10485: a2 = a1 if a0 != 0\n 10488: a0 = u64 [s1 + 0x100]\n 10492: a0 = a0 <u 0x20\n 10495: u64 [s1 + 0x168] = a0\n 10499: jump @444 if a2 != 0\n      : @443 (gas: 1)\n 10502: jump @660\n      : @444 (gas: 19)\n 10505: u64 [s1 + 0x190] = t0\n 10509: u64 [s1 + 0x198] = a5\n 10513: u64 [s1 + 0x1a0] = a4\n 10517: u64 [s1 + 0x188] = a3\n 10521: a0 = s1 + 0x7ff\n 10525: a0 = a0 + 0x139\n 10529: a1 = u64 [s1 + 0x108]\n 10533: a3 = a0 + 0x600\n 10537: u64 [a3 + 0x28] = a1\n 10540: a1 = u64 [s1 + 0x110]\n 10544: u64 [a3 + 0x30] = a1\n 10547: a1 = u64 [s1 + 0x120]\n 10551: u64 [a3 + 0x38] = a1\n 10554: a1 = s1 + 0x7ff\n 10558: a1 = a1 + 0x761\n 10562: a2 = u64 [s1 + 0x118]\n 10566: u64 [a3 + 0x40] = a2\n 10569: a0 = 0\n 10571: ra = 388, jump @19\n      : @445 [@dyn 194] (gas: 3)\n 10577: a2 = u64 [s1 + 0x1a8]\n 10581: a0 = i32 [a2]\n 10583: jump @447 if a0 >u 31\n      : @446 (gas: 3)\n 10587: u32 [a2 + 0] = 0x20\n 10590: t0 = 0x186\n 10594: jump @2031\n      : @447 (gas: 1)\n 10598: t0 = 390, jump @2031\n      : @448 [@dyn 195] (gas: 4)\n 10605: a0 = u64 [s1 + 0x1b0]\n 10609: ra = 0x188\n 10613: ecalli 8 // 'hash_keccak_256'\n 10615: fallthrough\n      : @449 [@dyn 196] (gas: 11)\n 10616: a0 = u64 [s1 + 0x100]\n 10620: a1 = a0 + 0x1f\n 10623: a0 = a1 <u a0\n 10626: a5 = u64 [s1 + 0xd8]\n 10630: a2 = a5 + a0\n 10633: a3 = a2 <u a5\n 10636: a3 = a0 if a0 == 0\n 10639: a4 = u64 [s1 + 0xd0]\n 10643: a3 = a3 + a4\n 10646: u64 [s1 + 0x1b0] = a3\n 10650: t0 = 394, jump @1990\n      : @450 [@dyn 197] (gas: 35)\n 10657: a1 = u64 [s1 + 0x168]\n 10661: a1 = 0 if a5 != 0\n 10663: a3 = u64 [s1 + 0x170]\n 10667: a1 = 0 if a3 != 0\n 10669: a4 = 0 if a1 != 0\n 10671: a0 = 0 if a1 != 0\n 10673: t0 = t2 + a0\n 10676: a0 = t0 <u t2\n 10679: a5 = a2 + a0\n 10682: a4 = a4 + a5\n 10685: u64 [s1 + 0x1b8] = a4\n 10689: a5 = a4 ^ a2\n 10692: a3 = a4 <u a2\n 10695: a3 = a0 if a5 == 0\n 10698: u64 [s1 + 0x180] = a3\n 10702: a0 = u64 [s1 + 0x190]\n 10706: ra = a0 + 0x1f\n 10709: a4 = ra <u a0\n 10712: a3 = u64 [s1 + 0x198]\n 10716: a0 = a3 + a4\n 10719: a5 = a0 <u a3\n 10722: a5 = a4 if a4 == 0\n 10725: t1 = u64 [s1 + 0x1a0]\n 10729: t1 = t1 + a5\n 10732: a4 = t1 << 0x3b\n 10735: a3 = a0 >> 0x5\n 10738: a3 = a3 | a4\n 10741: a0 = a0 << 0x3b\n 10744: a4 = ra >> 0x5\n 10747: a0 = a0 | a4\n 10750: a0 = a0 + t2\n 10753: u64 [s1 + 0x198] = a0\n 10757: a0 = a0 <u t2\n 10760: t2 = t0\n 10762: t0 = 396, jump @2028\n      : @451 [@dyn 198] (gas: 17)\n 10769: a4 = u64 [s1 + 0x1b0]\n 10773: a0 = u64 [s1 + 0xd0]\n 10777: a0 = a4 <u a0\n 10780: a3 = u64 [s1 + 0xa8]\n 10784: a0 = a0 + a3\n 10787: a3 = a4 >> 0x5\n 10790: a4 = a0 << 0x3b\n 10793: a3 = a3 | a4\n 10796: a4 = u64 [s1 + 0x1a8]\n 10800: t0 = u64 [a4]\n 10802: a4 = u64 [a4 + 0x8]\n 10805: a0 = a0 >> 0x5\n 10808: a3 = 0 if a1 != 0\n 10810: a0 = 0 if a1 != 0\n 10812: a1 = reverse a4\n 10814: a4 = reverse t0\n 10816: t0 = 398, jump @2036\n      : @452 [@dyn 199] (gas: 25)\n 10823: t0 = a0 + a3\n 10826: a0 = u64 [s1 + 0x1a0]\n 10830: a0 = t1 <u a0\n 10833: a3 = u64 [s1 + 0x188]\n 10837: a0 = a0 + a3\n 10840: a3 = t1 >> 0x5\n 10843: a5 = a0 << 0x3b\n 10846: a3 = a3 | a5\n 10849: a0 = a0 >> 0x5\n 10852: a0 = a0 + a4\n 10855: a5 = s1 + 0x100\n 10859: a4 = u64 [a5 + 0xb8]\n 10863: a3 = a3 + a1\n 10866: a1 = a3 <u a1\n 10869: a0 = a0 + a1\n 10872: a2 = a2 + a3\n 10875: u64 [a5 + 0x88] = a2\n 10879: a1 = a2 <u a3\n 10882: a0 = a0 + a1\n 10885: u64 [a5 + 0x80] = a0\n 10889: a0 = sp + 0xffffffffffffffe0\n 10892: t1 = a0 & 0xffffffffffffffe0\n 10895: sp = t1\n 10897: u64 [s1 + 0x178] = t1\n 10901: fallthrough\n      : @453 (gas: 21)\n 10902: a0 = u64 [s1 + 0x198]\n 10906: a0 = t2 <u a0\n 10909: a2 = u64 [s1 + 0x190]\n 10913: a1 = a4 ^ a2\n 10916: a2 = a4 <u a2\n 10919: a2 = a0 if a1 == 0\n 10922: a5 = u64 [s1 + 0x188]\n 10926: a0 = ra <u a5\n 10929: a3 = u64 [s1 + 0x180]\n 10933: a1 = t0 ^ a3\n 10936: a3 = t0 <u a3\n 10939: a3 = a0 if a1 == 0\n 10942: a0 = ra ^ a5\n 10945: a0 = a0 | a1\n 10948: a3 = a2 if a0 == 0\n 10951: u64 [t1] = t2\n 10953: u64 [t1 + 0x8] = a4\n 10956: u64 [t1 + 0x10] = ra\n 10959: u64 [t1 + 0x18] = t0\n 10962: a0 = s1 + 0x4938\n 10966: jump @455 if a3 != 0\n      : @454 (gas: 1)\n 10969: jump @660\n      : @455 (gas: 11)\n 10972: u64 [a0 + 0] = 0\n 10974: u64 [a0 + 4294967288] = 0\n 10977: u64 [a0 + 4294967280] = 0\n 10980: u64 [a0 + 4294967272] = 0\n 10983: a1 = s1 + 0x4920\n 10987: a0 = t1\n 10989: u64 [s1 + 0x1b0] = t2\n 10993: u64 [s1 + 0x1b8] = a4\n 10997: u64 [s1 + 0x1a8] = t0\n 11001: u64 [s1 + 0x1a0] = ra\n 11005: ra = 400, jump @23\n      : @456 [@dyn 200] (gas: 15)\n 11011: t1 = u64 [s1 + 0x178]\n 11015: t0 = u64 [s1 + 0x1a8]\n 11019: a4 = u64 [s1 + 0x1b8]\n 11023: t2 = u64 [s1 + 0x1b0]\n 11027: t2 = t2 + 0x1\n 11030: a0 = t2 <u 0x1\n 11033: a4 = a4 + a0\n 11036: a0 = t2 | a4\n 11039: a0 = a0 <u 0x1\n 11042: a1 = u64 [s1 + 0x1a0]\n 11046: a0 = a0 + a1\n 11049: a1 = a0 <u a1\n 11052: t0 = t0 + a1\n 11055: ra = a0\n 11057: jump @453\n      : @457 (gas: 9)\n 11060: u64 [a2 + 192] = 0\n 11064: u64 [a2 + 184] = 0\n 11068: u64 [a2 + 176] = 0\n 11072: u64 [a2 + 168] = 0\n 11076: a0 = s1 + 0x5000\n 11080: i32 a0 = a0 + 0x1e0\n 11084: ra = 0x192\n 11088: ecalli 16 // 'value_transferred'\n 11090: fallthrough\n      : @458 [@dyn 201] (gas: 9)\n 11091: a3 = s1 + 0x5138\n 11095: a0 = u64 [a3 + 0xb8]\n 11099: a1 = u64 [a3 + 0xc0]\n 11103: a2 = u64 [a3 + 0xb0]\n 11107: a3 = u64 [a3 + 0xa8]\n 11111: a1 = a1 | a2\n 11114: a0 = a0 | a3\n 11117: a0 = a0 | a1\n 11120: jump @460 if a0 == 0\n      : @459 (gas: 1)\n 11123: jump @1653\n      : @460 (gas: 1)\n 11127: t0 = 404, jump @2026\n      : @461 [@dyn 202] (gas: 1)\n 11134: jump @463 if a1 <u a0\n      : @462 (gas: 1)\n 11137: jump @1654\n      : @463 (gas: 4)\n 11141: a0 = 0xffffffff\n 11151: u64 [s1 + 0x150] = a0\n 11155: a0 = s1 + 0x2ea0\n 11159: ra = 406, jump @1785\n      : @464 [@dyn 203] (gas: 16)\n 11166: a1 = s1 + 0x2938\n 11170: a2 = a1 + 0x500\n 11174: a0 = u64 [a2 + 0x78]\n 11177: u64 [s1 + 0x148] = a0\n 11181: a0 = u64 [a2 + 0x70]\n 11184: u64 [s1 + 0x140] = a0\n 11188: a0 = u64 [a2 + 0x68]\n 11191: u64 [s1 + 0x138] = a0\n 11195: a1 = s1 + 0x5138\n 11199: u64 [a1 + 224] = 0\n 11203: u64 [a1 + 216] = 0\n 11207: u64 [a1 + 208] = 0\n 11211: u64 [a1 + 200] = 0x1\n 11216: a0 = s1 + 0x2e80\n 11220: a1 = s1 + 0x5200\n 11224: ra = 408, jump @21\n      : @465 [@dyn 204] (gas: 17)\n 11230: a4 = s1 + 0x2938\n 11234: a5 = a4 + 0x500\n 11238: a0 = u64 [a5 + 0x60]\n 11241: a1 = u64 [a5 + 0x58]\n 11244: a2 = u64 [a5 + 0x50]\n 11247: a3 = u64 [a5 + 0x48]\n 11250: u64 [s1 + 0x170] = a0\n 11254: u64 [a5 + 0x20] = a0\n 11257: u64 [s1 + 0x168] = a1\n 11261: u64 [a5 + 0x18] = a1\n 11264: u64 [s1 + 0x160] = a2\n 11268: u64 [a5 + 0x10] = a2\n 11271: a0 = s1 + 0x2e60\n 11275: a1 = s1 + 0x2e40\n 11279: u64 [s1 + 0x158] = a3\n 11283: u64 [a5 + 0x8] = a3\n 11286: ra = 410, jump @1836\n      : @466 [@dyn 205] (gas: 20)\n 11293: a4 = s1 + 0x2938\n 11297: a1 = a4 + 0x500\n 11301: a0 = u64 [a1 + 0x40]\n 11304: a2 = s1 + 0x100\n 11308: u64 [a2 + 0x30] = a0\n 11311: a0 = u64 [a1 + 0x38]\n 11314: u64 [a2 + 0x28] = a0\n 11317: a0 = u64 [a1 + 0x30]\n 11320: u64 [a2 + 0x20] = a0\n 11323: a0 = u64 [a1 + 0x28]\n 11326: u64 [a2 + 0x18] = a0\n 11329: u64 [s1 + 392] = 0\n 11333: u64 [s1 + 384] = 0\n 11337: u64 [s1 + 376] = 0\n 11341: u64 [s1 + 440] = 0\n 11345: t1 = 0\n 11347: t2 = 0\n 11349: t0 = 0\n 11351: ra = 0\n 11353: fallthrough\n      : @467 (gas: 17)\n 11354: a0 = u64 [s1 + 0x158]\n 11358: a0 = t1 <u a0\n 11361: a2 = u64 [s1 + 0x160]\n 11365: a1 = t2 ^ a2\n 11368: a2 = t2 <u a2\n 11371: a2 = a0 if a1 == 0\n 11374: a5 = u64 [s1 + 0x168]\n 11378: a0 = t0 <u a5\n 11381: a3 = u64 [s1 + 0x170]\n 11385: a1 = ra ^ a3\n 11388: a3 = ra <u a3\n 11391: a3 = a0 if a1 == 0\n 11394: a0 = t0 ^ a5\n 11397: a0 = a0 | a1\n 11400: a3 = a2 if a0 == 0\n 11403: a2 = u64 [s1 + 0x1b8]\n 11407: jump @469 if a3 != 0\n      : @468 (gas: 1)\n 11410: jump @626\n      : @469 (gas: 11)\n 11413: u64 [s1 + 0x1b0] = t1\n 11417: u64 [a4 + 0x308] = t1\n 11421: u64 [s1 + 0x1a8] = t2\n 11425: u64 [a4 + 0x310] = t2\n 11429: u64 [s1 + 0x198] = t0\n 11433: u64 [a4 + 0x318] = t0\n 11437: a1 = s1 + 0x2c40\n 11441: u64 [s1 + 0x1a0] = ra\n 11445: u64 [a4 + 0x320] = ra\n 11449: a0 = 0\n 11451: ra = 412, jump @19\n      : @470 [@dyn 206] (gas: 9)\n 11457: a0 = s1 + 0x2938\n 11461: u64 [a0 + 768] = 0\n 11465: u64 [a0 + 760] = 0\n 11469: u64 [a0 + 752] = 0\n 11473: a2 = a0\n 11475: a0 = 0x20\n 11478: a1 = s1 + 0x2c20\n 11482: u64 [a2 + 744] = 0\n 11486: ra = 414, jump @19\n      : @471 [@dyn 207] (gas: 2)\n 11492: a1 = i32 [0x201ec]\n 11497: jump @473 if a1 >u 63\n      : @472 (gas: 2)\n 11501: u32 [0x201ec] = 0x40\n 11507: fallthrough\n      : @473 (gas: 13)\n 11508: a0 = sp + 0xffffffffffffffe0\n 11511: a2 = a0 & 0xffffffffffffffe0\n 11514: u64 [s1 + 0x190] = a2\n 11518: sp = a2\n 11520: a0 = 0x20200\n 11525: i32 a0 = a0 + 0\n 11527: i32 a2 = a2 + 0\n 11529: a1 = 0x40\n 11532: ra = 0x1a0\n 11536: ecalli 8 // 'hash_keccak_256'\n 11538: a3 = u64 [s1 + 0x190]\n 11542: t0 = 0x1a2\n 11546: jump @1946\n      : @474 [@dyn 208] (gas: 2)\n 11550: a3 = u64 [s1 + 0x190]\n 11554: t0 = 418, jump @1946\n      : @475 [@dyn 209] (gas: 7)\n 11561: u64 [a1 + 0xe8] = a3\n 11565: u64 [a1 + 0xf0] = a2\n 11569: u64 [a1 + 0xf8] = a4\n 11573: u64 [a1 + 0x100] = a0\n 11577: a0 = s1 + 0x2c00\n 11581: a1 = s1 + 0x5220\n 11585: ra = 420, jump @21\n      : @476 [@dyn 210] (gas: 18)\n 11591: a4 = s1 + 0x2938\n 11595: a3 = a4 + 0x200\n 11599: a0 = u64 [a3 + 0xc8]\n 11603: a1 = u64 [a3 + 0xd8]\n 11607: a2 = u64 [a3 + 0xd0]\n 11611: a3 = u64 [s1 + 0x138]\n 11615: a0 = a0 ^ a3\n 11618: a3 = u64 [s1 + 0x148]\n 11622: a1 = a1 ^ a3\n 11625: a3 = u64 [s1 + 0x140]\n 11629: a2 = a2 ^ a3\n 11632: a2 = a2 & 0xffffffffffffffff\n 11635: a5 = u64 [s1 + 0x150]\n 11639: a1 = a1 & a5\n 11642: a0 = a0 & 0xffffffffffffffff\n 11645: a0 = a0 | a1\n 11648: a0 = a0 | a2\n 11651: jump @478 if a0 == 0\n      : @477 (gas: 5)\n 11654: t1 = u64 [s1 + 0x1b0]\n 11658: t2 = u64 [s1 + 0x1a8]\n 11662: ra = u64 [s1 + 0x1a0]\n 11666: a1 = u64 [s1 + 0x198]\n 11670: jump @485\n      : @478 (gas: 21)\n 11673: a5 = s1 + 0x100\n 11677: a0 = u64 [a5 + 0x88]\n 11681: u64 [a4 + 0x268] = a0\n 11685: a0 = u64 [a5 + 0x18]\n 11688: u64 [a4 + 0x288] = a0\n 11692: a0 = u64 [a5 + 0x80]\n 11696: u64 [a4 + 0x270] = a0\n 11700: a0 = u64 [a5 + 0x20]\n 11703: u64 [a4 + 0x290] = a0\n 11707: a0 = u64 [a5 + 0x78]\n 11710: u64 [a4 + 0x278] = a0\n 11714: a0 = u64 [a5 + 0x28]\n 11717: u64 [a4 + 0x298] = a0\n 11721: a0 = u64 [a5 + 0xb8]\n 11725: u64 [a4 + 0x280] = a0\n 11729: a0 = s1 + 0x2be0\n 11733: a1 = s1 + 0x2bc0\n 11737: a2 = s1 + 0x2ba0\n 11741: a3 = u64 [a5 + 0x30]\n 11744: u64 [a4 + 0x2a0] = a3\n 11748: ra = 422, jump @1858\n      : @479 [@dyn 211] (gas: 7)\n 11755: a4 = s1 + 0x2938\n 11759: a5 = a4 + 0x200\n 11763: a1 = u64 [a5 + 0xc0]\n 11767: a2 = u64 [a5 + 0xb8]\n 11771: a3 = u64 [a5 + 0xb0]\n 11775: a0 = u64 [a5 + 0xa8]\n 11779: t0 = 424, jump @1955\n      : @480 [@dyn 212] (gas: 1)\n 11786: jump @482 if a1 == 0\n      : @481 (gas: 1)\n 11789: jump @1603\n      : @482 (gas: 11)\n 11793: a1 = u64 [s1 + 0x1b0]\n 11797: a3 = a4 + 0x200\n 11801: u64 [a3 + 0x48] = a1\n 11804: a1 = u64 [s1 + 0x1a8]\n 11808: u64 [a3 + 0x50] = a1\n 11811: a1 = u64 [s1 + 0x198]\n 11815: u64 [a3 + 0x58] = a1\n 11818: a1 = s1 + 0x2b80\n 11822: a2 = u64 [s1 + 0x1a0]\n 11826: u64 [a3 + 0x60] = a2\n 11829: ra = 426, jump @19\n      : @483 [@dyn 213] (gas: 15)\n 11835: a0 = s1 + 0x2938\n 11839: a1 = u64 [s1 + 0x1b8]\n 11843: u64 [a0 + 0x220] = a1\n 11847: a0 = s1 + 0x2938\n 11851: a1 = u64 [s1 + 0x178]\n 11855: u64 [a0 + 0x218] = a1\n 11859: a0 = s1 + 0x2938\n 11863: a1 = u64 [s1 + 0x180]\n 11867: u64 [a0 + 0x210] = a1\n 11871: a0 = s1 + 0x2b60\n 11875: a1 = s1 + 0x2b40\n 11879: a2 = s1 + 0x2938\n 11883: a3 = u64 [s1 + 0x188]\n 11887: u64 [a2 + 0x208] = a3\n 11891: ra = 428, jump @1900\n      : @484 [@dyn 214] (gas: 16)\n 11898: a2 = s1 + 0x100\n 11902: a1 = u64 [a2 + 0x98]\n 11906: ra = u64 [s1 + 0x1a0]\n 11910: t2 = u64 [s1 + 0x1a8]\n 11914: t1 = u64 [s1 + 0x1b0]\n 11918: a4 = s1 + 0x2938\n 11922: a3 = a4 + 0x200\n 11926: a0 = u64 [a3 + 0x40]\n 11929: u64 [a2 + 0xb8] = a0\n 11933: a0 = u64 [a3 + 0x38]\n 11936: u64 [a2 + 0x78] = a0\n 11939: a0 = u64 [a3 + 0x30]\n 11942: u64 [a2 + 0x80] = a0\n 11946: a0 = u64 [a3 + 0x28]\n 11949: u64 [a2 + 0x88] = a0\n 11953: fallthrough\n      : @485 (gas: 9)\n 11954: t1 = t1 + 0x1\n 11957: a0 = t1 <u 0x1\n 11960: t2 = t2 + a0\n 11963: a0 = t1 | t2\n 11966: a0 = a0 <u 0x1\n 11969: t0 = a1 + a0\n 11972: a1 = t0 <u a1\n 11975: ra = ra + a1\n 11978: jump @467\n      : @486 (gas: 10)\n 11981: u64 [a3 + 1536] = 0\n 11985: u64 [a3 + 1528] = 0\n 11989: u64 [a3 + 1520] = 0\n 11993: u64 [a3 + 1512] = 0\n 11997: a0 = s1 + 0x4000\n 12001: i32 a0 = a0 + 0x720\n 12005: ra = 0x1ae\n 12009: ecalli 16 // 'value_transferred'\n 12011: a3 = s1 + 0x4138\n 12015: jump @488\n      : @487 [@dyn 215] (gas: 2)\n 12017: a3 = s1 + 0x4138\n 12021: fallthrough\n      : @488 (gas: 9)\n 12022: a4 = a3 + 0x500\n 12026: a0 = u64 [a4 + 0xf8]\n 12030: a1 = u64 [a3 + 0x600]\n 12034: a2 = u64 [a4 + 0xf0]\n 12038: a3 = u64 [a4 + 0xe8]\n 12042: a1 = a1 | a2\n 12045: a0 = a0 | a3\n 12048: a0 = a0 | a1\n 12051: jump @490 if a0 == 0\n      : @489 (gas: 1)\n 12054: jump @1655\n      : @490 (gas: 1)\n 12058: t0 = 432, jump @2026\n      : @491 [@dyn 216] (gas: 1)\n 12065: jump @493 if a1 <u a0\n      : @492 (gas: 1)\n 12068: jump @1656\n      : @493 (gas: 25)\n 12072: a0 = s1 + 0x4000\n 12076: i32 a0 = a0 + 0x740\n 12080: a1 = 0x4\n 12083: ecalli 3 // 'call_data_load'\n 12085: a0 = s1 + 0x4138\n 12089: a5 = a0 + 0x600\n 12093: a1 = u64 [a5 + 0x20]\n 12096: a2 = u64 [a5 + 0x18]\n 12099: a3 = u64 [a5 + 0x10]\n 12102: a4 = u64 [a5 + 0x8]\n 12105: a0 = s1 + 0x7ff\n 12109: a0 = a0 + 0x139\n 12113: u64 [s1 + 0xf0] = a1\n 12117: a5 = a0 + 0x300\n 12121: u64 [a5 + 0xa0] = a1\n 12125: u64 [s1 + 0xe8] = a2\n 12129: u64 [a5 + 0x98] = a2\n 12133: u64 [s1 + 0xe0] = a3\n 12137: u64 [a5 + 0x90] = a3\n 12141: a1 = s1 + 0x7ff\n 12145: a1 = a1 + 0x4c1\n 12149: u64 [s1 + 0xd8] = a4\n 12153: u64 [a5 + 0x88] = a4\n 12157: a0 = 0\n 12159: ra = 434, jump @19\n      : @494 [@dyn 217] (gas: 11)\n 12165: a0 = s1 + 0x7ff\n 12169: a0 = a0 + 0x139\n 12173: u64 [a0 + 896] = 0\n 12177: u64 [a0 + 888] = 0\n 12181: u64 [a0 + 880] = 0\n 12185: a2 = a0\n 12187: a0 = 0x20\n 12190: a1 = s1 + 0x7ff\n 12194: a1 = a1 + 0x4a1\n 12198: u64 [a2 + 872] = 0\n 12202: ra = 436, jump @19\n      : @495 [@dyn 218] (gas: 4)\n 12208: a0 = 0x201ec\n 12213: u64 [s1 + 0x118] = a0\n 12217: a0 = i32 [0x201ec]\n 12222: jump @497 if a0 >u 63\n      : @496 (gas: 3)\n 12226: a1 = u64 [s1 + 0x118]\n 12230: u32 [a1 + 0] = 0x40\n 12233: fallthrough\n      : @497 (gas: 13)\n 12234: a0 = sp + 0xffffffffffffffe0\n 12237: a2 = a0 & 0xffffffffffffffe0\n 12240: u64 [s1 + 0x1b0] = a2\n 12244: sp = a2\n 12246: a0 = 0x20200\n 12251: i32 a0 = a0 + 0\n 12253: i32 a2 = a2 + 0\n 12255: a1 = 0x40\n 12258: u64 [s1 + 0xd0] = a0\n 12262: ra = 0x1b6\n 12266: ecalli 8 // 'hash_keccak_256'\n 12268: t0 = 0x1b8\n 12272: jump @1957\n      : @498 [@dyn 219] (gas: 1)\n 12276: t0 = 440, jump @1957\n      : @499 [@dyn 220] (gas: 18)\n 12283: a3 = a3 + 0x1\n 12286: a4 = a3 <u 0x1\n 12289: a2 = a2 + a4\n 12292: a4 = a3 | a2\n 12295: a4 = a4 <u 0x1\n 12298: a4 = a4 + a1\n 12301: a1 = a4 <u a1\n 12304: a0 = a0 + a1\n 12307: a1 = s1 + 0x4138\n 12311: a5 = a1 + 0x600\n 12315: u64 [a5 + 0x28] = a3\n 12318: u64 [a5 + 0x30] = a2\n 12321: u64 [a5 + 0x38] = a4\n 12324: u64 [a5 + 0x40] = a0\n 12327: a0 = s1 + 0x7ff\n 12331: a0 = a0 + 0x481\n 12335: a1 = s1 + 0x4760\n 12339: ra = 442, jump @21\n      : @500 [@dyn 221] (gas: 16)\n 12345: a0 = s1 + 0x7ff\n 12349: a0 = a0 + 0x139\n 12353: a1 = u64 [a0 + 0x350]\n 12357: u64 [s1 + 0x1a8] = a1\n 12361: a1 = u64 [a0 + 0x348]\n 12365: u64 [s1 + 0x1a0] = a1\n 12369: a0 = u32 [a0 + 0x358]\n 12373: u64 [s1 + 0x198] = a0\n 12377: a0 = 0x30200\n 12382: u64 [s1 + 0x1b0] = a0\n 12386: i32 a0 = a0 + 0\n 12388: u64 [s1 + 0x190] = a0\n 12392: ra = 0x1bc\n 12396: ecalli 5 // 'caller'\n 12398: t0 = 0x1be\n 12402: jump @1943\n      : @501 [@dyn 222] (gas: 1)\n 12406: t0 = 446, jump @1943\n      : @502 [@dyn 223] (gas: 2)\n 12413: a1 = 0x1\n 12416: jump @504 if a0 != 0\n      : @503 (gas: 1)\n 12419: jump @861\n      : @504 (gas: 15)\n 12422: a0 = u64 [s1 + 0xd8]\n 12426: a2 = s1 + 0x7ff\n 12430: a2 = a2 + 0x139\n 12434: a3 = a2 + 0x300\n 12438: u64 [a3 + 0x28] = a0\n 12441: a0 = u64 [s1 + 0xe0]\n 12445: u64 [a3 + 0x30] = a0\n 12448: a0 = u64 [s1 + 0xe8]\n 12452: u64 [a3 + 0x38] = a0\n 12455: a1 = s1 + 0x7ff\n 12459: a1 = a1 + 0x461\n 12463: a0 = u64 [s1 + 0xf0]\n 12467: u64 [a3 + 0x40] = a0\n 12470: a0 = 0\n 12472: ra = 448, jump @19\n      : @505 [@dyn 224] (gas: 11)\n 12478: a0 = s1 + 0x7ff\n 12482: a0 = a0 + 0x139\n 12486: u64 [a0 + 800] = 0\n 12490: u64 [a0 + 792] = 0\n 12494: u64 [a0 + 784] = 0\n 12498: a2 = a0\n 12500: a0 = 0x20\n 12503: a1 = s1 + 0x7ff\n 12507: a1 = a1 + 0x441\n 12511: u64 [a2 + 776] = 0\n 12515: ra = 450, jump @19\n      : @506 [@dyn 225] (gas: 3)\n 12521: a0 = u64 [s1 + 0x118]\n 12525: a0 = i32 [a0]\n 12527: jump @508 if a0 >u 63\n      : @507 (gas: 3)\n 12531: a1 = u64 [s1 + 0x118]\n 12535: u32 [a1 + 0] = 0x40\n 12538: fallthrough\n      : @508 (gas: 11)\n 12539: a0 = sp + 0xffffffffffffffe0\n 12542: a0 = a0 & 0xffffffffffffffe0\n 12545: u64 [s1 + 0x1a8] = a0\n 12549: sp = a0\n 12551: i32 a2 = a0 + 0\n 12553: a1 = 0x40\n 12556: a0 = u64 [s1 + 0xd0]\n 12560: ra = 0x1c4\n 12564: ecalli 8 // 'hash_keccak_256'\n 12566: t0 = 0x1c6\n 12570: jump @1999\n      : @509 [@dyn 226] (gas: 1)\n 12574: t0 = 454, jump @1999\n      : @510 [@dyn 227] (gas: 2)\n 12581: a4 = a3 + 0x2\n 12584: t0 = 456, jump @1988\n      : @511 [@dyn 228] (gas: 8)\n 12591: u64 [a3 + 0x48] = a4\n 12594: u64 [a3 + 0x50] = a5\n 12597: u64 [a3 + 0x58] = a2\n 12600: u64 [a3 + 0x60] = a0\n 12603: a0 = s1 + 0x7ff\n 12607: a0 = a0 + 0x421\n 12611: a1 = s1 + 0x4780\n 12615: ra = 458, jump @21\n      : @512 [@dyn 229] (gas: 13)\n 12621: a0 = s1 + 0x7ff\n 12625: a0 = a0 + 0x139\n 12629: a1 = u64 [a0 + 0x2f0]\n 12633: u64 [s1 + 0x1a8] = a1\n 12637: a1 = u64 [a0 + 0x2e8]\n 12641: u64 [s1 + 0x1a0] = a1\n 12645: a0 = u32 [a0 + 0x2f8]\n 12649: u64 [s1 + 0x198] = a0\n 12653: a0 = u64 [s1 + 0x190]\n 12657: ra = 0x1cc\n 12661: ecalli 5 // 'caller'\n 12663: t0 = 0x1ce\n 12667: jump @1943\n      : @513 [@dyn 230] (gas: 1)\n 12671: t0 = 462, jump @1943\n      : @514 [@dyn 231] (gas: 1)\n 12678: jump @516 if a0 == 0\n      : @515 (gas: 1)\n 12681: jump @853\n      : @516 (gas: 2)\n 12684: a1 = 0x1\n 12687: jump @861\n      : @517 (gas: 9)\n 12690: u64 [a2 + 800] = 0\n 12694: u64 [a2 + 792] = 0\n 12698: u64 [a2 + 784] = 0\n 12702: u64 [a2 + 776] = 0\n 12706: a0 = s1 + 0x5000\n 12710: i32 a0 = a0 + 0x440\n 12714: ra = 0x1d0\n 12718: ecalli 16 // 'value_transferred'\n 12720: fallthrough\n      : @518 [@dyn 232] (gas: 3)\n 12721: a3 = s1 + 0x5138\n 12725: a4 = a3 + 0x300\n 12729: t0 = 466, jump @2037\n      : @519 [@dyn 233] (gas: 1)\n 12736: jump @521 if a0 == 0\n      : @520 (gas: 1)\n 12739: jump @1657\n      : @521 (gas: 3)\n 12743: a0 = u64 [s1 + 0x1b8]\n 12747: a0 = i32 [a0]\n 12749: jump @523 if a0 >u 131\n      : @522 (gas: 1)\n 12754: jump @1658\n      : @523 (gas: 20)\n 12758: a0 = s1 + 0x5000\n 12762: i32 a0 = a0 + 0x460\n 12766: a1 = 0x4\n 12769: ecalli 3 // 'call_data_load'\n 12771: a1 = s1 + 0x5138\n 12775: a2 = a1 + 0x300\n 12779: a0 = u64 [a2 + 0x40]\n 12782: a1 = s1 + 0x100\n 12786: u64 [a1 + 0x28] = a0\n 12789: a0 = u64 [a2 + 0x38]\n 12792: u64 [a1 + 0x20] = a0\n 12795: a0 = u64 [a2 + 0x30]\n 12798: u64 [a1 + 0x18] = a0\n 12801: a0 = u64 [a2 + 0x28]\n 12804: u64 [a1 + 0x10] = a0\n 12807: a0 = s1 + 0x5000\n 12811: i32 a0 = a0 + 0x480\n 12815: a1 = 0x24\n 12818: ecalli 3 // 'call_data_load'\n 12820: fallthrough\n      : @524 (gas: 9)\n 12821: a2 = s1 + 0x5138\n 12825: a3 = a2 + 0x300\n 12829: a0 = u64 [a3 + 0x60]\n 12832: a1 = u64 [a3 + 0x58]\n 12835: a2 = u64 [a3 + 0x50]\n 12838: a3 = a1 | a0\n 12841: a4 = a2 <u 0x1\n 12844: a4 = 0 if a3 != 0\n 12846: jump @526 if a4 != 0\n      : @525 (gas: 1)\n 12849: jump @1659\n      : @526 (gas: 26)\n 12853: a3 = s1 + 0x5138\n 12857: a3 = u64 [a3 + 0x348]\n 12861: a4 = u64 [s1 + 0x1b8]\n 12865: t0 = u32 [a4]\n 12867: a5 = a3 + 0x4\n 12870: a3 = a5 <u a3\n 12873: a4 = a2 + a3\n 12876: a2 = a4 <u a2\n 12879: a2 = a3 if a3 == 0\n 12882: a2 = a2 + a1\n 12885: a1 = a2 <u a1\n 12888: a3 = a0 + a1\n 12891: a0 = s1 + 0x4138\n 12895: u64 [a0 + 0] = 0\n 12897: u64 [a0 + 4294967288] = 0\n 12900: u64 [a0 + 4294967280] = 0\n 12903: u64 [a0 + 0xffffffffffffffe8] = t0\n 12906: u64 [a0 + 0x8] = a5\n 12909: u64 [a0 + 0x10] = a4\n 12912: u64 [a0 + 0x18] = a2\n 12915: a4 = a0\n 12917: a0 = s1 + 0x4160\n 12921: a1 = s1 + 0x4140\n 12925: a2 = s1 + 0x4120\n 12929: u64 [a4 + 0x20] = a3\n 12932: ra = 468, jump @1759\n      : @527 [@dyn 234] (gas: 28)\n 12939: a1 = s1 + 0x4138\n 12943: a0 = u64 [a1 + 0x40]\n 12946: u64 [s1 + 0xf0] = a0\n 12950: a0 = u64 [a1 + 0x38]\n 12953: u64 [s1 + 0xf8] = a0\n 12957: a0 = u64 [a1 + 0x30]\n 12960: u64 [s1 + 0x100] = a0\n 12964: a0 = u64 [a1 + 0x28]\n 12967: u64 [s1 + 0x108] = a0\n 12971: a0 = s1 + 0x5000\n 12975: i32 a0 = a0 + 0x4a0\n 12979: a1 = 0x44\n 12982: ecalli 3 // 'call_data_load'\n 12984: a1 = s1 + 0x5138\n 12988: a2 = a1 + 0x300\n 12992: a0 = u64 [a2 + 0x80]\n 12996: u64 [s1 + 0xe8] = a0\n 13000: a0 = u64 [a2 + 0x78]\n 13003: u64 [s1 + 0xe0] = a0\n 13007: a0 = u64 [a2 + 0x70]\n 13010: u64 [s1 + 0xd8] = a0\n 13014: a0 = u64 [a2 + 0x68]\n 13017: u64 [s1 + 0xd0] = a0\n 13021: a0 = s1 + 0x5000\n 13025: i32 a0 = a0 + 0x4c0\n 13029: a1 = 0x64\n 13032: ecalli 3 // 'call_data_load'\n 13034: fallthrough\n      : @528 (gas: 9)\n 13035: a2 = s1 + 0x5138\n 13039: a3 = a2 + 0x300\n 13043: a0 = u64 [a3 + 0xa0]\n 13047: a1 = u64 [a3 + 0x98]\n 13051: a2 = u64 [a3 + 0x90]\n 13055: a3 = a1 | a0\n 13058: a4 = a2 <u 0x1\n 13061: a4 = 0 if a3 != 0\n 13063: jump @530 if a4 != 0\n      : @529 (gas: 1)\n 13066: jump @1660\n      : @530 (gas: 26)\n 13070: a3 = s1 + 0x5138\n 13074: a3 = u64 [a3 + 0x388]\n 13078: t1 = s1 + 0x3938\n 13082: a4 = u64 [s1 + 0x1b8]\n 13086: t0 = u32 [a4]\n 13088: a5 = a3 + 0x4\n 13091: a3 = a5 <u a3\n 13094: a4 = a2 + a3\n 13097: a2 = a4 <u a2\n 13100: a2 = a3 if a3 == 0\n 13103: a2 = a2 + a1\n 13106: a1 = a2 <u a1\n 13109: a3 = a0 + a1\n 13112: u64 [t1 + 1952] = 0\n 13116: u64 [t1 + 1944] = 0\n 13120: u64 [t1 + 1936] = 0\n 13124: u64 [t1 + 0x788] = t0\n 13128: u64 [t1 + 0x7a8] = a5\n 13132: a5 = t1 + 0x700\n 13136: u64 [a5 + 0xb0] = a4\n 13140: u64 [a5 + 0xb8] = a2\n 13144: a0 = s1 + 0x4100\n 13148: a1 = s1 + 0x40e0\n 13152: a2 = s1 + 0x40c0\n 13156: u64 [a5 + 0xc0] = a3\n 13160: ra = 470, jump @1759\n      : @531 [@dyn 235] (gas: 19)\n 13167: a1 = s1 + 0x3938\n 13171: a2 = a1 + 0x700\n 13175: a0 = u64 [a2 + 0xe0]\n 13179: u64 [s1 + 0xb0] = a0\n 13183: a0 = u64 [a2 + 0xd8]\n 13187: u64 [s1 + 0xb8] = a0\n 13191: a0 = u64 [a2 + 0xd0]\n 13195: u64 [s1 + 0xc0] = a0\n 13199: a0 = u64 [a2 + 0xc8]\n 13203: u64 [s1 + 0xc8] = a0\n 13207: a0 = s1 + 0x5138\n 13211: u64 [a0 + 960] = 0\n 13215: u64 [a0 + 952] = 0\n 13219: u64 [a0 + 944] = 0\n 13223: a1 = a0\n 13225: u64 [a1 + 936] = 0x2\n 13230: a0 = s1 + 0x40a0\n 13234: a1 = s1 + 0x54e0\n 13238: ra = 472, jump @21\n      : @532 [@dyn 236] (gas: 13)\n 13244: a1 = s1 + 0x3938\n 13248: a0 = u64 [a1 + 0x770]\n 13252: u64 [s1 + 0x1b8] = a0\n 13256: a0 = u64 [a1 + 0x768]\n 13260: u64 [s1 + 0x1b0] = a0\n 13264: a0 = u32 [a1 + 0x778]\n 13268: u64 [s1 + 0x1a8] = a0\n 13272: a0 = 0x30200\n 13277: u64 [s1 + 0x1a0] = a0\n 13281: i32 a0 = a0 + 0\n 13283: ra = 0x1da\n 13287: ecalli 5 // 'caller'\n 13289: fallthrough\n      : @533 [@dyn 237] (gas: 3)\n 13290: a5 = s1 + 0x100\n 13294: a2 = u64 [a5 + 0xa0]\n 13298: t0 = 476, jump @1936\n      : @534 [@dyn 238] (gas: 1)\n 13305: jump @536 if a0 == 0\n      : @535 (gas: 1)\n 13308: jump @641\n      : @536 (gas: 8)\n 13311: a1 = s1 + 0x5138\n 13315: u64 [a1 + 992] = 0\n 13319: u64 [a1 + 984] = 0\n 13323: u64 [a1 + 976] = 0\n 13327: u64 [a1 + 968] = 0x1\n 13332: a0 = s1 + 0x3fc0\n 13336: a1 = s1 + 0x5500\n 13340: ra = 478, jump @21\n      : @537 [@dyn 239] (gas: 25)\n 13346: a3 = s1 + 0x3938\n 13350: a4 = a3 + 0x600\n 13354: a0 = u64 [a4 + 0x90]\n 13358: a1 = u64 [a4 + 0x88]\n 13362: a2 = u64 [a4 + 0x98]\n 13366: a3 = u64 [a4 + 0xa0]\n 13370: a5 = u64 [s1 + 0x118]\n 13374: a4 = a5 ^ a0\n 13377: a0 = a5 <u a0\n 13380: a5 = u64 [s1 + 0x110]\n 13384: a5 = a5 <u a1\n 13387: a5 = a0 if a4 != 0\n 13390: a1 = u64 [s1 + 0x128]\n 13394: a0 = a1 ^ a3\n 13397: a1 = a1 <u a3\n 13400: a4 = u64 [s1 + 0x120]\n 13404: a3 = a4 <u a2\n 13407: a3 = a1 if a0 != 0\n 13410: a1 = a4 ^ a2\n 13413: a0 = a0 | a1\n 13416: a5 = a3 if a0 != 0\n 13419: u64 [s1 + 0x1b8] = a5\n 13423: a0 = s1 + 0x3fa0\n 13427: a1 = 0x40\n 13430: ra = 480, jump @17\n      : @538 [@dyn 240] (gas: 10)\n 13436: t0 = s1 + 0x3938\n 13440: a0 = u64 [t0 + 0x680]\n 13444: a5 = u64 [t0 + 0x678]\n 13448: t1 = u64 [t0 + 0x668]\n 13452: t2 = u64 [t0 + 0x670]\n 13456: a4 = a5 | a0\n 13459: a2 = t1 | a5\n 13462: a1 = t2 | a0\n 13465: a3 = u64 [s1 + 0x1b8]\n 13469: jump @540 if a3 != 0\n      : @539 (gas: 1)\n 13472: jump @933\n      : @540 (gas: 12)\n 13475: u64 [s1 + 0x198] = a2\n 13479: u64 [s1 + 0x1b8] = a1\n 13483: a1 = t2 >u 0\n 13485: a2 = t1 <u 0xffffffffffffff60\n 13489: a2 = a2 ^ 0x1\n 13492: a2 = a1 if t2 != 0\n 13495: a1 = a5 >u 0\n 13497: a3 = a0 >u 0\n 13499: a3 = a1 if a0 == 0\n 13502: u64 [s1 + 0x1a8] = a4\n 13506: a3 = a2 if a4 == 0\n 13509: jump @542 if a3 == 0\n      : @541 (gas: 1)\n 13512: jump @1670\n      : @542 (gas: 18)\n 13516: a1 = t1 + 0xa0\n 13520: a2 = a1 <u t1\n 13523: a3 = t2 + a2\n 13526: a4 = a3 <u t2\n 13529: a4 = a2 if a2 == 0\n 13532: a4 = a4 + a5\n 13535: a2 = a4 <u a5\n 13538: a2 = a2 + a0\n 13541: u64 [t0 + 0x5c8] = a1\n 13545: u64 [t0 + 0x5d0] = a3\n 13549: u64 [t0 + 0x5d8] = a4\n 13553: a0 = 0x40\n 13556: a1 = s1 + 0x3f00\n 13560: u64 [t0 + 0x5e0] = a2\n 13564: u64 [s1 + 0x1b0] = t1\n 13568: u64 [s1 + 0x1a0] = t2\n 13572: u64 [s1 + 0x190] = a5\n 13576: ra = 482, jump @19\n      : @543 [@dyn 241] (gas: 10)\n 13582: a3 = s1 + 0x100\n 13586: a1 = u64 [a3 + 0xb8]\n 13590: a0 = u64 [a3 + 0x98]\n 13594: a0 = a0 | a1\n 13597: a0 = a0 >> 0x20\n 13600: a2 = u64 [a3 + 0x90]\n 13604: a1 = a1 | a2\n 13607: a1 = a1 << 0x20\n 13610: a0 = a0 | a1\n 13613: jump @545 if a0 == 0\n      : @544 (gas: 1)\n 13616: jump @1603\n      : @545 (gas: 13)\n 13619: a0 = u64 [s1 + 0x108]\n 13623: a2 = s1 + 0x3938\n 13627: a3 = a2 + 0x500\n 13631: u64 [a3 + 0xa8] = a0\n 13635: a0 = u64 [s1 + 0x100]\n 13639: u64 [a3 + 0xb0] = a0\n 13643: a0 = u64 [s1 + 0xf8]\n 13647: u64 [a3 + 0xb8] = a0\n 13651: a1 = s1 + 0x3ee0\n 13655: a0 = u64 [s1 + 0xf0]\n 13659: u64 [a3 + 0xc0] = a0\n 13663: a0 = u64 [s1 + 0x1b0]\n 13667: ra = 484, jump @19\n      : @546 [@dyn 242] (gas: 10)\n 13673: a2 = 0x100000000\n 13683: a0 = 0xffffffe0\n 13693: a4 = s1 + 0x100\n 13697: a3 = u64 [a4 + 0xb0]\n 13701: a0 = a3 <u a0\n 13704: a1 = u64 [a4 + 0xa0]\n 13708: a0 = 0 if a1 != 0\n 13710: a1 = u64 [a4 + 0xa8]\n 13714: a0 = 0 if a1 != 0\n 13716: jump @548 if a0 != 0\n      : @547 (gas: 1)\n 13719: jump @1603\n      : @548 (gas: 16)\n 13722: u64 [s1 + 0x1b8] = a2\n 13726: i32 a2 = a3 + 0x20\n 13729: a0 = u64 [s1 + 0xd0]\n 13733: a5 = s1 + 0x3938\n 13737: a3 = a5 + 0x500\n 13741: u64 [a3 + 0x88] = a0\n 13745: a0 = u64 [s1 + 0xd8]\n 13749: u64 [a3 + 0x90] = a0\n 13753: a0 = u64 [s1 + 0xe0]\n 13757: u64 [a3 + 0x98] = a0\n 13761: a1 = s1 + 0x3ec0\n 13765: a0 = u64 [s1 + 0xe8]\n 13769: u64 [a3 + 0xa0] = a0\n 13773: u64 [s1 + 0xa8] = a2\n 13777: a0 = a2\n 13779: ra = 486, jump @19\n      : @549 [@dyn 243] (gas: 10)\n 13785: a3 = s1 + 0x100\n 13789: a1 = u64 [a3 + 0xb0]\n 13793: a0 = u64 [a3 + 0xb8]\n 13797: a0 = a0 + 0xffffffffffffffc0\n 13800: a0 = a1 <u a0\n 13803: a2 = u64 [a3 + 0xa0]\n 13807: a0 = 0 if a2 != 0\n 13809: a2 = u64 [a3 + 0xa8]\n 13813: a0 = 0 if a2 != 0\n 13815: jump @551 if a0 != 0\n      : @550 (gas: 1)\n 13818: jump @1603\n      : @551 (gas: 15)\n 13821: i32 a2 = a1 + 0x40\n 13824: a0 = u64 [s1 + 0xc8]\n 13828: a3 = s1 + 0x3938\n 13832: a4 = a3 + 0x500\n 13836: u64 [a4 + 0x68] = a0\n 13839: a0 = u64 [s1 + 0xc0]\n 13843: u64 [a4 + 0x70] = a0\n 13846: a0 = u64 [s1 + 0xb8]\n 13850: u64 [a4 + 0x78] = a0\n 13853: a1 = s1 + 0x3ea0\n 13857: a0 = u64 [s1 + 0xb0]\n 13861: u64 [a4 + 0x80] = a0\n 13865: u64 [s1 + 0xa0] = a2\n 13869: a0 = a2\n 13871: ra = 488, jump @19\n      : @552 [@dyn 244] (gas: 10)\n 13877: a0 = s1 + 0x100\n 13881: a3 = u64 [a0 + 0xa0]\n 13885: a2 = u64 [a0 + 0xa8]\n 13889: a1 = u64 [a0 + 0xb0]\n 13893: a4 = 0x100000000\n 13903: a0 = 0xffffffa0\n 13913: a0 = a1 <u a0\n 13916: a0 = 0 if a3 != 0\n 13918: a0 = 0 if a2 != 0\n 13920: jump @554 if a0 != 0\n      : @553 (gas: 1)\n 13923: jump @1603\n      : @554 (gas: 11)\n 13926: i32 a0 = a1 + 0x60\n 13929: a1 = s1 + 0x3938\n 13933: u64 [s1 + 0x1b8] = a4\n 13937: a4 = a1\n 13939: u64 [a1 + 1376] = 0\n 13943: u64 [a1 + 1368] = 0\n 13947: u64 [a1 + 1360] = 0\n 13951: a1 = s1 + 0x3e80\n 13955: u64 [a4 + 1352] = 0\n 13959: u64 [s1 + 0x68] = a0\n 13962: ra = 490, jump @19\n      : @555 [@dyn 245] (gas: 4)\n 13968: a0 = s1 + 0x5000\n 13972: i32 a0 = a0 + 0x520\n 13976: ecalli 9 // 'now'\n 13978: fallthrough\n      : @556 (gas: 10)\n 13979: a2 = s1 + 0x100\n 13983: a5 = u64 [a2 + 0xb0]\n 13987: a0 = u64 [a2 + 0xb8]\n 13991: a0 = a0 + 0xffffffffffffff80\n 13994: a0 = a5 <u a0\n 13997: a1 = u64 [a2 + 0xa0]\n 14001: a0 = 0 if a1 != 0\n 14003: a1 = u64 [a2 + 0xa8]\n 14007: a0 = 0 if a1 != 0\n 14009: jump @558 if a0 != 0\n      : @557 (gas: 1)\n 14012: jump @1603\n      : @558 (gas: 16)\n 14015: a3 = s1 + 0x5138\n 14019: a0 = a3 + 0x300\n 14023: a4 = u64 [a0 + 0xe8]\n 14027: a1 = u64 [a0 + 0xf0]\n 14031: a2 = u64 [a0 + 0xf8]\n 14035: a3 = u64 [a3 + 0x400]\n 14039: i32 a0 = a5 + 0x80\n 14043: a5 = s1 + 0x3938\n 14047: u64 [a5 + 0x540] = a3\n 14051: a3 = a5 + 0x500\n 14055: u64 [a3 + 0x38] = a2\n 14058: u64 [a3 + 0x30] = a1\n 14061: a1 = s1 + 0x3e60\n 14065: u64 [a3 + 0x28] = a4\n 14068: u64 [s1 + 0x48] = a0\n 14071: ra = 492, jump @19\n      : @559 [@dyn 246] (gas: 13)\n 14077: a0 = u64 [s1 + 0x128]\n 14081: a2 = s1 + 0x3938\n 14085: a3 = a2 + 0x500\n 14089: u64 [a3 + 0x20] = a0\n 14092: a0 = u64 [s1 + 0x120]\n 14096: u64 [a3 + 0x18] = a0\n 14099: a0 = u64 [s1 + 0x118]\n 14103: u64 [a3 + 0x10] = a0\n 14106: a1 = s1 + 0x3e40\n 14110: a0 = u64 [s1 + 0x110]\n 14114: u64 [a3 + 0x8] = a0\n 14117: a0 = 0\n 14119: ra = 494, jump @19\n      : @560 [@dyn 247] (gas: 2)\n 14125: a0 = 0x3938\n 14129: t0 = 496, jump @2035\n      : @561 [@dyn 248] (gas: 3)\n 14136: a1 = s1 + 0x3e20\n 14140: u64 [a2 + 1256] = 0\n 14144: ra = 498, jump @19\n      : @562 [@dyn 249] (gas: 7)\n 14150: a0 = sp + 0xffffffffffffffe0\n 14153: a0 = a0 & 0xffffffffffffffe0\n 14156: u64 [s1 + 0x1b8] = a0\n 14160: sp = a0\n 14162: a2 = 0x201ec\n 14167: a0 = i32 [0x201ec]\n 14172: jump @564 if a0 >u 63\n      : @563 (gas: 2)\n 14176: u32 [0x201ec] = 0x40\n 14182: fallthrough\n      : @564 (gas: 14)\n 14183: u64 [s1 + 0x58] = a2\n 14186: a0 = sp + 0xffffffffffffffe0\n 14189: a2 = a0 & 0xffffffffffffffe0\n 14192: u64 [s1 + 0x1a8] = a2\n 14196: sp = a2\n 14198: a0 = 0x20200\n 14203: i32 a0 = a0 + 0\n 14205: i32 a2 = a2 + 0\n 14207: a1 = 0x40\n 14210: u64 [s1 + 0x50] = a0\n 14213: ra = 0x1f4\n 14217: ecalli 8 // 'hash_keccak_256'\n 14219: t0 = 0x1f6\n 14223: jump @1999\n      : @565 [@dyn 250] (gas: 1)\n 14227: t0 = 502, jump @1999\n      : @566 [@dyn 251] (gas: 20)\n 14234: a4 = a3 + 0x5\n 14237: a3 = a4 <u a3\n 14240: a5 = a2 + a3\n 14243: a2 = a5 <u a2\n 14246: a2 = a3 if a3 == 0\n 14249: a2 = a2 + a1\n 14252: a1 = a2 <u a1\n 14255: a0 = a0 + a1\n 14258: a3 = s1 + 0x100\n 14262: a1 = u64 [a3 + 0xb8]\n 14266: u64 [a3 + 0xa8] = a4\n 14270: u64 [a1] = a4\n 14272: u64 [a3 + 0xa0] = a5\n 14276: u64 [a1 + 0x8] = a5\n 14279: u64 [a3 + 0x98] = a2\n 14283: u64 [a1 + 0x10] = a2\n 14286: u64 [a3 + 0x90] = a0\n 14290: u64 [a1 + 0x18] = a0\n 14293: a0 = s1 + 0x3e00\n 14297: ra = 504, jump @21\n      : @567 [@dyn 252] (gas: 12)\n 14303: t0 = s1 + 0x3938\n 14307: a0 = t0 + 0x400\n 14311: a5 = u64 [a0 + 0xe0]\n 14315: a4 = u64 [a0 + 0xd8]\n 14319: a3 = u64 [a0 + 0xd0]\n 14323: a0 = a5 >u 0\n 14325: a1 = a4 >u 0\n 14327: a1 = a0 if a5 != 0\n 14330: a0 = a4 | a5\n 14333: a2 = a3 >u 0\n 14335: a2 = a1 if a0 != 0\n 14338: jump @569 if a2 == 0\n      : @568 (gas: 1)\n 14341: jump @1676\n      : @569 (gas: 22)\n 14344: a0 = u64 [t0 + 0x4c8]\n 14348: u64 [s1 + 0x188] = a0\n 14352: a0 = a0 + 0x1\n 14355: a1 = a0 <u 0x1\n 14358: a1 = a1 + a3\n 14361: a2 = a0 | a1\n 14364: a2 = a2 <u 0x1\n 14367: a2 = a2 + a4\n 14370: u64 [s1 + 0x180] = a3\n 14374: a3 = a2 <u a4\n 14377: a3 = a3 + a5\n 14380: u64 [s1 + 0x178] = a4\n 14384: a4 = s1 + 0x5138\n 14388: u64 [a4 + 0x408] = a0\n 14392: a0 = a4 + 0x400\n 14396: u64 [a0 + 0x10] = a1\n 14399: u64 [a0 + 0x18] = a2\n 14402: u64 [a0 + 0x20] = a3\n 14405: a1 = s1 + 0x5540\n 14409: a0 = u64 [s1 + 0x1b8]\n 14413: u64 [s1 + 0x1b8] = a5\n 14417: ra = 506, jump @23\n      : @570 [@dyn 253] (gas: 28)\n 14423: a0 = sp + 0xffffffffffffffe0\n 14426: a0 = a0 & 0xffffffffffffffe0\n 14429: u64 [s1 + 0x98] = a0\n 14433: sp = a0\n 14435: a1 = s1 + 0x3938\n 14439: a5 = s1 + 0x100\n 14443: a0 = u64 [a5 + 0xb8]\n 14447: a2 = a1 + 0x400\n 14451: u64 [a2 + 0x60] = a0\n 14454: a0 = u64 [a5 + 0x78]\n 14457: u64 [a2 + 0x58] = a0\n 14460: a0 = u64 [a5 + 0x80]\n 14464: u64 [a2 + 0x50] = a0\n 14467: a0 = u64 [a5 + 0x88]\n 14471: u64 [a2 + 0x48] = a0\n 14474: a0 = u64 [a5 + 0x90]\n 14478: u64 [a2 + 0x80] = a0\n 14482: a0 = u64 [a5 + 0x98]\n 14486: u64 [a2 + 0x78] = a0\n 14489: a0 = u64 [a5 + 0xa0]\n 14493: u64 [a2 + 0x70] = a0\n 14496: a4 = a1\n 14498: a0 = s1 + 0x3dc0\n 14502: a1 = s1 + 0x3da0\n 14506: a2 = s1 + 0x3d80\n 14510: a3 = u64 [a5 + 0xa8]\n 14514: u64 [a4 + 0x468] = a3\n 14518: ra = 508, jump @1847\n      : @571 [@dyn 254] (gas: 2)\n 14525: a1 = s1 + 0x3938\n 14529: fallthrough\n      : @572 (gas: 22)\n 14530: t0 = u64 [a1 + 0x4b8]\n 14534: t1 = u64 [a1 + 0x4a8]\n 14538: t2 = u64 [a1 + 0x4c0]\n 14542: a3 = a1 + 0x400\n 14546: a2 = u64 [a3 + 0xb0]\n 14550: a4 = u64 [a3 + 0x98]\n 14554: a5 = u64 [a3 + 0xa0]\n 14558: a0 = u64 [a3 + 0x88]\n 14562: a1 = u64 [a3 + 0x90]\n 14566: u64 [s1 + 0x88] = a4\n 14570: a3 = u64 [s1 + 0x98]\n 14574: u64 [a3 + 0x10] = a4\n 14577: u64 [s1 + 0x80] = a5\n 14581: u64 [a3 + 0x18] = a5\n 14584: u64 [s1 + 0x70] = a0\n 14587: u64 [a3] = a0\n 14589: a2 = a2 | t2\n 14592: a0 = t1 | t0\n 14595: a0 = a0 | a2\n 14598: u64 [s1 + 0x78] = a1\n 14601: u64 [a3 + 0x8] = a1\n 14604: jump @574 if a0 == 0\n      : @573 (gas: 1)\n 14607: jump @1680\n      : @574 (gas: 3)\n 14610: a0 = s1 + 0x3d20\n 14614: a1 = u64 [s1 + 0x1b0]\n 14618: ra = 510, jump @17\n      : @575 [@dyn 255] (gas: 7)\n 14624: a1 = s1 + 0x3938\n 14628: a2 = u64 [a1 + 0x400]\n 14632: a4 = a1 + 0x300\n 14636: a3 = u64 [a4 + 0xf8]\n 14640: a0 = u64 [a4 + 0xf0]\n 14644: a1 = u64 [a4 + 0xe8]\n 14648: t0 = 512, jump @2009\n      : @576 [@dyn 256] (gas: 1)\n 14655: jump @578 if a0 == 0\n      : @577 (gas: 1)\n 14658: jump @1603\n      : @578 (gas: 3)\n 14661: a0 = s1 + 0x3d00\n 14665: u64 [s1 + 0x138] = a1\n 14669: ra = 514, jump @17\n      : @579 [@dyn 257] (gas: 19)\n 14675: a2 = s1 + 0x3938\n 14679: a0 = a2 + 0x300\n 14683: a4 = u64 [a0 + 0xe0]\n 14687: a1 = u64 [a0 + 0xd8]\n 14691: a3 = u64 [a0 + 0xd0]\n 14695: a0 = a4 >u 0\n 14697: a5 = a1 >u 0\n 14699: a5 = a0 if a4 != 0\n 14702: u64 [s1 + 0x170] = a3\n 14706: a0 = a3 >u 0\n 14708: u64 [s1 + 0x60] = a1\n 14711: a3 = s1 + 0x100\n 14715: u64 [a3 + 0x68] = a4\n 14718: a1 = a1 | a4\n 14721: u64 [s1 + 0x40] = a0\n 14724: u64 [a3 + 0x30] = a5\n 14727: u64 [a3 + 0x60] = a1\n 14730: a0 = a5 if a1 != 0\n 14733: jump @581 if a0 == 0\n      : @580 (gas: 1)\n 14736: jump @1683\n      : @581 (gas: 5)\n 14739: a0 = u64 [a2 + 0x3c8]\n 14743: u64 [s1 + 0x90] = a0\n 14747: a0 = s1 + 0x3ce0\n 14751: a1 = u64 [s1 + 0x98]\n 14755: ra = 516, jump @21\n      : @582 [@dyn 258] (gas: 13)\n 14761: a4 = s1 + 0x3938\n 14765: a5 = a4 + 0x300\n 14769: a2 = u64 [a5 + 0xa8]\n 14773: a0 = u64 [a5 + 0xb0]\n 14777: a1 = u64 [a5 + 0xb8]\n 14781: a3 = u64 [a5 + 0xc0]\n 14785: u64 [a5 + 0x80] = a3\n 14789: u64 [a5 + 0x78] = a1\n 14792: u64 [a5 + 0x70] = a0\n 14795: a0 = s1 + 0x3cc0\n 14799: a1 = s1 + 0x3ca0\n 14803: u64 [a5 + 0x68] = a2\n 14806: ra = 518, jump @1868\n      : @583 [@dyn 259] (gas: 19)\n 14813: a0 = s1 + 0x3938\n 14817: a1 = a0 + 0x300\n 14821: a3 = u64 [a1 + 0xa0]\n 14825: a4 = u64 [a1 + 0x98]\n 14829: a5 = u64 [a1 + 0x90]\n 14833: t0 = u64 [a0 + 0x388]\n 14837: a0 = a3 >u 0\n 14839: a1 = a4 >u 0\n 14841: a1 = a0 if a3 != 0\n 14844: a0 = a5 >u 0\n 14846: a2 = t0 <u 0x20\n 14849: a2 = a2 ^ 0x1\n 14852: a2 = a0 if a5 != 0\n 14855: a0 = a4 | a3\n 14858: a2 = a1 if a0 != 0\n 14861: a0 = u64 [s1 + 0x90]\n 14865: a0 = a0 <u 0x20\n 14868: u64 [s1 + 0x158] = a0\n 14872: jump @585 if a2 != 0\n      : @584 (gas: 1)\n 14875: jump @1233\n      : @585 (gas: 18)\n 14878: u64 [s1 + 0x190] = t0\n 14882: a0 = s1 + 0x100\n 14886: u64 [a0 + 0x98] = a5\n 14890: u64 [a0 + 0xb0] = a4\n 14894: u64 [a0 + 0xa0] = a3\n 14898: a0 = s1 + 0x3938\n 14902: a1 = u64 [s1 + 0x70]\n 14905: a3 = a0 + 0x300\n 14909: u64 [a3 + 0x48] = a1\n 14912: a1 = u64 [s1 + 0x78]\n 14915: u64 [a3 + 0x50] = a1\n 14918: a1 = u64 [s1 + 0x88]\n 14922: u64 [a3 + 0x58] = a1\n 14925: a1 = s1 + 0x3c80\n 14929: a2 = u64 [s1 + 0x80]\n 14933: u64 [a3 + 0x60] = a2\n 14936: a0 = 0\n 14938: ra = 520, jump @19\n      : @586 [@dyn 260] (gas: 3)\n 14944: a0 = u64 [s1 + 0x58]\n 14947: a0 = i32 [a0]\n 14949: jump @588 if a0 >u 31\n      : @587 (gas: 4)\n 14953: a1 = u64 [s1 + 0x58]\n 14956: u32 [a1 + 0] = 0x20\n 14959: t0 = 0x20a\n 14963: jump @2031\n      : @588 (gas: 1)\n 14967: t0 = 522, jump @2031\n      : @589 [@dyn 261] (gas: 4)\n 14974: a0 = u64 [s1 + 0x50]\n 14977: ra = 0x20c\n 14981: ecalli 8 // 'hash_keccak_256'\n 14983: fallthrough\n      : @590 [@dyn 262] (gas: 11)\n 14984: a0 = u64 [s1 + 0x90]\n 14988: a1 = a0 + 0x1f\n 14991: a0 = a1 <u a0\n 14994: a5 = u64 [s1 + 0x170]\n 14998: a2 = a5 + a0\n 15001: a3 = a2 <u a5\n 15004: a3 = a0 if a0 == 0\n 15007: a4 = u64 [s1 + 0x60]\n 15010: a3 = a3 + a4\n 15013: u64 [s1 + 0x188] = a3\n 15017: t0 = 526, jump @1990\n      : @591 [@dyn 263] (gas: 35)\n 15024: a1 = u64 [s1 + 0x158]\n 15028: a1 = 0 if a5 != 0\n 15030: a3 = u64 [s1 + 0x160]\n 15034: a1 = 0 if a3 != 0\n 15036: a4 = 0 if a1 != 0\n 15038: a0 = 0 if a1 != 0\n 15040: t0 = t2 + a0\n 15043: a0 = t0 <u t2\n 15046: a5 = a2 + a0\n 15049: a4 = a4 + a5\n 15052: u64 [s1 + 0x1b8] = a4\n 15056: a5 = a4 ^ a2\n 15059: a3 = a4 <u a2\n 15062: a3 = a0 if a5 == 0\n 15065: u64 [s1 + 0x180] = a3\n 15069: a0 = u64 [s1 + 0x190]\n 15073: ra = a0 + 0x1f\n 15076: a4 = ra <u a0\n 15079: a3 = u64 [s1 + 0x198]\n 15083: a0 = a3 + a4\n 15086: a5 = a0 <u a3\n 15089: a5 = a4 if a4 == 0\n 15092: t1 = u64 [s1 + 0x1b0]\n 15096: t1 = t1 + a5\n 15099: a4 = t1 << 0x3b\n 15102: a3 = a0 >> 0x5\n 15105: a3 = a3 | a4\n 15108: a0 = a0 << 0x3b\n 15111: a4 = ra >> 0x5\n 15114: a0 = a0 | a4\n 15117: a0 = a0 + t2\n 15120: u64 [s1 + 0x198] = a0\n 15124: a0 = a0 <u t2\n 15127: t2 = t0\n 15129: t0 = 528, jump @2028\n      : @592 [@dyn 264] (gas: 17)\n 15136: a4 = u64 [s1 + 0x188]\n 15140: a0 = u64 [s1 + 0x60]\n 15143: a0 = a4 <u a0\n 15146: a3 = u64 [s1 + 0x168]\n 15150: a0 = a0 + a3\n 15153: a3 = a4 >> 0x5\n 15156: a4 = a0 << 0x3b\n 15159: a3 = a3 | a4\n 15162: a4 = u64 [s1 + 0x1a8]\n 15166: t0 = u64 [a4]\n 15168: a4 = u64 [a4 + 0x8]\n 15171: a0 = a0 >> 0x5\n 15174: a3 = 0 if a1 != 0\n 15176: a0 = 0 if a1 != 0\n 15178: a1 = reverse a4\n 15180: a4 = reverse t0\n 15182: t0 = 530, jump @2036\n      : @593 [@dyn 265] (gas: 25)\n 15189: t0 = a0 + a3\n 15192: a0 = u64 [s1 + 0x1b0]\n 15196: a0 = t1 <u a0\n 15199: a3 = u64 [s1 + 0x1a0]\n 15203: a0 = a0 + a3\n 15206: a3 = t1 >> 0x5\n 15209: a5 = a0 << 0x3b\n 15212: a3 = a3 | a5\n 15215: a0 = a0 >> 0x5\n 15218: a0 = a0 + a4\n 15221: a5 = s1 + 0x100\n 15225: a4 = u64 [a5 + 0xb8]\n 15229: a3 = a3 + a1\n 15232: a1 = a3 <u a1\n 15235: a0 = a0 + a1\n 15238: a2 = a2 + a3\n 15241: u64 [a5 + 0x88] = a2\n 15245: a1 = a2 <u a3\n 15248: a0 = a0 + a1\n 15251: u64 [a5 + 0x80] = a0\n 15255: a0 = sp + 0xffffffffffffffe0\n 15258: t1 = a0 & 0xffffffffffffffe0\n 15261: sp = t1\n 15263: u64 [s1 + 0x178] = t1\n 15267: fallthrough\n      : @594 (gas: 20)\n 15268: a0 = u64 [s1 + 0x198]\n 15272: a0 = t2 <u a0\n 15275: a2 = u64 [s1 + 0x190]\n 15279: a1 = a4 ^ a2\n 15282: a2 = a4 <u a2\n 15285: a2 = a0 if a1 == 0\n 15288: a5 = u64 [s1 + 0x188]\n 15292: a0 = ra <u a5\n 15295: a3 = u64 [s1 + 0x180]\n 15299: a1 = t0 ^ a3\n 15302: a3 = t0 <u a3\n 15305: a3 = a0 if a1 == 0\n 15308: a0 = ra ^ a5\n 15311: a0 = a0 | a1\n 15314: a3 = a2 if a0 == 0\n 15317: u64 [t1] = t2\n 15319: u64 [t1 + 0x8] = a4\n 15322: u64 [t1 + 0x10] = ra\n 15325: u64 [t1 + 0x18] = t0\n 15328: jump @596 if a3 != 0\n      : @595 (gas: 1)\n 15331: jump @1233\n      : @596 (gas: 12)\n 15334: a0 = s1 + 0x5138\n 15338: u64 [a0 + 1088] = 0\n 15342: u64 [a0 + 1080] = 0\n 15346: u64 [a0 + 1072] = 0\n 15350: u64 [a0 + 1064] = 0\n 15354: a1 = s1 + 0x5560\n 15358: a0 = t1\n 15360: u64 [s1 + 0x1b0] = t2\n 15364: u64 [s1 + 0x1b8] = a4\n 15368: u64 [s1 + 0x1a8] = t0\n 15372: u64 [s1 + 0x1a0] = ra\n 15376: ra = 532, jump @23\n      : @597 [@dyn 266] (gas: 15)\n 15382: t1 = u64 [s1 + 0x178]\n 15386: t0 = u64 [s1 + 0x1a8]\n 15390: a4 = u64 [s1 + 0x1b8]\n 15394: t2 = u64 [s1 + 0x1b0]\n 15398: t2 = t2 + 0x1\n 15401: a0 = t2 <u 0x1\n 15404: a4 = a4 + a0\n 15407: a0 = t2 | a4\n 15410: a0 = a0 <u 0x1\n 15413: a1 = u64 [s1 + 0x1a0]\n 15417: a0 = a0 + a1\n 15420: a1 = a0 <u a1\n 15423: t0 = t0 + a1\n 15426: ra = a0\n 15428: jump @594\n      : @598 (gas: 8)\n 15431: u64 [a2 + 1728] = 0\n 15435: u64 [a2 + 1720] = 0\n 15439: u64 [a2 + 1712] = 0\n 15443: u64 [a2 + 1704] = 0\n 15447: a0 = s1 + 0x5000\n 15451: i32 a0 = a0 + 0x7e0\n 15455: ecalli 16 // 'value_transferred'\n 15457: fallthrough\n      : @599 (gas: 10)\n 15458: a3 = s1 + 0x5138\n 15462: a4 = a3 + 0x600\n 15466: a0 = u64 [a4 + 0xb8]\n 15470: a1 = u64 [a4 + 0xc0]\n 15474: a2 = u64 [a4 + 0xb0]\n 15478: a3 = u64 [a4 + 0xa8]\n 15482: a1 = a1 | a2\n 15485: a0 = a0 | a3\n 15488: a0 = a0 | a1\n 15491: jump @601 if a0 == 0\n      : @600 (gas: 1)\n 15494: jump @1661\n      : @601 (gas: 3)\n 15497: a0 = u64 [s1 + 0x1b8]\n 15501: a0 = i32 [a0]\n 15503: jump @603 if a0 >u 3\n      : @602 (gas: 1)\n 15507: jump @1662\n      : @603 (gas: 8)\n 15510: a1 = s1 + 0x5138\n 15514: u64 [a1 + 1760] = 0\n 15518: u64 [a1 + 1752] = 0\n 15522: u64 [a1 + 1744] = 0\n 15526: u64 [a1 + 1736] = 0x2\n 15531: a0 = s1 + 0x42e0\n 15535: a1 = s1 + 0x5800\n 15539: ra = 534, jump @21\n      : @604 [@dyn 267] (gas: 12)\n 15545: a1 = s1 + 0x4138\n 15549: a2 = a1 + 0x100\n 15553: a0 = u64 [a2 + 0xb8]\n 15557: a1 = s1 + 0x100\n 15561: u64 [a1 + 0xa8] = a0\n 15565: a0 = u64 [a2 + 0xb0]\n 15569: u64 [a1 + 0xb8] = a0\n 15573: a0 = u64 [a2 + 0xa8]\n 15577: u64 [a1 + 0xb0] = a0\n 15581: a0 = s1 + 0x42c0\n 15585: a1 = 0x40\n 15588: ra = 536, jump @17\n      : @605 [@dyn 268] (gas: 7)\n 15594: a3 = s1 + 0x4138\n 15598: a5 = a3 + 0x100\n 15602: a4 = u64 [a5 + 0xa0]\n 15606: a1 = u64 [a5 + 0x98]\n 15610: a2 = u64 [a5 + 0x90]\n 15614: a0 = u64 [a5 + 0x88]\n 15618: t0 = 538, jump @2017\n      : @606 [@dyn 269] (gas: 1)\n 15625: jump @608 if a1 == 0\n      : @607 (gas: 1)\n 15628: jump @1603\n      : @608 (gas: 15)\n 15631: a4 = s1 + 0x100\n 15635: a1 = u64 [a4 + 0xa8]\n 15639: a1 = a1 << 0x20\n 15642: a2 = a1 >> 0x20\n 15645: u64 [a3 + 384] = 0\n 15649: a1 = u64 [a4 + 0xb0]\n 15653: a5 = a3 + 0x100\n 15657: u64 [a5 + 0x68] = a1\n 15660: a1 = u64 [a4 + 0xb8]\n 15664: u64 [a5 + 0x70] = a1\n 15667: a1 = s1 + 0x42a0\n 15671: u64 [a5 + 0x78] = a2\n 15674: u64 [s1 + 0x1b8] = a0\n 15678: ra = 0x348\n 15682: jump @19\n      : @609 (gas: 12)\n 15685: a3 = s1 + 0x3138\n 15689: a0 = u64 [s1 + 0x138]\n 15693: a4 = a3 + 0x100\n 15697: u64 [a4 + 0x8] = a0\n 15700: a0 = u64 [s1 + 0x130]\n 15704: u64 [a4 + 0x10] = a0\n 15707: a0 = u64 [s1 + 0x128]\n 15711: u64 [a4 + 0x18] = a0\n 15714: a0 = s1 + 0x3260\n 15718: a1 = s1 + 0x3240\n 15722: u64 [a4 + 0x20] = a2\n 15725: ra = 540, jump @1836\n      : @610 [@dyn 270] (gas: 2)\n 15732: a0 = 0x3000\n 15736: t0 = 542, jump @2015\n      : @611 [@dyn 271] (gas: 14)\n 15743: a0 = u64 [a2 + 0x40]\n 15746: a1 = s1 + 0x100\n 15750: u64 [a1 + 0x58] = a0\n 15753: a0 = u64 [a2 + 0x38]\n 15756: u64 [a1 + 0x60] = a0\n 15759: a0 = u64 [a2 + 0x30]\n 15762: u64 [a1 + 0x68] = a0\n 15765: a0 = u64 [a2 + 0x28]\n 15768: u64 [a1 + 0x70] = a0\n 15771: a5 = 0\n 15773: a4 = 0\n 15775: t2 = 0\n 15777: t1 = 0\n 15779: fallthrough\n      : @612 (gas: 16)\n 15780: a0 = u64 [s1 + 0x138]\n 15784: a0 = a5 <u a0\n 15787: a2 = u64 [s1 + 0x130]\n 15791: a1 = a4 ^ a2\n 15794: a2 = a4 <u a2\n 15797: a2 = a0 if a1 == 0\n 15800: a0 = u64 [s1 + 0x128]\n 15804: t0 = t2 <u a0\n 15807: a3 = u64 [s1 + 0x180]\n 15811: a1 = t1 ^ a3\n 15814: a3 = t1 <u a3\n 15817: a3 = t0 if a1 == 0\n 15820: a0 = t2 ^ a0\n 15823: a0 = a0 | a1\n 15826: a3 = a2 if a0 == 0\n 15829: jump @675 if a3 == 0\n      : @613 (gas: 3)\n 15833: t0 = 0x220\n 15837: a1 = s1 + 0x3138\n 15841: fallthrough\n      : @614 [@dyn 272] (gas: 22)\n 15842: u64 [s1 + 0x1b8] = a5\n 15846: u64 [a1 + 0x8] = a5\n 15849: a5 = s1 + 0x100\n 15853: a0 = u64 [a5 + 0x8]\n 15856: u64 [a1 + 0x28] = a0\n 15859: u64 [a5 + 0xb0] = a4\n 15863: u64 [a1 + 0x10] = a4\n 15866: a0 = u64 [a5 + 0x10]\n 15869: u64 [a1 + 0x30] = a0\n 15872: u64 [s1 + 0x1a0] = t2\n 15876: u64 [a1 + 0x18] = t2\n 15879: a0 = u64 [a5 + 0x18]\n 15882: u64 [a1 + 0x38] = a0\n 15885: u64 [s1 + 0x1a8] = t1\n 15889: u64 [a1 + 0x20] = t1\n 15892: a4 = a1\n 15894: a0 = s1 + 0x3180\n 15898: a1 = s1 + 0x3160\n 15902: a2 = s1 + 0x3140\n 15906: a3 = u64 [a5 + 0x20]\n 15909: u64 [a4 + 0x40] = a3\n 15912: ra = 546, jump @1858\n      : @615 [@dyn 273] (gas: 6)\n 15919: a1 = s1 + 0x3138\n 15923: a0 = u64 [a1 + 0x60]\n 15926: a2 = u64 [a1 + 0x58]\n 15929: a3 = u64 [a1 + 0x50]\n 15932: a1 = u64 [a1 + 0x48]\n 15935: t0 = 548, jump @1991\n      : @616 [@dyn 274] (gas: 1)\n 15942: jump @618 if a0 == 0\n      : @617 (gas: 1)\n 15945: jump @1603\n      : @618 (gas: 2)\n 15948: a0 = s1 + 0x3120\n 15952: ra = 550, jump @17\n      : @619 [@dyn 275] (gas: 3)\n 15958: t0 = 0x228\n 15962: a1 = s1 + 0x3138\n 15966: fallthrough\n      : @620 [@dyn 276] (gas: 33)\n 15967: a0 = u64 [a1]\n 15969: a5 = s1 + 0x100\n 15973: u64 [a5 + 0x98] = a0\n 15977: a2 = a1 + 0xffffffffffffff00\n 15981: a0 = u64 [a2 + 0xf8]\n 15985: u64 [a5 + 0x90] = a0\n 15989: a0 = u64 [a2 + 0xf0]\n 15993: u64 [a5 + 0x88] = a0\n 15997: a0 = u64 [a2 + 0xe8]\n 16001: u64 [a5 + 0x78] = a0\n 16004: a1 = s1 + 0x2938\n 16008: a0 = u64 [a5 + 0xa8]\n 16012: a2 = a1 + 0x700\n 16016: u64 [a2 + 0xa0] = a0\n 16020: a0 = u64 [a5 + 0xa0]\n 16024: u64 [a2 + 0x98] = a0\n 16028: a0 = u64 [a5 + 0xb0]\n 16032: u64 [a2 + 0x90] = a0\n 16036: a0 = u64 [a5 + 0xb8]\n 16040: u64 [a2 + 0x88] = a0\n 16044: a0 = u64 [a5 + 0x58]\n 16047: u64 [a2 + 0xc0] = a0\n 16051: a0 = u64 [a5 + 0x60]\n 16054: u64 [a2 + 0xb8] = a0\n 16058: a0 = u64 [a5 + 0x68]\n 16061: u64 [a2 + 0xb0] = a0\n 16065: a4 = a1\n 16067: a0 = s1 + 0x3100\n 16071: a1 = s1 + 0x30e0\n 16075: a2 = s1 + 0x30c0\n 16079: a3 = u64 [a5 + 0x70]\n 16082: u64 [a4 + 0x7a8] = a3\n 16086: ra = 554, jump @1858\n      : @621 [@dyn 277] (gas: 7)\n 16093: a4 = s1 + 0x2938\n 16097: a5 = a4 + 0x700\n 16101: a1 = u64 [a5 + 0xe0]\n 16105: a2 = u64 [a5 + 0xd8]\n 16109: a3 = u64 [a5 + 0xd0]\n 16113: a0 = u64 [a5 + 0xc8]\n 16117: t0 = 556, jump @1955\n      : @622 [@dyn 278] (gas: 1)\n 16124: jump @624 if a1 == 0\n      : @623 (gas: 1)\n 16127: jump @1603\n      : @624 (gas: 11)\n 16130: a1 = u64 [s1 + 0x178]\n 16134: a3 = a4 + 0x700\n 16138: u64 [a3 + 0x68] = a1\n 16141: a1 = u64 [s1 + 0x188]\n 16145: u64 [a3 + 0x70] = a1\n 16148: a1 = u64 [s1 + 0x190]\n 16152: u64 [a3 + 0x78] = a1\n 16155: a1 = s1 + 0x30a0\n 16159: a2 = u64 [s1 + 0x198]\n 16163: u64 [a3 + 0x80] = a2\n 16167: ra = 558, jump @19\n      : @625 [@dyn 279] (gas: 15)\n 16173: a2 = s1 + 0x100\n 16177: a5 = u64 [a2 + 0xb8]\n 16181: a5 = a5 + 0x1\n 16184: a0 = a5 <u 0x1\n 16187: a4 = u64 [a2 + 0xb0]\n 16191: a4 = a4 + a0\n 16194: a0 = a5 | a4\n 16197: a0 = a0 <u 0x1\n 16200: a1 = u64 [a2 + 0xa0]\n 16204: a0 = a0 + a1\n 16207: a1 = a0 <u a1\n 16210: t1 = u64 [s1 + 0x1a8]\n 16214: t1 = t1 + a1\n 16217: t2 = a0\n 16219: jump @612\n      : @626 (gas: 11)\n 16222: a0 = u64 [s1 + 0x188]\n 16226: a3 = a4 + 0x400\n 16230: u64 [a3 + 0xc8] = a0\n 16234: a0 = u64 [s1 + 0x180]\n 16238: u64 [a3 + 0xd0] = a0\n 16242: a0 = u64 [s1 + 0x178]\n 16246: u64 [a3 + 0xd8] = a0\n 16250: a0 = s1 + 0x2e20\n 16254: a1 = s1 + 0x2e00\n 16258: u64 [a3 + 0xe0] = a2\n 16262: ra = 560, jump @1836\n      : @627 [@dyn 280] (gas: 16)\n 16269: a1 = s1 + 0x2938\n 16273: a0 = u64 [a1 + 0x500]\n 16277: a2 = s1 + 0x100\n 16281: u64 [a2 + 0x40] = a0\n 16284: a3 = a1 + 0x400\n 16288: a0 = u64 [a3 + 0xf8]\n 16292: u64 [a2 + 0x48] = a0\n 16295: a0 = u64 [a3 + 0xf0]\n 16299: u64 [a2 + 0x50] = a0\n 16302: a0 = u64 [a3 + 0xe8]\n 16306: u64 [a2 + 0x58] = a0\n 16309: a5 = 0\n 16311: a4 = 0\n 16313: t2 = 0\n 16315: t1 = 0\n 16317: fallthrough\n      : @628 (gas: 16)\n 16318: a0 = u64 [s1 + 0x188]\n 16322: a0 = a5 <u a0\n 16325: a2 = u64 [s1 + 0x180]\n 16329: a1 = a4 ^ a2\n 16332: a2 = a4 <u a2\n 16335: a2 = a0 if a1 == 0\n 16338: a0 = u64 [s1 + 0x178]\n 16342: t0 = t2 <u a0\n 16345: a3 = u64 [s1 + 0x1b8]\n 16349: a1 = t1 ^ a3\n 16352: a3 = t1 <u a3\n 16355: a3 = t0 if a1 == 0\n 16358: a0 = t2 ^ a0\n 16361: a0 = a0 | a1\n 16364: a3 = a2 if a0 == 0\n 16367: jump @630 if a3 != 0\n      : @629 (gas: 1)\n 16370: jump @947\n      : @630 (gas: 24)\n 16373: a1 = s1 + 0x2938\n 16377: u64 [s1 + 0x1b0] = a5\n 16381: a2 = a1 + 0x300\n 16385: u64 [a2 + 0xc8] = a5\n 16389: a5 = s1 + 0x100\n 16393: a0 = u64 [a5 + 0x18]\n 16396: u64 [a2 + 0xe8] = a0\n 16400: u64 [a5 + 0xa8] = a4\n 16404: u64 [a2 + 0xd0] = a4\n 16408: a0 = u64 [a5 + 0x20]\n 16411: u64 [a2 + 0xf0] = a0\n 16415: u64 [s1 + 0x198] = t2\n 16419: u64 [a1 + 0x3d8] = t2\n 16423: a0 = u64 [a5 + 0x28]\n 16426: u64 [a2 + 0xf8] = a0\n 16430: u64 [s1 + 0x1a0] = t1\n 16434: u64 [a1 + 0x3e0] = t1\n 16438: a4 = a1\n 16440: a0 = s1 + 0x2d40\n 16444: a1 = s1 + 0x2d20\n 16448: a2 = s1 + 0x2d00\n 16452: a3 = u64 [a5 + 0x30]\n 16455: u64 [a4 + 0x400] = a3\n 16459: ra = 562, jump @1858\n      : @631 [@dyn 281] (gas: 7)\n 16466: a1 = s1 + 0x2938\n 16470: a4 = a1 + 0x400\n 16474: a0 = u64 [a4 + 0x20]\n 16477: a2 = u64 [a4 + 0x18]\n 16480: a3 = u64 [a4 + 0x10]\n 16483: a1 = u64 [a4 + 0x8]\n 16486: t0 = 564, jump @1991\n      : @632 [@dyn 282] (gas: 1)\n 16493: jump @634 if a0 == 0\n      : @633 (gas: 1)\n 16496: jump @1603\n      : @634 (gas: 2)\n 16499: a0 = s1 + 0x2ce0\n 16503: ra = 566, jump @17\n      : @635 [@dyn 283] (gas: 41)\n 16509: a0 = s1 + 0x2938\n 16513: a0 = u64 [a0 + 0x3c0]\n 16517: a5 = s1 + 0x100\n 16521: u64 [a5 + 0x90] = a0\n 16525: a0 = s1 + 0x2938\n 16529: a0 = u64 [a0 + 0x3b8]\n 16533: u64 [a5 + 0x70] = a0\n 16536: a0 = s1 + 0x2938\n 16540: a0 = u64 [a0 + 0x3b0]\n 16544: u64 [a5 + 0x68] = a0\n 16547: a0 = s1 + 0x2938\n 16551: a0 = u64 [a0 + 0x3a8]\n 16555: u64 [a5 + 0x60] = a0\n 16558: a0 = s1 + 0x2938\n 16562: a1 = u64 [a5 + 0xa0]\n 16566: u64 [a0 + 0x360] = a1\n 16570: a0 = s1 + 0x2938\n 16574: a1 = u64 [a5 + 0x98]\n 16578: u64 [a0 + 0x358] = a1\n 16582: a0 = s1 + 0x2938\n 16586: a1 = u64 [a5 + 0xa8]\n 16590: u64 [a0 + 0x350] = a1\n 16594: a0 = s1 + 0x2938\n 16598: a1 = u64 [a5 + 0xb0]\n 16602: u64 [a0 + 0x348] = a1\n 16606: a0 = s1 + 0x2938\n 16610: a1 = u64 [a5 + 0x40]\n 16613: u64 [a0 + 0x380] = a1\n 16617: a0 = s1 + 0x2938\n 16621: a1 = u64 [a5 + 0x48]\n 16624: u64 [a0 + 0x378] = a1\n 16628: a0 = s1 + 0x2938\n 16632: a1 = u64 [a5 + 0x50]\n 16635: u64 [a0 + 0x370] = a1\n 16639: a0 = s1 + 0x2cc0\n 16643: a1 = s1 + 0x2ca0\n 16647: a2 = s1 + 0x2c80\n 16651: a3 = s1 + 0x2938\n 16655: a4 = u64 [a5 + 0x58]\n 16658: u64 [a3 + 0x368] = a4\n 16662: ra = 568, jump @1858\n      : @636 [@dyn 284] (gas: 7)\n 16669: a4 = s1 + 0x2938\n 16673: a5 = a4 + 0x300\n 16677: a1 = u64 [a5 + 0xa0]\n 16681: a2 = u64 [a5 + 0x98]\n 16685: a3 = u64 [a5 + 0x90]\n 16689: a0 = u64 [a5 + 0x88]\n 16693: t0 = 570, jump @1955\n      : @637 [@dyn 285] (gas: 1)\n 16700: jump @639 if a1 == 0\n      : @638 (gas: 1)\n 16703: jump @1603\n      : @639 (gas: 11)\n 16706: a1 = u64 [s1 + 0x160]\n 16710: a3 = a4 + 0x300\n 16714: u64 [a3 + 0x28] = a1\n 16717: a1 = u64 [s1 + 0x168]\n 16721: u64 [a3 + 0x30] = a1\n 16724: a1 = u64 [s1 + 0x170]\n 16728: u64 [a3 + 0x38] = a1\n 16731: a1 = s1 + 0x2c60\n 16735: a2 = u64 [s1 + 0x190]\n 16739: u64 [a3 + 0x40] = a2\n 16742: ra = 572, jump @19\n      : @640 [@dyn 286] (gas: 15)\n 16748: a2 = s1 + 0x100\n 16752: a5 = u64 [a2 + 0xb0]\n 16756: a5 = a5 + 0x1\n 16759: a0 = a5 <u 0x1\n 16762: a4 = u64 [a2 + 0xa8]\n 16766: a4 = a4 + a0\n 16769: a0 = a5 | a4\n 16772: a0 = a0 <u 0x1\n 16775: a1 = u64 [a2 + 0x98]\n 16779: a0 = a0 + a1\n 16782: a1 = a0 <u a1\n 16785: t1 = u64 [s1 + 0x1a0]\n 16789: t1 = t1 + a1\n 16792: t2 = a0\n 16794: jump @628\n      : @641 (gas: 3)\n 16797: a0 = s1 + 0x4080\n 16801: a1 = 0x40\n 16804: ra = 574, jump @17\n      : @642 [@dyn 287] (gas: 14)\n 16810: a2 = s1 + 0x3938\n 16814: t0 = u64 [a2 + 0x760]\n 16818: a1 = a2 + 0x700\n 16822: a5 = u64 [a1 + 0x58]\n 16825: a4 = u64 [a1 + 0x50]\n 16828: a0 = u64 [a1 + 0x48]\n 16831: a3 = a4 | t0\n 16834: a1 = a0 | a5\n 16837: a1 = a1 | a3\n 16840: a1 = a1 >> 0x20\n 16843: a3 = a3 | a5\n 16846: a3 = a3 << 0x20\n 16849: a1 = a1 | a3\n 16852: jump @644 if a1 == 0\n      : @643 (gas: 1)\n 16855: jump @1603\n      : @644 (gas: 11)\n 16858: u64 [a2 + 1848] = 0\n 16862: u64 [a2 + 1840] = 0\n 16866: u64 [a2 + 1832] = 0\n 16870: a3 = 0x8c379a000000000\n 16880: a1 = s1 + 0x4060\n 16884: u64 [a2 + 0x740] = a3\n 16888: u64 [s1 + 0x1b8] = a0\n 16892: u64 [s1 + 0x1b0] = a4\n 16896: u64 [s1 + 0x1a0] = t0\n 16900: u64 [s1 + 0x1a8] = a5\n 16904: ra = 576, jump @19\n      : @645 [@dyn 288] (gas: 6)\n 16910: a5 = s1 + 0x100\n 16914: a1 = u64 [a5 + 0xb8]\n 16918: a0 = u64 [a5 + 0xa8]\n 16922: a3 = u64 [a5 + 0xa0]\n 16926: a3 = a3 | a0\n 16929: t0 = 578, jump @1948\n      : @646 [@dyn 289] (gas: 1)\n 16936: jump @648 if a0 != 0\n      : @647 (gas: 1)\n 16939: jump @1603\n      : @648 (gas: 10)\n 16942: i32 a0 = a1 + 0x4\n 16945: a2 = s1 + 0x3938\n 16949: u64 [a2 + 1824] = 0\n 16953: u64 [a2 + 1816] = 0\n 16957: u64 [a2 + 1800] = 0x20\n 16962: a1 = s1 + 0x4040\n 16966: u64 [a2 + 1808] = 0\n 16970: u64 [s1 + 0x1a8] = a3\n 16974: u64 [s1 + 0x1a0] = a4\n 16978: ra = 580, jump @19\n      : @649 [@dyn 290] (gas: 1)\n 16984: t0 = 582, jump @1952\n      : @650 [@dyn 291] (gas: 1)\n 16991: jump @652 if a0 != 0\n      : @651 (gas: 1)\n 16994: jump @1603\n      : @652 (gas: 8)\n 16997: i32 a0 = a1 + 0x24\n 17000: a2 = s1 + 0x3938\n 17004: u64 [a2 + 1792] = 0\n 17008: u64 [a2 + 1784] = 0\n 17012: u64 [a2 + 1768] = 0x21\n 17017: a1 = s1 + 0x4020\n 17021: u64 [a2 + 1776] = 0\n 17025: ra = 584, jump @19\n      : @653 [@dyn 292] (gas: 10)\n 17031: a0 = s1 + 0x100\n 17035: a3 = u64 [a0 + 0xa8]\n 17039: a4 = u64 [a0 + 0xb0]\n 17043: a1 = u64 [a0 + 0xb8]\n 17047: a2 = 0x100000000\n 17057: a0 = 0xffffffbc\n 17067: a0 = a1 <u a0\n 17070: a0 = 0 if a4 != 0\n 17072: a0 = 0 if a3 != 0\n 17074: jump @655 if a0 != 0\n      : @654 (gas: 1)\n 17077: jump @1603\n      : @655 (gas: 14)\n 17080: i32 a0 = a1 + 0x44\n 17083: a1 = u64 [0x20020]\n 17088: u64 [s1 + 0x1a0] = a2\n 17092: a5 = s1 + 0x3938\n 17096: a4 = a5 + 0x600\n 17100: u64 [a4 + 0xe0] = a1\n 17104: a1 = u64 [0x20028]\n 17109: a2 = u64 [0x20030]\n 17114: a3 = u64 [0x20038]\n 17119: u64 [a4 + 0xd8] = a1\n 17123: u64 [a4 + 0xd0] = a2\n 17127: a1 = s1 + 0x4000\n 17131: u64 [a4 + 0xc8] = a3\n 17135: ra = 586, jump @19\n      : @656 [@dyn 293] (gas: 1)\n 17141: t0 = 588, jump @1951\n      : @657 [@dyn 294] (gas: 1)\n 17148: jump @659 if a0 != 0\n      : @658 (gas: 1)\n 17151: jump @1603\n      : @659 (gas: 10)\n 17154: i32 a0 = a2 + 0x64\n 17157: a3 = s1 + 0x3938\n 17161: u64 [a3 + 1720] = 0\n 17165: u64 [a3 + 1712] = 0\n 17169: a1 = 0x6e00000000000000\n 17179: u64 [a3 + 0x6c0] = a1\n 17183: a1 = s1 + 0x3fe0\n 17187: u64 [a3 + 1704] = 0\n 17191: ra = 0x458\n 17195: jump @19\n      : @660 (gas: 10)\n 17198: a4 = s1 + 0x100\n 17202: a0 = u64 [a4 + 0x68]\n 17205: a0 = a0 ^ 0x1\n 17208: a3 = u64 [s1 + 0xd8]\n 17212: a1 = u64 [a4 + 0x58]\n 17215: a0 = a1 if a3 != 0\n 17218: a1 = u64 [a4 + 0x60]\n 17221: a2 = u64 [a4 + 0x70]\n 17224: a0 = a1 if a2 != 0\n 17227: jump @662 if a0 != 0\n      : @661 (gas: 1)\n 17230: jump @945\n      : @662 (gas: 18)\n 17233: a0 = u64 [s1 + 0x100]\n 17237: a0 = a0 & 0xffffffffffffffe0\n 17240: u64 [s1 + 0x130] = a0\n 17244: a0 = s1 + 0x7ff\n 17248: a0 = a0 + 0x139\n 17252: a1 = u64 [s1 + 0x108]\n 17256: a2 = a0 + 0x500\n 17260: u64 [a2 + 0xe8] = a1\n 17264: a1 = u64 [s1 + 0x110]\n 17268: u64 [a2 + 0xf0] = a1\n 17272: a1 = u64 [s1 + 0x120]\n 17276: u64 [a2 + 0xf8] = a1\n 17280: a1 = s1 + 0x7ff\n 17284: a1 = a1 + 0x721\n 17288: a2 = u64 [s1 + 0x118]\n 17292: u64 [a0 + 0x600] = a2\n 17296: a0 = 0\n 17298: ra = 590, jump @19\n      : @663 [@dyn 295] (gas: 1)\n 17304: t0 = 592, jump @1998\n      : @664 [@dyn 296] (gas: 1)\n 17311: ra = 594, jump @28\n      : @665 [@dyn 297] (gas: 1)\n 17317: t0 = 596, jump @1984\n      : @666 [@dyn 298] (gas: 28)\n 17324: ecalli 8 // 'hash_keccak_256'\n 17326: u64 [s1 + 440] = 0x20\n 17331: a5 = 0\n 17333: u64 [s1 + 432] = 0\n 17337: u64 [s1 + 424] = 0\n 17341: a4 = 0\n 17343: t2 = 0\n 17345: u64 [s1 + 408] = 0\n 17349: u64 [s1 + 416] = 0\n 17353: a3 = u64 [s1 + 0x188]\n 17357: a0 = u64 [a3 + 0x18]\n 17360: a1 = u64 [a3 + 0x10]\n 17363: a2 = u64 [a3 + 0x8]\n 17366: t0 = u64 [a3]\n 17368: t1 = reverse a0\n 17370: a1 = reverse a1\n 17372: a3 = reverse a2\n 17374: a2 = reverse t0\n 17376: t0 = a2\n 17378: a0 = u64 [s1 + 0x190]\n 17382: u64 [a0 + 0x18] = a2\n 17385: u64 [s1 + 0x170] = a3\n 17389: u64 [a0 + 0x10] = a3\n 17392: u64 [s1 + 0x188] = a1\n 17396: u64 [a0 + 0x8] = a1\n 17399: a3 = t1\n 17401: u64 [a0] = t1\n 17403: fallthrough\n      : @667 (gas: 25)\n 17404: t1 = t0\n 17406: ra = a3\n 17408: a0 = u64 [s1 + 0x130]\n 17412: u64 [s1 + 0x180] = a4\n 17416: a0 = a4 <u a0\n 17419: a4 = a0 ^ 0x1\n 17422: u64 [s1 + 0x178] = t2\n 17426: a4 = 0x1 if t2 != 0\n 17429: a0 = u64 [s1 + 0x1a0]\n 17433: a2 = u64 [s1 + 0x198]\n 17437: a0 = a0 | a2\n 17440: a4 = 0x1 if a0 != 0\n 17443: a1 = u64 [s1 + 0x150]\n 17447: a0 = u64 [s1 + 0x1b8]\n 17451: a1 = a1 + a0\n 17454: a3 = u64 [s1 + 0x148]\n 17458: t0 = a5\n 17460: a3 = a3 + a5\n 17463: a2 = u64 [s1 + 0x140]\n 17467: t2 = u64 [s1 + 0x1b0]\n 17471: a2 = a2 + t2\n 17474: a0 = u64 [s1 + 0x138]\n 17478: a5 = u64 [s1 + 0x1a8]\n 17482: a0 = a0 + a5\n 17485: jump @669 if a4 == 0\n      : @668 (gas: 1)\n 17488: jump @998\n      : @669 (gas: 14)\n 17491: a4 = u64 [s1 + 0x1b8]\n 17495: a4 = a1 <u a4\n 17498: a3 = a3 + a4\n 17501: a5 = t0\n 17503: t0 = a3 ^ t0\n 17506: u64 [s1 + 0x158] = a5\n 17510: a5 = a3 <u a5\n 17513: a5 = a4 if t0 == 0\n 17516: a5 = a5 + a2\n 17519: a4 = a5 <u a2\n 17522: a2 = a2 <u t2\n 17525: a0 = a0 + a2\n 17528: a0 = a0 + a4\n 17531: t0 = 598, jump @1979\n      : @670 [@dyn 299] (gas: 3)\n 17538: u64 [s1 + 0x168] = ra\n 17542: u64 [s1 + 0x160] = t1\n 17546: jump @672 if a0 == 0\n      : @671 (gas: 1)\n 17549: jump @1603\n      : @672 (gas: 4)\n 17552: a0 = s1 + 0x7ff\n 17556: a0 = a0 + 0x521\n 17560: u64 [s1 + 0x1b0] = t2\n 17564: ra = 600, jump @17\n      : @673 [@dyn 300] (gas: 15)\n 17570: a3 = s1 + 0x7ff\n 17574: a3 = a3 + 0x139\n 17578: a0 = u64 [a3 + 0x400]\n 17582: a4 = a3 + 0x300\n 17586: a1 = u64 [a4 + 0xf8]\n 17590: a2 = u64 [a4 + 0xf0]\n 17594: a3 = u64 [a4 + 0xe8]\n 17598: a4 = s1 + 0x4938\n 17602: u64 [a4 + 0x20] = a0\n 17605: u64 [a4 + 0x18] = a1\n 17608: u64 [a4 + 0x10] = a2\n 17611: u64 [a4 + 0x8] = a3\n 17614: a1 = s1 + 0x4940\n 17618: a0 = u64 [s1 + 0x190]\n 17622: ra = 602, jump @23\n      : @674 [@dyn 301] (gas: 56)\n 17628: t2 = u64 [s1 + 0x168]\n 17632: t2 = t2 + 0x1\n 17635: a0 = t2 <u 0x1\n 17638: t0 = u64 [s1 + 0x188]\n 17642: t0 = t0 + a0\n 17645: a0 = t2 | t0\n 17648: a0 = a0 <u 0x1\n 17651: a1 = u64 [s1 + 0x170]\n 17655: t1 = a1 + a0\n 17658: a1 = t1 <u a1\n 17661: a0 = u64 [s1 + 0x160]\n 17665: a0 = a0 + a1\n 17668: a1 = u64 [s1 + 0x1b8]\n 17672: a2 = a1 + 0x20\n 17675: u64 [s1 + 0x168] = a2\n 17679: a3 = a2 <u a1\n 17682: a1 = u64 [s1 + 0x158]\n 17686: a2 = a1 + a3\n 17689: u64 [s1 + 0x160] = a2\n 17693: a4 = a2 <u a1\n 17696: a4 = a3 if a3 == 0\n 17699: a1 = u64 [s1 + 0x1b0]\n 17703: ra = a1 + a4\n 17706: a4 = ra <u a1\n 17709: a1 = u64 [s1 + 0x1a8]\n 17713: a1 = a1 + a4\n 17716: u64 [s1 + 0x1a8] = a1\n 17720: a1 = u64 [s1 + 0x180]\n 17724: a4 = a1 + 0x20\n 17727: a5 = a4 <u a1\n 17730: a2 = u64 [s1 + 0x178]\n 17734: a1 = a2 + a5\n 17737: a2 = a1 <u a2\n 17740: a2 = a5 if a5 == 0\n 17743: a3 = u64 [s1 + 0x198]\n 17747: a2 = a2 + a3\n 17750: a5 = a2 <u a3\n 17753: a3 = u64 [s1 + 0x1a0]\n 17757: a3 = a3 + a5\n 17760: u64 [s1 + 0x1a0] = a3\n 17764: u64 [s1 + 0x188] = t0\n 17768: a5 = u64 [s1 + 0x190]\n 17772: u64 [a5 + 0x8] = t0\n 17775: a3 = t2\n 17777: u64 [a5] = t2\n 17779: u64 [a5 + 0x10] = t1\n 17782: t0 = a0\n 17784: u64 [a5 + 0x18] = a0\n 17787: u64 [s1 + 0x170] = t1\n 17791: a0 = u64 [s1 + 0x168]\n 17795: u64 [s1 + 0x1b8] = a0\n 17799: a5 = u64 [s1 + 0x160]\n 17803: u64 [s1 + 0x1b0] = ra\n 17807: t2 = a1\n 17809: u64 [s1 + 0x198] = a2\n 17813: jump @667\n      : @675 (gas: 3)\n 17816: a0 = s1 + 0x3220\n 17820: a1 = 0x40\n 17823: ra = 604, jump @17\n      : @676 [@dyn 302] (gas: 13)\n 17829: a2 = s1 + 0x3138\n 17833: t0 = u64 [a2 + 0x100]\n 17837: a5 = u64 [a2 + 0xf8]\n 17841: a4 = u64 [a2 + 0xf0]\n 17845: a0 = u64 [a2 + 0xe8]\n 17849: a3 = a4 | t0\n 17852: a1 = a0 | a5\n 17855: a1 = a1 | a3\n 17858: a1 = a1 >> 0x20\n 17861: a3 = a3 | a5\n 17864: a3 = a3 << 0x20\n 17867: a1 = a1 | a3\n 17870: jump @678 if a1 == 0\n      : @677 (gas: 1)\n 17873: jump @1603\n      : @678 (gas: 10)\n 17876: u64 [a2 + 224] = 0\n 17880: u64 [a2 + 216] = 0\n 17884: u64 [a2 + 208] = 0\n 17888: a1 = s1 + 0x3200\n 17892: u64 [a2 + 200] = 0x20\n 17897: u64 [s1 + 0x1b8] = a0\n 17901: u64 [s1 + 0x1a0] = a4\n 17905: u64 [s1 + 0x1b0] = t0\n 17909: u64 [s1 + 0x1a8] = a5\n 17913: ra = 606, jump @19\n      : @679 [@dyn 303] (gas: 1)\n 17919: t0 = 608, jump @1975\n      : @680 [@dyn 304] (gas: 19)\n 17926: i32 a1 = a1 + 0x138\n 17930: a1 = a1 + s1\n 17933: u64 [a1 + 0x70] = a2\n 17936: u64 [a1 + 0x68] = a0\n 17939: a0 = u64 [a5 + 0x58]\n 17942: u64 [a1 + 0xa0] = a0\n 17946: a0 = u64 [a5 + 0x60]\n 17949: u64 [a1 + 0x98] = a0\n 17953: a0 = u64 [a5 + 0x68]\n 17956: u64 [a1 + 0x90] = a0\n 17960: a0 = u64 [a5 + 0x70]\n 17963: u64 [a1 + 0x88] = a0\n 17967: u64 [a1 + 0x78] = a3\n 17970: a3 = a1\n 17972: a0 = s1 + 0x31e0\n 17976: a1 = s1 + 0x31c0\n 17980: a2 = s1 + 0x31a0\n 17984: u64 [a3 + 0x80] = a4\n 17988: ra = 610, jump @1736\n      : @681 [@dyn 305] (gas: 6)\n 17994: a0 = s1 + 0x3138\n 17998: a1 = u64 [a0 + 0xb0]\n 18002: t0 = u64 [a0 + 0xc0]\n 18006: t1 = u64 [a0 + 0xa8]\n 18010: a3 = u64 [a0 + 0xb8]\n 18014: jump @954\n      : @682 (gas: 8)\n 18017: a1 = s1 + 0x5138\n 18021: u64 [a1 + 608] = 0\n 18025: u64 [a1 + 600] = 0\n 18029: u64 [a1 + 592] = 0\n 18033: u64 [a1 + 584] = 0x2\n 18038: a0 = s1 + 0x36e0\n 18042: a1 = s1 + 0x5380\n 18046: ra = 612, jump @21\n      : @683 [@dyn 306] (gas: 13)\n 18052: a0 = s1 + 0x3138\n 18056: a1 = u64 [a0 + 0x5b0]\n 18060: u64 [s1 + 0x160] = a1\n 18064: a1 = u64 [a0 + 0x5a8]\n 18068: u64 [s1 + 0x158] = a1\n 18072: a0 = u32 [a0 + 0x5b8]\n 18076: u64 [s1 + 0x150] = a0\n 18080: a0 = u64 [s1 + 0x148]\n 18084: ra = 0x266\n 18088: ecalli 5 // 'caller'\n 18090: a5 = u64 [s1 + 0x168]\n 18094: t0 = 0x268\n 18098: jump @1947\n      : @684 [@dyn 307] (gas: 2)\n 18102: a5 = u64 [s1 + 0x168]\n 18106: t0 = 616, jump @1947\n      : @685 [@dyn 308] (gas: 10)\n 18113: a2 = u64 [a4 + 0x50]\n 18116: a1 = a1 ^ a2\n 18119: a2 = u64 [a4 + 0x58]\n 18122: a0 = a0 ^ a2\n 18125: a0 = a0 | a1\n 18128: a1 = u64 [a4 + 0x60]\n 18131: a1 = a1 ^ a3\n 18134: a0 = a0 | a1\n 18137: a1 = 0x1\n 18140: jump @690 if a0 == 0\n      : @686 (gas: 8)\n 18143: a1 = s1 + 0x5138\n 18147: u64 [a1 + 640] = 0\n 18151: u64 [a1 + 632] = 0\n 18155: u64 [a1 + 624] = 0\n 18159: u64 [a1 + 616] = 0x3\n 18164: a0 = s1 + 0x36c0\n 18168: a1 = s1 + 0x53a0\n 18172: ra = 618, jump @21\n      : @687 [@dyn 309] (gas: 12)\n 18178: a0 = s1 + 0x3138\n 18182: a1 = u64 [a0 + 0x590]\n 18186: u64 [s1 + 0x160] = a1\n 18190: a1 = u64 [a0 + 0x588]\n 18194: u64 [s1 + 0x158] = a1\n 18198: a0 = u32 [a0 + 0x598]\n 18202: u64 [s1 + 0x150] = a0\n 18206: a0 = u64 [s1 + 0x148]\n 18210: ra = 0x26c\n 18214: ecalli 5 // 'caller'\n 18216: t0 = 0x26e\n 18220: jump @1942\n      : @688 [@dyn 310] (gas: 1)\n 18224: t0 = 622, jump @1942\n      : @689 [@dyn 311] (gas: 2)\n 18231: a1 = a0 <u 0x1\n 18234: fallthrough\n      : @690 (gas: 7)\n 18235: a2 = s1 + 0x3138\n 18239: u64 [a2 + 1408] = 0\n 18243: u64 [a2 + 1400] = 0\n 18247: u64 [a2 + 0x568] = a1\n 18251: a0 = s1 + 0x36a0\n 18255: u64 [a2 + 1392] = 0\n 18259: ra = 624, jump @1799\n      : @691 [@dyn 312] (gas: 3)\n 18265: a0 = u64 [s1 + 0x1a0]\n 18269: a1 = 0x3000\n 18273: t0 = 626, jump @2040\n      : @692 [@dyn 313] (gas: 10)\n 18280: u64 [a3 + 0x60] = a0\n 18283: a0 = u64 [s1 + 0x1a8]\n 18287: u64 [a3 + 0x58] = a0\n 18290: a0 = u64 [s1 + 0x1b0]\n 18294: u64 [a3 + 0x50] = a0\n 18297: a1 = s1 + 0x3680\n 18301: a0 = u64 [s1 + 0x1b8]\n 18305: u64 [a3 + 0x48] = a0\n 18308: a0 = 0\n 18310: ra = 628, jump @19\n      : @693 [@dyn 314] (gas: 9)\n 18316: a0 = s1 + 0x3138\n 18320: u64 [a0 + 1344] = 0\n 18324: u64 [a0 + 1336] = 0\n 18328: u64 [a0 + 1328] = 0\n 18332: a2 = a0\n 18334: a0 = 0x20\n 18337: a1 = s1 + 0x3660\n 18341: u64 [a2 + 1320] = 0\n 18345: ra = 630, jump @19\n      : @694 [@dyn 315] (gas: 3)\n 18351: a1 = u64 [s1 + 0x198]\n 18355: a0 = i32 [a1]\n 18357: jump @696 if a0 >u 63\n      : @695 (gas: 2)\n 18361: u32 [a1 + 0] = 0x40\n 18364: fallthrough\n      : @696 (gas: 4)\n 18365: a0 = sp + 0xffffffffffffffe0\n 18368: a0 = a0 & 0xffffffffffffffe0\n 18371: u64 [s1 + 0x168] = a0\n 18375: t0 = 632, jump @2038\n      : @697 [@dyn 316] (gas: 4)\n 18382: ra = 0x27a\n 18386: ecalli 8 // 'hash_keccak_256'\n 18388: t0 = 0x27c\n 18392: jump @1959\n      : @698 [@dyn 317] (gas: 1)\n 18396: t0 = 636, jump @1959\n      : @699 [@dyn 318] (gas: 8)\n 18403: a3 = a1 + 0x200\n 18407: u64 [a3 + 0x88] = a4\n 18411: u64 [a3 + 0x90] = a5\n 18415: u64 [a3 + 0x98] = a2\n 18419: u64 [a3 + 0xa0] = a0\n 18423: a0 = s1 + 0x3640\n 18427: a1 = s1 + 0x53c0\n 18431: ra = 638, jump @21\n      : @700 [@dyn 319] (gas: 28)\n 18437: a4 = s1 + 0x3138\n 18441: a5 = a4 + 0x500\n 18445: a0 = u64 [a5 + 0x10]\n 18448: a1 = u64 [a5 + 0x8]\n 18451: a2 = u64 [a5 + 0x18]\n 18454: a3 = u64 [a5 + 0x20]\n 18457: t0 = a4\n 18459: a5 = u64 [s1 + 0x180]\n 18463: a4 = a5 ^ a0\n 18466: a0 = a5 <u a0\n 18469: a5 = u64 [s1 + 0x188]\n 18473: a1 = a5 <u a1\n 18476: a1 = a0 if a4 != 0\n 18479: a4 = u64 [s1 + 0x170]\n 18483: a0 = a4 ^ a3\n 18486: a3 = a4 <u a3\n 18489: a5 = u64 [s1 + 0x178]\n 18493: a4 = a5 <u a2\n 18496: a4 = a3 if a0 != 0\n 18499: a2 = a2 ^ a5\n 18502: a0 = a0 | a2\n 18505: a1 = a4 if a0 != 0\n 18508: u64 [t0 + 1280] = 0\n 18512: u64 [t0 + 1272] = 0\n 18516: u64 [t0 + 0x4e8] = a1\n 18520: a0 = s1 + 0x3620\n 18524: u64 [t0 + 1264] = 0\n 18528: ra = 640, jump @1908\n      : @701 [@dyn 320] (gas: 13)\n 18535: a0 = u64 [s1 + 0x1a0]\n 18539: a2 = s1 + 0x3138\n 18543: a3 = a2 + 0x400\n 18547: u64 [a3 + 0xe0] = a0\n 18551: a0 = u64 [s1 + 0x1a8]\n 18555: u64 [a3 + 0xd8] = a0\n 18559: a0 = u64 [s1 + 0x1b0]\n 18563: u64 [a3 + 0xd0] = a0\n 18567: a1 = s1 + 0x3600\n 18571: a0 = u64 [s1 + 0x1b8]\n 18575: u64 [a3 + 0xc8] = a0\n 18579: a0 = 0\n 18581: ra = 642, jump @19\n      : @702 [@dyn 321] (gas: 9)\n 18587: a0 = s1 + 0x3138\n 18591: u64 [a0 + 1216] = 0\n 18595: u64 [a0 + 1208] = 0\n 18599: u64 [a0 + 1200] = 0\n 18603: a2 = a0\n 18605: a0 = 0x20\n 18608: a1 = s1 + 0x35e0\n 18612: u64 [a2 + 1192] = 0\n 18616: ra = 644, jump @19\n      : @703 [@dyn 322] (gas: 3)\n 18622: a1 = u64 [s1 + 0x198]\n 18626: a0 = i32 [a1]\n 18628: jump @705 if a0 >u 63\n      : @704 (gas: 2)\n 18632: u32 [a1 + 0] = 0x40\n 18635: fallthrough\n      : @705 (gas: 4)\n 18636: a0 = sp + 0xffffffffffffffe0\n 18639: a0 = a0 & 0xffffffffffffffe0\n 18642: u64 [s1 + 0x1b8] = a0\n 18646: t0 = 646, jump @2038\n      : @706 [@dyn 323] (gas: 5)\n 18653: ra = 0x288\n 18657: ecalli 8 // 'hash_keccak_256'\n 18659: a3 = u64 [s1 + 0x1b8]\n 18663: t0 = 0x28a\n 18667: jump @1949\n      : @707 [@dyn 324] (gas: 2)\n 18671: a3 = u64 [s1 + 0x1b8]\n 18675: t0 = 650, jump @1949\n      : @708 [@dyn 325] (gas: 19)\n 18682: a1 = s1 + 0x3138\n 18686: a0 = u64 [s1 + 0x170]\n 18690: u64 [a1 + 0x440] = a0\n 18694: a0 = u64 [s1 + 0x178]\n 18698: u64 [a1 + 0x438] = a0\n 18702: a0 = u64 [s1 + 0x180]\n 18706: u64 [a1 + 0x430] = a0\n 18710: a0 = u64 [s1 + 0x188]\n 18714: u64 [a1 + 0x428] = a0\n 18718: a0 = a1 + 0x400\n 18722: u64 [a0 + 0x48] = a4\n 18725: u64 [a0 + 0x50] = a5\n 18728: u64 [a0 + 0x58] = a2\n 18731: a4 = a1\n 18733: a0 = s1 + 0x35a0\n 18737: a1 = s1 + 0x3580\n 18741: a2 = s1 + 0x3560\n 18745: u64 [a4 + 0x460] = a3\n 18749: ra = 652, jump @1847\n      : @709 [@dyn 326] (gas: 27)\n 18756: a0 = s1 + 0x3138\n 18760: a5 = a0 + 0x400\n 18764: a1 = u64 [a5 + 0x68]\n 18767: u64 [s1 + 0x1a8] = a1\n 18771: a4 = u64 [a5 + 0x80]\n 18775: u64 [s1 + 0x1b8] = a4\n 18779: a2 = u64 [a5 + 0x70]\n 18782: u64 [s1 + 0x1a0] = a2\n 18786: a3 = u64 [a5 + 0x78]\n 18789: u64 [s1 + 0x1b0] = a3\n 18793: a0 = a1 + 0x1\n 18796: a1 = a0 <u 0x1\n 18799: a1 = a1 + a2\n 18802: a2 = a0 | a1\n 18805: a2 = a2 <u 0x1\n 18808: a2 = a2 + a3\n 18811: a3 = a2 <u a3\n 18814: a3 = a3 + a4\n 18817: a4 = s1 + 0x5138\n 18821: a5 = a4 + 0x200\n 18825: u64 [a5 + 0xa8] = a0\n 18829: u64 [a5 + 0xb0] = a1\n 18833: u64 [a5 + 0xb8] = a2\n 18837: u64 [a5 + 0xc0] = a3\n 18841: a0 = s1 + 0x3540\n 18845: a1 = s1 + 0x53e0\n 18849: ra = 654, jump @21\n      : @710 [@dyn 327] (gas: 13)\n 18855: a1 = s1 + 0x3138\n 18859: a2 = a1 + 0x400\n 18863: a0 = u64 [a2 + 0x20]\n 18866: u64 [s1 + 0x178] = a0\n 18870: a0 = u64 [a2 + 0x18]\n 18873: u64 [s1 + 0x170] = a0\n 18877: a0 = u64 [a2 + 0x10]\n 18880: u64 [s1 + 0x168] = a0\n 18884: a0 = u64 [a2 + 0x8]\n 18887: u64 [s1 + 0x160] = a0\n 18891: a1 = u64 [s1 + 0x1a8]\n 18895: a0 = a1 + 0x3\n 18898: t0 = 656, jump @1973\n      : @711 [@dyn 328] (gas: 8)\n 18905: a5 = a4 + 0x200\n 18909: u64 [a5 + 0xe0] = a1\n 18913: u64 [a5 + 0xd8] = a3\n 18917: u64 [a5 + 0xd0] = a2\n 18921: u64 [a5 + 0xc8] = a0\n 18925: a0 = s1 + 0x3520\n 18929: a1 = s1 + 0x5400\n 18933: ra = 658, jump @21\n      : @712 [@dyn 329] (gas: 6)\n 18939: a0 = s1 + 0x3138\n 18943: a0 = u8 [a0 + 0x3e8]\n 18947: u64 [s1 + 0x138] = a0\n 18951: a1 = u64 [s1 + 0x1a8]\n 18955: a0 = a1 + 0x4\n 18958: t0 = 660, jump @1973\n      : @713 [@dyn 330] (gas: 8)\n 18965: u64 [a4 + 0x300] = a1\n 18969: a1 = a4 + 0x200\n 18973: u64 [a1 + 0xf8] = a3\n 18977: u64 [a1 + 0xf0] = a2\n 18981: u64 [a1 + 0xe8] = a0\n 18985: a0 = s1 + 0x3500\n 18989: a1 = s1 + 0x5420\n 18993: ra = 662, jump @21\n      : @714 [@dyn 331] (gas: 22)\n 18999: a1 = s1 + 0x3138\n 19003: a2 = a1 + 0x300\n 19007: a0 = u64 [a2 + 0xe0]\n 19011: u64 [s1 + 0x130] = a0\n 19015: a0 = u64 [a2 + 0xd8]\n 19019: u64 [s1 + 0x128] = a0\n 19023: a0 = u64 [a2 + 0xd0]\n 19027: u64 [s1 + 0x120] = a0\n 19031: a0 = u64 [a2 + 0xc8]\n 19035: u64 [s1 + 0x118] = a0\n 19039: a0 = u64 [s1 + 0x1b8]\n 19043: u64 [a2 + 0xa0] = a0\n 19047: a0 = u64 [s1 + 0x1b0]\n 19051: u64 [a2 + 0x98] = a0\n 19055: a0 = u64 [s1 + 0x1a0]\n 19059: u64 [a2 + 0x90] = a0\n 19063: a3 = a1\n 19065: a0 = s1 + 0x34e0\n 19069: a1 = s1 + 0x34c0\n 19073: a2 = u64 [s1 + 0x1a8]\n 19077: u64 [a3 + 0x388] = a2\n 19081: ra = 664, jump @1877\n      : @715 [@dyn 332] (gas: 29)\n 19088: a5 = s1 + 0x3138\n 19092: a0 = u64 [a5 + 0x3c0]\n 19096: u64 [s1 + 0x188] = a0\n 19100: a0 = u64 [a5 + 0x3b8]\n 19104: u64 [s1 + 0x190] = a0\n 19108: a0 = u64 [a5 + 0x3b0]\n 19112: u64 [s1 + 0x198] = a0\n 19116: a0 = u64 [s1 + 0x1a8]\n 19120: a2 = a0 + 0x2\n 19123: a0 = a2 <u a0\n 19126: a3 = u64 [s1 + 0x1a0]\n 19130: a1 = a3 + a0\n 19133: a3 = a1 <u a3\n 19136: a3 = a0 if a0 == 0\n 19139: a0 = u64 [a5 + 0x3a8]\n 19143: u64 [s1 + 0x180] = a0\n 19147: a0 = u64 [s1 + 0x1b0]\n 19151: a3 = a3 + a0\n 19154: a0 = a3 <u a0\n 19157: a4 = u64 [s1 + 0x1b8]\n 19161: a0 = a0 + a4\n 19164: a4 = a5 + 0x300\n 19168: u64 [a4 + 0x60] = a0\n 19171: u64 [a4 + 0x58] = a3\n 19174: u64 [a4 + 0x50] = a1\n 19177: a0 = s1 + 0x34a0\n 19181: a1 = s1 + 0x3480\n 19185: u64 [a4 + 0x48] = a2\n 19188: ra = 666, jump @1877\n      : @716 [@dyn 333] (gas: 13)\n 19195: a1 = s1 + 0x3138\n 19199: a2 = a1 + 0x300\n 19203: a0 = u64 [a2 + 0x80]\n 19207: u64 [s1 + 0x140] = a0\n 19211: a0 = u64 [a2 + 0x78]\n 19214: u64 [s1 + 0x148] = a0\n 19218: a0 = u64 [a2 + 0x70]\n 19221: u64 [s1 + 0x150] = a0\n 19225: a0 = u64 [a2 + 0x68]\n 19228: u64 [s1 + 0x158] = a0\n 19232: a0 = s1 + 0x3460\n 19236: a1 = 0x40\n 19239: ra = 668, jump @17\n      : @717 [@dyn 334] (gas: 7)\n 19245: a2 = s1 + 0x3138\n 19249: a3 = a2 + 0x300\n 19253: a4 = u64 [a3 + 0x40]\n 19256: a5 = u64 [a3 + 0x38]\n 19259: a1 = u64 [a3 + 0x30]\n 19262: a0 = u64 [a3 + 0x28]\n 19265: t0 = 670, jump @2022\n      : @718 [@dyn 335] (gas: 1)\n 19272: jump @720 if a1 == 0\n      : @719 (gas: 1)\n 19275: jump @1603\n      : @720 (gas: 9)\n 19278: u64 [a2 + 800] = 0\n 19282: u64 [a2 + 792] = 0\n 19286: u64 [a2 + 784] = 0\n 19290: a1 = s1 + 0x3440\n 19294: u64 [a2 + 776] = 0xa0\n 19300: u64 [s1 + 0x1b8] = a0\n 19304: u64 [s1 + 0x1a0] = a4\n 19308: u64 [s1 + 0x1a8] = a5\n 19312: ra = 672, jump @19\n      : @721 [@dyn 336] (gas: 3)\n 19318: a0 = u64 [s1 + 0x1b8]\n 19322: a0 = a0 + 0xa0\n 19326: t0 = 674, jump @1974\n      : @722 [@dyn 337] (gas: 19)\n 19333: a1 = s1 + 0x3138\n 19337: a5 = a1 + 0x200\n 19341: u64 [a5 + 0xb0] = a2\n 19345: u64 [a5 + 0xa8] = a0\n 19349: a0 = u64 [s1 + 0x188]\n 19353: u64 [a5 + 0xe0] = a0\n 19357: a0 = u64 [s1 + 0x190]\n 19361: u64 [a5 + 0xd8] = a0\n 19365: a0 = u64 [s1 + 0x198]\n 19369: u64 [a5 + 0xd0] = a0\n 19373: a0 = u64 [s1 + 0x180]\n 19377: u64 [a5 + 0xc8] = a0\n 19381: u64 [a5 + 0xb8] = a3\n 19385: a3 = a1\n 19387: a0 = s1 + 0x3420\n 19391: a1 = s1 + 0x3400\n 19395: a2 = s1 + 0x33e0\n 19399: u64 [a3 + 0x2c0] = a4\n 19403: ra = 676, jump @1707\n      : @723 [@dyn 338] (gas: 1)\n 19409: t0 = 678, jump @1983\n      : @724 [@dyn 339] (gas: 1)\n 19416: jump @726 if a0 != 0\n      : @725 (gas: 1)\n 19419: jump @1603\n      : @726 (gas: 23)\n 19422: a3 = s1 + 0x3138\n 19426: u64 [s1 + 0x198] = a2\n 19430: a0 = u64 [a3 + 0x300]\n 19434: u64 [s1 + 0x110] = a0\n 19438: a5 = a3 + 0x200\n 19442: a0 = u64 [a5 + 0xf8]\n 19446: u64 [s1 + 0x180] = a0\n 19450: a0 = u64 [a5 + 0xf0]\n 19454: u64 [s1 + 0x188] = a0\n 19458: a0 = u64 [a5 + 0xe8]\n 19462: u64 [s1 + 0x190] = a0\n 19466: i32 a0 = a1 + 0x20\n 19469: a1 = u64 [s1 + 0x160]\n 19473: u64 [a5 + 0x88] = a1\n 19477: a1 = u64 [s1 + 0x168]\n 19481: u64 [a5 + 0x90] = a1\n 19485: a1 = u64 [s1 + 0x170]\n 19489: u64 [a5 + 0x98] = a1\n 19493: a1 = s1 + 0x33c0\n 19497: a2 = u64 [s1 + 0x178]\n 19501: u64 [a5 + 0xa0] = a2\n 19505: u64 [s1 + 0x178] = a4\n 19509: ra = 680, jump @19\n      : @727 [@dyn 340] (gas: 5)\n 19515: a3 = s1 + 0x100\n 19519: a1 = u64 [a3 + 0xb8]\n 19523: a0 = u64 [a3 + 0x78]\n 19526: a0 = a0 + 0xffffffffffffffc0\n 19529: t0 = 682, jump @1994\n      : @728 [@dyn 341] (gas: 1)\n 19536: jump @730 if a0 != 0\n      : @729 (gas: 1)\n 19539: jump @1603\n      : @730 (gas: 35)\n 19542: a2 = u64 [s1 + 0x190]\n 19546: t1 = a2 <u a1\n 19549: t0 = a2\n 19551: a3 = u64 [s1 + 0x1b0]\n 19555: a4 = u64 [s1 + 0x188]\n 19559: a1 = a4 ^ a3\n 19562: a2 = a4 <u a3\n 19565: a0 = a4\n 19567: a5 = a3\n 19569: a2 = t1 if a1 == 0\n 19572: a3 = u64 [s1 + 0x1a8]\n 19576: a4 = u64 [s1 + 0x180]\n 19580: a1 = a4 - a3\n 19583: t2 = a4 <u a3\n 19586: a4 = u64 [s1 + 0x1a0]\n 19590: a3 = u64 [s1 + 0x110]\n 19594: a4 = a3 - a4\n 19597: a4 = a4 - t2\n 19600: a3 = a1 <u a2\n 19603: a4 = a4 - a3\n 19606: a1 = a1 - a2\n 19609: a2 = a0 - a5\n 19612: a2 = a2 - t1\n 19615: a0 = u64 [s1 + 0x1b8]\n 19619: a3 = t0 - a0\n 19622: a0 = u64 [s1 + 0x1b8]\n 19626: i32 a0 = a0 + 0x40\n 19629: a5 = s1 + 0x3138\n 19633: u64 [a5 + 0x268] = a3\n 19637: a3 = a5 + 0x200\n 19641: u64 [a3 + 0x70] = a2\n 19644: u64 [a3 + 0x78] = a1\n 19647: a1 = s1 + 0x33a0\n 19651: u64 [a3 + 0x80] = a4\n 19655: ra = 684, jump @19\n      : @731 [@dyn 342] (gas: 3)\n 19661: t0 = 0x2ae\n 19665: a1 = s1 + 0x3138\n 19669: fallthrough\n      : @732 [@dyn 343] (gas: 22)\n 19670: a0 = u64 [s1 + 0x110]\n 19674: a2 = a1 + 0x200\n 19678: u64 [a2 + 0x20] = a0\n 19681: a0 = u64 [s1 + 0x180]\n 19685: u64 [a2 + 0x18] = a0\n 19688: a0 = u64 [s1 + 0x188]\n 19692: u64 [a2 + 0x10] = a0\n 19695: a0 = u64 [s1 + 0x190]\n 19699: u64 [a2 + 0x8] = a0\n 19702: a0 = u64 [s1 + 0x140]\n 19706: u64 [a2 + 0x40] = a0\n 19709: a0 = u64 [s1 + 0x148]\n 19713: u64 [a2 + 0x38] = a0\n 19716: a0 = u64 [s1 + 0x150]\n 19720: u64 [a2 + 0x30] = a0\n 19723: a4 = a1\n 19725: a0 = s1 + 0x3380\n 19729: a1 = s1 + 0x3360\n 19733: a2 = s1 + 0x3340\n 19737: a3 = u64 [s1 + 0x158]\n 19741: u64 [a4 + 0x228] = a3\n 19745: ra = 688, jump @1707\n      : @733 [@dyn 344] (gas: 10)\n 19751: a5 = s1 + 0x100\n 19755: a1 = u64 [a5 + 0x98]\n 19759: a2 = u64 [a5 + 0xb8]\n 19763: a4 = 0x100000000\n 19773: a0 = 0xffffffa0\n 19783: a0 = a2 <u a0\n 19786: a3 = u64 [a5 + 0xb0]\n 19790: a0 = 0 if a3 != 0\n 19792: a0 = 0 if a1 != 0\n 19794: jump @735 if a0 != 0\n      : @734 (gas: 1)\n 19797: jump @1603\n      : @735 (gas: 20)\n 19800: a3 = s1 + 0x3138\n 19804: a1 = a3 + 0x200\n 19808: a0 = u64 [a1 + 0x60]\n 19811: u64 [s1 + 0x178] = a0\n 19815: a0 = u64 [a1 + 0x58]\n 19818: u64 [s1 + 0x170] = a0\n 19822: a0 = u64 [a1 + 0x50]\n 19825: u64 [s1 + 0x180] = a0\n 19829: a0 = u64 [a1 + 0x48]\n 19832: u64 [s1 + 0x188] = a0\n 19836: a0 = u64 [s1 + 0x138]\n 19840: a1 = a0 >u 0\n 19842: i32 a0 = a2 + 0x60\n 19845: u64 [a3 + 512] = 0\n 19849: u64 [a3 + 504] = 0\n 19853: u64 [a3 + 0x1e8] = a1\n 19857: a1 = s1 + 0x3320\n 19861: u64 [a3 + 496] = 0\n 19865: u64 [s1 + 0x190] = a4\n 19869: ra = 690, jump @19\n      : @736 [@dyn 345] (gas: 5)\n 19875: a3 = s1 + 0x100\n 19879: a1 = u64 [a3 + 0xb8]\n 19883: a0 = u64 [a3 + 0x90]\n 19887: a0 = a0 + 0xffffffffffffff80\n 19890: t0 = 692, jump @1994\n      : @737 [@dyn 346] (gas: 1)\n 19897: jump @739 if a0 != 0\n      : @738 (gas: 1)\n 19900: jump @1603\n      : @739 (gas: 13)\n 19903: i32 a0 = a1 + 0x80\n 19907: a1 = u64 [s1 + 0x118]\n 19911: a3 = s1 + 0x3138\n 19915: a4 = a3 + 0x100\n 19919: u64 [a4 + 0xc8] = a1\n 19923: a1 = u64 [s1 + 0x120]\n 19927: u64 [a4 + 0xd0] = a1\n 19931: a1 = u64 [s1 + 0x128]\n 19935: u64 [a4 + 0xd8] = a1\n 19939: a1 = s1 + 0x3300\n 19943: a2 = u64 [s1 + 0x130]\n 19947: u64 [a4 + 0xe0] = a2\n 19951: ra = 694, jump @19\n      : @740 [@dyn 347] (gas: 15)\n 19957: a0 = u64 [s1 + 0x1b8]\n 19961: t1 = u64 [s1 + 0x188]\n 19965: t0 = t1 <u a0\n 19968: a5 = u64 [s1 + 0x1b0]\n 19972: a1 = u64 [s1 + 0x180]\n 19976: a0 = a1 ^ a5\n 19979: a2 = a1 <u a5\n 19982: a2 = t0 if a0 == 0\n 19985: a0 = u64 [s1 + 0x1a8]\n 19989: a3 = u64 [s1 + 0x170]\n 19993: t2 = a3 - a0\n 19996: a3 = a3 <u a0\n 19999: a0 = u64 [s1 + 0x1a0]\n 20003: a4 = u64 [s1 + 0x178]\n 20007: fallthrough\n      : @741 (gas: 11)\n 20008: a4 = a4 - a0\n 20011: a4 = a4 - a3\n 20014: a3 = t2 <u a2\n 20017: a3 = a4 - a3\n 20020: a0 = u64 [s1 + 0x1b8]\n 20024: a4 = t2 - a2\n 20027: a2 = a1 - a5\n 20030: a2 = a2 - t0\n 20033: a1 = t1 - a0\n 20036: a2 = a2 | a3\n 20039: jump @955\n      : @742 (gas: 8)\n 20042: a1 = s1 + 0x4938\n 20046: u64 [a1 + 768] = 0\n 20050: u64 [a1 + 760] = 0\n 20054: u64 [a1 + 752] = 0\n 20058: u64 [a1 + 744] = 0x2\n 20063: a0 = s1 + 0x1580\n 20067: a1 = s1 + 0x4c20\n 20071: ra = 696, jump @21\n      : @743 [@dyn 348] (gas: 13)\n 20077: a0 = s1 + 0x1138\n 20081: a1 = u64 [a0 + 0x450]\n 20085: u64 [s1 + 0x180] = a1\n 20089: a1 = u64 [a0 + 0x448]\n 20093: u64 [s1 + 0x178] = a1\n 20097: a0 = u32 [a0 + 0x458]\n 20101: u64 [s1 + 0x170] = a0\n 20105: a0 = u64 [s1 + 0x168]\n 20109: ra = 0x2ba\n 20113: ecalli 5 // 'caller'\n 20115: a5 = u64 [s1 + 0x1b8]\n 20119: t0 = 0x2bc\n 20123: jump @1947\n      : @744 [@dyn 349] (gas: 2)\n 20127: a5 = u64 [s1 + 0x1b8]\n 20131: t0 = 700, jump @1947\n      : @745 [@dyn 350] (gas: 10)\n 20138: a2 = u64 [a4 + 0x70]\n 20141: a1 = a1 ^ a2\n 20144: a2 = u64 [a4 + 0x78]\n 20147: a0 = a0 ^ a2\n 20150: a0 = a0 | a1\n 20153: a1 = u64 [a4 + 0x80]\n 20157: a1 = a1 ^ a3\n 20160: a0 = a0 | a1\n 20163: a1 = 0x1\n 20166: jump @750 if a0 == 0\n      : @746 (gas: 8)\n 20169: a1 = s1 + 0x4938\n 20173: u64 [a1 + 800] = 0\n 20177: u64 [a1 + 792] = 0\n 20181: u64 [a1 + 784] = 0\n 20185: u64 [a1 + 776] = 0x3\n 20190: a0 = s1 + 0x1560\n 20194: a1 = s1 + 0x4c40\n 20198: ra = 702, jump @21\n      : @747 [@dyn 351] (gas: 12)\n 20204: a0 = s1 + 0x1138\n 20208: a1 = u64 [a0 + 0x430]\n 20212: u64 [s1 + 0x180] = a1\n 20216: a1 = u64 [a0 + 0x428]\n 20220: u64 [s1 + 0x178] = a1\n 20224: a0 = u32 [a0 + 0x438]\n 20228: u64 [s1 + 0x170] = a0\n 20232: a0 = u64 [s1 + 0x168]\n 20236: ra = 0x2c0\n 20240: ecalli 5 // 'caller'\n 20242: t0 = 0x2c2\n 20246: jump @1944\n      : @748 [@dyn 352] (gas: 1)\n 20250: t0 = 706, jump @1944\n      : @749 [@dyn 353] (gas: 2)\n 20257: a1 = a0 <u 0x1\n 20260: fallthrough\n      : @750 (gas: 7)\n 20261: a2 = s1 + 0x1138\n 20265: u64 [a2 + 1056] = 0\n 20269: u64 [a2 + 1048] = 0\n 20273: u64 [a2 + 0x408] = a1\n 20277: a0 = s1 + 0x1540\n 20281: u64 [a2 + 1040] = 0\n 20285: ra = 708, jump @1799\n      : @751 [@dyn 354] (gas: 4)\n 20291: a0 = u64 [s1 + 0x198]\n 20295: t0 = 0x2c6\n 20299: a2 = s1 + 0x1138\n 20303: fallthrough\n      : @752 [@dyn 355] (gas: 11)\n 20304: u64 [a2 + 0x400] = a0\n 20308: a0 = u64 [s1 + 0x1a0]\n 20312: a3 = a2 + 0x300\n 20316: u64 [a3 + 0xf8] = a0\n 20320: a0 = u64 [s1 + 0x1a8]\n 20324: u64 [a3 + 0xf0] = a0\n 20328: a1 = s1 + 0x1520\n 20332: a0 = u64 [s1 + 0x1b0]\n 20336: u64 [a3 + 0xe8] = a0\n 20340: a0 = 0\n 20342: ra = 712, jump @19\n      : @753 [@dyn 356] (gas: 9)\n 20348: a0 = s1 + 0x1138\n 20352: u64 [a0 + 992] = 0\n 20356: u64 [a0 + 984] = 0\n 20360: u64 [a0 + 976] = 0\n 20364: a2 = a0\n 20366: a0 = 0x20\n 20369: a1 = s1 + 0x1500\n 20373: u64 [a2 + 968] = 0\n 20377: ra = 714, jump @19\n      : @754 [@dyn 357] (gas: 3)\n 20383: a2 = u64 [s1 + 0x190]\n 20387: a0 = i32 [a2]\n 20389: jump @756 if a0 >u 63\n      : @755 (gas: 2)\n 20393: u32 [a2 + 0] = 0x40\n 20396: fallthrough\n      : @756 (gas: 4)\n 20397: a0 = sp + 0xffffffffffffffe0\n 20400: a0 = a0 & 0xffffffffffffffe0\n 20403: u64 [s1 + 0x1b8] = a0\n 20407: t0 = 716, jump @2005\n      : @757 [@dyn 358] (gas: 31)\n 20414: ecalli 8 // 'hash_keccak_256'\n 20416: a3 = u64 [s1 + 0x1b8]\n 20420: a0 = u64 [a3]\n 20422: a1 = u64 [a3 + 0x8]\n 20425: a2 = u64 [a3 + 0x10]\n 20428: a3 = u64 [a3 + 0x18]\n 20431: a4 = reverse a0\n 20433: u64 [s1 + 0x1b8] = a4\n 20437: a5 = reverse a1\n 20439: u64 [s1 + 0x1a0] = a5\n 20443: a2 = reverse a2\n 20445: u64 [s1 + 0x1a8] = a2\n 20449: a0 = reverse a3\n 20451: u64 [s1 + 0x1b0] = a0\n 20455: a0 = a0 + 0x1\n 20458: a1 = a0 <u 0x1\n 20461: a1 = a1 + a2\n 20464: a2 = a0 | a1\n 20467: a2 = a2 <u 0x1\n 20470: a2 = a2 + a5\n 20473: a3 = a2 <u a5\n 20476: a3 = a3 + a4\n 20479: a4 = s1 + 0x4938\n 20483: a5 = a4 + 0x300\n 20487: u64 [a5 + 0x28] = a0\n 20490: u64 [a5 + 0x30] = a1\n 20493: u64 [a5 + 0x38] = a2\n 20496: u64 [a5 + 0x40] = a3\n 20499: a0 = s1 + 0x14e0\n 20503: a1 = s1 + 0x4c60\n 20507: ra = 718, jump @21\n      : @758 [@dyn 359] (gas: 10)\n 20513: a1 = s1 + 0x1138\n 20517: a0 = u32 [a1 + 0x3b8]\n 20521: u64 [s1 + 0x178] = a0\n 20525: a0 = u64 [a1 + 0x3b0]\n 20529: u64 [s1 + 0x170] = a0\n 20533: a0 = u64 [a1 + 0x3a8]\n 20537: u64 [s1 + 0x168] = a0\n 20541: a1 = u64 [s1 + 0x1b0]\n 20545: a0 = a1 + 0x2\n 20548: t0 = 720, jump @1937\n      : @759 [@dyn 360] (gas: 7)\n 20555: u64 [a5 + 0x60] = a1\n 20558: u64 [a5 + 0x58] = a3\n 20561: u64 [a5 + 0x50] = a2\n 20564: u64 [a5 + 0x48] = a0\n 20567: a0 = s1 + 0x14c0\n 20571: a1 = s1 + 0x4c80\n 20575: ra = 722, jump @21\n      : @760 [@dyn 361] (gas: 10)\n 20581: a1 = s1 + 0x1138\n 20585: a0 = u32 [a1 + 0x398]\n 20589: u64 [s1 + 0x160] = a0\n 20593: a0 = u64 [a1 + 0x390]\n 20597: u64 [s1 + 0x158] = a0\n 20601: a0 = u64 [a1 + 0x388]\n 20605: u64 [s1 + 0x150] = a0\n 20609: a1 = u64 [s1 + 0x1b0]\n 20613: a0 = a1 + 0x3\n 20616: t0 = 724, jump @1937\n      : @761 [@dyn 362] (gas: 7)\n 20623: u64 [a5 + 0x80] = a1\n 20627: u64 [a5 + 0x78] = a3\n 20630: u64 [a5 + 0x70] = a2\n 20633: u64 [a5 + 0x68] = a0\n 20636: a0 = s1 + 0x14a0\n 20640: a1 = s1 + 0x4ca0\n 20644: ra = 726, jump @21\n      : @762 [@dyn 363] (gas: 1)\n 20650: t0 = 728, jump @2032\n      : @763 [@dyn 364] (gas: 11)\n 20657: a0 = u64 [a2 + 0x80]\n 20661: u64 [s1 + 0x148] = a0\n 20665: a0 = u64 [a2 + 0x78]\n 20668: u64 [s1 + 0x140] = a0\n 20672: a0 = u64 [a2 + 0x70]\n 20675: u64 [s1 + 0x138] = a0\n 20679: a0 = u64 [a2 + 0x68]\n 20682: u64 [s1 + 0x130] = a0\n 20686: a1 = u64 [s1 + 0x1b0]\n 20690: a0 = a1 + 0x4\n 20693: t0 = 730, jump @1937\n      : @764 [@dyn 365] (gas: 7)\n 20700: u64 [a5 + 0xa0] = a1\n 20704: u64 [a5 + 0x98] = a3\n 20708: u64 [a5 + 0x90] = a2\n 20712: u64 [a5 + 0x88] = a0\n 20716: a0 = s1 + 0x1480\n 20720: a1 = s1 + 0x4cc0\n 20724: ra = 732, jump @21\n      : @765 [@dyn 366] (gas: 6)\n 20730: a0 = s1 + 0x1138\n 20734: a0 = u64 [a0 + 0x348]\n 20738: u64 [s1 + 0x128] = a0\n 20742: a1 = u64 [s1 + 0x1b0]\n 20746: a0 = a1 + 0x6\n 20749: t0 = 734, jump @1937\n      : @766 [@dyn 367] (gas: 7)\n 20756: u64 [a5 + 0xc0] = a1\n 20760: u64 [a5 + 0xb8] = a3\n 20764: u64 [a5 + 0xb0] = a2\n 20768: u64 [a5 + 0xa8] = a0\n 20772: a0 = s1 + 0x1460\n 20776: a1 = s1 + 0x4ce0\n 20780: ra = 736, jump @21\n      : @767 [@dyn 368] (gas: 1)\n 20786: t0 = 738, jump @2032\n      : @768 [@dyn 369] (gas: 11)\n 20793: a0 = u64 [a2 + 0x40]\n 20796: u64 [s1 + 0x120] = a0\n 20800: a0 = u64 [a2 + 0x38]\n 20803: u64 [s1 + 0x118] = a0\n 20807: a0 = u64 [a2 + 0x30]\n 20810: u64 [s1 + 0x110] = a0\n 20814: a0 = u64 [a2 + 0x28]\n 20817: u64 [s1 + 0x108] = a0\n 20821: a1 = u64 [s1 + 0x1b0]\n 20825: a0 = a1 + 0x5\n 20828: t0 = 740, jump @1937\n      : @769 [@dyn 370] (gas: 7)\n 20835: u64 [a5 + 0xe0] = a1\n 20839: u64 [a5 + 0xd8] = a3\n 20843: u64 [a5 + 0xd0] = a2\n 20847: u64 [a5 + 0xc8] = a0\n 20851: a0 = s1 + 0x1440\n 20855: a1 = s1 + 0x4d00\n 20859: ra = 742, jump @21\n      : @770 [@dyn 371] (gas: 1)\n 20865: t0 = 744, jump @2032\n      : @771 [@dyn 372] (gas: 21)\n 20872: a0 = u64 [a2 + 0x20]\n 20875: u64 [s1 + 0x100] = a0\n 20879: a0 = u64 [a2 + 0x18]\n 20882: u64 [s1 + 0xf8] = a0\n 20886: a0 = u64 [a2 + 0x10]\n 20889: u64 [s1 + 0xf0] = a0\n 20893: a0 = u64 [a2 + 0x8]\n 20896: u64 [s1 + 0xe8] = a0\n 20900: a0 = u64 [s1 + 0x1b8]\n 20904: a2 = a1 + 0x200\n 20908: u64 [a2 + 0xe0] = a0\n 20912: a0 = u64 [s1 + 0x1a0]\n 20916: u64 [a2 + 0xd8] = a0\n 20920: a0 = u64 [s1 + 0x1a8]\n 20924: u64 [a2 + 0xd0] = a0\n 20928: a3 = a1\n 20930: a0 = s1 + 0x1420\n 20934: a1 = s1 + 0x1400\n 20938: a2 = u64 [s1 + 0x1b0]\n 20942: u64 [a3 + 0x2c8] = a2\n 20946: ra = 746, jump @1877\n      : @772 [@dyn 373] (gas: 13)\n 20952: a1 = s1 + 0x1138\n 20956: a0 = u64 [a1 + 0x300]\n 20960: u64 [s1 + 0x180] = a0\n 20964: a2 = a1 + 0x200\n 20968: a0 = u64 [a2 + 0xf8]\n 20972: u64 [s1 + 0x188] = a0\n 20976: a0 = u64 [a2 + 0xf0]\n 20980: u64 [s1 + 0x190] = a0\n 20984: a0 = u64 [a2 + 0xe8]\n 20988: u64 [s1 + 0x198] = a0\n 20992: a0 = s1 + 0x13e0\n 20996: a1 = 0x40\n 20999: ra = 748, jump @17\n      : @773 [@dyn 374] (gas: 7)\n 21005: a2 = s1 + 0x1138\n 21009: a3 = a2 + 0x200\n 21013: a4 = u64 [a3 + 0xc0]\n 21017: a5 = u64 [a3 + 0xb8]\n 21021: a1 = u64 [a3 + 0xb0]\n 21025: a0 = u64 [a3 + 0xa8]\n 21029: t0 = 750, jump @2022\n      : @774 [@dyn 375] (gas: 1)\n 21036: jump @776 if a1 == 0\n      : @775 (gas: 1)\n 21039: jump @1603\n      : @776 (gas: 9)\n 21042: u64 [a2 + 672] = 0\n 21046: u64 [a2 + 664] = 0\n 21050: u64 [a2 + 656] = 0\n 21054: a1 = s1 + 0x13c0\n 21058: u64 [a2 + 648] = 0x100\n 21064: u64 [s1 + 0x1b8] = a0\n 21068: u64 [s1 + 0x1a0] = a4\n 21072: u64 [s1 + 0x1a8] = a5\n 21076: ra = 752, jump @19\n      : @777 [@dyn 376] (gas: 3)\n 21082: a0 = u64 [s1 + 0x1b8]\n 21086: a0 = a0 + 0x100\n 21090: t0 = 754, jump @1974\n      : @778 [@dyn 377] (gas: 19)\n 21097: a1 = s1 + 0x1138\n 21101: a5 = a1 + 0x200\n 21105: u64 [a5 + 0x30] = a2\n 21108: u64 [a5 + 0x28] = a0\n 21111: a0 = u64 [s1 + 0x180]\n 21115: u64 [a5 + 0x60] = a0\n 21118: a0 = u64 [s1 + 0x188]\n 21122: u64 [a5 + 0x58] = a0\n 21125: a0 = u64 [s1 + 0x190]\n 21129: u64 [a5 + 0x50] = a0\n 21132: a0 = u64 [s1 + 0x198]\n 21136: u64 [a5 + 0x48] = a0\n 21139: u64 [a5 + 0x38] = a3\n 21142: a3 = a1\n 21144: a0 = s1 + 0x13a0\n 21148: a1 = s1 + 0x1380\n 21152: a2 = s1 + 0x1360\n 21156: u64 [a3 + 0x240] = a4\n 21160: ra = 756, jump @1707\n      : @779 [@dyn 378] (gas: 1)\n 21166: t0 = 758, jump @1983\n      : @780 [@dyn 379] (gas: 1)\n 21173: jump @782 if a0 != 0\n      : @781 (gas: 1)\n 21176: jump @1603\n      : @782 (gas: 22)\n 21179: a3 = s1 + 0x1138\n 21183: u64 [s1 + 0x198] = a2\n 21187: a5 = a3 + 0x200\n 21191: a0 = u64 [a5 + 0x80]\n 21195: u64 [s1 + 0xe0] = a0\n 21199: a0 = u64 [a5 + 0x78]\n 21202: u64 [s1 + 0xd8] = a0\n 21206: a0 = u64 [a5 + 0x70]\n 21209: u64 [s1 + 0x180] = a0\n 21213: a0 = u64 [a5 + 0x68]\n 21216: u64 [s1 + 0x188] = a0\n 21220: i32 a0 = a1 + 0x20\n 21223: u64 [a3 + 544] = 0\n 21227: a1 = u64 [s1 + 0x168]\n 21231: u64 [a5 + 0x8] = a1\n 21234: a1 = u64 [s1 + 0x170]\n 21238: u64 [a5 + 0x10] = a1\n 21241: a1 = s1 + 0x1340\n 21245: a2 = u64 [s1 + 0x178]\n 21249: u64 [a5 + 0x18] = a2\n 21252: u64 [s1 + 0x190] = a4\n 21256: ra = 760, jump @19\n      : @783 [@dyn 380] (gas: 5)\n 21262: a3 = s1 + 0x100\n 21266: a1 = u64 [a3 + 0xb8]\n 21270: a0 = u64 [a3 + 0x90]\n 21274: a0 = a0 + 0xffffffffffffffc0\n 21277: t0 = 762, jump @1994\n      : @784 [@dyn 381] (gas: 1)\n 21284: jump @786 if a0 != 0\n      : @785 (gas: 1)\n 21287: jump @1603\n      : @786 (gas: 12)\n 21290: i32 a0 = a1 + 0x40\n 21293: a3 = s1 + 0x1138\n 21297: u64 [a3 + 512] = 0\n 21301: a1 = u64 [s1 + 0x150]\n 21305: a4 = a3 + 0x100\n 21309: u64 [a4 + 0xe8] = a1\n 21313: a1 = u64 [s1 + 0x158]\n 21317: u64 [a4 + 0xf0] = a1\n 21321: a1 = s1 + 0x1320\n 21325: a2 = u64 [s1 + 0x160]\n 21329: u64 [a4 + 0xf8] = a2\n 21333: ra = 764, jump @19\n      : @787 [@dyn 382] (gas: 10)\n 21339: a4 = s1 + 0x100\n 21343: a1 = u64 [a4 + 0xb8]\n 21347: a3 = 0x100000000\n 21357: a0 = 0xffffffa0\n 21367: a0 = a1 <u a0\n 21370: a2 = u64 [a4 + 0xb0]\n 21374: a0 = 0 if a2 != 0\n 21376: a2 = u64 [a4 + 0x98]\n 21380: a0 = 0 if a2 != 0\n 21382: jump @789 if a0 != 0\n      : @788 (gas: 1)\n 21385: jump @1603\n      : @789 (gas: 15)\n 21388: i32 a0 = a1 + 0x60\n 21391: a1 = u64 [s1 + 0x130]\n 21395: a2 = s1 + 0x1138\n 21399: u64 [s1 + 0x190] = a3\n 21403: a3 = a2\n 21405: a4 = a2 + 0x100\n 21409: u64 [a4 + 0xc8] = a1\n 21413: a1 = u64 [s1 + 0x138]\n 21417: u64 [a4 + 0xd0] = a1\n 21421: a1 = u64 [s1 + 0x140]\n 21425: u64 [a4 + 0xd8] = a1\n 21429: a1 = s1 + 0x1300\n 21433: a2 = u64 [s1 + 0x148]\n 21437: u64 [a3 + 0x1e0] = a2\n 21441: ra = 766, jump @19\n      : @790 [@dyn 383] (gas: 10)\n 21447: a3 = s1 + 0x100\n 21451: a2 = u64 [a3 + 0xb8]\n 21455: a0 = u64 [a3 + 0x90]\n 21459: a0 = a0 + 0xffffffffffffff80\n 21462: a0 = a2 <u a0\n 21465: a1 = u64 [a3 + 0xb0]\n 21469: a0 = 0 if a1 != 0\n 21471: a1 = u64 [a3 + 0x98]\n 21475: a0 = 0 if a1 != 0\n 21477: jump @792 if a0 != 0\n      : @791 (gas: 1)\n 21480: jump @1603\n      : @792 (gas: 10)\n 21483: a0 = u8 [s1 + 0x128]\n 21487: a1 = a0 >u 0\n 21489: i32 a0 = a2 + 0x80\n 21493: a2 = s1 + 0x1138\n 21497: u64 [a2 + 448] = 0\n 21501: u64 [a2 + 440] = 0\n 21505: u64 [a2 + 0x1a8] = a1\n 21509: a1 = s1 + 0x12e0\n 21513: u64 [a2 + 432] = 0\n 21517: ra = 768, jump @19\n      : @793 [@dyn 384] (gas: 10)\n 21523: a4 = s1 + 0x100\n 21527: a2 = u64 [a4 + 0xb8]\n 21531: a3 = 0x100000000\n 21541: a0 = 0xffffff60\n 21551: a0 = a2 <u a0\n 21554: a1 = u64 [a4 + 0xb0]\n 21558: a0 = 0 if a1 != 0\n 21560: a1 = u64 [a4 + 0x98]\n 21564: a0 = 0 if a1 != 0\n 21566: jump @795 if a0 != 0\n      : @794 (gas: 1)\n 21569: jump @1603\n      : @795 (gas: 12)\n 21572: a1 = u64 [s1 + 0x128]\n 21576: a0 = a1 & 0xff00\n 21581: a1 = a0 >u 0\n 21583: i32 a0 = a2 + 0xa0\n 21587: a2 = s1 + 0x1138\n 21591: u64 [a2 + 416] = 0\n 21595: u64 [a2 + 408] = 0\n 21599: u64 [a2 + 0x188] = a1\n 21603: a1 = s1 + 0x12c0\n 21607: u64 [a2 + 400] = 0\n 21611: u64 [s1 + 0x190] = a3\n 21615: ra = 770, jump @19\n      : @796 [@dyn 385] (gas: 10)\n 21621: a4 = s1 + 0x100\n 21625: a3 = u64 [a4 + 0x98]\n 21629: a1 = u64 [a4 + 0xb8]\n 21633: a0 = u64 [a4 + 0x90]\n 21637: a0 = a0 + 0xffffffffffffff40\n 21641: a0 = a1 <u a0\n 21644: a2 = u64 [a4 + 0xb0]\n 21648: a0 = 0 if a2 != 0\n 21650: a0 = 0 if a3 != 0\n 21652: jump @798 if a0 != 0\n      : @797 (gas: 1)\n 21655: jump @1603\n      : @798 (gas: 13)\n 21658: i32 a0 = a1 + 0xc0\n 21662: a1 = u64 [s1 + 0x108]\n 21666: a3 = s1 + 0x1138\n 21670: a4 = a3 + 0x100\n 21674: u64 [a4 + 0x68] = a1\n 21677: a1 = u64 [s1 + 0x110]\n 21681: u64 [a4 + 0x70] = a1\n 21684: a1 = u64 [s1 + 0x118]\n 21688: u64 [a4 + 0x78] = a1\n 21691: a1 = s1 + 0x12a0\n 21695: a2 = u64 [s1 + 0x120]\n 21699: u64 [a4 + 0x80] = a2\n 21703: ra = 772, jump @19\n      : @799 [@dyn 386] (gas: 4)\n 21709: a3 = s1 + 0x100\n 21713: a1 = u64 [a3 + 0xb8]\n 21717: a0 = 0xffffff20\n 21727: t0 = 774, jump @1994\n      : @800 [@dyn 387] (gas: 1)\n 21734: jump @802 if a0 != 0\n      : @801 (gas: 1)\n 21737: jump @1603\n      : @802 (gas: 13)\n 21740: i32 a0 = a1 + 0xe0\n 21744: a1 = u64 [s1 + 0xe8]\n 21748: a3 = s1 + 0x1138\n 21752: a4 = a3 + 0x100\n 21756: u64 [a4 + 0x48] = a1\n 21759: a1 = u64 [s1 + 0xf0]\n 21763: u64 [a4 + 0x50] = a1\n 21766: a1 = u64 [s1 + 0xf8]\n 21770: u64 [a4 + 0x58] = a1\n 21773: a1 = s1 + 0x1280\n 21777: a2 = u64 [s1 + 0x100]\n 21781: u64 [a4 + 0x60] = a2\n 21784: ra = 776, jump @19\n      : @803 [@dyn 388] (gas: 16)\n 21790: a4 = s1 + 0x100\n 21794: a0 = u64 [a4 + 0xb8]\n 21798: t1 = u64 [s1 + 0x188]\n 21802: t0 = t1 <u a0\n 21805: a5 = u64 [a4 + 0xb0]\n 21809: a1 = u64 [a4 + 0x80]\n 21813: a0 = a1 ^ a5\n 21816: a2 = a1 <u a5\n 21819: a2 = t0 if a0 == 0\n 21822: a0 = u64 [a4 + 0xa8]\n 21826: a3 = u64 [s1 + 0xd8]\n 21830: t2 = a3 - a0\n 21833: a3 = a3 <u a0\n 21836: a0 = u64 [a4 + 0xa0]\n 21840: a4 = u64 [s1 + 0xe0]\n 21844: jump @741\n      : @804 (gas: 8)\n 21847: a1 = s1 + 0x5138\n 21851: u64 [a1 + 1920] = 0\n 21855: u64 [a1 + 1912] = 0\n 21859: u64 [a1 + 1904] = 0\n 21863: u64 [a1 + 1896] = 0x2\n 21868: a0 = s1 + 0x4600\n 21872: a1 = s1 + 0x58a0\n 21876: ra = 778, jump @21\n      : @805 [@dyn 389] (gas: 13)\n 21882: a0 = s1 + 0x4138\n 21886: a1 = u64 [a0 + 0x4d0]\n 21890: u64 [s1 + 0x1b0] = a1\n 21894: a1 = u64 [a0 + 0x4c8]\n 21898: u64 [s1 + 0x1a8] = a1\n 21902: a0 = u32 [a0 + 0x4d8]\n 21906: u64 [s1 + 0x1a0] = a0\n 21910: a0 = u64 [s1 + 0x168]\n 21914: ra = 0x30c\n 21918: ecalli 5 // 'caller'\n 21920: a5 = u64 [s1 + 0x1b8]\n 21924: t0 = 0x30e\n 21928: jump @1947\n      : @806 [@dyn 390] (gas: 2)\n 21932: a5 = u64 [s1 + 0x1b8]\n 21936: t0 = 782, jump @1947\n      : @807 [@dyn 391] (gas: 10)\n 21943: a2 = u64 [a4 + 0xa0]\n 21947: a1 = a1 ^ a2\n 21950: a2 = u64 [a4 + 0xa8]\n 21954: a0 = a0 ^ a2\n 21957: a0 = a0 | a1\n 21960: a1 = u64 [a4 + 0xb0]\n 21964: a1 = a1 ^ a3\n 21967: a0 = a0 | a1\n 21970: a1 = 0x1\n 21973: jump @812 if a0 == 0\n      : @808 (gas: 8)\n 21976: a1 = s1 + 0x5138\n 21980: u64 [a1 + 1952] = 0\n 21984: u64 [a1 + 1944] = 0\n 21988: u64 [a1 + 1936] = 0\n 21992: u64 [a1 + 1928] = 0x3\n 21997: a0 = s1 + 0x45e0\n 22001: a1 = s1 + 0x58c0\n 22005: ra = 784, jump @21\n      : @809 [@dyn 392] (gas: 12)\n 22011: a0 = s1 + 0x4138\n 22015: a1 = u64 [a0 + 0x4b0]\n 22019: u64 [s1 + 0x1b0] = a1\n 22023: a1 = u64 [a0 + 0x4a8]\n 22027: u64 [s1 + 0x1a8] = a1\n 22031: a0 = u32 [a0 + 0x4b8]\n 22035: u64 [s1 + 0x1a0] = a0\n 22039: a0 = u64 [s1 + 0x168]\n 22043: ra = 0x312\n 22047: ecalli 5 // 'caller'\n 22049: t0 = 0x314\n 22053: jump @1945\n      : @810 [@dyn 393] (gas: 1)\n 22057: t0 = 788, jump @1945\n      : @811 [@dyn 394] (gas: 2)\n 22064: a1 = a0 <u 0x1\n 22067: fallthrough\n      : @812 (gas: 7)\n 22068: a2 = s1 + 0x4138\n 22072: u64 [a2 + 1184] = 0\n 22076: u64 [a2 + 1176] = 0\n 22080: u64 [a2 + 0x488] = a1\n 22084: a0 = s1 + 0x45c0\n 22088: u64 [a2 + 1168] = 0\n 22092: ra = 790, jump @1799\n      : @813 [@dyn 395] (gas: 7)\n 22098: a0 = 0x4138\n 22102: a2 = s1 + a0\n 22105: u64 [s1 + 352] = 0\n 22109: u64 [s1 + 336] = 0\n 22113: u64 [s1 + 328] = 0\n 22117: u64 [s1 + 344] = 0\n 22121: t0 = 792, jump @2016\n      : @814 [@dyn 396] (gas: 12)\n 22128: a0 = u64 [s1 + 0x178]\n 22132: a3 = a2 + 0x400\n 22136: u64 [a3 + 0x68] = a0\n 22139: a0 = u64 [s1 + 0x180]\n 22143: u64 [a3 + 0x70] = a0\n 22146: a0 = u64 [s1 + 0x188]\n 22150: u64 [a3 + 0x78] = a0\n 22153: a1 = s1 + 0x45a0\n 22157: a0 = u64 [s1 + 0x190]\n 22161: u64 [a3 + 0x80] = a0\n 22165: a0 = 0\n 22167: ra = 794, jump @19\n      : @815 [@dyn 397] (gas: 9)\n 22173: a0 = s1 + 0x4138\n 22177: u64 [a0 + 1120] = 0\n 22181: u64 [a0 + 1112] = 0\n 22185: u64 [a0 + 1104] = 0\n 22189: a2 = a0\n 22191: a0 = 0x20\n 22194: a1 = s1 + 0x4580\n 22198: u64 [a2 + 1096] = 0\n 22202: ra = 796, jump @19\n      : @816 [@dyn 398] (gas: 3)\n 22208: a0 = u64 [s1 + 0x198]\n 22212: a0 = i32 [a0]\n 22214: jump @818 if a0 >u 63\n      : @817 (gas: 4)\n 22218: a0 = u64 [s1 + 0x198]\n 22222: u32 [a0 + 0] = 0x40\n 22225: t0 = 0x31e\n 22229: jump @1978\n      : @818 (gas: 1)\n 22233: t0 = 798, jump @1978\n      : @819 [@dyn 399] (gas: 4)\n 22240: ra = 0x320\n 22244: ecalli 8 // 'hash_keccak_256'\n 22246: t0 = 0x322\n 22250: jump @1959\n      : @820 [@dyn 400] (gas: 1)\n 22254: t0 = 802, jump @1959\n      : @821 [@dyn 401] (gas: 8)\n 22261: a3 = a1 + 0x700\n 22265: u64 [a3 + 0xa8] = a4\n 22269: u64 [a3 + 0xb0] = a5\n 22273: u64 [a3 + 0xb8] = a2\n 22277: u64 [a3 + 0xc0] = a0\n 22281: a0 = s1 + 0x4560\n 22285: a1 = s1 + 0x58e0\n 22289: ra = 804, jump @21\n      : @822 [@dyn 402] (gas: 21)\n 22295: a5 = s1 + 0x4138\n 22299: a0 = u64 [a5 + 0x430]\n 22303: t0 = u64 [a5 + 0x428]\n 22307: t1 = u64 [a5 + 0x438]\n 22311: a3 = u64 [a5 + 0x440]\n 22315: a1 = u64 [s1 + 0x1b0]\n 22319: a4 = a1 ^ a0\n 22322: a0 = a1 <u a0\n 22325: a1 = u64 [s1 + 0x1b8]\n 22329: a1 = a1 <u t0\n 22332: a1 = a0 if a4 != 0\n 22335: a4 = u64 [s1 + 0x1a8]\n 22339: a0 = a4 ^ a3\n 22342: a3 = a4 <u a3\n 22345: a2 = u64 [s1 + 0x1a0]\n 22349: a4 = a2 <u t1\n 22352: a4 = a3 if a0 != 0\n 22355: a2 = a2 ^ t1\n 22358: a0 = a0 | a2\n 22361: a1 = a4 if a0 != 0\n 22364: jump @846 if a1 == 0\n      : @823 (gas: 12)\n 22368: a0 = u64 [s1 + 0x178]\n 22372: a2 = a5 + 0x300\n 22376: u64 [a2 + 0xc8] = a0\n 22380: a0 = u64 [s1 + 0x180]\n 22384: u64 [a2 + 0xd0] = a0\n 22388: a0 = u64 [s1 + 0x188]\n 22392: u64 [a2 + 0xd8] = a0\n 22396: a1 = s1 + 0x4500\n 22400: a0 = u64 [s1 + 0x190]\n 22404: u64 [a2 + 0xe0] = a0\n 22408: a0 = 0\n 22410: ra = 806, jump @19\n      : @824 [@dyn 403] (gas: 9)\n 22416: a0 = s1 + 0x4138\n 22420: u64 [a0 + 960] = 0\n 22424: u64 [a0 + 952] = 0\n 22428: u64 [a0 + 944] = 0\n 22432: a2 = a0\n 22434: a0 = 0x20\n 22437: a1 = s1 + 0x44e0\n 22441: u64 [a2 + 936] = 0\n 22445: ra = 808, jump @19\n      : @825 [@dyn 404] (gas: 3)\n 22451: a0 = u64 [s1 + 0x198]\n 22455: a0 = i32 [a0]\n 22457: jump @827 if a0 >u 63\n      : @826 (gas: 4)\n 22461: a0 = u64 [s1 + 0x198]\n 22465: u32 [a0 + 0] = 0x40\n 22468: t0 = 0x32a\n 22472: jump @1978\n      : @827 (gas: 1)\n 22476: t0 = 810, jump @1978\n      : @828 [@dyn 405] (gas: 5)\n 22483: ra = 0x32c\n 22487: ecalli 8 // 'hash_keccak_256'\n 22489: a3 = u64 [s1 + 0x168]\n 22493: t0 = 0x32e\n 22497: jump @1949\n      : @829 [@dyn 406] (gas: 2)\n 22501: a3 = u64 [s1 + 0x168]\n 22505: t0 = 814, jump @1949\n      : @830 [@dyn 407] (gas: 19)\n 22512: a1 = s1 + 0x4138\n 22516: a0 = u64 [s1 + 0x1a8]\n 22520: u64 [a1 + 0x340] = a0\n 22524: a0 = u64 [s1 + 0x1a0]\n 22528: u64 [a1 + 0x338] = a0\n 22532: a0 = u64 [s1 + 0x1b0]\n 22536: u64 [a1 + 0x330] = a0\n 22540: a0 = u64 [s1 + 0x1b8]\n 22544: u64 [a1 + 0x328] = a0\n 22548: a0 = a1 + 0x300\n 22552: u64 [a0 + 0x48] = a4\n 22555: u64 [a0 + 0x50] = a5\n 22558: u64 [a0 + 0x58] = a2\n 22561: a4 = a1\n 22563: a0 = s1 + 0x44a0\n 22567: a1 = s1 + 0x4480\n 22571: a2 = s1 + 0x4460\n 22575: u64 [a4 + 0x360] = a3\n 22579: ra = 816, jump @1847\n      : @831 [@dyn 408] (gas: 23)\n 22585: a3 = s1 + 0x4138\n 22589: a4 = a3 + 0x300\n 22593: a0 = u64 [a4 + 0x68]\n 22596: a1 = u64 [a4 + 0x80]\n 22600: a2 = u64 [a4 + 0x70]\n 22603: a3 = u64 [a4 + 0x78]\n 22606: a4 = a0 + 0x3\n 22609: a0 = a4 <u a0\n 22612: a5 = a2 + a0\n 22615: a2 = a5 <u a2\n 22618: a2 = a0 if a0 == 0\n 22621: a2 = a2 + a3\n 22624: a0 = a2 <u a3\n 22627: a0 = a0 + a1\n 22630: a1 = s1 + 0x5138\n 22634: a3 = a1 + 0x700\n 22638: u64 [a3 + 0xc8] = a4\n 22642: u64 [a3 + 0xd0] = a5\n 22646: u64 [a3 + 0xd8] = a2\n 22650: u64 [a3 + 0xe0] = a0\n 22654: a0 = s1 + 0x4440\n 22658: a1 = s1 + 0x5900\n 22662: ra = 818, jump @21\n      : @832 [@dyn 409] (gas: 3)\n 22668: a2 = s1 + 0x4138\n 22672: a0 = u8 [a2 + 0x308]\n 22676: jump @834 if a0 == 0\n      : @833 (gas: 6)\n 22679: a0 = s1 + 0x100\n 22683: a5 = u64 [a0 + 0xb8]\n 22687: a4 = u64 [a0 + 0xb0]\n 22691: a3 = u64 [a0 + 0xa8]\n 22695: a1 = u64 [a0 + 0xa0]\n 22699: jump @845\n      : @834 (gas: 12)\n 22702: a0 = u64 [s1 + 0x178]\n 22706: a1 = a2 + 0x200\n 22710: u64 [a1 + 0xe8] = a0\n 22714: a0 = u64 [s1 + 0x180]\n 22718: u64 [a1 + 0xf0] = a0\n 22722: a0 = u64 [s1 + 0x188]\n 22726: u64 [a1 + 0xf8] = a0\n 22730: a1 = s1 + 0x4420\n 22734: a0 = u64 [s1 + 0x190]\n 22738: u64 [a2 + 0x300] = a0\n 22742: a0 = 0\n 22744: ra = 820, jump @19\n      : @835 [@dyn 410] (gas: 2)\n 22750: a0 = 0x4138\n 22754: t0 = 822, jump @2034\n      : @836 [@dyn 411] (gas: 3)\n 22761: a1 = s1 + 0x4400\n 22765: u64 [a2 + 712] = 0\n 22769: ra = 824, jump @19\n      : @837 [@dyn 412] (gas: 3)\n 22775: a0 = u64 [s1 + 0x198]\n 22779: a0 = i32 [a0]\n 22781: jump @839 if a0 >u 63\n      : @838 (gas: 4)\n 22785: a0 = u64 [s1 + 0x198]\n 22789: u32 [a0 + 0] = 0x40\n 22792: t0 = 0x33a\n 22796: jump @1978\n      : @839 (gas: 1)\n 22800: t0 = 826, jump @1978\n      : @840 [@dyn 413] (gas: 36)\n 22807: ecalli 8 // 'hash_keccak_256'\n 22809: a3 = u64 [s1 + 0x168]\n 22813: a0 = u64 [a3]\n 22815: a1 = u64 [a3 + 0x8]\n 22818: a2 = u64 [a3 + 0x10]\n 22821: a3 = u64 [a3 + 0x18]\n 22824: a0 = reverse a0\n 22826: a1 = reverse a1\n 22828: a2 = reverse a2\n 22830: a3 = reverse a3\n 22832: a4 = a3 + 0x5\n 22835: a3 = a4 <u a3\n 22838: a5 = a2 + a3\n 22841: a2 = a5 <u a2\n 22844: a2 = a3 if a3 == 0\n 22847: a2 = a2 + a1\n 22850: a1 = a2 <u a1\n 22853: t0 = a0 + a1\n 22856: a3 = s1 + 0x4138\n 22860: a0 = u64 [s1 + 0x1a8]\n 22864: a1 = a3 + 0x200\n 22868: u64 [a1 + 0x60] = a0\n 22871: a0 = u64 [s1 + 0x1a0]\n 22875: u64 [a1 + 0x58] = a0\n 22878: a0 = u64 [s1 + 0x1b0]\n 22882: u64 [a1 + 0x50] = a0\n 22885: a0 = u64 [s1 + 0x1b8]\n 22889: u64 [a1 + 0x48] = a0\n 22892: u64 [a1 + 0x68] = a4\n 22895: u64 [a1 + 0x70] = a5\n 22898: u64 [a1 + 0x78] = a2\n 22901: a0 = s1 + 0x43c0\n 22905: a1 = s1 + 0x43a0\n 22909: a2 = s1 + 0x4380\n 22913: u64 [a3 + 0x280] = t0\n 22917: ra = 828, jump @1847\n      : @841 [@dyn 414] (gas: 7)\n 22923: a3 = s1 + 0x4138\n 22927: a4 = a3 + 0x200\n 22931: a0 = u64 [a4 + 0x88]\n 22935: a1 = u64 [a4 + 0xa0]\n 22939: a2 = u64 [a4 + 0x90]\n 22943: a3 = u64 [a4 + 0x98]\n 22947: t0 = 830, jump @2007\n      : @842 [@dyn 415] (gas: 11)\n 22954: i32 a3 = a3 + 0x138\n 22958: a3 = a3 + s1\n 22961: a5 = a3 + 0x700\n 22965: u64 [a5 + 0xe8] = a0\n 22969: u64 [a5 + 0xf0] = a2\n 22973: u64 [a5 + 0xf8] = a4\n 22977: a0 = s1 + 0x6000\n 22981: u64 [a0 + 0xfffffffffffff938] = a1\n 22985: a0 = s1 + 0x4360\n 22989: a1 = s1 + 0x5920\n 22993: ra = 832, jump @21\n      : @843 [@dyn 416] (gas: 23)\n 22999: a4 = s1 + 0x4138\n 23003: a5 = a4 + 0x200\n 23007: a0 = u64 [a5 + 0x28]\n 23010: a1 = u64 [a5 + 0x30]\n 23013: a2 = u64 [a5 + 0x38]\n 23016: a3 = u64 [a5 + 0x40]\n 23019: u64 [a4 + 0x1e0] = a3\n 23023: u64 [a4 + 0x1d8] = a2\n 23027: u64 [a4 + 0x1d0] = a1\n 23031: u64 [a4 + 0x1c8] = a0\n 23035: a0 = u64 [s1 + 0x158]\n 23039: u64 [a5] = a0\n 23041: a0 = u64 [s1 + 0x148]\n 23045: a5 = a4 + 0x100\n 23049: u64 [a5 + 0xf8] = a0\n 23053: a0 = u64 [s1 + 0x150]\n 23057: u64 [a5 + 0xf0] = a0\n 23061: a0 = s1 + 0x4340\n 23065: a1 = s1 + 0x4320\n 23069: a2 = s1 + 0x4300\n 23073: a3 = u64 [s1 + 0x160]\n 23077: u64 [a5 + 0xe8] = a3\n 23081: ra = 834, jump @1926\n      : @844 [@dyn 417] (gas: 14)\n 23087: a5 = u64 [s1 + 0x1b8]\n 23091: a4 = u64 [s1 + 0x1b0]\n 23095: a1 = u64 [s1 + 0x1a0]\n 23099: a3 = u64 [s1 + 0x1a8]\n 23103: a2 = s1 + 0x4138\n 23107: a0 = u64 [a2 + 0x220]\n 23111: u64 [s1 + 0x158] = a0\n 23115: a0 = u64 [a2 + 0x218]\n 23119: u64 [s1 + 0x148] = a0\n 23123: a0 = u64 [a2 + 0x210]\n 23127: u64 [s1 + 0x150] = a0\n 23131: a0 = u64 [a2 + 0x208]\n 23135: u64 [s1 + 0x160] = a0\n 23139: fallthrough\n      : @845 (gas: 13)\n 23140: a5 = a5 + 0x1\n 23143: a0 = a5 <u 0x1\n 23146: a4 = a4 + a0\n 23149: u64 [s1 + 0x1b8] = a5\n 23153: u64 [s1 + 0x1b0] = a4\n 23157: a0 = a5 | a4\n 23160: a0 = a0 <u 0x1\n 23163: a0 = a0 + a1\n 23166: a1 = a0 <u a1\n 23169: a3 = a3 + a1\n 23172: u64 [s1 + 0x1a8] = a3\n 23176: u64 [s1 + 0x1a0] = a0\n 23180: jump @814\n      : @846 (gas: 3)\n 23183: a0 = s1 + 0x4540\n 23187: a1 = 0x40\n 23190: ra = 836, jump @17\n      : @847 [@dyn 418] (gas: 7)\n 23196: a3 = s1 + 0x4138\n 23200: a5 = a3 + 0x400\n 23204: a0 = u64 [a5 + 0x20]\n 23207: a1 = u64 [a5 + 0x18]\n 23210: a2 = u64 [a5 + 0x10]\n 23213: a4 = u64 [a5 + 0x8]\n 23216: t0 = 838, jump @2019\n      : @848 [@dyn 419] (gas: 1)\n 23223: jump @850 if a0 == 0\n      : @849 (gas: 1)\n 23226: jump @1603\n      : @850 (gas: 14)\n 23229: a2 = s1 + 0x100\n 23233: a0 = u64 [a2 + 0x60]\n 23236: a1 = a3 + 0x300\n 23240: u64 [a1 + 0xe8] = a0\n 23244: a0 = u64 [a2 + 0x50]\n 23247: u64 [a1 + 0xf0] = a0\n 23251: a0 = u64 [a2 + 0x48]\n 23254: u64 [a1 + 0xf8] = a0\n 23258: a1 = s1 + 0x4520\n 23262: a0 = u64 [a2 + 0x58]\n 23265: u64 [a3 + 0x400] = a0\n 23269: a0 = a4\n 23271: u64 [s1 + 0x1b8] = a4\n 23275: ra = 840, jump @19\n      : @851 [@dyn 420] (gas: 3)\n 23281: a1 = 0x20\n 23284: a0 = u64 [s1 + 0x1b8]\n 23288: ra = 842, jump @28\n      : @852 [@dyn 421] (gas: 5)\n 23294: i32 a1 = a0 + 0\n 23296: a2 = 0x20\n 23299: a0 = 0\n 23301: ecalli 13 // 'seal_return'\n 23303: fallthrough\n      : @853 (gas: 9)\n 23304: a1 = s1 + 0x4138\n 23308: u64 [a1 + 1664] = 0\n 23312: u64 [a1 + 1656] = 0\n 23316: u64 [a1 + 1648] = 0\n 23320: u64 [a1 + 1640] = 0x2\n 23325: a0 = s1 + 0x7ff\n 23329: a0 = a0 + 0x401\n 23333: a1 = s1 + 0x47a0\n 23337: ra = 844, jump @21\n      : @854 [@dyn 422] (gas: 14)\n 23343: a0 = s1 + 0x7ff\n 23347: a0 = a0 + 0x139\n 23351: a1 = u64 [a0 + 0x2d0]\n 23355: u64 [s1 + 0x1a8] = a1\n 23359: a1 = u64 [a0 + 0x2c8]\n 23363: u64 [s1 + 0x1a0] = a1\n 23367: a0 = u32 [a0 + 0x2d8]\n 23371: u64 [s1 + 0x198] = a0\n 23375: a0 = u64 [s1 + 0x190]\n 23379: ra = 0x34e\n 23383: ecalli 5 // 'caller'\n 23385: a5 = u64 [s1 + 0x1b0]\n 23389: t0 = 0x350\n 23393: jump @1947\n      : @855 [@dyn 423] (gas: 2)\n 23396: a5 = u64 [s1 + 0x1b0]\n 23400: t0 = 848, jump @1947\n      : @856 [@dyn 424] (gas: 10)\n 23406: a2 = u64 [a4 + 0x98]\n 23410: a1 = a1 ^ a2\n 23413: a2 = u64 [a4 + 0xa0]\n 23417: a0 = a0 ^ a2\n 23420: a0 = a0 | a1\n 23423: a1 = u64 [a4 + 0xa8]\n 23427: a1 = a1 ^ a3\n 23430: a0 = a0 | a1\n 23433: a1 = 0x1\n 23436: jump @861 if a0 == 0\n      : @857 (gas: 9)\n 23439: a1 = s1 + 0x4138\n 23443: u64 [a1 + 1696] = 0\n 23447: u64 [a1 + 1688] = 0\n 23451: u64 [a1 + 1680] = 0\n 23455: u64 [a1 + 1672] = 0x3\n 23460: a0 = s1 + 0x7ff\n 23464: a0 = a0 + 0x3e1\n 23468: a1 = s1 + 0x47c0\n 23472: ra = 850, jump @21\n      : @858 [@dyn 425] (gas: 13)\n 23478: a0 = s1 + 0x7ff\n 23482: a0 = a0 + 0x139\n 23486: a1 = u64 [a0 + 0x2b0]\n 23490: u64 [s1 + 0x1a8] = a1\n 23494: a1 = u64 [a0 + 0x2a8]\n 23498: u64 [s1 + 0x1a0] = a1\n 23502: a0 = u32 [a0 + 0x2b8]\n 23506: u64 [s1 + 0x198] = a0\n 23510: a0 = u64 [s1 + 0x190]\n 23514: ra = 0x354\n 23518: ecalli 5 // 'caller'\n 23520: t0 = 0x356\n 23524: jump @1943\n      : @859 [@dyn 426] (gas: 1)\n 23527: t0 = 854, jump @1943\n      : @860 [@dyn 427] (gas: 2)\n 23533: a1 = a0 <u 0x1\n 23536: fallthrough\n      : @861 (gas: 9)\n 23537: a2 = s1 + 0x7ff\n 23541: a2 = a2 + 0x139\n 23545: u64 [a2 + 672] = 0\n 23549: u64 [a2 + 664] = 0\n 23553: u64 [a2 + 0x288] = a1\n 23557: a0 = s1 + 0x7ff\n 23561: a0 = a0 + 0x3c1\n 23565: u64 [a2 + 656] = 0\n 23569: ra = 856, jump @1799\n      : @862 [@dyn 428] (gas: 15)\n 23575: a0 = u64 [s1 + 0xf0]\n 23579: a2 = s1 + 0x7ff\n 23583: a2 = a2 + 0x139\n 23587: a3 = a2 + 0x200\n 23591: u64 [a3 + 0x80] = a0\n 23595: a0 = u64 [s1 + 0xe8]\n 23599: u64 [a3 + 0x78] = a0\n 23602: a0 = u64 [s1 + 0xe0]\n 23606: u64 [a3 + 0x70] = a0\n 23609: a1 = s1 + 0x7ff\n 23613: a1 = a1 + 0x3a1\n 23617: a0 = u64 [s1 + 0xd8]\n 23621: u64 [a3 + 0x68] = a0\n 23624: a0 = 0\n 23626: ra = 858, jump @19\n      : @863 [@dyn 429] (gas: 11)\n 23632: a0 = s1 + 0x7ff\n 23636: a0 = a0 + 0x139\n 23640: u64 [a0 + 608] = 0\n 23644: u64 [a0 + 600] = 0\n 23648: u64 [a0 + 592] = 0\n 23652: a2 = a0\n 23654: a0 = 0x20\n 23657: a1 = s1 + 0x7ff\n 23661: a1 = a1 + 0x381\n 23665: u64 [a2 + 584] = 0\n 23669: ra = 860, jump @19\n      : @864 [@dyn 430] (gas: 3)\n 23675: a0 = u64 [s1 + 0x118]\n 23679: a0 = i32 [a0]\n 23681: jump @866 if a0 >u 63\n      : @865 (gas: 4)\n 23685: a1 = u64 [s1 + 0x118]\n 23689: u32 [a1 + 0] = 0x40\n 23692: t0 = 0x35e\n 23696: jump @1992\n      : @866 (gas: 1)\n 23700: t0 = 862, jump @1992\n      : @867 [@dyn 431] (gas: 5)\n 23707: a0 = u64 [s1 + 0xd0]\n 23711: ra = 0x360\n 23715: ecalli 8 // 'hash_keccak_256'\n 23717: t0 = 0x362\n 23721: jump @1957\n      : @868 [@dyn 432] (gas: 1)\n 23725: t0 = 866, jump @1957\n      : @869 [@dyn 433] (gas: 2)\n 23732: a4 = a3 + 0x5\n 23735: t0 = 868, jump @1988\n      : @870 [@dyn 434] (gas: 8)\n 23742: u64 [a3 + 0xa8] = a4\n 23746: u64 [a3 + 0xb0] = a5\n 23750: u64 [a3 + 0xb8] = a2\n 23754: u64 [a3 + 0xc0] = a0\n 23758: a0 = s1 + 0x7ff\n 23762: a0 = a0 + 0x361\n 23766: a1 = s1 + 0x47e0\n 23770: ra = 870, jump @21\n      : @871 [@dyn 435] (gas: 21)\n 23776: a4 = s1 + 0x7ff\n 23780: a4 = a4 + 0x139\n 23784: a5 = a4 + 0x200\n 23788: a0 = u64 [a5 + 0x40]\n 23791: u64 [s1 + 0x110] = a0\n 23795: a1 = u64 [a5 + 0x38]\n 23798: u64 [s1 + 0x108] = a1\n 23802: a3 = u64 [a5 + 0x30]\n 23805: u64 [s1 + 0x100] = a3\n 23809: a2 = u64 [a5 + 0x28]\n 23812: u64 [s1 + 0xf8] = a2\n 23816: u64 [a5] = a0\n 23818: a5 = a4 + 0x100\n 23822: u64 [a5 + 0xf8] = a1\n 23826: u64 [a5 + 0xf0] = a3\n 23830: a0 = s1 + 0x7ff\n 23834: a0 = a0 + 0x341\n 23838: a1 = s1 + 0x7ff\n 23842: a1 = a1 + 0x321\n 23846: u64 [a5 + 0xe8] = a2\n 23850: ra = 872, jump @1820\n      : @872 [@dyn 436] (gas: 26)\n 23856: a1 = s1 + 0x7ff\n 23860: a1 = a1 + 0x139\n 23864: a2 = a1 + 0x200\n 23868: a0 = u64 [a2 + 0x20]\n 23871: u64 [s1 + 0x160] = a0\n 23875: a0 = u64 [a2 + 0x18]\n 23878: u64 [s1 + 0x168] = a0\n 23882: a0 = u64 [a2 + 0x10]\n 23885: u64 [s1 + 0x170] = a0\n 23889: a0 = u64 [a2 + 0x8]\n 23892: u64 [s1 + 0x178] = a0\n 23896: a0 = u64 [s1 + 0x110]\n 23900: a2 = a1 + 0x100\n 23904: u64 [a2 + 0xc0] = a0\n 23908: a0 = u64 [s1 + 0x108]\n 23912: u64 [a2 + 0xb8] = a0\n 23916: a0 = u64 [s1 + 0x100]\n 23920: u64 [a2 + 0xb0] = a0\n 23924: a3 = a1\n 23926: a0 = s1 + 0x7ff\n 23930: a0 = a0 + 0x301\n 23934: a1 = s1 + 0x7ff\n 23938: a1 = a1 + 0x2e1\n 23942: a2 = u64 [s1 + 0xf8]\n 23946: u64 [a3 + 0x1a8] = a2\n 23950: ra = 874, jump @1836\n      : @873 [@dyn 437] (gas: 25)\n 23956: a1 = s1 + 0x7ff\n 23960: a1 = a1 + 0x139\n 23964: a2 = a1 + 0x100\n 23968: a0 = u64 [a2 + 0xe0]\n 23972: u64 [s1 + 0x90] = a0\n 23976: a0 = u64 [a2 + 0xd8]\n 23980: u64 [s1 + 0x98] = a0\n 23984: a0 = u64 [a2 + 0xd0]\n 23988: u64 [s1 + 0xa0] = a0\n 23992: a0 = u64 [a2 + 0xc8]\n 23996: u64 [s1 + 0xa8] = a0\n 24000: a0 = u64 [s1 + 0x110]\n 24004: u64 [a2 + 0x80] = a0\n 24008: a0 = u64 [s1 + 0x108]\n 24012: u64 [a2 + 0x78] = a0\n 24015: a0 = u64 [s1 + 0x100]\n 24019: u64 [a2 + 0x70] = a0\n 24022: a3 = a1\n 24024: a0 = s1 + 0x7ff\n 24028: a0 = a0 + 0x2c1\n 24032: a1 = s1 + 0x7ff\n 24036: a1 = a1 + 0x2a1\n 24040: a2 = u64 [s1 + 0xf8]\n 24044: u64 [a3 + 0x168] = a2\n 24048: ra = 876, jump @1820\n      : @874 [@dyn 438] (gas: 25)\n 24054: a1 = s1 + 0x7ff\n 24058: a1 = a1 + 0x139\n 24062: a2 = a1 + 0x100\n 24066: a0 = u64 [a2 + 0xa0]\n 24070: u64 [s1 + 0x140] = a0\n 24074: a0 = u64 [a2 + 0x98]\n 24078: u64 [s1 + 0x148] = a0\n 24082: a0 = u64 [a2 + 0x90]\n 24086: u64 [s1 + 0x150] = a0\n 24090: a0 = u64 [a2 + 0x88]\n 24094: u64 [s1 + 0x158] = a0\n 24098: a0 = u64 [s1 + 0x110]\n 24102: u64 [a2 + 0x40] = a0\n 24105: a0 = u64 [s1 + 0x108]\n 24109: u64 [a2 + 0x38] = a0\n 24112: a0 = u64 [s1 + 0x100]\n 24116: u64 [a2 + 0x30] = a0\n 24119: a3 = a1\n 24121: a0 = s1 + 0x7ff\n 24125: a0 = a0 + 0x281\n 24129: a1 = s1 + 0x7ff\n 24133: a1 = a1 + 0x261\n 24137: a2 = u64 [s1 + 0xf8]\n 24141: u64 [a3 + 0x128] = a2\n 24145: ra = 878, jump @1791\n      : @875 [@dyn 439] (gas: 15)\n 24151: a1 = s1 + 0x7ff\n 24155: a1 = a1 + 0x139\n 24159: a2 = a1 + 0x100\n 24163: a0 = u64 [a2 + 0x48]\n 24166: u64 [s1 + 0x1b0] = a0\n 24170: a0 = u64 [a2 + 0x50]\n 24173: u64 [s1 + 0x1a8] = a0\n 24177: a0 = u64 [a2 + 0x58]\n 24180: u64 [s1 + 0x1a0] = a0\n 24184: a0 = u64 [a2 + 0x60]\n 24187: u64 [s1 + 0x198] = a0\n 24191: a0 = s1 + 0x7ff\n 24195: a0 = a0 + 0x241\n 24199: a1 = 0x40\n 24202: ra = 880, jump @17\n      : @876 [@dyn 440] (gas: 28)\n 24208: a0 = s1 + 0x7ff\n 24212: a0 = a0 + 0x139\n 24216: a1 = u64 [a0 + 0x120]\n 24220: u64 [s1 + 0xc0] = a1\n 24224: a4 = u64 [a0 + 0x118]\n 24228: u64 [s1 + 0xb8] = a4\n 24232: a3 = u64 [a0 + 0x110]\n 24236: u64 [s1 + 0xb0] = a3\n 24240: a5 = u64 [a0 + 0x108]\n 24244: u64 [s1 + 0xc8] = a5\n 24248: a2 = u64 [s1 + 0x198]\n 24252: u64 [a0 + 0xe0] = a2\n 24256: a2 = u64 [s1 + 0x1a0]\n 24260: u64 [a0 + 0xd8] = a2\n 24264: a2 = u64 [s1 + 0x1a8]\n 24268: u64 [a0 + 0xd0] = a2\n 24272: a2 = u64 [s1 + 0x1b0]\n 24276: u64 [a0 + 0xc8] = a2\n 24280: u64 [a0 + 0x100] = a1\n 24284: u64 [a0 + 0xf8] = a4\n 24288: u64 [a0 + 0xf0] = a3\n 24292: a2 = a0\n 24294: a0 = s1 + 0x7ff\n 24298: a0 = a0 + 0x221\n 24302: a1 = s1 + 0x7ff\n 24306: a1 = a1 + 0x201\n 24310: u64 [a2 + 0xe8] = a5\n 24314: ra = 882, jump @1749\n      : @877 [@dyn 441] (gas: 6)\n 24320: a3 = u64 [s1 + 0xb8]\n 24324: a0 = u64 [s1 + 0xc8]\n 24328: a1 = u64 [s1 + 0xc0]\n 24332: a2 = u64 [s1 + 0xb0]\n 24336: a2 = a2 | a1\n 24339: t0 = 884, jump @2004\n      : @878 [@dyn 442] (gas: 1)\n 24346: jump @880 if a1 == 0\n      : @879 (gas: 1)\n 24349: jump @1603\n      : @880 (gas: 13)\n 24352: a2 = s1 + 0x7ff\n 24356: a2 = a2 + 0x139\n 24360: a1 = u64 [s1 + 0xf8]\n 24364: u64 [a2 + 0xa8] = a1\n 24368: a1 = u64 [s1 + 0x100]\n 24372: u64 [a2 + 0xb0] = a1\n 24376: a1 = u64 [s1 + 0x108]\n 24380: u64 [a2 + 0xb8] = a1\n 24384: a1 = s1 + 0x7ff\n 24388: a1 = a1 + 0x1e1\n 24392: a3 = u64 [s1 + 0x110]\n 24396: u64 [a2 + 0xc0] = a3\n 24400: ra = 886, jump @19\n      : @881 [@dyn 443] (gas: 16)\n 24406: a3 = s1 + 0x7ff\n 24410: a3 = a3 + 0x139\n 24414: a1 = s1 + 0x100\n 24418: a0 = u64 [a1 + 0x10]\n 24421: u64 [a3 + 0x80] = a0\n 24425: a0 = u64 [a1 + 0x8]\n 24428: u64 [a3 + 0x78] = a0\n 24431: a0 = u64 [a1]\n 24433: u64 [a3 + 0x70] = a0\n 24436: a0 = s1 + 0x7ff\n 24440: a0 = a0 + 0x1c1\n 24444: a1 = s1 + 0x7ff\n 24448: a1 = a1 + 0x1a1\n 24452: a2 = u64 [s1 + 0xf8]\n 24456: u64 [a3 + 0x68] = a2\n 24459: ra = 888, jump @1791\n      : @882 [@dyn 444] (gas: 27)\n 24465: a3 = s1 + 0x7ff\n 24469: a3 = a3 + 0x139\n 24473: a0 = u64 [a3 + 0x88]\n 24477: a1 = u64 [a3 + 0xa0]\n 24481: a2 = u64 [a3 + 0x90]\n 24485: a3 = u64 [a3 + 0x98]\n 24489: t0 = a0 + 0xffffffffffffffe0\n 24492: a0 = t0 <u a0\n 24495: a4 = a2 + a0\n 24498: a4 = a4 + 0xffffffffffffffff\n 24501: a5 = a4 ^ a2\n 24504: a2 = a4 <u a2\n 24507: a2 = a0 if a5 == 0\n 24510: a0 = a3 + 0xffffffffffffffff\n 24513: a2 = a2 + a0\n 24516: a0 = a2 <u a0\n 24519: a3 = a3 <u 0x1\n 24522: a1 = a1 - a3\n 24525: a0 = a0 + a1\n 24528: a1 = t0 | a2\n 24531: a0 = a0 | a4\n 24534: a1 = a1 | a0\n 24537: a1 = a1 >> 0x20\n 24540: a0 = a0 | a2\n 24543: a0 = a0 << 0x20\n 24546: a0 = a0 | a1\n 24549: jump @884 if a0 == 0\n      : @883 (gas: 1)\n 24552: jump @1603\n      : @884 (gas: 10)\n 24555: a2 = u64 [s1 + 0xc0]\n 24559: a4 = u64 [s1 + 0xb8]\n 24563: a0 = a4 | a2\n 24566: a1 = 0xffffffe0\n 24576: a5 = u64 [s1 + 0xc8]\n 24580: a1 = a5 <u a1\n 24583: a3 = u64 [s1 + 0xb0]\n 24587: a1 = 0 if a3 != 0\n 24589: a1 = 0 if a0 != 0\n 24591: jump @886 if a1 != 0\n      : @885 (gas: 1)\n 24594: jump @1603\n      : @886 (gas: 22)\n 24597: a0 = a5\n 24599: a5 = a3\n 24601: a3 = a2\n 24603: a2 = a0 + 0x20\n 24606: a0 = a2 <u a0\n 24609: a1 = a5 + a0\n 24612: u64 [s1 + 0x58] = a1\n 24615: a1 = a1 <u a5\n 24618: a1 = a0 if a0 == 0\n 24621: a0 = u64 [s1 + 0x1b8]\n 24625: a0 = i32 [a0]\n 24627: u64 [s1 + 0x1b8] = a0\n 24631: a1 = a1 + a4\n 24634: u64 [s1 + 0x50] = a1\n 24637: a0 = a1 <u a4\n 24640: a0 = a0 + a3\n 24643: u64 [s1 + 0x60] = a0\n 24646: u64 [s1 + 0x68] = a2\n 24649: a0 = a2\n 24651: a1 = t0\n 24653: u64 [s1 + 0x1b0] = t0\n 24657: ra = 890, jump @28\n      : @887 [@dyn 445] (gas: 20)\n 24663: i32 a0 = a0 + 0\n 24665: a1 = i32 [s1 + 0x1b0]\n 24669: a2 = u64 [s1 + 0x1b8]\n 24673: ecalli 2 // 'call_data_copy'\n 24675: a3 = s1 + 0x7ff\n 24679: a3 = a3 + 0x139\n 24683: a1 = s1 + 0x100\n 24687: a0 = u64 [a1 + 0x10]\n 24690: u64 [a3 + 0x40] = a0\n 24693: a0 = u64 [a1 + 0x8]\n 24696: u64 [a3 + 0x38] = a0\n 24699: a0 = u64 [a1]\n 24701: u64 [a3 + 0x30] = a0\n 24704: a0 = s1 + 0x7ff\n 24708: a0 = a0 + 0x181\n 24712: a1 = s1 + 0x7ff\n 24716: a1 = a1 + 0x161\n 24720: a2 = u64 [s1 + 0xf8]\n 24724: u64 [a3 + 0x28] = a2\n 24727: ra = 892, jump @1836\n      : @888 [@dyn 446] (gas: 15)\n 24733: a1 = s1 + 0x7ff\n 24737: a1 = a1 + 0x139\n 24741: a0 = u64 [a1 + 0x60]\n 24744: u64 [s1 + 0x70] = a0\n 24747: a0 = u64 [a1 + 0x58]\n 24750: u64 [s1 + 0x78] = a0\n 24753: a0 = u64 [a1 + 0x50]\n 24756: u64 [s1 + 0x80] = a0\n 24760: a0 = u64 [a1 + 0x48]\n 24763: u64 [s1 + 0x88] = a0\n 24767: t0 = 0\n 24769: t1 = 0\n 24771: t2 = 0\n 24773: a5 = 0\n 24775: fallthrough\n      : @889 (gas: 16)\n 24776: a0 = u64 [s1 + 0xf8]\n 24780: a0 = t0 <u a0\n 24783: a2 = u64 [s1 + 0x100]\n 24787: a1 = t1 ^ a2\n 24790: a2 = t1 <u a2\n 24793: a2 = a0 if a1 == 0\n 24796: a4 = u64 [s1 + 0x108]\n 24800: a0 = t2 <u a4\n 24803: a3 = u64 [s1 + 0x110]\n 24807: a1 = a5 ^ a3\n 24810: a3 = a5 <u a3\n 24813: a3 = a0 if a1 == 0\n 24816: a0 = t2 ^ a4\n 24819: a0 = a0 | a1\n 24822: a3 = a2 if a0 == 0\n 24825: jump @891 if a3 != 0\n      : @890 (gas: 1)\n 24828: jump @1093\n      : @891 (gas: 16)\n 24831: u64 [s1 + 0x1a0] = t2\n 24835: u64 [s1 + 0x1a8] = a5\n 24839: u64 [s1 + 0x1b0] = t1\n 24843: u64 [s1 + 0x1b8] = t0\n 24847: a0 = u64 [s1 + 0xd8]\n 24851: a2 = s1 + 0x600\n 24855: u64 [a2 + 0x80] = a0\n 24859: a0 = u64 [s1 + 0xe0]\n 24863: u64 [a2 + 0x88] = a0\n 24867: a0 = u64 [s1 + 0xe8]\n 24871: u64 [a2 + 0x90] = a0\n 24875: a1 = s1 + 0x680\n 24879: a0 = u64 [s1 + 0xf0]\n 24883: u64 [a2 + 0x98] = a0\n 24887: a0 = 0\n 24889: ra = 894, jump @19\n      : @892 [@dyn 447] (gas: 7)\n 24895: u64 [s1 + 1656] = 0\n 24899: u64 [s1 + 1648] = 0\n 24903: u64 [s1 + 1640] = 0\n 24907: a0 = 0x20\n 24910: a1 = s1 + 0x660\n 24914: u64 [s1 + 1632] = 0\n 24918: ra = 896, jump @19\n      : @893 [@dyn 448] (gas: 3)\n 24924: a0 = u64 [s1 + 0x118]\n 24928: a0 = i32 [a0]\n 24930: jump @895 if a0 >u 63\n      : @894 (gas: 3)\n 24934: a0 = u64 [s1 + 0x118]\n 24938: u32 [a0 + 0] = 0x40\n 24941: fallthrough\n      : @895 (gas: 12)\n 24942: a0 = sp + 0xffffffffffffffe0\n 24945: a0 = a0 & 0xffffffffffffffe0\n 24948: u64 [s1 + 0x198] = a0\n 24952: sp = a0\n 24954: i32 a2 = a0 + 0\n 24956: a1 = 0x40\n 24959: a0 = u64 [s1 + 0xd0]\n 24963: ra = 0x382\n 24967: ecalli 8 // 'hash_keccak_256'\n 24969: a3 = u64 [s1 + 0x198]\n 24973: t0 = 0x384\n 24977: jump @1949\n      : @896 [@dyn 449] (gas: 2)\n 24980: a3 = u64 [s1 + 0x198]\n 24984: t0 = 900, jump @1949\n      : @897 [@dyn 450] (gas: 16)\n 24990: a0 = u64 [s1 + 0x1a8]\n 24994: u64 [s1 + 0x5f8] = a0\n 24998: a0 = u64 [s1 + 0x1a0]\n 25002: u64 [s1 + 0x5f0] = a0\n 25006: a0 = u64 [s1 + 0x1b0]\n 25010: u64 [s1 + 0x5e8] = a0\n 25014: a0 = u64 [s1 + 0x1b8]\n 25018: u64 [s1 + 0x5e0] = a0\n 25022: u64 [s1 + 0x600] = a4\n 25026: u64 [s1 + 0x608] = a5\n 25030: u64 [s1 + 0x610] = a2\n 25034: a0 = s1 + 0x620\n 25038: a1 = s1 + 0x600\n 25042: a2 = s1 + 0x5e0\n 25046: u64 [s1 + 0x618] = a3\n 25050: ra = 902, jump @1847\n      : @898 [@dyn 451] (gas: 16)\n 25056: a4 = s1 + 0x600\n 25060: a3 = u64 [a4 + 0x20]\n 25063: a2 = u64 [a4 + 0x28]\n 25066: a0 = u64 [a4 + 0x30]\n 25069: a1 = u64 [a4 + 0x38]\n 25072: u64 [s1 + 0x190] = a1\n 25076: u64 [s1 + 0x5b8] = a1\n 25080: u64 [s1 + 0x198] = a0\n 25084: u64 [s1 + 0x5b0] = a0\n 25088: u64 [s1 + 0x188] = a2\n 25092: u64 [s1 + 0x5a8] = a2\n 25096: a0 = s1 + 0x5c0\n 25100: a1 = s1 + 0x5a0\n 25104: u64 [s1 + 0x180] = a3\n 25108: u64 [s1 + 0x5a0] = a3\n 25112: ra = 904, jump @1877\n      : @899 [@dyn 452] (gas: 29)\n 25118: a0 = u64 [s1 + 0x5d8]\n 25122: a4 = s1 + 0x100\n 25126: u64 [a4 + 0x38] = a0\n 25129: a0 = u64 [s1 + 0x5d0]\n 25133: u64 [a4 + 0x30] = a0\n 25136: a0 = u64 [s1 + 0x5c8]\n 25140: u64 [a4 + 0x28] = a0\n 25143: a0 = u64 [s1 + 0x5c0]\n 25147: u64 [a4 + 0x20] = a0\n 25150: a0 = u64 [a4 + 0xa8]\n 25154: u64 [s1 + 0x558] = a0\n 25158: a0 = u64 [a4 + 0xa0]\n 25162: u64 [s1 + 0x550] = a0\n 25166: a0 = u64 [a4 + 0xb0]\n 25170: u64 [s1 + 0x548] = a0\n 25174: a0 = u64 [a4 + 0xb8]\n 25178: u64 [s1 + 0x540] = a0\n 25182: a0 = u64 [a4 + 0x60]\n 25185: u64 [s1 + 0x578] = a0\n 25189: a0 = u64 [a4 + 0x68]\n 25192: u64 [s1 + 0x570] = a0\n 25196: a0 = u64 [a4 + 0x70]\n 25199: u64 [s1 + 0x568] = a0\n 25203: a0 = s1 + 0x580\n 25207: a1 = s1 + 0x560\n 25211: a2 = s1 + 0x540\n 25215: a3 = u64 [a4 + 0x78]\n 25218: u64 [s1 + 0x560] = a3\n 25222: ra = 906, jump @1858\n      : @900 [@dyn 453] (gas: 6)\n 25228: a4 = s1 + 0x500\n 25232: a1 = u64 [a4 + 0x98]\n 25236: a2 = u64 [a4 + 0x90]\n 25240: a3 = u64 [a4 + 0x88]\n 25244: a0 = u64 [a4 + 0x80]\n 25248: t0 = 908, jump @1955\n      : @901 [@dyn 454] (gas: 1)\n 25254: jump @903 if a1 == 0\n      : @902 (gas: 1)\n 25257: jump @1603\n      : @903 (gas: 11)\n 25260: a1 = u64 [s1 + 0x120]\n 25264: a3 = s1 + 0x500\n 25268: u64 [a3 + 0x20] = a1\n 25271: a1 = u64 [s1 + 0x128]\n 25275: u64 [a3 + 0x28] = a1\n 25278: a1 = u64 [s1 + 0x130]\n 25282: u64 [a3 + 0x30] = a1\n 25285: a1 = s1 + 0x520\n 25289: a2 = u64 [s1 + 0x138]\n 25293: u64 [a3 + 0x38] = a2\n 25296: ra = 910, jump @19\n      : @904 [@dyn 455] (gas: 20)\n 25302: a0 = u64 [s1 + 0x1a8]\n 25306: u64 [s1 + 0x4d8] = a0\n 25310: a0 = u64 [s1 + 0x1a0]\n 25314: u64 [s1 + 0x4d0] = a0\n 25318: a0 = u64 [s1 + 0x1b0]\n 25322: u64 [s1 + 0x4c8] = a0\n 25326: a0 = u64 [s1 + 0x1b8]\n 25330: u64 [s1 + 0x4c0] = a0\n 25334: a0 = u64 [s1 + 0x160]\n 25338: u64 [s1 + 0x4f8] = a0\n 25342: a0 = u64 [s1 + 0x168]\n 25346: u64 [s1 + 0x4f0] = a0\n 25350: a0 = u64 [s1 + 0x170]\n 25354: u64 [s1 + 0x4e8] = a0\n 25358: a0 = s1 + 0x500\n 25362: a1 = s1 + 0x4e0\n 25366: a2 = s1 + 0x4c0\n 25370: a3 = u64 [s1 + 0x178]\n 25374: u64 [s1 + 0x4e0] = a3\n 25378: ra = 912, jump @1858\n      : @905 [@dyn 456] (gas: 21)\n 25384: a0 = u64 [s1 + 0x180]\n 25388: a0 = a0 + 0x1\n 25391: a1 = a0 <u 0x1\n 25394: a2 = u64 [s1 + 0x188]\n 25398: a1 = a1 + a2\n 25401: a2 = a0 | a1\n 25404: a2 = a2 <u 0x1\n 25407: a3 = u64 [s1 + 0x198]\n 25411: a2 = a2 + a3\n 25414: a3 = a2 <u a3\n 25417: a4 = u64 [s1 + 0x190]\n 25421: a3 = a3 + a4\n 25424: a4 = s1 + 0x4138\n 25428: a5 = a4 + 0x600\n 25432: u64 [a5 + 0xe0] = a3\n 25436: u64 [a5 + 0xd8] = a2\n 25440: u64 [a5 + 0xd0] = a1\n 25444: u64 [a5 + 0xc8] = a0\n 25448: a0 = s1 + 0x4a0\n 25452: a1 = s1 + 0x4800\n 25456: ra = 914, jump @21\n      : @906 [@dyn 457] (gas: 29)\n 25462: a0 = u64 [s1 + 0x4b8]\n 25466: a1 = s1 + 0x100\n 25470: u64 [a1 + 0x38] = a0\n 25473: a0 = u64 [s1 + 0x4b0]\n 25477: u64 [a1 + 0x30] = a0\n 25480: a0 = u64 [s1 + 0x4a8]\n 25484: u64 [a1 + 0x28] = a0\n 25487: a0 = u64 [s1 + 0x4a0]\n 25491: u64 [a1 + 0x20] = a0\n 25494: a0 = u64 [a1 + 0xa8]\n 25498: u64 [s1 + 0x458] = a0\n 25502: a0 = u64 [a1 + 0xa0]\n 25506: u64 [s1 + 0x450] = a0\n 25510: a0 = u64 [a1 + 0xb0]\n 25514: u64 [s1 + 0x448] = a0\n 25518: a0 = u64 [a1 + 0xb8]\n 25522: u64 [s1 + 0x440] = a0\n 25526: a0 = u64 [s1 + 0x90]\n 25530: u64 [s1 + 0x478] = a0\n 25534: a0 = u64 [s1 + 0x98]\n 25538: u64 [s1 + 0x470] = a0\n 25542: a0 = u64 [s1 + 0xa0]\n 25546: u64 [s1 + 0x468] = a0\n 25550: a0 = s1 + 0x480\n 25554: a1 = s1 + 0x460\n 25558: a2 = s1 + 0x440\n 25562: a3 = u64 [s1 + 0xa8]\n 25566: u64 [s1 + 0x460] = a3\n 25570: ra = 916, jump @1858\n      : @907 [@dyn 458] (gas: 6)\n 25576: a4 = s1 + 0x400\n 25580: a1 = u64 [a4 + 0x98]\n 25584: a2 = u64 [a4 + 0x90]\n 25588: a3 = u64 [a4 + 0x88]\n 25592: a0 = u64 [a4 + 0x80]\n 25596: t0 = 918, jump @1955\n      : @908 [@dyn 459] (gas: 1)\n 25602: jump @910 if a1 == 0\n      : @909 (gas: 1)\n 25605: jump @1603\n      : @910 (gas: 10)\n 25608: a1 = u64 [s1 + 0x120]\n 25612: u64 [s1 + 0x420] = a1\n 25616: a1 = u64 [s1 + 0x128]\n 25620: u64 [s1 + 0x428] = a1\n 25624: a1 = u64 [s1 + 0x130]\n 25628: u64 [s1 + 0x430] = a1\n 25632: a1 = s1 + 0x420\n 25636: a2 = u64 [s1 + 0x138]\n 25640: u64 [s1 + 0x438] = a2\n 25644: ra = 920, jump @19\n      : @911 [@dyn 460] (gas: 19)\n 25650: a1 = u64 [s1 + 0x180]\n 25654: a0 = a1 + 0x2\n 25657: a1 = a0 <u a1\n 25660: a3 = u64 [s1 + 0x188]\n 25664: a2 = a3 + a1\n 25667: a3 = a2 <u a3\n 25670: a3 = a1 if a1 == 0\n 25673: a1 = u64 [s1 + 0x198]\n 25677: a3 = a3 + a1\n 25680: a1 = a3 <u a1\n 25683: a4 = u64 [s1 + 0x190]\n 25687: a4 = a4 + a1\n 25690: u64 [s1 + 0x3f0] = a3\n 25694: u64 [s1 + 0x3e8] = a2\n 25698: u64 [s1 + 0x3e0] = a0\n 25702: a0 = s1 + 0x400\n 25706: a1 = s1 + 0x3e0\n 25710: u64 [s1 + 0x3f8] = a4\n 25714: ra = 922, jump @1877\n      : @912 [@dyn 461] (gas: 30)\n 25720: a1 = s1 + 0x400\n 25724: a0 = u64 [a1 + 0x18]\n 25727: a4 = s1 + 0x100\n 25731: u64 [a4 + 0x38] = a0\n 25734: a0 = u64 [a1 + 0x10]\n 25737: u64 [a4 + 0x30] = a0\n 25740: a0 = u64 [a1 + 0x8]\n 25743: u64 [a4 + 0x28] = a0\n 25746: a0 = u64 [a1]\n 25748: u64 [a4 + 0x20] = a0\n 25751: a0 = u64 [a4 + 0xa8]\n 25755: u64 [s1 + 0x398] = a0\n 25759: a0 = u64 [a4 + 0xa0]\n 25763: u64 [s1 + 0x390] = a0\n 25767: a0 = u64 [a4 + 0xb0]\n 25771: u64 [s1 + 0x388] = a0\n 25775: a0 = u64 [a4 + 0xb8]\n 25779: u64 [s1 + 0x380] = a0\n 25783: a0 = u64 [a4 + 0x40]\n 25786: u64 [s1 + 0x3b8] = a0\n 25790: a0 = u64 [a4 + 0x48]\n 25793: u64 [s1 + 0x3b0] = a0\n 25797: a0 = u64 [a4 + 0x50]\n 25800: u64 [s1 + 0x3a8] = a0\n 25804: a0 = s1 + 0x3c0\n 25808: a1 = s1 + 0x3a0\n 25812: a2 = s1 + 0x380\n 25816: a3 = u64 [a4 + 0x58]\n 25819: u64 [s1 + 0x3a0] = a3\n 25823: ra = 924, jump @1858\n      : @913 [@dyn 462] (gas: 6)\n 25829: a4 = s1 + 0x300\n 25833: a1 = u64 [a4 + 0xd8]\n 25837: a2 = u64 [a4 + 0xd0]\n 25841: a3 = u64 [a4 + 0xc8]\n 25845: a0 = u64 [a4 + 0xc0]\n 25849: t0 = 926, jump @1955\n      : @914 [@dyn 463] (gas: 1)\n 25855: jump @916 if a1 == 0\n      : @915 (gas: 1)\n 25858: jump @1603\n      : @916 (gas: 10)\n 25861: a1 = u64 [s1 + 0x120]\n 25865: u64 [s1 + 0x360] = a1\n 25869: a1 = u64 [s1 + 0x128]\n 25873: u64 [s1 + 0x368] = a1\n 25877: a1 = u64 [s1 + 0x130]\n 25881: u64 [s1 + 0x370] = a1\n 25885: a1 = s1 + 0x360\n 25889: a2 = u64 [s1 + 0x138]\n 25893: u64 [s1 + 0x378] = a2\n 25897: ra = 928, jump @19\n      : @917 [@dyn 464] (gas: 21)\n 25903: a0 = u64 [s1 + 0x1a8]\n 25907: a4 = s1 + 0x300\n 25911: u64 [a4 + 0x18] = a0\n 25914: a0 = u64 [s1 + 0x1a0]\n 25918: u64 [a4 + 0x10] = a0\n 25921: a0 = u64 [s1 + 0x1b0]\n 25925: u64 [a4 + 0x8] = a0\n 25928: a0 = u64 [s1 + 0x1b8]\n 25932: u64 [a4] = a0\n 25934: a0 = u64 [s1 + 0x140]\n 25938: u64 [a4 + 0x38] = a0\n 25941: a0 = u64 [s1 + 0x148]\n 25945: u64 [a4 + 0x30] = a0\n 25948: a0 = u64 [s1 + 0x150]\n 25952: u64 [a4 + 0x28] = a0\n 25955: a0 = s1 + 0x340\n 25959: a1 = s1 + 0x320\n 25963: a2 = s1 + 0x300\n 25967: a3 = u64 [s1 + 0x158]\n 25971: u64 [a4 + 0x20] = a3\n 25974: ra = 930, jump @1858\n      : @918 [@dyn 465] (gas: 3)\n 25980: a1 = u64 [s1 + 0x180]\n 25984: a0 = a1 + 0x3\n 25987: t0 = 932, jump @1972\n      : @919 [@dyn 466] (gas: 8)\n 25993: u64 [a4 + 0x700] = a1\n 25997: a1 = a4 + 0x600\n 26001: u64 [a1 + 0xf8] = a3\n 26005: u64 [a1 + 0xf0] = a2\n 26009: u64 [a1 + 0xe8] = a0\n 26013: a0 = s1 + 0x2e0\n 26017: a1 = s1 + 0x4820\n 26021: ra = 934, jump @21\n      : @920 [@dyn 467] (gas: 23)\n 26027: a0 = u64 [s1 + 0x2e0]\n 26031: a1 = s1 + 0x100\n 26035: u64 [a1 + 0x38] = a0\n 26038: a0 = u64 [a1 + 0xa8]\n 26042: u64 [s1 + 0x298] = a0\n 26046: a0 = u64 [a1 + 0xa0]\n 26050: u64 [s1 + 0x290] = a0\n 26054: a0 = u64 [a1 + 0xb0]\n 26058: u64 [s1 + 0x288] = a0\n 26062: a0 = u64 [a1 + 0xb8]\n 26066: u64 [s1 + 0x280] = a0\n 26070: a0 = u64 [s1 + 0xc0]\n 26074: u64 [s1 + 0x2b8] = a0\n 26078: a0 = u64 [s1 + 0xb8]\n 26082: u64 [s1 + 0x2b0] = a0\n 26086: a0 = u64 [s1 + 0xb0]\n 26090: u64 [s1 + 0x2a8] = a0\n 26094: a0 = s1 + 0x2c0\n 26098: a1 = s1 + 0x2a0\n 26102: a2 = s1 + 0x280\n 26106: a3 = u64 [s1 + 0xc8]\n 26110: u64 [s1 + 0x2a0] = a3\n 26114: ra = 936, jump @1858\n      : @921 [@dyn 468] (gas: 6)\n 26120: a4 = s1 + 0x200\n 26124: a1 = u64 [a4 + 0xd8]\n 26128: a2 = u64 [a4 + 0xd0]\n 26132: a3 = u64 [a4 + 0xc8]\n 26136: a0 = u64 [a4 + 0xc0]\n 26140: t0 = 938, jump @1955\n      : @922 [@dyn 469] (gas: 1)\n 26146: jump @924 if a1 == 0\n      : @923 (gas: 1)\n 26149: jump @1603\n      : @924 (gas: 8)\n 26152: a1 = u8 [s1 + 0x138]\n 26156: a1 = a1 >u 0\n 26158: u64 [s1 + 632] = 0\n 26162: u64 [s1 + 624] = 0\n 26166: u64 [s1 + 0x260] = a1\n 26170: a1 = s1 + 0x260\n 26174: u64 [s1 + 616] = 0\n 26178: ra = 940, jump @19\n      : @925 [@dyn 470] (gas: 3)\n 26184: a1 = u64 [s1 + 0x180]\n 26188: a0 = a1 + 0x4\n 26191: t0 = 942, jump @1972\n      : @926 [@dyn 471] (gas: 8)\n 26197: a5 = a4 + 0x700\n 26201: u64 [a5 + 0x10] = a2\n 26204: u64 [a5 + 0x8] = a0\n 26207: u64 [a5 + 0x18] = a3\n 26210: u64 [a5 + 0x20] = a1\n 26213: a0 = s1 + 0x240\n 26217: a1 = s1 + 0x4840\n 26221: ra = 944, jump @21\n      : @927 [@dyn 472] (gas: 29)\n 26227: a0 = u64 [s1 + 0x258]\n 26231: a1 = s1 + 0x100\n 26235: u64 [a1 + 0x98] = a0\n 26239: a0 = u64 [s1 + 0x250]\n 26243: u64 [a1 + 0x90] = a0\n 26247: a0 = u64 [s1 + 0x248]\n 26251: u64 [a1 + 0x88] = a0\n 26255: a0 = u64 [s1 + 0x240]\n 26259: u64 [a1 + 0x80] = a0\n 26263: a0 = u64 [a1 + 0xa8]\n 26267: u64 [a1 + 0xf8] = a0\n 26271: a0 = u64 [a1 + 0xa0]\n 26275: u64 [a1 + 0xf0] = a0\n 26279: a0 = u64 [a1 + 0xb0]\n 26283: u64 [a1 + 0xe8] = a0\n 26287: a0 = u64 [a1 + 0xb8]\n 26291: u64 [a1 + 0xe0] = a0\n 26295: a0 = u64 [s1 + 0x70]\n 26298: u64 [s1 + 0x218] = a0\n 26302: a0 = u64 [s1 + 0x78]\n 26305: u64 [s1 + 0x210] = a0\n 26309: a0 = u64 [s1 + 0x80]\n 26313: u64 [s1 + 0x208] = a0\n 26317: a0 = s1 + 0x220\n 26321: a1 = s1 + 0x200\n 26325: a2 = s1 + 0x1e0\n 26329: a3 = u64 [s1 + 0x88]\n 26333: u64 [s1 + 0x200] = a3\n 26337: ra = 946, jump @1858\n      : @928 [@dyn 473] (gas: 6)\n 26343: a4 = s1 + 0x200\n 26347: a1 = u64 [a4 + 0x38]\n 26350: a2 = u64 [a4 + 0x30]\n 26353: a3 = u64 [a4 + 0x28]\n 26356: a0 = u64 [a4 + 0x20]\n 26359: t0 = 948, jump @1955\n      : @929 [@dyn 474] (gas: 1)\n 26365: jump @931 if a1 == 0\n      : @930 (gas: 1)\n 26368: jump @1603\n      : @931 (gas: 10)\n 26371: a1 = u64 [s1 + 0x180]\n 26375: u64 [s1 + 0x1c0] = a1\n 26379: a1 = u64 [s1 + 0x188]\n 26383: u64 [s1 + 0x1c8] = a1\n 26387: a1 = u64 [s1 + 0x190]\n 26391: u64 [s1 + 0x1d0] = a1\n 26395: a1 = s1 + 0x1c0\n 26399: a2 = u64 [s1 + 0x198]\n 26403: u64 [s1 + 0x1d8] = a2\n 26407: ra = 950, jump @19\n      : @932 [@dyn 475] (gas: 14)\n 26413: t0 = u64 [s1 + 0x1b8]\n 26417: t0 = t0 + 0x1\n 26420: a0 = t0 <u 0x1\n 26423: t1 = u64 [s1 + 0x1b0]\n 26427: t1 = t1 + a0\n 26430: a0 = t0 | t1\n 26433: a0 = a0 <u 0x1\n 26436: a1 = u64 [s1 + 0x1a0]\n 26440: a0 = a0 + a1\n 26443: a1 = a0 <u a1\n 26446: a5 = u64 [s1 + 0x1a8]\n 26450: a5 = a5 + a1\n 26453: t2 = a0\n 26455: jump @889\n      : @933 (gas: 6)\n 26458: a0 = a2 | a1\n 26461: a0 = a0 >> 0x20\n 26464: a1 = a1 | a5\n 26467: a1 = a1 << 0x20\n 26470: a0 = a0 | a1\n 26473: jump @935 if a0 == 0\n      : @934 (gas: 1)\n 26476: jump @1603\n      : @935 (gas: 11)\n 26479: u64 [t0 + 1624] = 0\n 26483: u64 [t0 + 1616] = 0\n 26487: u64 [t0 + 1608] = 0\n 26491: a0 = 0x8c379a000000000\n 26501: a1 = s1 + 0x3f80\n 26505: u64 [t0 + 0x660] = a0\n 26509: a0 = t1\n 26511: u64 [s1 + 0x1b0] = t1\n 26515: u64 [s1 + 0x1a8] = a4\n 26519: u64 [s1 + 0x1a0] = t2\n 26523: ra = 952, jump @19\n      : @936 [@dyn 476] (gas: 10)\n 26529: a4 = s1 + 0x100\n 26533: a1 = u64 [a4 + 0xb0]\n 26537: a3 = 0x100000000\n 26547: a0 = 0xfffffffc\n 26557: a0 = a1 <u a0\n 26560: a2 = u64 [a4 + 0xa0]\n 26564: a0 = 0 if a2 != 0\n 26566: a2 = u64 [a4 + 0xa8]\n 26570: a0 = 0 if a2 != 0\n 26572: jump @938 if a0 != 0\n      : @937 (gas: 1)\n 26575: jump @1603\n      : @938 (gas: 9)\n 26578: i32 a0 = a1 + 0x4\n 26581: a2 = s1 + 0x3938\n 26585: u64 [a2 + 1600] = 0\n 26589: u64 [a2 + 1592] = 0\n 26593: u64 [a2 + 1576] = 0x20\n 26598: a1 = s1 + 0x3f60\n 26602: u64 [a2 + 1584] = 0\n 26606: u64 [s1 + 0x1b8] = a3\n 26610: ra = 954, jump @19\n      : @939 [@dyn 477] (gas: 10)\n 26616: a4 = s1 + 0x100\n 26620: a3 = u64 [a4 + 0xa0]\n 26624: a2 = u64 [a4 + 0xa8]\n 26628: a1 = u64 [a4 + 0xb0]\n 26632: a0 = u64 [a4 + 0xb8]\n 26636: a0 = a0 + 0xffffffffffffffdc\n 26639: a0 = a1 <u a0\n 26642: a0 = 0 if a3 != 0\n 26644: a0 = 0 if a2 != 0\n 26646: jump @941 if a0 != 0\n      : @940 (gas: 1)\n 26649: jump @1603\n      : @941 (gas: 8)\n 26652: i32 a0 = a1 + 0x24\n 26655: a4 = s1 + 0x3938\n 26659: u64 [a4 + 1568] = 0\n 26663: u64 [a4 + 1560] = 0\n 26667: u64 [a4 + 1544] = 0x12\n 26672: a1 = s1 + 0x3f40\n 26676: u64 [a4 + 1552] = 0\n 26680: ra = 956, jump @19\n      : @942 [@dyn 478] (gas: 9)\n 26686: a2 = s1 + 0x100\n 26690: a3 = u64 [a2 + 0xb0]\n 26694: a0 = 0xffffffbc\n 26704: a0 = a3 <u a0\n 26707: a1 = u64 [a2 + 0xa0]\n 26711: a0 = 0 if a1 != 0\n 26713: a1 = u64 [a2 + 0xa8]\n 26717: a0 = 0 if a1 != 0\n 26719: jump @944 if a0 != 0\n      : @943 (gas: 1)\n 26722: jump @1603\n      : @944 (gas: 12)\n 26725: i32 a0 = a3 + 0x44\n 26728: a1 = u64 [0x20040]\n 26733: a2 = u64 [0x20048]\n 26738: a4 = s1 + 0x3938\n 26742: u64 [a4 + 0x600] = a1\n 26746: u64 [a4 + 0x5f8] = a2\n 26750: a1 = 0x4944000000000000\n 26760: u64 [a4 + 0x5f0] = a1\n 26764: a1 = s1 + 0x3f20\n 26768: u64 [a4 + 1512] = 0\n 26772: ra = 0x500\n 26776: jump @19\n      : @945 (gas: 7)\n 26779: a2 = u64 [s1 + 0x100]\n 26783: a4 = u64 [s1 + 0xd0]\n 26787: a0 = a2 | a4\n 26790: a5 = u64 [s1 + 0xa8]\n 26794: a1 = a3 | a5\n 26797: a0 = a0 | a1\n 26800: jump @1012 if a0 != 0\n      : @946 (gas: 5)\n 26804: u64 [s1 + 416] = 0\n 26808: u64 [s1 + 408] = 0\n 26812: u64 [s1 + 424] = 0\n 26816: u64 [s1 + 432] = 0\n 26820: jump @1016\n      : @947 (gas: 3)\n 26823: a0 = s1 + 0x2de0\n 26827: a1 = 0x40\n 26830: ra = 958, jump @17\n      : @948 [@dyn 479] (gas: 14)\n 26836: a2 = s1 + 0x2938\n 26840: t0 = u64 [a2 + 0x4c0]\n 26844: a1 = a2 + 0x400\n 26848: a5 = u64 [a1 + 0xb8]\n 26852: a4 = u64 [a1 + 0xb0]\n 26856: a0 = u64 [a1 + 0xa8]\n 26860: a3 = a4 | t0\n 26863: a1 = a0 | a5\n 26866: a1 = a1 | a3\n 26869: a1 = a1 >> 0x20\n 26872: a3 = a3 | a5\n 26875: a3 = a3 << 0x20\n 26878: a1 = a1 | a3\n 26881: jump @950 if a1 == 0\n      : @949 (gas: 1)\n 26884: jump @1603\n      : @950 (gas: 10)\n 26887: u64 [a2 + 1184] = 0\n 26891: u64 [a2 + 1176] = 0\n 26895: u64 [a2 + 1168] = 0\n 26899: a1 = s1 + 0x2dc0\n 26903: u64 [a2 + 1160] = 0x20\n 26908: u64 [s1 + 0x1b8] = a0\n 26912: u64 [s1 + 0x1a0] = a4\n 26916: u64 [s1 + 0x1b0] = t0\n 26920: u64 [s1 + 0x1a8] = a5\n 26924: ra = 960, jump @19\n      : @951 [@dyn 480] (gas: 1)\n 26930: t0 = 962, jump @1975\n      : @952 [@dyn 481] (gas: 20)\n 26936: i32 a1 = a1 + 0xfffffffffffff938\n 26940: a1 = a1 + s1\n 26943: u64 [a1 + 0x430] = a2\n 26947: a2 = a1 + 0x400\n 26951: u64 [a2 + 0x28] = a0\n 26954: a0 = u64 [a5 + 0x40]\n 26957: u64 [a2 + 0x60] = a0\n 26960: a0 = u64 [a5 + 0x48]\n 26963: u64 [a2 + 0x58] = a0\n 26966: a0 = u64 [a5 + 0x50]\n 26969: u64 [a2 + 0x50] = a0\n 26972: a0 = u64 [a5 + 0x58]\n 26975: u64 [a2 + 0x48] = a0\n 26978: u64 [a2 + 0x38] = a3\n 26981: a3 = a1\n 26983: a0 = s1 + 0x2da0\n 26987: a1 = s1 + 0x2d80\n 26991: a2 = s1 + 0x2d60\n 26995: u64 [a3 + 0x440] = a4\n 26999: ra = 964, jump @1736\n      : @953 [@dyn 482] (gas: 6)\n 27005: a0 = s1 + 0x2938\n 27009: a1 = u64 [a0 + 0x470]\n 27013: t0 = u64 [a0 + 0x480]\n 27017: t1 = u64 [a0 + 0x468]\n 27021: a3 = u64 [a0 + 0x478]\n 27025: fallthrough\n      : @954 (gas: 22)\n 27026: a0 = u64 [s1 + 0x1a0]\n 27030: a4 = a1 ^ a0\n 27033: a5 = a1 <u a0\n 27036: ra = a0\n 27038: a0 = u64 [s1 + 0x1b8]\n 27042: t2 = t1 <u a0\n 27045: a5 = t2 if a4 == 0\n 27048: a0 = u64 [s1 + 0x1a8]\n 27052: a4 = a3 - a0\n 27055: a3 = a3 <u a0\n 27058: a0 = u64 [s1 + 0x1b0]\n 27062: a2 = t0 - a0\n 27065: a2 = a2 - a3\n 27068: a3 = a4 <u a5\n 27071: a2 = a2 - a3\n 27074: a0 = u64 [s1 + 0x1b8]\n 27078: a4 = a4 - a5\n 27081: a1 = a1 - ra\n 27084: a3 = a1 - t2\n 27087: a1 = t1 - a0\n 27090: a2 = a2 | a3\n 27093: fallthrough\n      : @955 (gas: 7)\n 27094: a3 = a1 | a4\n 27097: a3 = a3 | a2\n 27100: a2 = a2 | a4\n 27103: a3 = a3 >> 0x20\n 27106: a2 = a2 << 0x20\n 27109: a2 = a2 | a3\n 27112: jump @957 if a2 == 0\n      : @956 (gas: 1)\n 27115: jump @1603\n      : @957 (gas: 3)\n 27118: u64 [s1 + 0x1b8] = a1\n 27122: ra = 0x5ca\n 27126: jump @28\n      : @958 (gas: 27)\n 27129: a0 = s1 + 0x5000\n 27133: i32 a0 = a0 + 0xfffffffffffffe40\n 27137: a1 = 0x44\n 27140: ecalli 3 // 'call_data_load'\n 27142: a0 = s1 + 0x4938\n 27146: a2 = a0 + 0x500\n 27150: a1 = u64 [a2 + 0x20]\n 27153: u64 [s1 + 0xf8] = a1\n 27157: a1 = u64 [a2 + 0x18]\n 27160: u64 [s1 + 0xf0] = a1\n 27164: a1 = u64 [a2 + 0x10]\n 27167: u64 [s1 + 0xe8] = a1\n 27171: a0 = u64 [a2 + 0x8]\n 27174: u64 [s1 + 0xe0] = a0\n 27178: a3 = s1 + 0x100\n 27182: a0 = u64 [a3 + 0x20]\n 27185: a2 = s1 + 0x2938\n 27189: u64 [a2 + 0x80] = a0\n 27193: a0 = u64 [a3 + 0x28]\n 27196: u64 [a2 + 0x78] = a0\n 27199: a0 = u64 [a3 + 0x30]\n 27202: u64 [a2 + 0x70] = a0\n 27205: a1 = s1 + 0x29a0\n 27209: a0 = u64 [a3 + 0x38]\n 27212: u64 [a2 + 0x68] = a0\n 27215: a0 = 0\n 27217: ra = 966, jump @19\n      : @959 [@dyn 483] (gas: 9)\n 27223: a0 = s1 + 0x2938\n 27227: u64 [a0 + 96] = 0\n 27230: u64 [a0 + 88] = 0\n 27233: u64 [a0 + 80] = 0\n 27236: a2 = a0\n 27238: a0 = 0x20\n 27241: a1 = s1 + 0x2980\n 27245: u64 [a2 + 72] = 0\n 27248: ra = 968, jump @19\n      : @960 [@dyn 484] (gas: 4)\n 27254: a2 = 0x201ec\n 27259: a0 = i32 [0x201ec]\n 27264: a1 = 0x3f\n 27267: jump @962 if a1 <u a0\n      : @961 (gas: 4)\n 27270: u32 [0x201ec] = 0x40\n 27276: u64 [s1 + 0x190] = a2\n 27280: t0 = 0x3ca\n 27284: jump @1993\n      : @962 (gas: 2)\n 27287: u64 [s1 + 0x190] = a2\n 27291: t0 = 970, jump @1993\n      : @963 [@dyn 485] (gas: 9)\n 27297: a0 = 0x20200\n 27302: i32 a0 = a0 + 0\n 27304: i32 a2 = a2 + 0\n 27306: a1 = 0x40\n 27309: u64 [s1 + 0x198] = a0\n 27313: ra = 0x3cc\n 27317: ecalli 8 // 'hash_keccak_256'\n 27319: t0 = 0x3ce\n 27323: jump @1971\n      : @964 [@dyn 486] (gas: 1)\n 27326: t0 = 974, jump @1971\n      : @965 [@dyn 487] (gas: 2)\n 27332: a4 = a3 + 0x2\n 27335: t0 = 976, jump @1960\n      : @966 [@dyn 488] (gas: 7)\n 27341: u64 [a3 + 0x28] = a4\n 27344: u64 [a3 + 0x30] = a5\n 27347: u64 [a3 + 0x38] = a2\n 27350: u64 [a3 + 0x40] = a0\n 27353: a0 = s1 + 0x2960\n 27357: a1 = s1 + 0x4e60\n 27361: ra = 978, jump @21\n      : @967 [@dyn 489] (gas: 14)\n 27367: a0 = s1 + 0x2938\n 27371: a1 = u64 [a0 + 0x30]\n 27374: u64 [s1 + 0x1b8] = a1\n 27378: a1 = u64 [a0 + 0x28]\n 27381: u64 [s1 + 0x1b0] = a1\n 27385: a0 = u32 [a0 + 0x38]\n 27388: u64 [s1 + 0x1a8] = a0\n 27392: a0 = 0x30200\n 27397: u64 [s1 + 0x140] = a0\n 27401: i32 a0 = a0 + 0\n 27403: u64 [s1 + 0xd8] = a0\n 27407: ra = 0x3d4\n 27411: ecalli 5 // 'caller'\n 27413: fallthrough\n      : @968 [@dyn 490] (gas: 3)\n 27414: a5 = s1 + 0x100\n 27418: a2 = u64 [a5 + 0x40]\n 27421: t0 = 982, jump @1936\n      : @969 [@dyn 491] (gas: 1)\n 27427: jump @1051 if a0 != 0\n      : @970 (gas: 4)\n 27431: a0 = u64 [s1 + 0x138]\n 27435: t0 = 0x3d8\n 27439: a2 = s1 + 0x2138\n 27443: fallthrough\n      : @971 [@dyn 492] (gas: 11)\n 27444: a3 = a2 + 0x700\n 27448: u64 [a3 + 0x48] = a0\n 27451: a0 = u64 [s1 + 0x130]\n 27455: u64 [a3 + 0x50] = a0\n 27458: a0 = u64 [s1 + 0x128]\n 27462: u64 [a3 + 0x58] = a0\n 27465: a1 = s1 + 0x2880\n 27469: a0 = u64 [s1 + 0x120]\n 27473: u64 [a3 + 0x60] = a0\n 27476: a0 = 0\n 27478: ra = 986, jump @19\n      : @972 [@dyn 493] (gas: 2)\n 27484: a0 = 0x2138\n 27488: t0 = 988, jump @2027\n      : @973 [@dyn 494] (gas: 4)\n 27494: i32 a1 = a1 + 0xfffffffffffff860\n 27498: a1 = a1 + s1\n 27501: u64 [a2 + 1832] = 0\n 27505: ra = 990, jump @19\n      : @974 [@dyn 495] (gas: 3)\n 27511: a2 = u64 [s1 + 0x190]\n 27515: a0 = i32 [a2]\n 27517: jump @976 if a0 >u 63\n      : @975 (gas: 2)\n 27521: u32 [a2 + 0] = 0x40\n 27524: fallthrough\n      : @976 (gas: 4)\n 27525: a0 = sp + 0xffffffffffffffe0\n 27528: a0 = a0 & 0xffffffffffffffe0\n 27531: u64 [s1 + 0x1b8] = a0\n 27535: t0 = 992, jump @1962\n      : @977 [@dyn 496] (gas: 4)\n 27541: ra = 0x3e2\n 27545: ecalli 8 // 'hash_keccak_256'\n 27547: t0 = 0x3e4\n 27551: jump @1971\n      : @978 [@dyn 497] (gas: 1)\n 27554: t0 = 996, jump @1971\n      : @979 [@dyn 498] (gas: 2)\n 27560: a4 = a3 + 0x4\n 27563: t0 = 998, jump @1960\n      : @980 [@dyn 499] (gas: 7)\n 27569: u64 [a3 + 0x48] = a4\n 27572: u64 [a3 + 0x50] = a5\n 27575: u64 [a3 + 0x58] = a2\n 27578: u64 [a3 + 0x60] = a0\n 27581: a0 = s1 + 0x2840\n 27585: a1 = s1 + 0x4e80\n 27589: ra = 1000, jump @21\n      : @981 [@dyn 500] (gas: 3)\n 27595: a0 = s1 + 0x2138\n 27599: a0 = u8 [a0 + 0x708]\n 27603: jump @1075 if a0 != 0\n      : @982 (gas: 3)\n 27607: a0 = s1 + 0x18c0\n 27611: a1 = 0x40\n 27614: ra = 1002, jump @17\n      : @983 [@dyn 501] (gas: 14)\n 27620: a2 = s1 + 0x1138\n 27624: t0 = u64 [a2 + 0x7a0]\n 27628: a1 = a2 + 0x700\n 27632: a5 = u64 [a1 + 0x98]\n 27636: a4 = u64 [a1 + 0x90]\n 27640: a0 = u64 [a1 + 0x88]\n 27644: a3 = a4 | t0\n 27647: a1 = a0 | a5\n 27650: a1 = a1 | a3\n 27653: a1 = a1 >> 0x20\n 27656: a3 = a3 | a5\n 27659: a3 = a3 << 0x20\n 27662: a1 = a1 | a3\n 27665: jump @985 if a1 == 0\n      : @984 (gas: 1)\n 27668: jump @1603\n      : @985 (gas: 11)\n 27671: u64 [a2 + 1912] = 0\n 27675: u64 [a2 + 1904] = 0\n 27679: u64 [a2 + 1896] = 0\n 27683: a3 = 0x8c379a000000000\n 27693: a1 = s1 + 0x18a0\n 27697: u64 [a2 + 0x780] = a3\n 27701: u64 [s1 + 0x1b8] = a0\n 27705: u64 [s1 + 0x1b0] = a4\n 27709: u64 [s1 + 0x1a0] = t0\n 27713: u64 [s1 + 0x1a8] = a5\n 27717: ra = 1004, jump @19\n      : @986 [@dyn 502] (gas: 6)\n 27723: a5 = s1 + 0x100\n 27727: a1 = u64 [a5 + 0xb8]\n 27731: a0 = u64 [a5 + 0xa8]\n 27735: a3 = u64 [a5 + 0xa0]\n 27739: a3 = a3 | a0\n 27742: t0 = 1006, jump @1948\n      : @987 [@dyn 503] (gas: 1)\n 27748: jump @989 if a0 != 0\n      : @988 (gas: 1)\n 27751: jump @1603\n      : @989 (gas: 4)\n 27754: i32 a0 = a1 + 0x4\n 27757: t0 = 0x3f0\n 27761: a2 = s1 + 0x1138\n 27765: fallthrough\n      : @990 [@dyn 504] (gas: 8)\n 27766: u64 [a2 + 1888] = 0\n 27770: u64 [a2 + 1880] = 0\n 27774: u64 [a2 + 1864] = 0x20\n 27779: a1 = s1 + 0x1880\n 27783: u64 [a2 + 1872] = 0\n 27787: u64 [s1 + 0x1a8] = a3\n 27791: u64 [s1 + 0x1a0] = a4\n 27795: ra = 1010, jump @19\n      : @991 [@dyn 505] (gas: 10)\n 27801: a2 = s1 + 0x100\n 27805: a4 = u64 [a2 + 0xa8]\n 27809: a3 = u64 [a2 + 0xb0]\n 27813: a1 = u64 [a2 + 0xb8]\n 27817: a0 = u64 [a2 + 0xa0]\n 27821: a0 = a0 + 0xffffffffffffffdc\n 27824: a0 = a1 <u a0\n 27827: a0 = 0 if a3 != 0\n 27829: a0 = 0 if a4 != 0\n 27831: jump @993 if a0 != 0\n      : @992 (gas: 1)\n 27834: jump @1603\n      : @993 (gas: 4)\n 27837: i32 a0 = a1 + 0x24\n 27840: t0 = 0x3f4\n 27844: a2 = s1 + 0x1138\n 27848: fallthrough\n      : @994 [@dyn 506] (gas: 6)\n 27849: u64 [a2 + 1856] = 0\n 27853: u64 [a2 + 1848] = 0\n 27857: u64 [a2 + 1832] = 0x1c\n 27862: a1 = s1 + 0x1860\n 27866: u64 [a2 + 1840] = 0\n 27870: ra = 1014, jump @19\n      : @995 [@dyn 507] (gas: 9)\n 27876: a2 = s1 + 0x100\n 27880: a3 = u64 [a2 + 0xb8]\n 27884: a0 = 0xffffffbc\n 27894: a0 = a3 <u a0\n 27897: a1 = u64 [a2 + 0xb0]\n 27901: a0 = 0 if a1 != 0\n 27903: a1 = u64 [a2 + 0xa8]\n 27907: a0 = 0 if a1 != 0\n 27909: jump @997 if a0 != 0\n      : @996 (gas: 1)\n 27912: jump @1603\n      : @997 (gas: 14)\n 27915: i32 a0 = a3 + 0x44\n 27918: a1 = u64 [0x20130]\n 27923: a2 = u64 [0x20138]\n 27928: a3 = u64 [0x20140]\n 27933: a4 = s1 + 0x1138\n 27937: a5 = a4 + 0x700\n 27941: u64 [a5 + 0x20] = a1\n 27944: u64 [a5 + 0x18] = a2\n 27947: u64 [a5 + 0x10] = a3\n 27950: a2 = 0x7669657700000000\n 27960: a1 = s1 + 0x1840\n 27964: u64 [a5 + 0x8] = a2\n 27967: ra = 0x64e\n 27971: jump @19\n      : @998 (gas: 11)\n 27974: ra = t0\n 27976: a4 = u64 [s1 + 0x130]\n 27980: a5 = u64 [s1 + 0x100]\n 27984: a4 = a4 ^ a5\n 27987: t1 = u64 [s1 + 0xd0]\n 27991: a4 = a4 | t1\n 27994: t0 = u64 [s1 + 0xd8]\n 27998: t2 = u64 [s1 + 0xa8]\n 28002: a5 = t0 | t2\n 28005: a4 = a4 | a5\n 28008: jump @1011 if a4 == 0\n      : @999 (gas: 13)\n 28012: a4 = u64 [s1 + 0x1b8]\n 28016: a4 = a1 <u a4\n 28019: a3 = a3 + a4\n 28022: t0 = a3 ^ ra\n 28025: a5 = a3 <u ra\n 28028: a5 = a4 if t0 == 0\n 28031: a5 = a5 + a2\n 28034: t0 = a5 <u a2\n 28037: a4 = u64 [s1 + 0x1b0]\n 28041: a2 = a2 <u a4\n 28044: a0 = a0 + a2\n 28047: a0 = a0 + t0\n 28050: t0 = 1016, jump @1979\n      : @1000 [@dyn 508] (gas: 1)\n 28056: jump @1002 if a0 == 0\n      : @1001 (gas: 1)\n 28059: jump @1603\n      : @1002 (gas: 3)\n 28062: a0 = s1 + 0x7ff\n 28066: a0 = a0 + 0x701\n 28070: ra = 1018, jump @17\n      : @1003 [@dyn 509] (gas: 13)\n 28076: a0 = s1 + 0x7ff\n 28080: a0 = a0 + 0x139\n 28084: a2 = a0 + 0x500\n 28088: a1 = u64 [a2 + 0xe0]\n 28092: u64 [s1 + 0x1b0] = a1\n 28096: a1 = u64 [a2 + 0xd8]\n 28100: u64 [s1 + 0x1a8] = a1\n 28104: a1 = u64 [a2 + 0xd0]\n 28108: u64 [s1 + 0x1a0] = a1\n 28112: a0 = u64 [a2 + 0xc8]\n 28116: u64 [s1 + 0x198] = a0\n 28120: a0 = u64 [s1 + 0x100]\n 28124: t0 = 1020, jump @1987\n      : @1004 [@dyn 510] (gas: 1)\n 28130: ra = 1022, jump @2046\n      : @1005 [@dyn 511] (gas: 1)\n 28136: t0 = 1024, jump @2014\n      : @1006 [@dyn 512] (gas: 1)\n 28142: ra = 1026, jump @2041\n      : @1007 [@dyn 513] (gas: 1)\n 28148: t0 = 1028, jump @1969\n      : @1008 [@dyn 514] (gas: 1)\n 28154: ra = 1030, jump @2041\n      : @1009 [@dyn 515] (gas: 29)\n 28160: a4 = u64 [s1 + 0x1b8]\n 28164: a2 = a4 <u 0x80\n 28168: a3 = u64 [s1 + 0x170]\n 28172: a1 = a3 if a2 != 0\n 28175: a5 = u64 [s1 + 0x178]\n 28179: a3 = u64 [s1 + 0x188]\n 28183: a3 = a3 | a5\n 28186: a3 = a0 if a2 == 0\n 28189: a1 = 0xffffffffffffffff if a4 == 0\n 28192: a3 = 0xffffffffffffffff if a4 == 0\n 28195: a4 = u64 [s1 + 0x180]\n 28199: a4 = 0 if a2 == 0\n 28201: a5 = 0 if a2 == 0\n 28203: a0 = u64 [s1 + 0x198]\n 28207: a0 = a0 & ~a3\n 28210: a2 = u64 [s1 + 0x1a0]\n 28214: a1 = a2 & ~a1\n 28217: a2 = u64 [s1 + 0x1a8]\n 28221: a2 = a2 & ~a5\n 28224: a3 = u64 [s1 + 0x1b0]\n 28228: a3 = a3 & ~a4\n 28231: a4 = s1 + 0x4938\n 28235: u64 [a4 + 0x40] = a3\n 28238: u64 [a4 + 0x38] = a2\n 28241: u64 [a4 + 0x30] = a1\n 28244: u64 [a4 + 0x28] = a0\n 28247: a1 = s1 + 0x4960\n 28251: a0 = u64 [s1 + 0x190]\n 28255: ra = 1032, jump @23\n      : @1010 [@dyn 516] (gas: 4)\n 28261: t0 = u64 [s1 + 0xd8]\n 28265: t1 = u64 [s1 + 0xd0]\n 28269: t2 = u64 [s1 + 0xa8]\n 28273: fallthrough\n      : @1011 (gas: 19)\n 28274: a0 = t1 >> 0x3f\n 28277: a1 = t2 << 0x1\n 28280: a0 = a0 | a1\n 28283: a1 = t0 >> 0x3f\n 28286: a2 = t1 << 0x1\n 28289: a1 = a1 | a2\n 28292: a4 = u64 [s1 + 0x100]\n 28296: a2 = a4 >> 0x3f\n 28299: a3 = t0 << 0x1\n 28302: a2 = a2 | a3\n 28305: a3 = a4 << 0x1\n 28308: a3 = a3 + 0x1\n 28311: a4 = s1 + 0x4938\n 28315: u64 [a4 + 0x48] = a3\n 28318: u64 [a4 + 0x50] = a2\n 28321: u64 [a4 + 0x58] = a1\n 28324: u64 [a4 + 0x60] = a0\n 28327: a0 = 0x4980\n 28331: jump @1023\n      : @1012 (gas: 11)\n 28334: a4 = s1 + 0x100\n 28338: a0 = u64 [a4 + 0x40]\n 28341: a1 = u64 [a4 + 0x38]\n 28344: a0 = a0 | a1\n 28347: a1 = 0xffffffe0\n 28357: a2 = u64 [a4 + 0x50]\n 28360: a1 = a2 <u a1\n 28363: a3 = u64 [a4 + 0x48]\n 28366: a1 = 0 if a3 != 0\n 28368: a1 = 0 if a0 != 0\n 28370: jump @1014 if a1 != 0\n      : @1013 (gas: 1)\n 28373: jump @1603\n      : @1014 (gas: 4)\n 28376: i32 a1 = a2 + 0x20\n 28379: a0 = s1 + 0x7ff\n 28383: a0 = a0 + 0x741\n 28387: ra = 1034, jump @17\n      : @1015 [@dyn 517] (gas: 16)\n 28393: a5 = u64 [s1 + 0xa8]\n 28397: a4 = u64 [s1 + 0xd0]\n 28401: a3 = u64 [s1 + 0xd8]\n 28405: a0 = s1 + 0x7ff\n 28409: a0 = a0 + 0x139\n 28413: a2 = a0 + 0x600\n 28417: a1 = u64 [a2 + 0x20]\n 28420: u64 [s1 + 0x1b0] = a1\n 28424: a1 = u64 [a2 + 0x18]\n 28427: u64 [s1 + 0x1a8] = a1\n 28431: a1 = u64 [a2 + 0x10]\n 28434: u64 [s1 + 0x198] = a1\n 28438: a0 = u64 [a2 + 0x8]\n 28441: u64 [s1 + 0x1a0] = a0\n 28445: a2 = u64 [s1 + 0x100]\n 28449: fallthrough\n      : @1016 (gas: 16)\n 28450: a0 = a3 >> 0x3f\n 28453: a1 = a4 << 0x1\n 28456: a0 = a0 | a1\n 28459: u64 [s1 + 0x190] = a0\n 28463: a0 = a4 >> 0x3f\n 28466: a1 = a5 << 0x1\n 28469: a0 = a0 | a1\n 28472: u64 [s1 + 0x188] = a0\n 28476: a0 = a2 >> 0x3f\n 28479: a1 = a3 << 0x1\n 28482: a0 = a0 | a1\n 28485: u64 [s1 + 0x180] = a0\n 28489: a0 = a2 << 0x1\n 28492: u64 [s1 + 0x178] = a0\n 28496: a1 = a2 << 0x3\n 28499: t0 = 1036, jump @2011\n      : @1017 [@dyn 518] (gas: 1)\n 28505: ra = 1038, jump @2046\n      : @1018 [@dyn 519] (gas: 7)\n 28511: u64 [s1 + 0x158] = a0\n 28515: u64 [s1 + 0x170] = a1\n 28519: a0 = u64 [s1 + 0x100]\n 28523: i32 a2 = a0 << 0x3\n 28526: a0 = 0xffffffffffffffff\n 28529: a1 = 0xffffffffffffffff\n 28532: ra = 1040, jump @2041\n      : @1019 [@dyn 520] (gas: 10)\n 28538: u64 [s1 + 0x168] = a0\n 28542: u64 [s1 + 0x160] = a1\n 28546: a1 = u64 [s1 + 0x158]\n 28550: a0 = a0 | a1\n 28553: u64 [s1 + 0x158] = a0\n 28557: a0 = u64 [s1 + 0x1b8]\n 28561: i32 a2 = a0 + 0xffffffffffffff80\n 28564: a0 = 0xffffffffffffffff\n 28567: a1 = 0xffffffffffffffff\n 28570: ra = 1042, jump @2041\n      : @1020 [@dyn 521] (gas: 7)\n 28576: a4 = u64 [s1 + 0x1b8]\n 28580: a2 = a4 <u 0x80\n 28584: a3 = u64 [s1 + 0x158]\n 28588: a0 = a3 if a2 != 0\n 28591: a5 = u64 [s1 + 0x160]\n 28595: a3 = u64 [s1 + 0x170]\n 28599: t0 = 1044, jump @1995\n      : @1021 [@dyn 522] (gas: 2)\n 28605: a4 = u64 [s1 + 0x168]\n 28609: t0 = 1046, jump @1986\n      : @1022 [@dyn 523] (gas: 16)\n 28615: a5 = s1 + 0x100\n 28619: a4 = u64 [a5 + 0x78]\n 28622: a0 = a0 | a4\n 28625: a4 = u64 [a5 + 0x80]\n 28629: a1 = a1 | a4\n 28632: a4 = u64 [a5 + 0x88]\n 28636: a3 = a3 | a4\n 28639: a4 = u64 [a5 + 0x90]\n 28643: a2 = a2 | a4\n 28646: a4 = s1 + 0x4938\n 28650: u64 [a4 + 0x78] = a2\n 28653: u64 [a4 + 0x80] = a3\n 28657: u64 [a4 + 0x70] = a1\n 28660: u64 [a4 + 0x68] = a0\n 28663: a0 = 0x49a0\n 28667: fallthrough\n      : @1023 (gas: 3)\n 28668: a1 = s1 + a0\n 28671: a0 = u64 [s1 + 0x128]\n 28675: ra = 1048, jump @23\n      : @1024 [@dyn 524] (gas: 46)\n 28681: a0 = sp + 0xffffffffffffffe0\n 28684: a5 = a0 & 0xffffffffffffffe0\n 28687: sp = a5\n 28689: a0 = u64 [s1 + 0x108]\n 28693: a0 = a0 + 0x1\n 28696: a1 = a0 <u 0x1\n 28699: a2 = u64 [s1 + 0x110]\n 28703: a1 = a1 + a2\n 28706: a2 = a0 | a1\n 28709: a2 = a2 <u 0x1\n 28712: a3 = u64 [s1 + 0x120]\n 28716: a2 = a2 + a3\n 28719: a3 = a2 <u a3\n 28722: a4 = u64 [s1 + 0x118]\n 28726: a3 = a3 + a4\n 28729: u64 [s1 + 0x1b8] = a5\n 28733: u64 [a5 + 0x10] = a2\n 28736: u64 [a5 + 0x8] = a1\n 28739: u64 [a5] = a0\n 28741: u64 [a5 + 0x18] = a3\n 28744: a0 = 0x30200\n 28749: u64 [s1 + 0x1b0] = a0\n 28753: i32 a0 = a0 + 0\n 28755: u64 [s1 + 0x190] = a0\n 28759: ecalli 5 // 'caller'\n 28761: a2 = u64 [s1 + 0x1b0]\n 28765: a0 = u64 [a2 + 0x8]\n 28768: a1 = i32 [a2 + 0x10]\n 28771: a2 = u64 [a2]\n 28773: a0 = reverse a0\n 28775: a3 = a0 << 0x20\n 28778: a1 = reverse a1\n 28780: a1 = a1 >> 0x20\n 28783: a1 = a1 | a3\n 28786: u64 [s1 + 0x1a8] = a1\n 28790: a0 = a0 >> 0x20\n 28793: a1 = reverse a2\n 28795: a2 = a1 << 0x20\n 28798: a0 = a0 | a2\n 28801: u64 [s1 + 0x1a0] = a0\n 28805: a1 = a1 >> 0x20\n 28808: u64 [s1 + 0x198] = a1\n 28812: a0 = s1 + 0x7ff\n 28816: a0 = a0 + 0x6e1\n 28820: a1 = u64 [s1 + 0x1b8]\n 28824: ra = 1050, jump @21\n      : @1025 [@dyn 525] (gas: 17)\n 28830: a1 = s1 + 0x7ff\n 28834: a1 = a1 + 0x139\n 28838: a0 = u32 [a1 + 0x5bc]\n 28842: a1 = u64 [a1 + 0x5c0]\n 28846: a0 = a0 << 0x20\n 28849: a2 = u64 [s1 + 0x198]\n 28853: a0 = a0 | a2\n 28856: a2 = s1 + 0x4938\n 28860: u64 [a2 + 0xa0] = a1\n 28864: a1 = u64 [s1 + 0x1a0]\n 28868: u64 [a2 + 0x90] = a1\n 28872: a1 = u64 [s1 + 0x1a8]\n 28876: u64 [a2 + 0x88] = a1\n 28880: u64 [a2 + 0x98] = a0\n 28884: a1 = s1 + 0x49c0\n 28888: a0 = u64 [s1 + 0x1b8]\n 28892: ra = 1052, jump @23\n      : @1026 [@dyn 526] (gas: 6)\n 28898: a0 = sp + 0xffffffffffffffe0\n 28901: a5 = a0 & 0xffffffffffffffe0\n 28904: sp = a5\n 28906: a1 = u64 [s1 + 0x108]\n 28910: a0 = a1 + 0x2\n 28913: t0 = 1054, jump @1965\n      : @1027 [@dyn 527] (gas: 2)\n 28919: a0 = a0 + 0x6c1\n 28923: ra = 1056, jump @21\n      : @1028 [@dyn 528] (gas: 19)\n 28929: a1 = s1 + 0x7ff\n 28933: a1 = a1 + 0x139\n 28937: a0 = u32 [a1 + 0x59c]\n 28941: a1 = u64 [a1 + 0x5a0]\n 28945: a0 = a0 << 0x20\n 28948: a2 = u64 [s1 + 0xc0]\n 28952: a0 = a0 | a2\n 28955: a2 = u64 [s1 + 0xb0]\n 28959: a1 = a1 | a2\n 28962: a2 = u64 [s1 + 0xc8]\n 28966: a3 = s1 + 0x4938\n 28970: u64 [a3 + 0xb0] = a2\n 28974: a2 = u64 [s1 + 0xb8]\n 28978: u64 [a3 + 0xa8] = a2\n 28982: u64 [a3 + 0xc0] = a1\n 28986: u64 [a3 + 0xb8] = a0\n 28990: a1 = s1 + 0x49e0\n 28994: a0 = u64 [s1 + 0x1b8]\n 28998: ra = 1058, jump @23\n      : @1029 [@dyn 529] (gas: 32)\n 29004: a0 = s1 + 0x5000\n 29008: i32 a0 = a0 + 0xfffffffffffffa00\n 29012: ecalli 9 // 'now'\n 29014: a1 = u64 [s1 + 0x108]\n 29018: a0 = a1 + 0x3\n 29021: a1 = a0 <u a1\n 29024: a3 = u64 [s1 + 0x110]\n 29028: a2 = a3 + a1\n 29031: a3 = a2 <u a3\n 29034: a3 = a1 if a1 == 0\n 29037: a1 = u64 [s1 + 0x120]\n 29041: a3 = a3 + a1\n 29044: a1 = a3 <u a1\n 29047: a4 = u64 [s1 + 0x118]\n 29051: a1 = a1 + a4\n 29054: a4 = s1 + 0x4938\n 29058: a5 = a4 + 0x100\n 29062: u64 [a5] = a1\n 29064: a1 = u64 [a4 + 0xd0]\n 29068: u64 [a4 + 0xf8] = a3\n 29072: a3 = u64 [a4 + 0xe0]\n 29076: u64 [a4 + 0xf0] = a2\n 29080: a2 = u64 [a4 + 0xd8]\n 29084: u64 [a4 + 0xe8] = a0\n 29088: a0 = u64 [a4 + 0xc8]\n 29092: u64 [a5 + 0x20] = a3\n 29095: u64 [a5 + 0x18] = a2\n 29098: u64 [a5 + 0x10] = a1\n 29101: u64 [a5 + 0x8] = a0\n 29104: a0 = s1 + 0x4a20\n 29108: a1 = s1 + 0x4a40\n 29112: ra = 1060, jump @23\n      : @1030 [@dyn 530] (gas: 6)\n 29118: a0 = sp + 0xffffffffffffffe0\n 29121: a5 = a0 & 0xffffffffffffffe0\n 29124: sp = a5\n 29126: a1 = u64 [s1 + 0x108]\n 29130: a0 = a1 + 0x4\n 29133: t0 = 1062, jump @1965\n      : @1031 [@dyn 531] (gas: 2)\n 29139: a0 = a0 + 0x6a1\n 29143: ra = 1064, jump @21\n      : @1032 [@dyn 532] (gas: 17)\n 29149: a3 = s1 + 0x7ff\n 29153: a3 = a3 + 0x139\n 29157: a4 = a3 + 0x500\n 29161: a0 = u64 [a4 + 0x70]\n 29164: a1 = u64 [a4 + 0x68]\n 29167: a2 = u64 [a4 + 0x80]\n 29171: a3 = u64 [a4 + 0x78]\n 29174: a1 = a1 & 0xffffffffffff0000\n 29179: a4 = s1 + 0x4938\n 29183: a5 = a4 + 0x100\n 29187: u64 [a5 + 0x40] = a2\n 29190: u64 [a5 + 0x38] = a3\n 29193: u64 [a5 + 0x30] = a0\n 29196: u64 [a5 + 0x28] = a1\n 29199: a1 = s1 + 0x4a60\n 29203: a0 = u64 [s1 + 0x1b8]\n 29207: ra = 1066, jump @23\n      : @1033 [@dyn 533] (gas: 6)\n 29213: a5 = s1 + 0x100\n 29217: a1 = u64 [a5 + 0x8]\n 29220: a0 = a1 + 0x6\n 29223: a1 = a0 <u a1\n 29226: a3 = u64 [a5 + 0x10]\n 29229: t0 = 1068, jump @2010\n      : @1034 [@dyn 534] (gas: 18)\n 29235: a1 = u64 [a5 + 0x20]\n 29238: a3 = a3 + a1\n 29241: a1 = a3 <u a1\n 29244: a4 = u64 [a5 + 0x18]\n 29247: a1 = a1 + a4\n 29250: a4 = s1 + 0x4938\n 29254: a5 = a4 + 0x100\n 29258: u64 [a5 + 0x60] = a1\n 29261: u64 [a5 + 0x58] = a3\n 29264: u64 [a5 + 0x50] = a2\n 29267: u64 [a5 + 0x48] = a0\n 29270: u64 [a4 + 384] = 0\n 29274: u64 [a4 + 376] = 0\n 29278: u64 [a4 + 368] = 0\n 29282: u64 [a4 + 360] = 0\n 29286: a0 = s1 + 0x4a80\n 29290: a1 = s1 + 0x4aa0\n 29294: ra = 1070, jump @23\n      : @1035 [@dyn 535] (gas: 4)\n 29300: a0 = s1 + 0x7ff\n 29304: a0 = a0 + 0x681\n 29308: a1 = 0x40\n 29311: ra = 1072, jump @17\n      : @1036 [@dyn 536] (gas: 15)\n 29317: a2 = s1 + 0x7ff\n 29321: a2 = a2 + 0x139\n 29325: t0 = u64 [a2 + 0x560]\n 29329: a1 = a2 + 0x500\n 29333: a5 = u64 [a1 + 0x58]\n 29336: a4 = u64 [a1 + 0x50]\n 29339: a0 = u64 [a1 + 0x48]\n 29342: a3 = a4 | t0\n 29345: a1 = a0 | a5\n 29348: a1 = a1 | a3\n 29351: a1 = a1 >> 0x20\n 29354: a3 = a3 | a5\n 29357: a3 = a3 << 0x20\n 29360: a1 = a1 | a3\n 29363: jump @1038 if a1 == 0\n      : @1037 (gas: 1)\n 29366: jump @1603\n      : @1038 (gas: 11)\n 29369: u64 [a2 + 1344] = 0\n 29373: u64 [a2 + 1336] = 0\n 29377: u64 [a2 + 1328] = 0\n 29381: a1 = s1 + 0x7ff\n 29385: a1 = a1 + 0x661\n 29389: u64 [a2 + 1320] = 0x20\n 29394: u64 [s1 + 0x1b8] = a0\n 29398: u64 [s1 + 0x198] = a4\n 29402: u64 [s1 + 0x1a8] = t0\n 29406: u64 [s1 + 0x1a0] = a5\n 29410: ra = 1074, jump @19\n      : @1039 [@dyn 537] (gas: 4)\n 29416: a0 = u64 [s1 + 0x190]\n 29420: ra = 0x434\n 29424: ecalli 5 // 'caller'\n 29426: fallthrough\n      : @1040 [@dyn 538] (gas: 13)\n 29427: a0 = u64 [s1 + 0x1b0]\n 29431: a1 = u32 [a0 + 0x10]\n 29434: u64 [s1 + 0x190] = a1\n 29438: a1 = u64 [a0 + 0x8]\n 29441: u64 [s1 + 0x188] = a1\n 29445: a0 = u64 [a0]\n 29447: u64 [s1 + 0x1b0] = a0\n 29451: a0 = u64 [s1 + 0x1b8]\n 29455: a0 = a0 + 0x20\n 29458: a1 = u64 [s1 + 0x1b8]\n 29462: a1 = a0 <u a1\n 29465: a3 = u64 [s1 + 0x198]\n 29469: t0 = 1078, jump @1970\n      : @1041 [@dyn 539] (gas: 23)\n 29475: a1 = s1 + 0x7ff\n 29479: a1 = a1 + 0x139\n 29483: a5 = a1 + 0x400\n 29487: u64 [a5 + 0xd8] = a3\n 29491: u64 [a5 + 0xd0] = a2\n 29495: u64 [a5 + 0xc8] = a0\n 29499: a0 = u64 [s1 + 0x138]\n 29503: u64 [a1 + 0x500] = a0\n 29507: a0 = u64 [s1 + 0x140]\n 29511: u64 [a5 + 0xf8] = a0\n 29515: a0 = u64 [s1 + 0x148]\n 29519: u64 [a5 + 0xf0] = a0\n 29523: a0 = u64 [s1 + 0x150]\n 29527: u64 [a5 + 0xe8] = a0\n 29531: a3 = a1\n 29533: a0 = s1 + 0x7ff\n 29537: a0 = a0 + 0x641\n 29541: a1 = s1 + 0x7ff\n 29545: a1 = a1 + 0x621\n 29549: a2 = s1 + 0x7ff\n 29553: a2 = a2 + 0x601\n 29557: u64 [a3 + 0x4e0] = a4\n 29561: ra = 1080, jump @1707\n      : @1042 [@dyn 540] (gas: 19)\n 29567: ra = u64 [s1 + 0x1b8]\n 29571: a1 = s1 + 0x7ff\n 29575: a1 = a1 + 0x139\n 29579: a0 = u64 [a1 + 0x510]\n 29583: t0 = u64 [a1 + 0x520]\n 29587: t1 = u64 [a1 + 0x508]\n 29591: a3 = u64 [a1 + 0x518]\n 29595: a1 = u64 [s1 + 0x198]\n 29599: a4 = a0 ^ a1\n 29602: a5 = a0 <u a1\n 29605: t2 = a1\n 29607: a1 = t1 <u ra\n 29610: a5 = a1 if a4 == 0\n 29613: a2 = u64 [s1 + 0x1a0]\n 29617: a4 = a3 - a2\n 29620: a3 = a3 <u a2\n 29623: a2 = u64 [s1 + 0x1a8]\n 29627: a2 = t0 - a2\n 29630: t0 = 1082, jump @1989\n      : @1043 [@dyn 541] (gas: 1)\n 29636: jump @1045 if a0 == 0\n      : @1044 (gas: 1)\n 29639: jump @1603\n      : @1045 (gas: 99)\n 29642: a0 = u64 [s1 + 0xc0]\n 29646: a0 = a0 << 0x20\n 29649: a0 = a0 >> 0x20\n 29652: u64 [s1 + 0x1a8] = a0\n 29656: a0 = u64 [s1 + 0x188]\n 29660: a3 = reverse a0\n 29662: a2 = a3 << 0x20\n 29665: a0 = u64 [s1 + 0x190]\n 29669: a4 = reverse a0\n 29671: a4 = a4 >> 0x20\n 29674: t1 = a4 | a2\n 29677: a0 = u64 [s1 + 0x1b0]\n 29681: a4 = reverse a0\n 29683: a5 = a4 << 0x20\n 29686: a3 = a3 >> 0x20\n 29689: t2 = a5 | a3\n 29692: t0 = a4 >> 0x20\n 29695: a0 = u64 [s1 + 0xb8]\n 29699: a4 = s1 + 0x7ff\n 29703: a4 = a4 + 0x139\n 29707: u64 [a4 + 0x448] = a0\n 29711: a0 = u64 [s1 + 0xc8]\n 29715: u64 [a4 + 0x450] = a0\n 29719: a5 = u64 [0x20198]\n 29724: a0 = u64 [0x201a0]\n 29729: a2 = u64 [0x201a8]\n 29734: a3 = u64 [0x201b0]\n 29739: u64 [a4 + 0x4c0] = a5\n 29743: a5 = a4 + 0x400\n 29747: u64 [a5 + 0xb8] = a0\n 29751: u64 [a5 + 0xb0] = a2\n 29755: u64 [a5 + 0xa8] = a3\n 29759: u64 [a4 + 1120] = 0\n 29763: u64 [a4 + 1152] = 0\n 29767: a0 = u64 [s1 + 0xe0]\n 29771: u64 [a5 + 0x88] = a0\n 29775: a0 = u64 [s1 + 0xe8]\n 29779: u64 [a5 + 0x90] = a0\n 29783: a0 = u64 [s1 + 0x1a8]\n 29787: u64 [a5 + 0x58] = a0\n 29790: u64 [a4 + 0x478] = t0\n 29794: a0 = u64 [s1 + 0xf0]\n 29798: u64 [a5 + 0x98] = a0\n 29802: u64 [a4 + 0x470] = t2\n 29806: u64 [a4 + 0x468] = t1\n 29810: t0 = a4\n 29812: a2 = s1 + 0x7ff\n 29816: a2 = a2 + 0x5e1\n 29820: a3 = s1 + 0x7ff\n 29824: a3 = a3 + 0x5c1\n 29828: a4 = s1 + 0x7ff\n 29832: a4 = a4 + 0x5a1\n 29836: a5 = s1 + 0x7ff\n 29840: a5 = a5 + 0x581\n 29844: a0 = u64 [s1 + 0xf8]\n 29848: u64 [t0 + 0x4a0] = a0\n 29852: a0 = ra\n 29854: ra = 0x43c\n 29858: sp = sp + 0xfffffffffffffee0\n 29862: u64 [sp + 0x118] = ra\n 29866: u64 [sp + 0x110] = s0\n 29870: u64 [sp + 0x108] = s1\n 29874: s0 = sp + 0x120\n 29878: sp = sp & 0xffffffffffffffe0\n 29881: s1 = u64 [a5]\n 29883: u64 [sp + 0x60] = s1\n 29886: s1 = u64 [a5 + 0x8]\n 29889: u64 [sp + 0x68] = s1\n 29892: s1 = u64 [a5 + 0x10]\n 29895: u64 [sp + 0x70] = s1\n 29898: a5 = u64 [a5 + 0x18]\n 29901: u64 [sp + 0x78] = a5\n 29904: a5 = u64 [a4]\n 29906: u64 [sp + 0x38] = a5\n 29909: a5 = u64 [a4 + 0x8]\n 29912: u64 [sp + 0x40] = a5\n 29915: a5 = u64 [a4 + 0x10]\n 29918: u64 [sp + 0x48] = a5\n 29921: a4 = u64 [a4 + 0x18]\n 29924: u64 [sp + 0x50] = a4\n 29927: t0 = 0xa\n 29930: a4 = u64 [a3]\n 29932: u64 [sp + 0x18] = a4\n 29935: a4 = u64 [a3 + 0x8]\n 29938: u64 [sp + 0x20] = a4\n 29941: a4 = u64 [a3 + 0x10]\n 29944: u64 [sp + 0x28] = a4\n 29947: a3 = u64 [a3 + 0x18]\n 29950: u64 [sp + 0x30] = a3\n 29953: s1 = u64 [a2]\n 29955: a3 = u64 [a2 + 0x8]\n 29958: u64 [sp] = a3\n 29960: a3 = u64 [a2 + 0x10]\n 29963: u64 [sp + 0x8] = a3\n 29966: a2 = u64 [a2 + 0x18]\n 29969: u64 [sp + 0x10] = a2\n 29972: u64 [sp + 0x58] = a1\n 29975: ra = 0xc\n 29978: jump @28\n      : @1046 [@dyn 542] (gas: 4)\n 29981: a0 = s1 + 0x7ff\n 29985: a0 = a0 + 0x561\n 29989: a1 = 0x40\n 29992: ra = 1086, jump @17\n      : @1047 [@dyn 543] (gas: 8)\n 29998: a3 = s1 + 0x7ff\n 30002: a3 = a3 + 0x139\n 30006: a5 = a3 + 0x400\n 30010: a0 = u64 [a5 + 0x40]\n 30013: a1 = u64 [a5 + 0x38]\n 30016: a2 = u64 [a5 + 0x30]\n 30019: a4 = u64 [a5 + 0x28]\n 30022: t0 = 1088, jump @2019\n      : @1048 [@dyn 544] (gas: 1)\n 30028: jump @1050 if a0 == 0\n      : @1049 (gas: 1)\n 30031: jump @1603\n      : @1050 (gas: 15)\n 30034: a0 = u64 [s1 + 0xe0]\n 30038: a2 = a3 + 0x400\n 30042: u64 [a2 + 0x8] = a0\n 30045: a0 = u64 [s1 + 0xe8]\n 30049: u64 [a2 + 0x10] = a0\n 30052: a0 = u64 [s1 + 0xf0]\n 30056: u64 [a2 + 0x18] = a0\n 30059: a1 = s1 + 0x7ff\n 30063: a1 = a1 + 0x541\n 30067: a0 = u64 [s1 + 0xf8]\n 30071: u64 [a2 + 0x20] = a0\n 30074: a0 = a4\n 30076: u64 [s1 + 0x1b8] = a4\n 30080: ra = 0x348\n 30084: jump @19\n      : @1051 (gas: 3)\n 30087: a0 = s1 + 0x2940\n 30091: a1 = 0x40\n 30094: ra = 1090, jump @17\n      : @1052 [@dyn 545] (gas: 13)\n 30100: a2 = s1 + 0x2938\n 30104: t0 = u64 [a2 + 0x20]\n 30107: a5 = u64 [a2 + 0x18]\n 30110: a4 = u64 [a2 + 0x10]\n 30113: a3 = u64 [a2 + 0x8]\n 30116: a0 = a4 | t0\n 30119: a1 = a3 | a5\n 30122: a1 = a1 | a0\n 30125: a1 = a1 >> 0x20\n 30128: a0 = a0 | a5\n 30131: a0 = a0 << 0x20\n 30134: a0 = a0 | a1\n 30137: jump @1054 if a0 == 0\n      : @1053 (gas: 1)\n 30140: jump @1603\n      : @1054 (gas: 13)\n 30143: a0 = s1 + 0x2138\n 30147: u64 [a0 + 2040] = 0\n 30151: u64 [a0 + 2032] = 0\n 30155: u64 [a0 + 2024] = 0\n 30159: a0 = 0x8c379a000000000\n 30169: a1 = s1 + 0x2920\n 30173: u64 [a2] = a0\n 30175: a0 = a3\n 30177: u64 [s1 + 0x1b8] = a3\n 30181: u64 [s1 + 0x1b0] = a4\n 30185: u64 [s1 + 0x1a8] = t0\n 30189: u64 [s1 + 0x1a0] = a5\n 30193: ra = 1092, jump @19\n      : @1055 [@dyn 546] (gas: 1)\n 30199: t0 = 1094, jump @1939\n      : @1056 [@dyn 547] (gas: 1)\n 30205: jump @1058 if a0 != 0\n      : @1057 (gas: 1)\n 30208: jump @1603\n      : @1058 (gas: 4)\n 30211: i32 a0 = a1 + 0x4\n 30214: t0 = 0x448\n 30218: a2 = s1 + 0x2138\n 30222: fallthrough\n      : @1059 [@dyn 548] (gas: 8)\n 30223: u64 [a2 + 2016] = 0\n 30227: u64 [a2 + 2008] = 0\n 30231: u64 [a2 + 1992] = 0x20\n 30236: a1 = s1 + 0x2900\n 30240: u64 [a2 + 2000] = 0\n 30244: u64 [s1 + 0x1a8] = a3\n 30248: u64 [s1 + 0x1a0] = a4\n 30252: ra = 1098, jump @19\n      : @1060 [@dyn 549] (gas: 1)\n 30258: t0 = 1100, jump @1952\n      : @1061 [@dyn 550] (gas: 1)\n 30264: jump @1063 if a0 != 0\n      : @1062 (gas: 1)\n 30267: jump @1603\n      : @1063 (gas: 4)\n 30270: i32 a0 = a1 + 0x24\n 30273: t0 = 0x44e\n 30277: a2 = s1 + 0x2138\n 30281: fallthrough\n      : @1064 [@dyn 551] (gas: 6)\n 30282: u64 [a2 + 1984] = 0\n 30286: u64 [a2 + 1976] = 0\n 30290: u64 [a2 + 1960] = 0x22\n 30295: a1 = s1 + 0x28e0\n 30299: u64 [a2 + 1968] = 0\n 30303: ra = 1104, jump @19\n      : @1065 [@dyn 552] (gas: 1)\n 30309: t0 = 1106, jump @1953\n      : @1066 [@dyn 553] (gas: 1)\n 30315: jump @1068 if a0 != 0\n      : @1067 (gas: 1)\n 30318: jump @1603\n      : @1068 (gas: 14)\n 30321: i32 a0 = a1 + 0x44\n 30324: a1 = u64 [0x20070]\n 30329: u64 [s1 + 0x1a0] = a2\n 30333: a4 = s1 + 0x2138\n 30337: a5 = a4 + 0x700\n 30341: u64 [a5 + 0xa0] = a1\n 30345: a1 = u64 [0x20078]\n 30350: a2 = u64 [0x20080]\n 30355: a3 = u64 [0x20088]\n 30360: u64 [a5 + 0x98] = a1\n 30364: u64 [a5 + 0x90] = a2\n 30368: a1 = s1 + 0x28c0\n 30372: u64 [a5 + 0x88] = a3\n 30376: ra = 1108, jump @19\n      : @1069 [@dyn 554] (gas: 1)\n 30382: t0 = 1110, jump @1951\n      : @1070 [@dyn 555] (gas: 1)\n 30388: jump @1072 if a0 != 0\n      : @1071 (gas: 1)\n 30391: jump @1603\n      : @1072 (gas: 9)\n 30394: i32 a0 = a2 + 0x64\n 30397: a3 = s1 + 0x2138\n 30401: u64 [a3 + 1912] = 0\n 30405: u64 [a3 + 1904] = 0\n 30409: a1 = 0x6f6e000000000000\n 30419: u64 [a3 + 0x780] = a1\n 30423: a1 = s1 + 0x28a0\n 30427: u64 [a3 + 1896] = 0\n 30431: ra = 1112, jump @19\n      : @1073 [@dyn 556] (gas: 3)\n 30437: a1 = 0x84\n 30441: a0 = u64 [s1 + 0x1b8]\n 30445: ra = 1114, jump @28\n      : @1074 [@dyn 557] (gas: 5)\n 30451: i32 a1 = a0 + 0\n 30453: a0 = 0x1\n 30456: a2 = 0x84\n 30460: ecalli 13 // 'seal_return'\n 30462: fallthrough\n      : @1075 (gas: 3)\n 30463: a0 = s1 + 0x2820\n 30467: a1 = u64 [s1 + 0x118]\n 30471: ra = 1116, jump @17\n      : @1076 [@dyn 558] (gas: 2)\n 30477: a0 = 0x2000\n 30481: t0 = 1118, jump @2002\n      : @1077 [@dyn 559] (gas: 1)\n 30487: jump @1124 if a0 != 0\n      : @1078 (gas: 3)\n 30491: a0 = s1 + 0x1960\n 30495: a1 = 0x40\n 30498: ra = 1120, jump @17\n      : @1079 [@dyn 560] (gas: 13)\n 30504: a4 = s1 + 0x1938\n 30508: t0 = u64 [a4 + 0x40]\n 30511: a5 = u64 [a4 + 0x38]\n 30514: a3 = u64 [a4 + 0x30]\n 30517: a0 = u64 [a4 + 0x28]\n 30520: a2 = a3 | t0\n 30523: a1 = a0 | a5\n 30526: a1 = a1 | a2\n 30529: a1 = a1 >> 0x20\n 30532: a2 = a2 | a5\n 30535: a2 = a2 << 0x20\n 30538: a1 = a1 | a2\n 30541: jump @1081 if a1 == 0\n      : @1080 (gas: 1)\n 30544: jump @1603\n      : @1081 (gas: 11)\n 30547: u64 [a4 + 24] = 0\n 30550: u64 [a4 + 16] = 0\n 30553: u64 [a4 + 8] = 0\n 30556: a2 = 0x8c379a000000000\n 30566: a1 = s1 + 0x1940\n 30570: u64 [a4 + 0x20] = a2\n 30573: u64 [s1 + 0x1b8] = a0\n 30577: u64 [s1 + 0x1b0] = a3\n 30581: u64 [s1 + 0x1a8] = t0\n 30585: u64 [s1 + 0x1a0] = a5\n 30589: ra = 1122, jump @19\n      : @1082 [@dyn 561] (gas: 1)\n 30595: t0 = 1124, jump @1939\n      : @1083 [@dyn 562] (gas: 1)\n 30601: jump @1085 if a0 != 0\n      : @1084 (gas: 1)\n 30604: jump @1603\n      : @1085 (gas: 4)\n 30607: i32 a0 = a1 + 0x4\n 30610: t0 = 0x466\n 30614: a2 = s1 + 0x1938\n 30618: fallthrough\n      : @1086 [@dyn 563] (gas: 8)\n 30619: u64 [a2 + 0] = 0\n 30621: u64 [a2 + 4294967288] = 0\n 30624: u64 [a2 + 4294967272] = 0x20\n 30628: a1 = s1 + 0x1920\n 30632: u64 [a2 + 4294967280] = 0\n 30635: u64 [s1 + 0x1a8] = a3\n 30639: u64 [s1 + 0x1a0] = a4\n 30643: ra = 1128, jump @19\n      : @1087 [@dyn 564] (gas: 10)\n 30649: a4 = s1 + 0x100\n 30653: a3 = u64 [a4 + 0xa8]\n 30657: a2 = u64 [a4 + 0xb0]\n 30661: a1 = u64 [a4 + 0xb8]\n 30665: a0 = u64 [a4 + 0xa0]\n 30669: a0 = a0 + 0xffffffffffffffdc\n 30672: a0 = a1 <u a0\n 30675: a0 = 0 if a2 != 0\n 30677: a0 = 0 if a3 != 0\n 30679: jump @1089 if a0 != 0\n      : @1088 (gas: 1)\n 30682: jump @1603\n      : @1089 (gas: 8)\n 30685: i32 a0 = a1 + 0x24\n 30688: a4 = s1 + 0x1138\n 30692: u64 [a4 + 2016] = 0\n 30696: u64 [a4 + 2008] = 0\n 30700: u64 [a4 + 1992] = 0x11\n 30705: a1 = s1 + 0x1900\n 30709: u64 [a4 + 2000] = 0\n 30713: ra = 1130, jump @19\n      : @1090 [@dyn 565] (gas: 9)\n 30719: a3 = s1 + 0x100\n 30723: a2 = u64 [a3 + 0xb8]\n 30727: a0 = 0xffffffbc\n 30737: a0 = a2 <u a0\n 30740: a1 = u64 [a3 + 0xb0]\n 30744: a0 = 0 if a1 != 0\n 30746: a1 = u64 [a3 + 0xa8]\n 30750: a0 = 0 if a1 != 0\n 30752: jump @1092 if a0 != 0\n      : @1091 (gas: 1)\n 30755: jump @1603\n      : @1092 (gas: 13)\n 30758: i32 a0 = a2 + 0x44\n 30761: a1 = u64 [0x20120]\n 30766: a2 = u64 [0x20128]\n 30771: a3 = s1 + 0x1138\n 30775: a4 = a3 + 0x700\n 30779: u64 [a4 + 0xc0] = a1\n 30783: u64 [a4 + 0xb8] = a2\n 30787: a1 = 0x6400000000000000\n 30797: u64 [a4 + 0xb0] = a1\n 30801: a1 = s1 + 0x18e0\n 30805: u64 [a3 + 1960] = 0\n 30809: ra = 0x64e\n 30813: jump @19\n      : @1093 (gas: 4)\n 30816: a0 = s1 + 0x7ff\n 30820: a0 = a0 + 0x141\n 30824: a1 = 0x40\n 30827: ra = 1132, jump @17\n      : @1094 [@dyn 566] (gas: 14)\n 30833: a2 = s1 + 0x7ff\n 30837: a2 = a2 + 0x139\n 30841: t0 = u64 [a2 + 0x20]\n 30844: a5 = u64 [a2 + 0x18]\n 30847: a4 = u64 [a2 + 0x10]\n 30850: a0 = u64 [a2 + 0x8]\n 30853: a3 = a4 | t0\n 30856: a1 = a0 | a5\n 30859: a1 = a1 | a3\n 30862: a1 = a1 >> 0x20\n 30865: a3 = a3 | a5\n 30868: a3 = a3 << 0x20\n 30871: a1 = a1 | a3\n 30874: jump @1096 if a1 == 0\n      : @1095 (gas: 1)\n 30877: jump @1603\n      : @1096 (gas: 13)\n 30880: u64 [a2 + 0] = 0\n 30882: u64 [a2 + 4294967288] = 0\n 30885: a1 = s1 + 0x1000\n 30889: u64 [a1 + 4294965544] = 0\n 30893: a1 = s1 + 0x7ff\n 30897: a1 = a1 + 0x121\n 30901: a3 = s1 + 0x1000\n 30905: u64 [a3 + 4294965536] = 0xa0\n 30911: u64 [s1 + 0x130] = a0\n 30915: u64 [s1 + 0x128] = a4\n 30919: u64 [s1 + 0x118] = t0\n 30923: u64 [s1 + 0x120] = a5\n 30927: ra = 1134, jump @19\n      : @1097 [@dyn 567] (gas: 42)\n 30933: a0 = u64 [s1 + 0x130]\n 30937: a0 = a0 + 0xa0\n 30941: a1 = u64 [s1 + 0x130]\n 30945: a1 = a0 <u a1\n 30948: a2 = u64 [s1 + 0x128]\n 30952: a2 = a2 + a1\n 30955: a3 = u64 [s1 + 0x128]\n 30959: a3 = a2 <u a3\n 30962: a3 = a1 if a1 == 0\n 30965: a1 = u64 [s1 + 0x120]\n 30969: a3 = a3 + a1\n 30972: a1 = u64 [s1 + 0x120]\n 30976: a1 = a3 <u a1\n 30979: a4 = u64 [s1 + 0x118]\n 30983: a4 = a4 + a1\n 30986: a1 = s1 + 0x1000\n 30990: u64 [a1 + 0xfffffffffffff8c8] = a2\n 30994: a1 = s1 + 0x1000\n 30998: u64 [a1 + 0xfffffffffffff8c0] = a0\n 31002: a0 = u64 [s1 + 0x160]\n 31006: a1 = s1 + 0x1000\n 31010: u64 [a1 + 0xfffffffffffff8f8] = a0\n 31014: a0 = u64 [s1 + 0x168]\n 31018: a1 = s1 + 0x1000\n 31022: u64 [a1 + 0xfffffffffffff8f0] = a0\n 31026: a0 = u64 [s1 + 0x170]\n 31030: a1 = s1 + 0x1000\n 31034: u64 [a1 + 0xfffffffffffff8e8] = a0\n 31038: a0 = u64 [s1 + 0x178]\n 31042: a1 = s1 + 0x1000\n 31046: u64 [a1 + 0xfffffffffffff8e0] = a0\n 31050: a0 = s1 + 0x1000\n 31054: u64 [a0 + 0xfffffffffffff8d0] = a3\n 31058: a0 = s1 + 0x7ff\n 31062: a0 = a0 + 0x101\n 31066: a1 = s1 + 0x7ff\n 31070: a1 = a1 + 0xe1\n 31074: a2 = s1 + 0x7ff\n 31078: a2 = a2 + 0xc1\n 31082: a3 = s1 + 0x1000\n 31086: u64 [a3 + 0xfffffffffffff8d8] = a4\n 31090: ra = 1136, jump @1722\n      : @1098 [@dyn 568] (gas: 11)\n 31096: t2 = u64 [s1 + 0x120]\n 31100: t1 = u64 [s1 + 0x118]\n 31104: a1 = u64 [s1 + 0x128]\n 31108: a5 = u64 [s1 + 0x130]\n 31112: a2 = t2 | t1\n 31115: a3 = 0x100000000\n 31125: a0 = 0xffffffe0\n 31135: a0 = a5 <u a0\n 31138: a0 = 0 if a1 != 0\n 31140: a0 = 0 if a2 != 0\n 31142: jump @1100 if a0 != 0\n      : @1099 (gas: 1)\n 31145: jump @1603\n      : @1100 (gas: 45)\n 31148: a0 = s1 + 0x1000\n 31152: ra = u64 [a0 + 0xfffffffffffff900]\n 31156: u64 [s1 + 0x1b8] = ra\n 31160: a0 = s1 + 0x1000\n 31164: a4 = u64 [a0 + 0xfffffffffffff908]\n 31168: a0 = s1 + 0x1000\n 31172: t0 = u64 [a0 + 0xfffffffffffff918]\n 31176: u64 [s1 + 0x1a0] = t0\n 31180: a0 = s1 + 0x1000\n 31184: a0 = u64 [a0 + 0xfffffffffffff910]\n 31188: u64 [s1 + 0x1b0] = a0\n 31192: a0 = ra <u a5\n 31195: u64 [s1 + 0x190] = a0\n 31199: u64 [s1 + 0x1a8] = a3\n 31203: ra = a4\n 31205: a3 = a4 ^ a1\n 31208: u64 [s1 + 0x110] = a2\n 31212: a2 = a4 <u a1\n 31215: u64 [s1 + 0x198] = a4\n 31219: a2 = a0 if a3 == 0\n 31222: a3 = u64 [s1 + 0x1b0]\n 31226: a0 = a3 - t2\n 31229: a3 = a3 <u t2\n 31232: a4 = t0 - t1\n 31235: a4 = a4 - a3\n 31238: a3 = a0 <u a2\n 31241: t1 = a4 - a3\n 31244: a4 = a0 - a2\n 31247: a2 = ra - a1\n 31250: a0 = u64 [s1 + 0x190]\n 31254: a2 = a2 - a0\n 31257: a3 = u64 [s1 + 0x1b8]\n 31261: a3 = a3 - a5\n 31264: i32 a0 = a5 + 0x20\n 31267: a1 = s1 + 0x1000\n 31271: u64 [a1 + 0xfffffffffffff8a0] = a3\n 31275: a1 = s1 + 0x1000\n 31279: u64 [a1 + 0xfffffffffffff8a8] = a2\n 31283: a1 = s1 + 0x1000\n 31287: u64 [a1 + 0xfffffffffffff8b0] = a4\n 31291: a1 = s1 + 0x7ff\n 31295: a1 = a1 + 0xa1\n 31299: a2 = s1 + 0x1000\n 31303: u64 [a2 + 0xfffffffffffff8b8] = t1\n 31307: ra = 1138, jump @19\n      : @1101 [@dyn 569] (gas: 31)\n 31313: a0 = u64 [s1 + 0x1a0]\n 31317: a1 = s1 + 0x1000\n 31321: u64 [a1 + 0xfffffffffffff858] = a0\n 31325: a0 = u64 [s1 + 0x1b0]\n 31329: a1 = s1 + 0x1000\n 31333: u64 [a1 + 0xfffffffffffff850] = a0\n 31337: a0 = u64 [s1 + 0x198]\n 31341: a1 = s1 + 0x1000\n 31345: u64 [a1 + 0xfffffffffffff848] = a0\n 31349: a0 = u64 [s1 + 0x1b8]\n 31353: a1 = s1 + 0x1000\n 31357: u64 [a1 + 0xfffffffffffff840] = a0\n 31361: a0 = u64 [s1 + 0x90]\n 31365: a1 = s1 + 0x1000\n 31369: u64 [a1 + 0xfffffffffffff878] = a0\n 31373: a0 = u64 [s1 + 0x98]\n 31377: a1 = s1 + 0x1000\n 31381: u64 [a1 + 0xfffffffffffff870] = a0\n 31385: a0 = u64 [s1 + 0xa0]\n 31389: a1 = s1 + 0x1000\n 31393: u64 [a1 + 0xfffffffffffff868] = a0\n 31397: a0 = s1 + 0x7ff\n 31401: a0 = a0 + 0x81\n 31405: a1 = s1 + 0x7ff\n 31409: a1 = a1 + 0x61\n 31412: a2 = s1 + 0x7ff\n 31416: a2 = a2 + 0x41\n 31419: a3 = u64 [s1 + 0xa8]\n 31423: a4 = s1 + 0x1000\n 31427: u64 [a4 + 0xfffffffffffff860] = a3\n 31431: ra = 1140, jump @1736\n      : @1102 [@dyn 570] (gas: 10)\n 31437: a3 = s1 + 0x100\n 31441: a2 = u64 [a3 + 0x10]\n 31444: a1 = u64 [a3 + 0x28]\n 31447: a5 = u64 [a3 + 0x30]\n 31450: a0 = u64 [a3 + 0xa8]\n 31454: a0 = a0 + 0xffffffffffffffc0\n 31457: a0 = a5 <u a0\n 31460: a0 = 0 if a1 != 0\n 31462: a0 = 0 if a2 != 0\n 31464: jump @1104 if a0 != 0\n      : @1103 (gas: 1)\n 31467: jump @1603\n      : @1104 (gas: 43)\n 31470: a0 = s1 + 0x1000\n 31474: a0 = u64 [a0 + 0xfffffffffffff880]\n 31478: a2 = s1 + 0x1000\n 31482: a3 = u64 [a2 + 0xfffffffffffff888]\n 31486: a2 = s1 + 0x1000\n 31490: t1 = u64 [a2 + 0xfffffffffffff898]\n 31494: u64 [s1 + 0x1b0] = t1\n 31498: a2 = s1 + 0x1000\n 31502: a4 = u64 [a2 + 0xfffffffffffff890]\n 31506: u64 [s1 + 0x1b8] = a4\n 31510: t0 = a0 <u a5\n 31513: t2 = a0\n 31515: u64 [s1 + 0x1a0] = a0\n 31519: a0 = a3\n 31521: a3 = a3 ^ a1\n 31524: a2 = a0 <u a1\n 31527: ra = a0\n 31529: u64 [s1 + 0x1a8] = a0\n 31533: a2 = t0 if a3 == 0\n 31536: a3 = u64 [s1 + 0x120]\n 31540: a0 = a4 - a3\n 31543: a3 = a4 <u a3\n 31546: a4 = u64 [s1 + 0x118]\n 31550: a4 = t1 - a4\n 31553: a4 = a4 - a3\n 31556: a3 = a0 <u a2\n 31559: t1 = a4 - a3\n 31562: a4 = a0 - a2\n 31565: a2 = ra - a1\n 31568: a2 = a2 - t0\n 31571: a3 = t2 - a5\n 31574: i32 a0 = a5 + 0x40\n 31577: a1 = s1 + 0x1000\n 31581: u64 [a1 + 0xfffffffffffff820] = a3\n 31585: a1 = s1 + 0x1000\n 31589: u64 [a1 + 0xfffffffffffff828] = a2\n 31593: a1 = s1 + 0x1000\n 31597: u64 [a1 + 0xfffffffffffff830] = a4\n 31601: a1 = s1 + 0x7ff\n 31605: a1 = a1 + 0x21\n 31608: a2 = s1 + 0x1000\n 31612: u64 [a2 + 0xfffffffffffff838] = t1\n 31616: ra = 1142, jump @19\n      : @1105 [@dyn 571] (gas: 22)\n 31622: a0 = u64 [s1 + 0x1b0]\n 31626: a4 = s1 + 0x700\n 31630: u64 [a4 + 0xd8] = a0\n 31634: a0 = u64 [s1 + 0x1b8]\n 31638: u64 [a4 + 0xd0] = a0\n 31642: a0 = u64 [s1 + 0x1a8]\n 31646: u64 [a4 + 0xc8] = a0\n 31650: a0 = u64 [s1 + 0x1a0]\n 31654: u64 [a4 + 0xc0] = a0\n 31658: a0 = u64 [s1 + 0x140]\n 31662: u64 [a4 + 0xf8] = a0\n 31666: a0 = u64 [s1 + 0x148]\n 31670: u64 [a4 + 0xf0] = a0\n 31674: a0 = u64 [s1 + 0x150]\n 31678: u64 [a4 + 0xe8] = a0\n 31682: a0 = s1 + 0x7ff\n 31686: a0 = a0 + 0x1\n 31689: a1 = s1 + 0x7e0\n 31693: a2 = s1 + 0x7c0\n 31697: a3 = u64 [s1 + 0x158]\n 31701: u64 [a4 + 0xe0] = a3\n 31705: ra = 1144, jump @1722\n      : @1106 [@dyn 572] (gas: 9)\n 31711: a3 = s1 + 0x100\n 31715: a1 = u64 [a3 + 0x28]\n 31718: a5 = u64 [a3 + 0x30]\n 31721: a0 = 0xffffffa0\n 31731: a0 = a5 <u a0\n 31734: a0 = 0 if a1 != 0\n 31736: a2 = u64 [a3 + 0x10]\n 31739: a0 = 0 if a2 != 0\n 31741: jump @1108 if a0 != 0\n      : @1107 (gas: 1)\n 31744: jump @1603\n      : @1108 (gas: 38)\n 31747: a0 = s1 + 0x1000\n 31751: a2 = u64 [a0 + 0xfffffffffffff800]\n 31755: a0 = s1 + 0x1000\n 31759: a0 = u64 [a0 + 0xfffffffffffff808]\n 31763: a3 = s1 + 0x1000\n 31767: t1 = u64 [a3 + 0xfffffffffffff818]\n 31771: u64 [s1 + 0x1a8] = t1\n 31775: a3 = s1 + 0x1000\n 31779: a4 = u64 [a3 + 0xfffffffffffff810]\n 31783: u64 [s1 + 0x1b0] = a4\n 31787: t0 = a2 <u a5\n 31790: t2 = a2\n 31792: u64 [s1 + 0x198] = a2\n 31796: a3 = a0 ^ a1\n 31799: a2 = a0 <u a1\n 31802: ra = a0\n 31804: u64 [s1 + 0x1b8] = a0\n 31808: a2 = t0 if a3 == 0\n 31811: a3 = u64 [s1 + 0x120]\n 31815: a0 = a4 - a3\n 31818: a3 = a4 <u a3\n 31821: a4 = u64 [s1 + 0x118]\n 31825: a4 = t1 - a4\n 31828: a4 = a4 - a3\n 31831: a3 = a0 <u a2\n 31834: t1 = a4 - a3\n 31837: a4 = a0 - a2\n 31840: a2 = ra - a1\n 31843: a2 = a2 - t0\n 31846: a3 = t2 - a5\n 31849: i32 a0 = a5 + 0x60\n 31852: a1 = s1 + 0x700\n 31856: u64 [a1 + 0xa0] = a3\n 31860: u64 [a1 + 0xa8] = a2\n 31864: u64 [a1 + 0xb0] = a4\n 31868: a1 = s1 + 0x7a0\n 31872: u64 [s1 + 0x7b8] = t1\n 31876: ra = 1146, jump @19\n      : @1109 [@dyn 573] (gas: 3)\n 31882: a0 = s1 + 0x780\n 31886: a1 = u64 [s1 + 0xc8]\n 31890: ra = 1148, jump @17\n      : @1110 [@dyn 574] (gas: 13)\n 31896: a5 = s1 + 0x100\n 31900: a0 = u64 [a5 + 0x98]\n 31904: a3 = u64 [a5 + 0xb0]\n 31908: a2 = a0 | a3\n 31911: a1 = u64 [a5 + 0xa8]\n 31915: a4 = u64 [a5 + 0xb8]\n 31919: a1 = a1 | a4\n 31922: a2 = a2 | a1\n 31925: a2 = a2 >> 0x20\n 31928: a1 = a1 | a3\n 31931: a1 = a1 << 0x20\n 31934: a1 = a1 | a2\n 31937: jump @1112 if a1 == 0\n      : @1111 (gas: 1)\n 31940: jump @1603\n      : @1112 (gas: 15)\n 31943: a5 = s1 + 0x700\n 31947: a2 = u64 [a5 + 0x98]\n 31951: a1 = u64 [a5 + 0x90]\n 31955: a3 = u64 [a5 + 0x88]\n 31959: a4 = u64 [a5 + 0x80]\n 31963: u64 [s1 + 0x140] = a4\n 31967: u64 [a5 + 0x60] = a4\n 31970: u64 [s1 + 0x148] = a3\n 31974: u64 [a5 + 0x68] = a3\n 31977: u64 [s1 + 0x150] = a1\n 31981: u64 [a5 + 0x70] = a1\n 31984: a1 = s1 + 0x760\n 31988: u64 [s1 + 0x158] = a2\n 31992: u64 [a5 + 0x78] = a2\n 31995: ra = 1150, jump @19\n      : @1113 [@dyn 575] (gas: 8)\n 32001: t1 = u64 [s1 + 0x198]\n 32005: t0 = 0\n 32007: t2 = 0\n 32009: a5 = 0\n 32011: a4 = 0\n 32013: a0 = 0xffffffe0\n 32023: u64 [s1 + 0x138] = a0\n 32027: fallthrough\n      : @1114 (gas: 35)\n 32028: ra = t1 + 0x20\n 32031: a0 = u64 [s1 + 0x140]\n 32035: u64 [s1 + 0x178] = t0\n 32039: a0 = t0 <u a0\n 32042: a2 = u64 [s1 + 0x148]\n 32046: a3 = t2 ^ a2\n 32049: a2 = t2 <u a2\n 32052: a2 = a0 if a3 == 0\n 32055: a0 = u64 [s1 + 0x150]\n 32059: t0 = a5 <u a0\n 32062: a3 = u64 [s1 + 0x158]\n 32066: a1 = a4 ^ a3\n 32069: u64 [s1 + 0x170] = a4\n 32073: a3 = a4 <u a3\n 32076: a3 = t0 if a1 == 0\n 32079: u64 [s1 + 0x168] = a5\n 32083: a0 = a0 ^ a5\n 32086: a0 = a0 | a1\n 32089: u64 [s1 + 0x1a0] = ra\n 32093: a4 = ra <u t1\n 32096: a3 = a2 if a0 == 0\n 32099: a1 = s1 + 0x100\n 32103: a2 = u64 [a1 + 0xb8]\n 32107: a0 = a2 + a4\n 32110: u64 [a1 + 0x90] = a0\n 32114: a0 = a0 <u a2\n 32117: a0 = a4 if a4 == 0\n 32120: a2 = u64 [a1 + 0xb0]\n 32124: a0 = a0 + a2\n 32127: u64 [a1 + 0x88] = a0\n 32131: a0 = a0 <u a2\n 32134: a2 = u64 [a1 + 0xa8]\n 32138: a0 = a0 + a2\n 32141: u64 [a1 + 0x80] = a0\n 32145: jump @1116 if a3 != 0\n      : @1115 (gas: 1)\n 32148: jump @1389\n      : @1116 (gas: 14)\n 32151: u64 [s1 + 0x160] = t2\n 32155: u64 [s1 + 0x198] = t1\n 32159: a3 = u64 [s1 + 0x68]\n 32162: a4 = u64 [s1 + 0x50]\n 32165: a0 = a3 | a4\n 32168: a1 = u64 [s1 + 0x60]\n 32171: a2 = u64 [s1 + 0x58]\n 32174: a2 = a2 | a1\n 32177: a0 = a0 | a2\n 32180: a0 = a0 >> 0x20\n 32183: a2 = a2 | a4\n 32186: a2 = a2 << 0x20\n 32189: a0 = a0 | a2\n 32192: jump @1118 if a0 == 0\n      : @1117 (gas: 1)\n 32195: jump @1603\n      : @1118 (gas: 4)\n 32198: a0 = s1 + 0x6c0\n 32202: a1 = a3\n 32204: u64 [s1 + 0x68] = a3\n 32207: ra = 1152, jump @17\n      : @1119 [@dyn 576] (gas: 11)\n 32213: a3 = s1 + 0x100\n 32217: a0 = u64 [a3 + 0xb0]\n 32221: a1 = u64 [a3 + 0xa8]\n 32225: a0 = a0 | a1\n 32228: a1 = u64 [a3 + 0x98]\n 32232: a2 = u64 [a3 + 0x38]\n 32235: a1 = a1 <u a2\n 32238: a2 = u64 [a3 + 0xb8]\n 32242: a1 = 0 if a2 != 0\n 32244: a1 = 0 if a0 != 0\n 32246: jump @1121 if a1 != 0\n      : @1120 (gas: 1)\n 32249: jump @1603\n      : @1121 (gas: 16)\n 32252: a4 = s1 + 0x600\n 32256: a0 = u64 [a4 + 0xd8]\n 32260: a1 = u64 [a4 + 0xd0]\n 32264: a2 = u64 [a4 + 0xc0]\n 32268: a3 = u64 [a4 + 0xc8]\n 32272: a1 = a1 | a2\n 32275: a0 = a0 | a3\n 32278: a0 = a0 | a1\n 32281: a0 = a0 >u 0\n 32283: u64 [s1 + 1720] = 0\n 32287: u64 [s1 + 1712] = 0\n 32291: u64 [s1 + 1704] = 0\n 32295: a1 = s1 + 0x6a0\n 32299: u64 [a4 + 0xa0] = a0\n 32303: a0 = u64 [s1 + 0x1a0]\n 32307: ra = 1154, jump @19\n      : @1122 [@dyn 577] (gas: 5)\n 32313: a1 = u64 [s1 + 0x68]\n 32316: a0 = a1 + 0x20\n 32319: a1 = a0 <u a1\n 32322: a3 = u64 [s1 + 0x58]\n 32325: t0 = 1156, jump @2010\n      : @1123 [@dyn 578] (gas: 29)\n 32331: a1 = u64 [s1 + 0x50]\n 32334: a3 = a3 + a1\n 32337: a1 = a3 <u a1\n 32340: a4 = u64 [s1 + 0x60]\n 32343: a4 = a4 + a1\n 32346: u64 [s1 + 0x60] = a4\n 32349: t0 = u64 [s1 + 0x178]\n 32353: t0 = t0 + 0x1\n 32356: a1 = t0 <u 0x1\n 32359: t2 = u64 [s1 + 0x160]\n 32363: t2 = t2 + a1\n 32366: a1 = t0 | t2\n 32369: a1 = a1 <u 0x1\n 32372: a4 = u64 [s1 + 0x168]\n 32376: a5 = a4 + a1\n 32379: a4 = a5 <u a4\n 32382: a1 = u64 [s1 + 0x170]\n 32386: a4 = a4 + a1\n 32389: t1 = u64 [s1 + 0x1a0]\n 32393: a1 = u64 [s1 + 0x190]\n 32397: u64 [s1 + 0x1b8] = a1\n 32401: a1 = u64 [s1 + 0x188]\n 32405: u64 [s1 + 0x1b0] = a1\n 32409: a1 = u64 [s1 + 0x180]\n 32413: u64 [s1 + 0x1a8] = a1\n 32417: u64 [s1 + 0x68] = a0\n 32420: u64 [s1 + 0x58] = a2\n 32423: u64 [s1 + 0x50] = a3\n 32426: jump @1114\n      : @1124 (gas: 9)\n 32429: u64 [s1 + 360] = 0\n 32433: u64 [s1 + 352] = 0\n 32437: u64 [s1 + 336] = 0\n 32441: u64 [s1 + 344] = 0\n 32445: u64 [s1 + 392] = 0\n 32449: u64 [s1 + 384] = 0\n 32453: u64 [s1 + 368] = 0\n 32457: u64 [s1 + 376] = 0\n 32461: fallthrough\n      : @1125 (gas: 3)\n 32462: a0 = s1 + 0x2800\n 32466: a1 = u64 [s1 + 0x118]\n 32470: ra = 1158, jump @17\n      : @1126 [@dyn 579] (gas: 22)\n 32476: a3 = s1 + 0x2138\n 32480: a4 = a3 + 0x600\n 32484: a0 = u64 [a4 + 0xd0]\n 32488: a1 = u64 [a4 + 0xe0]\n 32492: a2 = u64 [a4 + 0xc8]\n 32496: t1 = u64 [a3 + 0x6d8]\n 32500: a3 = u64 [s1 + 0x180]\n 32504: a4 = a3 ^ a0\n 32507: a0 = a3 <u a0\n 32510: t0 = u64 [s1 + 0x188]\n 32514: a2 = t0 <u a2\n 32517: a2 = a0 if a4 != 0\n 32520: a5 = u64 [s1 + 0x170]\n 32524: a0 = a5 <u t1\n 32527: a4 = u64 [s1 + 0x178]\n 32531: t2 = a4 ^ a1\n 32534: a1 = a4 <u a1\n 32537: a1 = a0 if t2 == 0\n 32540: a0 = a5 ^ t1\n 32543: a0 = a0 | t2\n 32546: a1 = a2 if a0 == 0\n 32549: jump @1167 if a1 == 0\n      : @1127 (gas: 19)\n 32553: a1 = s1 + 0x1938\n 32557: u64 [a1 + 0x3a8] = t0\n 32561: a0 = u64 [s1 + 0x118]\n 32565: a2 = a1 + 0x300\n 32569: u64 [a2 + 0xc8] = a0\n 32573: u64 [a2 + 0xb0] = a3\n 32577: a0 = u64 [s1 + 0x110]\n 32581: u64 [a2 + 0xd0] = a0\n 32585: u64 [a2 + 0xb8] = a5\n 32589: a0 = u64 [s1 + 0x108]\n 32593: u64 [a2 + 0xd8] = a0\n 32597: u64 [a2 + 0xc0] = a4\n 32601: a4 = a1\n 32603: a0 = s1 + 0x1d20\n 32607: a1 = s1 + 0x1d00\n 32611: a2 = s1 + 0x1ce0\n 32615: a3 = u64 [s1 + 0x100]\n 32619: u64 [a4 + 0x3e0] = a3\n 32623: ra = 1160, jump @1858\n      : @1128 [@dyn 580] (gas: 7)\n 32629: a1 = s1 + 0x1938\n 32633: a0 = u64 [a1 + 0x400]\n 32637: a4 = a1 + 0x300\n 32641: a2 = u64 [a4 + 0xf8]\n 32645: a3 = u64 [a4 + 0xf0]\n 32649: a1 = u64 [a4 + 0xe8]\n 32653: t0 = 1162, jump @1991\n      : @1129 [@dyn 581] (gas: 1)\n 32659: jump @1131 if a0 == 0\n      : @1130 (gas: 1)\n 32662: jump @1603\n      : @1131 (gas: 2)\n 32665: a0 = s1 + 0x1cc0\n 32669: ra = 1164, jump @17\n      : @1132 [@dyn 582] (gas: 22)\n 32675: a1 = s1 + 0x1938\n 32679: a2 = a1 + 0x300\n 32683: a0 = u64 [a2 + 0xa0]\n 32687: u64 [s1 + 0x1a0] = a0\n 32691: a0 = u64 [a2 + 0x98]\n 32695: u64 [s1 + 0x1a8] = a0\n 32699: a0 = u64 [a2 + 0x90]\n 32703: u64 [s1 + 0x1b0] = a0\n 32707: a0 = u64 [a2 + 0x88]\n 32711: u64 [s1 + 0x1b8] = a0\n 32715: a0 = u64 [s1 + 0x120]\n 32719: u64 [a2 + 0x80] = a0\n 32723: a0 = u64 [s1 + 0x128]\n 32727: u64 [a2 + 0x78] = a0\n 32730: a0 = u64 [s1 + 0x130]\n 32734: u64 [a2 + 0x70] = a0\n 32737: a2 = a1\n 32739: a1 = s1 + 0x1ca0\n 32743: a0 = u64 [s1 + 0x138]\n 32747: u64 [a2 + 0x368] = a0\n 32751: a0 = 0\n 32753: ra = 1166, jump @19\n      : @1133 [@dyn 583] (gas: 9)\n 32759: a0 = s1 + 0x1938\n 32763: u64 [a0 + 864] = 0\n 32767: u64 [a0 + 856] = 0\n 32771: u64 [a0 + 848] = 0\n 32775: a2 = a0\n 32777: a0 = 0x20\n 32780: a1 = s1 + 0x1c80\n 32784: u64 [a2 + 840] = 0\n 32788: ra = 1168, jump @19\n      : @1134 [@dyn 584] (gas: 3)\n 32794: a1 = u64 [s1 + 0x190]\n 32798: a0 = i32 [a1]\n 32800: jump @1136 if a0 >u 63\n      : @1135 (gas: 2)\n 32804: u32 [a1 + 0] = 0x40\n 32807: fallthrough\n      : @1136 (gas: 4)\n 32808: a0 = sp + 0xffffffffffffffe0\n 32811: a0 = a0 & 0xffffffffffffffe0\n 32814: u64 [s1 + 0x148] = a0\n 32818: t0 = 1170, jump @1962\n      : @1137 [@dyn 585] (gas: 3)\n 32824: ra = 0x494\n 32828: ecalli 8 // 'hash_keccak_256'\n 32830: fallthrough\n      : @1138 [@dyn 586] (gas: 11)\n 32831: a3 = u64 [s1 + 0x148]\n 32835: a0 = u64 [a3]\n 32837: a1 = u64 [a3 + 0x8]\n 32840: a2 = u64 [a3 + 0x10]\n 32843: a3 = u64 [a3 + 0x18]\n 32846: a0 = reverse a0\n 32848: a1 = reverse a1\n 32850: a2 = reverse a2\n 32852: a3 = reverse a3\n 32854: a4 = a3 + 0x5\n 32857: t0 = 1174, jump @1960\n      : @1139 [@dyn 587] (gas: 7)\n 32863: u64 [a3 + 0x68] = a4\n 32866: u64 [a3 + 0x70] = a5\n 32869: u64 [a3 + 0x78] = a2\n 32872: u64 [a3 + 0x80] = a0\n 32876: a0 = s1 + 0x1c60\n 32880: a1 = s1 + 0x4ea0\n 32884: ra = 1176, jump @21\n      : @1140 [@dyn 588] (gas: 28)\n 32890: a4 = s1 + 0x1938\n 32894: a5 = a4 + 0x300\n 32898: a0 = u64 [a5 + 0x30]\n 32901: a1 = u64 [a5 + 0x28]\n 32904: a2 = u64 [a5 + 0x38]\n 32907: a3 = u64 [a5 + 0x40]\n 32910: t0 = a4\n 32912: a5 = u64 [s1 + 0x1b0]\n 32916: a4 = a5 ^ a0\n 32919: a0 = a5 <u a0\n 32922: a5 = u64 [s1 + 0x1b8]\n 32926: a1 = a5 <u a1\n 32929: a1 = a0 if a4 != 0\n 32932: a4 = u64 [s1 + 0x1a0]\n 32936: a0 = a4 ^ a3\n 32939: a3 = a4 <u a3\n 32942: a5 = u64 [s1 + 0x1a8]\n 32946: a4 = a5 <u a2\n 32949: a4 = a3 if a0 != 0\n 32952: a2 = a2 ^ a5\n 32955: a0 = a0 | a2\n 32958: a1 = a4 if a0 != 0\n 32961: u64 [t0 + 800] = 0\n 32965: u64 [t0 + 792] = 0\n 32969: u64 [t0 + 0x308] = a1\n 32973: a0 = s1 + 0x1c40\n 32977: u64 [t0 + 784] = 0\n 32981: ra = 1178, jump @1908\n      : @1141 [@dyn 589] (gas: 4)\n 32987: a0 = u64 [s1 + 0x120]\n 32991: t0 = 0x49c\n 32995: a2 = s1 + 0x1938\n 32999: fallthrough\n      : @1142 [@dyn 590] (gas: 11)\n 33000: u64 [a2 + 0x300] = a0\n 33004: a0 = u64 [s1 + 0x128]\n 33008: a3 = a2 + 0x200\n 33012: u64 [a3 + 0xf8] = a0\n 33016: a0 = u64 [s1 + 0x130]\n 33020: u64 [a3 + 0xf0] = a0\n 33024: a1 = s1 + 0x1c20\n 33028: a0 = u64 [s1 + 0x138]\n 33032: u64 [a3 + 0xe8] = a0\n 33036: a0 = 0\n 33038: ra = 1182, jump @19\n      : @1143 [@dyn 591] (gas: 2)\n 33044: a0 = 0x1938\n 33048: t0 = 1184, jump @2034\n      : @1144 [@dyn 592] (gas: 3)\n 33054: a1 = s1 + 0x1c00\n 33058: u64 [a2 + 712] = 0\n 33062: ra = 1186, jump @19\n      : @1145 [@dyn 593] (gas: 3)\n 33068: a1 = u64 [s1 + 0x190]\n 33072: a0 = i32 [a1]\n 33074: jump @1147 if a0 >u 63\n      : @1146 (gas: 2)\n 33078: u32 [a1 + 0] = 0x40\n 33081: fallthrough\n      : @1147 (gas: 4)\n 33082: a0 = sp + 0xffffffffffffffe0\n 33085: a0 = a0 & 0xffffffffffffffe0\n 33088: u64 [s1 + 0x148] = a0\n 33092: t0 = 1188, jump @1962\n      : @1148 [@dyn 594] (gas: 4)\n 33098: ra = 0x4a6\n 33102: ecalli 8 // 'hash_keccak_256'\n 33104: t0 = 0x4a8\n 33108: jump @1954\n      : @1149 [@dyn 595] (gas: 1)\n 33111: t0 = 1192, jump @1954\n      : @1150 [@dyn 596] (gas: 17)\n 33117: u64 [a1 + 0x260] = a0\n 33121: a0 = u64 [s1 + 0x1a8]\n 33125: u64 [a1 + 0x258] = a0\n 33129: a0 = u64 [s1 + 0x1b0]\n 33133: u64 [a1 + 0x250] = a0\n 33137: a0 = u64 [s1 + 0x1b8]\n 33141: u64 [a1 + 0x248] = a0\n 33145: a0 = a1 + 0x200\n 33149: u64 [a0 + 0x68] = a4\n 33152: u64 [a0 + 0x70] = a5\n 33155: u64 [a0 + 0x78] = a2\n 33158: a4 = a1\n 33160: a0 = s1 + 0x1bc0\n 33164: a1 = s1 + 0x1ba0\n 33168: a2 = s1 + 0x1b80\n 33172: u64 [a4 + 0x280] = a3\n 33176: ra = 1194, jump @1847\n      : @1151 [@dyn 597] (gas: 7)\n 33182: a3 = s1 + 0x1938\n 33186: a4 = a3 + 0x200\n 33190: a0 = u64 [a4 + 0x88]\n 33194: a1 = u64 [a4 + 0xa0]\n 33198: a2 = u64 [a4 + 0x90]\n 33202: a3 = u64 [a4 + 0x98]\n 33206: t0 = 1196, jump @1985\n      : @1152 [@dyn 598] (gas: 8)\n 33212: a3 = a1 + 0x500\n 33216: u64 [a3 + 0x88] = a4\n 33220: u64 [a3 + 0x90] = a5\n 33224: u64 [a3 + 0x98] = a2\n 33228: u64 [a3 + 0xa0] = a0\n 33232: a0 = s1 + 0x1b60\n 33236: a1 = s1 + 0x4ec0\n 33240: ra = 1198, jump @21\n      : @1153 [@dyn 599] (gas: 3)\n 33246: a1 = s1 + 0x1938\n 33250: a0 = u8 [a1 + 0x228]\n 33254: jump @1218 if a0 != 0\n      : @1154 (gas: 13)\n 33258: a0 = u64 [s1 + 0x138]\n 33262: a2 = a1 + 0x100\n 33266: u64 [a2 + 0x68] = a0\n 33269: a0 = u64 [s1 + 0x130]\n 33273: u64 [a2 + 0x70] = a0\n 33276: a0 = u64 [s1 + 0x128]\n 33280: u64 [a2 + 0x78] = a0\n 33283: a2 = a1\n 33285: a1 = s1 + 0x1aa0\n 33289: a0 = u64 [s1 + 0x120]\n 33293: u64 [a2 + 0x180] = a0\n 33297: a0 = 0\n 33299: ra = 1200, jump @19\n      : @1155 [@dyn 600] (gas: 9)\n 33306: a0 = s1 + 0x1938\n 33310: u64 [a0 + 352] = 0\n 33314: u64 [a0 + 344] = 0\n 33318: u64 [a0 + 336] = 0\n 33322: a2 = a0\n 33324: a0 = 0x20\n 33327: a1 = s1 + 0x1a80\n 33331: u64 [a2 + 328] = 0\n 33335: ra = 1202, jump @19\n      : @1156 [@dyn 601] (gas: 3)\n 33342: a1 = u64 [s1 + 0x190]\n 33346: a0 = i32 [a1]\n 33348: jump @1158 if a0 >u 63\n      : @1157 (gas: 2)\n 33352: u32 [a1 + 0] = 0x40\n 33355: fallthrough\n      : @1158 (gas: 4)\n 33356: a0 = sp + 0xffffffffffffffe0\n 33359: a0 = a0 & 0xffffffffffffffe0\n 33362: u64 [s1 + 0x148] = a0\n 33366: t0 = 1204, jump @1962\n      : @1159 [@dyn 602] (gas: 4)\n 33372: ra = 0x4b6\n 33376: ecalli 8 // 'hash_keccak_256'\n 33378: t0 = 0x4b8\n 33382: jump @1954\n      : @1160 [@dyn 603] (gas: 1)\n 33385: t0 = 1208, jump @1954\n      : @1161 [@dyn 604] (gas: 16)\n 33391: u64 [a1 + 0xe0] = a0\n 33395: a0 = u64 [s1 + 0x1a8]\n 33399: u64 [a1 + 0xd8] = a0\n 33403: a0 = u64 [s1 + 0x1b0]\n 33407: u64 [a1 + 0xd0] = a0\n 33411: a0 = u64 [s1 + 0x1b8]\n 33415: u64 [a1 + 0xc8] = a0\n 33419: u64 [a1 + 0xe8] = a4\n 33423: u64 [a1 + 0xf0] = a5\n 33427: u64 [a1 + 0xf8] = a2\n 33431: a4 = a1\n 33433: a0 = s1 + 0x1a40\n 33437: a1 = s1 + 0x1a20\n 33441: a2 = s1 + 0x1a00\n 33445: u64 [a4 + 0x100] = a3\n 33449: ra = 1210, jump @1847\n      : @1162 [@dyn 605] (gas: 2)\n 33455: a0 = 0x2000\n 33459: t0 = 1212, jump @2033\n      : @1163 [@dyn 606] (gas: 5)\n 33465: a0 = u64 [a4 + 0x8]\n 33468: a1 = u64 [a4 + 0x20]\n 33471: a2 = u64 [a4 + 0x10]\n 33474: a3 = u64 [a4 + 0x18]\n 33477: t0 = 1214, jump @2007\n      : @1164 [@dyn 607] (gas: 10)\n 33483: i32 a3 = a3 + 0xfffffffffffff938\n 33487: a3 = a3 + s1\n 33490: a5 = a3 + 0x500\n 33494: u64 [a5 + 0xa8] = a0\n 33498: u64 [a5 + 0xb0] = a2\n 33502: u64 [a5 + 0xb8] = a4\n 33506: u64 [a5 + 0xc0] = a1\n 33510: a0 = s1 + 0x19e0\n 33514: a1 = s1 + 0x4ee0\n 33518: ra = 1216, jump @21\n      : @1165 [@dyn 608] (gas: 21)\n 33525: a4 = s1 + 0x1938\n 33529: a0 = u64 [a4 + 0xa8]\n 33533: a1 = u64 [a4 + 0xb0]\n 33537: a2 = u64 [a4 + 0xb8]\n 33541: a3 = u64 [a4 + 0xc0]\n 33545: u64 [a4 + 0x60] = a3\n 33548: u64 [a4 + 0x58] = a2\n 33551: u64 [a4 + 0x50] = a1\n 33554: u64 [a4 + 0x48] = a0\n 33557: a0 = u64 [s1 + 0x158]\n 33561: u64 [a4 + 0x80] = a0\n 33565: a0 = u64 [s1 + 0x150]\n 33569: u64 [a4 + 0x78] = a0\n 33572: a0 = u64 [s1 + 0x160]\n 33576: u64 [a4 + 0x70] = a0\n 33579: a0 = s1 + 0x19c0\n 33583: a1 = s1 + 0x19a0\n 33587: a2 = s1 + 0x1980\n 33591: a3 = u64 [s1 + 0x168]\n 33595: u64 [a4 + 0x68] = a3\n 33598: ra = 1218, jump @1926\n      : @1166 [@dyn 609] (gas: 27)\n 33604: a1 = s1 + 0x1938\n 33608: a0 = u64 [a1 + 0xa0]\n 33612: a3 = s1 + 0x100\n 33616: u64 [a3 + 0x58] = a0\n 33619: a0 = u64 [a1 + 0x98]\n 33623: u64 [a3 + 0x50] = a0\n 33626: a0 = u64 [a1 + 0x90]\n 33630: u64 [a3 + 0x60] = a0\n 33633: a0 = u64 [a1 + 0x88]\n 33637: u64 [a3 + 0x68] = a0\n 33640: a1 = u64 [a3 + 0x88]\n 33644: a1 = a1 + 0x1\n 33647: a0 = a1 <u 0x1\n 33650: a2 = u64 [a3 + 0x80]\n 33654: a2 = a2 + a0\n 33657: u64 [a3 + 0x88] = a1\n 33661: u64 [a3 + 0x80] = a2\n 33665: a0 = a1 | a2\n 33668: a0 = a0 <u 0x1\n 33671: a1 = u64 [a3 + 0x70]\n 33674: a0 = a0 + a1\n 33677: a1 = a0 <u a1\n 33680: a2 = u64 [a3 + 0x78]\n 33683: a2 = a2 + a1\n 33686: u64 [a3 + 0x78] = a2\n 33689: u64 [a3 + 0x70] = a0\n 33692: jump @1125\n      : @1167 (gas: 17)\n 33695: a0 = u64 [s1 + 0xe0]\n 33699: a4 = s1 + 0x100\n 33703: a1 = u64 [a4 + 0x68]\n 33706: a0 = a0 ^ a1\n 33709: a1 = u64 [s1 + 0xf0]\n 33713: a2 = u64 [a4 + 0x50]\n 33716: a1 = a1 ^ a2\n 33719: a0 = a0 | a1\n 33722: a1 = u64 [s1 + 0xe8]\n 33726: a2 = u64 [a4 + 0x60]\n 33729: a1 = a1 ^ a2\n 33732: a2 = u64 [s1 + 0xf8]\n 33736: a3 = u64 [a4 + 0x58]\n 33739: a2 = a2 ^ a3\n 33742: a1 = a1 | a2\n 33745: a0 = a0 | a1\n 33748: jump @1249 if a0 != 0\n      : @1168 (gas: 8)\n 33752: a1 = s1 + 0x4938\n 33756: u64 [a1 + 1504] = 0\n 33760: u64 [a1 + 1496] = 0\n 33764: u64 [a1 + 1488] = 0\n 33768: u64 [a1 + 1480] = 0x4\n 33773: a0 = s1 + 0x2740\n 33777: a1 = s1 + 0x4f00\n 33781: ra = 1220, jump @21\n      : @1169 [@dyn 610] (gas: 11)\n 33788: a1 = s1 + 0x2138\n 33792: a2 = a1 + 0x600\n 33796: a0 = u64 [a2 + 0x18]\n 33799: u64 [s1 + 0x180] = a0\n 33803: a0 = u64 [a2 + 0x10]\n 33806: u64 [s1 + 0x178] = a0\n 33810: a0 = u64 [a2 + 0x8]\n 33813: u64 [s1 + 0x188] = a0\n 33817: a0 = s1 + 0x2720\n 33821: a1 = 0x40\n 33824: ra = 1222, jump @17\n      : @1170 [@dyn 611] (gas: 18)\n 33831: a2 = s1 + 0x2138\n 33835: a3 = u64 [a2 + 0x600]\n 33839: a5 = a2 + 0x500\n 33843: a4 = u64 [a5 + 0xf8]\n 33847: a1 = u64 [a5 + 0xf0]\n 33851: a0 = u64 [a5 + 0xe8]\n 33855: a5 = s1 + 0x100\n 33859: u64 [a5 + 0xb8] = a1\n 33863: u64 [a5 + 0xa8] = a3\n 33867: a3 = a3 | a1\n 33870: a1 = a0 | a4\n 33873: a1 = a1 | a3\n 33876: a1 = a1 >> 0x20\n 33879: u64 [a5 + 0xa0] = a4\n 33883: a3 = a3 | a4\n 33886: a3 = a3 << 0x20\n 33889: a1 = a1 | a3\n 33892: jump @1172 if a1 == 0\n      : @1171 (gas: 1)\n 33895: jump @1603\n      : @1172 (gas: 8)\n 33898: u64 [a2 + 1496] = 0\n 33902: u64 [a2 + 1488] = 0\n 33906: u64 [a2 + 1480] = 0\n 33910: a3 = 0xdd62ed3e00000000\n 33920: a1 = s1 + 0x2700\n 33924: u64 [a2 + 0x5e0] = a3\n 33928: u64 [s1 + 0x1b0] = a0\n 33932: ra = 1224, jump @19\n      : @1173 [@dyn 612] (gas: 4)\n 33939: a0 = u64 [s1 + 0xd8]\n 33943: ra = 0x4ca\n 33947: ecalli 5 // 'caller'\n 33949: fallthrough\n      : @1174 [@dyn 613] (gas: 14)\n 33950: a3 = s1 + 0x100\n 33954: a4 = u64 [a3 + 0xb0]\n 33958: a0 = u64 [a3 + 0xa8]\n 33962: a2 = u64 [a3 + 0xa0]\n 33966: a2 = a2 | a0\n 33969: a0 = 0x100000000\n 33979: u64 [a3 + 0x68] = a0\n 33982: a0 = 0xfffffffc\n 33992: a0 = a4 <u a0\n 33995: a1 = u64 [a3 + 0xb8]\n 33999: a0 = 0 if a1 != 0\n 34001: u64 [a3 + 0x70] = a2\n 34004: a0 = 0 if a2 != 0\n 34006: jump @1176 if a0 != 0\n      : @1175 (gas: 1)\n 34009: jump @1603\n      : @1176 (gas: 1)\n 34012: t0 = 1228, jump @1980\n      : @1177 [@dyn 614] (gas: 9)\n 34018: i32 a0 = a4 + 0x4\n 34021: a5 = s1 + 0x2138\n 34025: u64 [a5 + 1472] = 0\n 34029: a4 = a5 + 0x500\n 34033: u64 [a4 + 0xb8] = a1\n 34037: u64 [a4 + 0xb0] = a2\n 34041: a1 = s1 + 0x26e0\n 34045: u64 [a4 + 0xa8] = a3\n 34049: ra = 1230, jump @19\n      : @1178 [@dyn 615] (gas: 4)\n 34056: a0 = u64 [s1 + 0xd8]\n 34060: ra = 0x4d0\n 34064: ecalli 0 // 'address'\n 34065: fallthrough\n      : @1179 [@dyn 616] (gas: 10)\n 34066: a2 = s1 + 0x100\n 34070: a0 = u64 [a2 + 0x68]\n 34073: a0 = a0 + 0xffffffffffffffdc\n 34076: a1 = u64 [a2 + 0xb0]\n 34080: a0 = a1 <u a0\n 34083: a1 = u64 [a2 + 0xb8]\n 34087: a0 = 0 if a1 != 0\n 34089: a1 = u64 [a2 + 0x70]\n 34092: a0 = 0 if a1 != 0\n 34094: jump @1181 if a0 != 0\n      : @1180 (gas: 1)\n 34097: jump @1603\n      : @1181 (gas: 1)\n 34100: t0 = 1234, jump @1980\n      : @1182 [@dyn 617] (gas: 10)\n 34106: a0 = u64 [s1 + 0x1b0]\n 34110: i32 a0 = a0 + 0x24\n 34113: a4 = s1 + 0x2138\n 34117: u64 [a4 + 1440] = 0\n 34121: a5 = a4 + 0x500\n 34125: u64 [a5 + 0x98] = a1\n 34129: u64 [a5 + 0x90] = a2\n 34133: a1 = s1 + 0x26c0\n 34137: u64 [a5 + 0x88] = a3\n 34141: ra = 1236, jump @19\n      : @1183 [@dyn 618] (gas: 29)\n 34148: ecalli 10 // 'ref_time_left'\n 34150: a0 = u64 [s1 + 0x178]\n 34154: a0 = reverse a0\n 34156: a1 = a0 << 0x20\n 34159: a2 = u64 [s1 + 0x180]\n 34163: a2 = reverse a2\n 34165: a2 = a2 >> 0x20\n 34168: a3 = a2 | a1\n 34171: a1 = u64 [s1 + 0x188]\n 34175: a1 = reverse a1\n 34177: a2 = a1 << 0x20\n 34180: a0 = a0 >> 0x20\n 34183: a0 = a0 | a2\n 34186: a1 = a1 >> 0x20\n 34189: u64 [s1 + 0x168] = a0\n 34193: a2 = u64 [s1 + 0x140]\n 34197: u64 [a2 + 0x8] = a0\n 34200: u64 [s1 + 0x178] = a3\n 34204: u64 [a2] = a3\n 34206: u64 [s1 + 0x170] = a1\n 34210: u32 [a2 + 0x10] = a1\n 34213: a0 = s1 + 0x4938\n 34217: u64 [a0 + 1536] = 0\n 34221: u64 [a0 + 1528] = 0\n 34225: u64 [a0 + 1520] = 0\n 34229: u64 [a0 + 1512] = 0\n 34233: a1 = 0x44\n 34236: a0 = u64 [s1 + 0x1b0]\n 34240: ra = 1238, jump @28\n      : @1184 [@dyn 619] (gas: 4)\n 34247: u64 [s1 + 0x180] = a0\n 34251: a1 = 0x20\n 34254: a0 = u64 [s1 + 0x1b0]\n 34258: ra = 1240, jump @28\n      : @1185 [@dyn 620] (gas: 36)\n 34265: a4 = s1 + 0x100\n 34269: u64 [a4 + 136] = 0x20\n 34274: a1 = s1 + 0x4938\n 34278: u32 [a1 + 1544] = 0x20\n 34283: u64 [a1 + 1600] = 0\n 34287: u64 [a1 + 1592] = 0\n 34291: u64 [a1 + 1584] = 0\n 34295: u64 [a1 + 1576] = 0\n 34299: a1 = u64 [a4 + 0x40]\n 34302: a1 = a1 << 0x20\n 34305: a2 = a1 >> 0x20\n 34308: a1 = 0x1800000000\n 34318: u64 [a4 + 0x60] = a2\n 34321: t0 = a2 | a1\n 34324: a1 = s1 + 0x4f20\n 34328: a1 = a1 << 0x20\n 34331: a1 = a1 >> 0x20\n 34334: a2 = s1 + 0x4f60\n 34338: a2 = a2 << 0x20\n 34341: a3 = a2 | a1\n 34344: a1 = u64 [a4 + 0x80]\n 34348: a1 = a1 << 0x20\n 34351: a1 = a1 >> 0x20\n 34354: a2 = 0x4400000000\n 34364: a4 = a1 | a2\n 34367: a0 = a0 << 0x20\n 34370: a0 = a0 >> 0x20\n 34373: a1 = s1 + 0x4f40\n 34377: a1 = a1 << 0x20\n 34380: a5 = a1 | a0\n 34383: a1 = 0xffffffffffffffff\n 34386: a2 = 0xffffffffffffffff\n 34389: u64 [s1 + 0x180] = t0\n 34393: a0 = t0\n 34395: ecalli 1 // 'call'\n 34397: fallthrough\n      : @1186 (gas: 1)\n 34398: jump @1188 if a0 == 0\n      : @1187 (gas: 1)\n 34401: jump @1397\n      : @1188 (gas: 2)\n 34404: ecalli 12 // 'return_data_size'\n 34406: fallthrough\n      : @1189 (gas: 1)\n 34407: jump @1191 if a0 >=u 32\n      : @1190 (gas: 3)\n 34411: ecalli 12 // 'return_data_size'\n 34413: u64 [s1 + 0x188] = a0\n 34417: fallthrough\n      : @1191 (gas: 19)\n 34418: a2 = s1 + 0x2138\n 34422: a0 = u64 [s1 + 0x188]\n 34426: a4 = a2 + 0x500\n 34430: u64 [a4 + 0x28] = a0\n 34433: a0 = u64 [s1 + 0x1b0]\n 34437: u64 [a4 + 0x48] = a0\n 34440: u64 [s1 + 344] = 0\n 34444: u64 [a2 + 1328] = 0\n 34448: a0 = u64 [s1 + 0x1b8]\n 34452: u64 [a4 + 0x50] = a0\n 34455: u64 [a2 + 1336] = 0\n 34459: a0 = u64 [s1 + 0x1a0]\n 34463: u64 [a4 + 0x58] = a0\n 34466: u64 [a2 + 1344] = 0\n 34470: a0 = s1 + 0x2680\n 34474: a1 = s1 + 0x2660\n 34478: a3 = u64 [s1 + 0x1a8]\n 34482: u64 [a4 + 0x60] = a3\n 34485: ra = 1242, jump @1749\n      : @1192 [@dyn 621] (gas: 4)\n 34491: a3 = u64 [s1 + 0x158]\n 34495: a0 = a3 >u 0\n 34497: a1 = u64 [s1 + 0x188]\n 34501: t0 = 1244, jump @1964\n      : @1193 [@dyn 622] (gas: 1)\n 34507: jump @1195 if a2 != 0\n      : @1194 (gas: 1)\n 34510: jump @1694\n      : @1195 (gas: 3)\n 34513: a0 = s1 + 0x2640\n 34517: a1 = u64 [s1 + 0x1b0]\n 34521: ra = 1246, jump @17\n      : @1196 [@dyn 623] (gas: 7)\n 34528: a3 = s1 + 0x2138\n 34532: a4 = a3 + 0x500\n 34536: a0 = u64 [a4 + 0x10]\n 34539: a1 = u64 [a4 + 0x20]\n 34542: a2 = u64 [a4 + 0x8]\n 34545: a3 = u64 [a4 + 0x18]\n 34548: t0 = 1248, jump @2025\n      : @1197 [@dyn 624] (gas: 12)\n 34554: t0 = a3 <u a0\n 34557: a5 = u64 [s1 + 0xf8]\n 34561: a4 = a1 ^ a5\n 34564: a1 = a1 <u a5\n 34567: a1 = t0 if a4 == 0\n 34570: a0 = a0 ^ a3\n 34573: a0 = a0 | a4\n 34576: a1 = a2 if a0 == 0\n 34579: u64 [s1 + 0x1a8] = a1\n 34583: a0 = s1 + 0x2620\n 34587: a1 = 0x40\n 34590: ra = 1250, jump @17\n      : @1198 [@dyn 625] (gas: 17)\n 34597: a1 = s1 + 0x2138\n 34601: a3 = u64 [a1 + 0x500]\n 34605: a5 = a1 + 0x400\n 34609: a4 = u64 [a5 + 0xf8]\n 34613: a0 = u64 [a5 + 0xe8]\n 34617: a2 = u64 [a5 + 0xf0]\n 34621: a5 = s1 + 0x100\n 34625: u64 [a5 + 0xb8] = a0\n 34629: a1 = a0 | a4\n 34632: u64 [a5 + 0xa0] = a2\n 34636: a0 = a2 | a3\n 34639: u64 [a5 + 0x58] = a3\n 34642: u64 [a5 + 0xb0] = a4\n 34646: a3 = a3 | a4\n 34649: u64 [a5 + 0x88] = a3\n 34653: a2 = u64 [a5 + 0xa8]\n 34657: jump @1200 if a2 != 0\n      : @1199 (gas: 1)\n 34660: jump @1414\n      : @1200 (gas: 7)\n 34663: a1 = a1 | a0\n 34666: a1 = a1 >> 0x20\n 34669: a2 = u64 [s1 + 0x1b0]\n 34673: a0 = a0 | a2\n 34676: a0 = a0 << 0x20\n 34679: a0 = a0 | a1\n 34682: jump @1202 if a0 == 0\n      : @1201 (gas: 1)\n 34685: jump @1603\n      : @1202 (gas: 8)\n 34688: a2 = s1 + 0x1938\n 34692: u64 [a2 + 1144] = 0\n 34696: u64 [a2 + 1136] = 0\n 34700: u64 [a2 + 1128] = 0\n 34704: t0 = 0x4e4\n 34708: a0 = 0x8c379a000000000\n 34718: a1 = 0x2000\n 34722: fallthrough\n      : @1203 [@dyn 626] (gas: 5)\n 34723: i32 a1 = a1 + 0xfffffffffffffda0\n 34727: a1 = a1 + s1\n 34730: u64 [a2 + 0x480] = a0\n 34734: a0 = u64 [s1 + 0x1b8]\n 34738: ra = 1254, jump @19\n      : @1204 [@dyn 627] (gas: 5)\n 34745: a0 = 0x100000000\n 34755: a2 = s1 + 0x100\n 34759: u64 [a2 + 0xb0] = a0\n 34763: a0 = 0xfffffffc\n 34773: t0 = 1256, jump @1981\n      : @1205 [@dyn 628] (gas: 1)\n 34779: jump @1207 if a0 != 0\n      : @1206 (gas: 1)\n 34782: jump @1603\n      : @1207 (gas: 5)\n 34785: a0 = u64 [s1 + 0x1b8]\n 34789: i32 a0 = a0 + 0x4\n 34792: t0 = 0x4ea\n 34796: a2 = s1 + 0x1938\n 34800: fallthrough\n      : @1208 [@dyn 629] (gas: 6)\n 34801: u64 [a2 + 1120] = 0\n 34805: u64 [a2 + 1112] = 0\n 34809: u64 [a2 + 1096] = 0x20\n 34814: a1 = s1 + 0x1d80\n 34818: u64 [a2 + 1104] = 0\n 34822: ra = 1260, jump @19\n      : @1209 [@dyn 630] (gas: 4)\n 34829: a2 = s1 + 0x100\n 34833: a0 = u64 [a2 + 0xb0]\n 34837: a0 = a0 + 0xffffffffffffffdc\n 34840: t0 = 1262, jump @1981\n      : @1210 [@dyn 631] (gas: 1)\n 34846: jump @1212 if a0 != 0\n      : @1211 (gas: 1)\n 34849: jump @1603\n      : @1212 (gas: 1)\n 34852: t0 = 1264, jump @2001\n      : @1213 [@dyn 632] (gas: 6)\n 34858: u64 [a2 + 1088] = 0\n 34862: u64 [a2 + 1080] = 0\n 34866: u64 [a2 + 1064] = 0x16\n 34871: a1 = s1 + 0x1d60\n 34875: u64 [a2 + 1072] = 0\n 34879: ra = 1266, jump @19\n      : @1214 [@dyn 633] (gas: 3)\n 34886: a0 = 0xffffffbc\n 34896: a2 = s1 + 0x100\n 34900: t0 = 1268, jump @1981\n      : @1215 [@dyn 634] (gas: 1)\n 34906: jump @1217 if a0 != 0\n      : @1216 (gas: 1)\n 34909: jump @1603\n      : @1217 (gas: 14)\n 34912: a0 = u64 [s1 + 0x1b8]\n 34916: i32 a0 = a0 + 0x44\n 34919: a1 = u64 [0x200f0]\n 34924: a2 = u64 [0x20100]\n 34929: a3 = u64 [0x20108]\n 34934: a4 = s1 + 0x1938\n 34938: a5 = a4 + 0x400\n 34942: u64 [a5 + 0x20] = a1\n 34945: u64 [a5 + 0x18] = a2\n 34948: u64 [a5 + 0x10] = a3\n 34951: a1 = s1 + 0x1d40\n 34955: u64 [a4 + 1032] = 0\n 34959: ra = 0x64e\n 34963: jump @19\n      : @1218 (gas: 3)\n 34967: a0 = s1 + 0x1b40\n 34971: a1 = 0x40\n 34974: ra = 1270, jump @17\n      : @1219 [@dyn 635] (gas: 15)\n 34981: a0 = s1 + 0x1938\n 34985: a2 = a0 + 0x200\n 34989: a3 = u64 [a2 + 0x20]\n 34992: a4 = u64 [a2 + 0x18]\n 34995: a1 = u64 [a2 + 0x10]\n 34998: a0 = u64 [a2 + 0x8]\n 35001: u64 [s1 + 0x1b8] = a1\n 35005: a2 = a1 | a3\n 35008: a1 = a0 | a4\n 35011: a1 = a1 | a2\n 35014: a1 = a1 >> 0x20\n 35017: a2 = a2 | a4\n 35020: a2 = a2 << 0x20\n 35023: a1 = a1 | a2\n 35026: jump @1221 if a1 == 0\n      : @1220 (gas: 1)\n 35029: jump @1603\n      : @1221 (gas: 12)\n 35032: a1 = s1 + 0x1938\n 35036: u64 [s1 + 0x1a8] = a3\n 35040: a3 = a1\n 35042: u64 [a1 + 504] = 0\n 35046: u64 [a1 + 496] = 0\n 35050: u64 [a1 + 488] = 0\n 35054: a2 = 0x8c379a000000000\n 35064: a1 = s1 + 0x1b20\n 35068: u64 [a3 + 0x200] = a2\n 35072: u64 [s1 + 0x1b0] = a0\n 35076: u64 [s1 + 0x1a0] = a4\n 35080: ra = 1272, jump @19\n      : @1222 [@dyn 636] (gas: 14)\n 35087: a4 = s1 + 0x100\n 35091: a1 = u64 [a4 + 0xb0]\n 35095: a0 = u64 [a4 + 0xa8]\n 35099: a3 = u64 [a4 + 0xa0]\n 35103: a3 = a3 | a0\n 35106: a0 = 0x100000000\n 35116: u64 [a4 + 0xa0] = a0\n 35120: a0 = 0xfffffffc\n 35130: a0 = a1 <u a0\n 35133: a2 = u64 [a4 + 0xb8]\n 35137: a0 = 0 if a2 != 0\n 35139: u64 [a4 + 0xa8] = a3\n 35143: a0 = 0 if a3 != 0\n 35145: jump @1224 if a0 != 0\n      : @1223 (gas: 1)\n 35148: jump @1603\n      : @1224 (gas: 4)\n 35151: i32 a0 = a1 + 0x4\n 35154: t0 = 0x4fa\n 35158: a2 = s1 + 0x1938\n 35162: fallthrough\n      : @1225 [@dyn 637] (gas: 6)\n 35163: u64 [a2 + 480] = 0\n 35167: u64 [a2 + 472] = 0\n 35171: u64 [a2 + 456] = 0x20\n 35176: a1 = s1 + 0x1b00\n 35180: u64 [a2 + 464] = 0\n 35184: ra = 1276, jump @19\n      : @1226 [@dyn 638] (gas: 10)\n 35191: a3 = s1 + 0x100\n 35195: a2 = u64 [a3 + 0xb0]\n 35199: a0 = u64 [a3 + 0xa0]\n 35203: a0 = a0 + 0xffffffffffffffdc\n 35206: a0 = a2 <u a0\n 35209: a1 = u64 [a3 + 0xb8]\n 35213: a0 = 0 if a1 != 0\n 35215: a1 = u64 [a3 + 0xa8]\n 35219: a0 = 0 if a1 != 0\n 35221: jump @1228 if a0 != 0\n      : @1227 (gas: 1)\n 35224: jump @1603\n      : @1228 (gas: 8)\n 35227: i32 a0 = a2 + 0x24\n 35230: a3 = s1 + 0x1938\n 35234: u64 [a3 + 448] = 0\n 35238: u64 [a3 + 440] = 0\n 35242: u64 [a3 + 424] = 0x11\n 35247: a1 = s1 + 0x1ae0\n 35251: u64 [a3 + 432] = 0\n 35255: ra = 1278, jump @19\n      : @1229 [@dyn 639] (gas: 9)\n 35262: a0 = 0xffffffbc\n 35272: a2 = s1 + 0x100\n 35276: a1 = u64 [a2 + 0xb0]\n 35280: a0 = a1 <u a0\n 35283: a1 = u64 [a2 + 0xb8]\n 35287: a0 = 0 if a1 != 0\n 35289: a1 = u64 [a2 + 0xa8]\n 35293: a0 = 0 if a1 != 0\n 35295: jump @1231 if a0 != 0\n      : @1230 (gas: 1)\n 35298: jump @1603\n      : @1231 (gas: 13)\n 35301: a0 = u64 [s1 + 0x1b0]\n 35305: i32 a0 = a0 + 0x44\n 35308: a1 = u64 [0x20110]\n 35313: a2 = u64 [0x20118]\n 35318: a3 = s1 + 0x1938\n 35322: a4 = a3 + 0x100\n 35326: u64 [a4 + 0xa0] = a1\n 35330: u64 [a4 + 0x98] = a2\n 35334: a1 = 0x6400000000000000\n 35344: u64 [a4 + 0x90] = a1\n 35348: a1 = s1 + 0x1ac0\n 35352: u64 [a3 + 392] = 0\n 35356: ra = 1280, jump @19\n      : @1232 [@dyn 640] (gas: 4)\n 35363: a1 = 0x64\n 35366: a0 = u64 [s1 + 0x1b0]\n 35370: ra = 0x650\n 35374: jump @28\n      : @1233 (gas: 29)\n 35378: a3 = s1 + 0x100\n 35382: a0 = u64 [a3 + 0x58]\n 35385: a0 = a0 ^ 0x1\n 35388: a5 = u64 [a3 + 0x70]\n 35391: a1 = u64 [s1 + 0x40]\n 35394: a0 = a1 if a5 != 0\n 35397: a1 = u64 [a3 + 0x30]\n 35400: a2 = u64 [a3 + 0x60]\n 35403: a0 = a1 if a2 != 0\n 35406: t1 = u64 [s1 + 0x168]\n 35410: a1 = a5 | t1\n 35413: u64 [s1 + 0x40] = a1\n 35416: a2 = u64 [s1 + 0x60]\n 35419: t0 = a2 >> 0x3f\n 35422: t1 = t1 << 0x1\n 35425: t2 = a5 >> 0x3f\n 35428: ra = a2 << 0x1\n 35431: a1 = u64 [s1 + 0x90]\n 35435: a4 = a1 >> 0x3f\n 35438: a5 = a5 << 0x1\n 35441: a3 = a1 << 0x1\n 35444: u64 [s1 + 0x38] = a3\n 35447: u64 [s1 + 0x30] = t0\n 35450: u64 [s1 + 0x28] = t1\n 35453: u64 [s1 + 0x20] = a4\n 35456: u64 [s1 + 0x18] = t2\n 35459: u64 [s1 + 0x10] = a5\n 35462: u64 [s1 + 0x8] = ra\n 35465: jump @1268 if a0 == 0\n      : @1234 (gas: 15)\n 35469: a1 = a1 & 0xffffffffffffffe0\n 35472: u64 [s1 + 0x130] = a1\n 35476: a0 = s1 + 0x3938\n 35480: a1 = u64 [s1 + 0x70]\n 35483: a3 = a0 + 0x300\n 35487: u64 [a3 + 0x8] = a1\n 35490: a1 = u64 [s1 + 0x78]\n 35493: u64 [a3 + 0x10] = a1\n 35496: a1 = u64 [s1 + 0x88]\n 35500: u64 [a3 + 0x18] = a1\n 35503: a1 = s1 + 0x3c40\n 35507: a2 = u64 [s1 + 0x80]\n 35511: u64 [a3 + 0x20] = a2\n 35514: a0 = 0\n 35516: ra = 1282, jump @19\n      : @1235 [@dyn 641] (gas: 1)\n 35523: t0 = 1284, jump @1998\n      : @1236 [@dyn 642] (gas: 1)\n 35529: ra = 1286, jump @28\n      : @1237 [@dyn 643] (gas: 1)\n 35536: t0 = 1288, jump @1984\n      : @1238 [@dyn 644] (gas: 4)\n 35542: ra = 0x50a\n 35546: ecalli 8 // 'hash_keccak_256'\n 35548: t0 = 0x50c\n 35552: jump @2024\n      : @1239 [@dyn 645] (gas: 1)\n 35555: t0 = 1292, jump @2024\n      : @1240 [@dyn 646] (gas: 1)\n 35561: t0 = 1294, jump @1977\n      : @1241 [@dyn 647] (gas: 9)\n 35567: t0 = a0\n 35569: a1 = u64 [s1 + 0x190]\n 35573: u64 [a1 + 0x18] = a0\n 35576: u64 [s1 + 0x170] = ra\n 35580: u64 [a1 + 0x10] = ra\n 35583: u64 [a1 + 0x8] = t2\n 35586: u64 [a1] = t1\n 35588: u64 [s1 + 0x188] = t0\n 35592: t0 = 1296, jump @1968\n      : @1242 [@dyn 648] (gas: 9)\n 35598: ra = a5 + a3\n 35601: a2 = u64 [s1 + 0x140]\n 35605: a0 = u64 [s1 + 0x1b0]\n 35609: a2 = a2 + a0\n 35612: a0 = u64 [s1 + 0x148]\n 35616: a3 = a5\n 35618: a5 = u64 [s1 + 0x1a8]\n 35622: a0 = a0 + a5\n 35625: jump @1270 if a4 != 0\n      : @1243 (gas: 23)\n 35629: a4 = u64 [s1 + 0x1b8]\n 35633: a4 = a1 <u a4\n 35636: ra = ra + a4\n 35639: t0 = ra ^ a3\n 35642: u64 [s1 + 0x158] = a3\n 35646: a5 = ra <u a3\n 35649: a5 = a4 if t0 == 0\n 35652: a5 = a5 + a2\n 35655: t0 = a5 <u a2\n 35658: a3 = u64 [s1 + 0x1b0]\n 35662: a2 = a2 <u a3\n 35665: a0 = a0 + a2\n 35668: a0 = a0 + t0\n 35671: a2 = a1 | a5\n 35674: a0 = ra | a0\n 35677: a2 = a2 | a0\n 35680: a2 = a2 >> 0x20\n 35683: a0 = a0 | a5\n 35686: a0 = a0 << 0x20\n 35689: a0 = a0 | a2\n 35692: u64 [s1 + 0x168] = t1\n 35696: u64 [s1 + 0x160] = t2\n 35700: jump @1245 if a0 == 0\n      : @1244 (gas: 1)\n 35703: jump @1603\n      : @1245 (gas: 2)\n 35706: a0 = s1 + 0x3880\n 35710: ra = 1298, jump @17\n      : @1246 [@dyn 649] (gas: 15)\n 35717: a3 = s1 + 0x3138\n 35721: a4 = a3 + 0x700\n 35725: a0 = u64 [a4 + 0x60]\n 35728: a1 = u64 [a4 + 0x58]\n 35731: a2 = u64 [a4 + 0x50]\n 35734: a3 = u64 [a4 + 0x48]\n 35737: a4 = s1 + 0x5138\n 35741: a5 = a4 + 0x400\n 35745: u64 [a5 + 0x60] = a0\n 35748: u64 [a5 + 0x58] = a1\n 35751: u64 [a5 + 0x50] = a2\n 35754: u64 [a5 + 0x48] = a3\n 35757: a1 = s1 + 0x5580\n 35761: a0 = u64 [s1 + 0x190]\n 35765: ra = 1300, jump @23\n      : @1247 [@dyn 650] (gas: 1)\n 35772: t0 = 1302, jump @1938\n      : @1248 [@dyn 651] (gas: 18)\n 35778: t0 = u64 [s1 + 0x1a0]\n 35782: t0 = t0 + a5\n 35785: u64 [s1 + 0x1a0] = t0\n 35789: a5 = u64 [s1 + 0x190]\n 35793: u64 [a5 + 0x8] = t2\n 35796: u64 [a5] = t1\n 35798: u64 [a5 + 0x10] = ra\n 35801: t0 = a0\n 35803: u64 [a5 + 0x18] = a0\n 35806: u64 [s1 + 0x170] = ra\n 35810: a0 = u64 [s1 + 0x188]\n 35814: u64 [s1 + 0x1b8] = a0\n 35818: a5 = u64 [s1 + 0x168]\n 35822: u64 [s1 + 0x1b0] = a3\n 35826: a3 = a1\n 35828: u64 [s1 + 0x188] = t0\n 35832: t0 = 0x510\n 35836: jump @1968\n      : @1249 (gas: 3)\n 35839: a0 = s1 + 0x27e0\n 35843: a1 = 0x40\n 35846: ra = 1304, jump @17\n      : @1250 [@dyn 652] (gas: 19)\n 35853: a2 = s1 + 0x2138\n 35857: a5 = a2 + 0x600\n 35861: a3 = u64 [a5 + 0xc0]\n 35865: a4 = u64 [a5 + 0xb8]\n 35869: a0 = u64 [a5 + 0xb0]\n 35873: a1 = u64 [a5 + 0xa8]\n 35877: a5 = s1 + 0x100\n 35881: u64 [a5 + 0xb0] = a0\n 35885: u64 [a5 + 0xa8] = a3\n 35889: a0 = a0 | a3\n 35892: u64 [a5 + 0xb8] = a1\n 35896: a1 = a1 | a4\n 35899: a1 = a1 | a0\n 35902: a1 = a1 >> 0x20\n 35905: u64 [a5 + 0xa0] = a4\n 35909: a0 = a0 | a4\n 35912: a0 = a0 << 0x20\n 35915: a0 = a0 | a1\n 35918: jump @1252 if a0 == 0\n      : @1251 (gas: 1)\n 35921: jump @1603\n      : @1252 (gas: 7)\n 35924: u64 [a2 + 1688] = 0\n 35928: u64 [a2 + 1680] = 0\n 35932: u64 [a2 + 1672] = 0\n 35936: t0 = 0x51a\n 35940: a0 = 0x8c379a000000000\n 35950: a1 = 0x2000\n 35954: fallthrough\n      : @1253 [@dyn 653] (gas: 5)\n 35955: i32 a1 = a1 + 0x7c0\n 35959: a1 = a1 + s1\n 35962: u64 [a2 + 0x6a0] = a0\n 35966: a0 = u64 [s1 + 0x1b8]\n 35970: ra = 1308, jump @19\n      : @1254 [@dyn 654] (gas: 1)\n 35977: t0 = 1310, jump @1961\n      : @1255 [@dyn 655] (gas: 1)\n 35983: jump @1257 if a0 != 0\n      : @1256 (gas: 1)\n 35986: jump @1603\n      : @1257 (gas: 5)\n 35989: a0 = u64 [s1 + 0x1b8]\n 35993: i32 a0 = a0 + 0x4\n 35996: t0 = 0x520\n 36000: a2 = s1 + 0x2138\n 36004: fallthrough\n      : @1258 [@dyn 656] (gas: 6)\n 36005: u64 [a2 + 1664] = 0\n 36009: u64 [a2 + 1656] = 0\n 36013: u64 [a2 + 1640] = 0x20\n 36018: a1 = s1 + 0x27a0\n 36022: u64 [a2 + 1648] = 0\n 36026: ra = 1314, jump @19\n      : @1259 [@dyn 657] (gas: 4)\n 36033: a2 = s1 + 0x100\n 36037: a0 = u64 [a2 + 0xa0]\n 36041: a0 = a0 + 0xffffffffffffffdc\n 36044: t0 = 1316, jump @1963\n      : @1260 [@dyn 658] (gas: 1)\n 36050: jump @1262 if a0 != 0\n      : @1261 (gas: 1)\n 36053: jump @1603\n      : @1262 (gas: 5)\n 36056: a0 = u64 [s1 + 0x1b8]\n 36060: i32 a0 = a0 + 0x24\n 36063: t0 = 0x526\n 36067: a2 = s1 + 0x2138\n 36071: fallthrough\n      : @1263 [@dyn 659] (gas: 6)\n 36072: u64 [a2 + 1632] = 0\n 36076: u64 [a2 + 1624] = 0\n 36080: u64 [a2 + 1608] = 0x15\n 36085: a1 = s1 + 0x2780\n 36089: u64 [a2 + 1616] = 0\n 36093: ra = 1320, jump @19\n      : @1264 [@dyn 660] (gas: 3)\n 36100: a0 = 0xffffffbc\n 36110: a2 = s1 + 0x100\n 36114: t0 = 1322, jump @1963\n      : @1265 [@dyn 661] (gas: 1)\n 36120: jump @1267 if a0 != 0\n      : @1266 (gas: 1)\n 36123: jump @1603\n      : @1267 (gas: 14)\n 36126: a0 = u64 [s1 + 0x1b8]\n 36130: i32 a0 = a0 + 0x44\n 36133: a1 = u64 [0x20090]\n 36138: a2 = u64 [0x20098]\n 36143: a3 = s1 + 0x2138\n 36147: a4 = a3 + 0x600\n 36151: u64 [a4 + 0x40] = a1\n 36154: u64 [a4 + 0x38] = a2\n 36157: a1 = 0x6d61746368000000\n 36167: u64 [a4 + 0x30] = a1\n 36170: a1 = s1 + 0x2760\n 36174: u64 [a3 + 1576] = 0\n 36178: ra = 0x64e\n 36182: jump @19\n      : @1268 (gas: 4)\n 36186: a0 = a1 | a2\n 36189: a1 = u64 [s1 + 0x40]\n 36192: a0 = a0 | a1\n 36195: jump @1284 if a0 != 0\n      : @1269 (gas: 5)\n 36199: u64 [s1 + 416] = 0\n 36203: u64 [s1 + 408] = 0\n 36207: u64 [s1 + 424] = 0\n 36211: u64 [s1 + 432] = 0\n 36215: jump @1289\n      : @1270 (gas: 10)\n 36218: t1 = u64 [s1 + 0x1b0]\n 36222: t0 = u64 [s1 + 0x1b8]\n 36226: a4 = u64 [s1 + 0x90]\n 36230: a5 = u64 [s1 + 0x130]\n 36234: a4 = a4 ^ a5\n 36237: a5 = u64 [s1 + 0x60]\n 36240: a4 = a4 | a5\n 36243: a5 = u64 [s1 + 0x40]\n 36246: a4 = a4 | a5\n 36249: jump @1283 if a4 == 0\n      : @1271 (gas: 12)\n 36253: t2 = a3\n 36255: a4 = a1 <u t0\n 36258: a3 = ra + a4\n 36261: t0 = a3 ^ t2\n 36264: a5 = a3 <u t2\n 36267: a5 = a4 if t0 == 0\n 36270: a5 = a5 + a2\n 36273: a4 = a5 <u a2\n 36276: a2 = a2 <u t1\n 36279: a0 = a0 + a2\n 36282: a0 = a0 + a4\n 36285: t0 = 1324, jump @1979\n      : @1272 [@dyn 662] (gas: 1)\n 36291: jump @1274 if a0 == 0\n      : @1273 (gas: 1)\n 36294: jump @1603\n      : @1274 (gas: 2)\n 36297: a0 = s1 + 0x3c20\n 36301: ra = 1326, jump @17\n      : @1275 [@dyn 663] (gas: 12)\n 36308: a0 = s1 + 0x3938\n 36312: a1 = u64 [a0 + 0x300]\n 36316: u64 [s1 + 0x1b0] = a1\n 36320: a2 = a0 + 0x200\n 36324: a1 = u64 [a2 + 0xf8]\n 36328: u64 [s1 + 0x1a8] = a1\n 36332: a1 = u64 [a2 + 0xf0]\n 36336: u64 [s1 + 0x1a0] = a1\n 36340: a0 = u64 [a2 + 0xe8]\n 36344: u64 [s1 + 0x198] = a0\n 36348: a0 = u64 [s1 + 0x90]\n 36352: t0 = 1328, jump @1987\n      : @1276 [@dyn 664] (gas: 1)\n 36358: ra = 1330, jump @2046\n      : @1277 [@dyn 665] (gas: 1)\n 36364: t0 = 1332, jump @2014\n      : @1278 [@dyn 666] (gas: 1)\n 36370: ra = 1334, jump @2041\n      : @1279 [@dyn 667] (gas: 1)\n 36376: t0 = 1336, jump @1969\n      : @1280 [@dyn 668] (gas: 1)\n 36382: ra = 1338, jump @2041\n      : @1281 [@dyn 669] (gas: 1)\n 36388: t0 = 1340, jump @1950\n      : @1282 [@dyn 670] (gas: 8)\n 36394: a5 = a4 + 0x400\n 36398: u64 [a5 + 0x80] = a3\n 36402: u64 [a5 + 0x78] = a2\n 36405: u64 [a5 + 0x70] = a1\n 36408: u64 [a5 + 0x68] = a0\n 36411: a1 = s1 + 0x55a0\n 36415: a0 = u64 [s1 + 0x190]\n 36419: ra = 1342, jump @23\n      : @1283 [@dyn 671] (gas: 19)\n 36426: a0 = u64 [s1 + 0x30]\n 36429: a1 = u64 [s1 + 0x28]\n 36432: a0 = a0 | a1\n 36435: a1 = u64 [s1 + 0x18]\n 36438: a2 = u64 [s1 + 0x8]\n 36441: a1 = a1 | a2\n 36444: a2 = u64 [s1 + 0x20]\n 36447: a3 = u64 [s1 + 0x10]\n 36450: a2 = a2 | a3\n 36453: a3 = u64 [s1 + 0x38]\n 36456: a3 = a3 + 0x1\n 36459: a4 = s1 + 0x5138\n 36463: a5 = a4 + 0x400\n 36467: u64 [a5 + 0x88] = a3\n 36471: u64 [a5 + 0x90] = a2\n 36475: u64 [a5 + 0x98] = a1\n 36479: u64 [a5 + 0xa0] = a0\n 36483: a0 = 0x55c0\n 36487: jump @1296\n      : @1284 (gas: 1)\n 36490: t0 = 1344, jump @1996\n      : @1285 [@dyn 672] (gas: 1)\n 36496: jump @1287 if a1 != 0\n      : @1286 (gas: 1)\n 36499: jump @1603\n      : @1287 (gas: 4)\n 36502: a0 = u64 [s1 + 0x138]\n 36506: i32 a1 = a0 + 0x20\n 36509: a0 = s1 + 0x3c60\n 36513: ra = 1346, jump @17\n      : @1288 [@dyn 673] (gas: 12)\n 36520: a0 = s1 + 0x3938\n 36524: a2 = a0 + 0x300\n 36528: a1 = u64 [a2 + 0x40]\n 36531: a3 = s1 + 0x100\n 36535: u64 [a3 + 0xb0] = a1\n 36539: a1 = u64 [a2 + 0x38]\n 36542: u64 [a3 + 0xa8] = a1\n 36546: a1 = u64 [a2 + 0x30]\n 36549: u64 [a3 + 0x98] = a1\n 36553: a0 = u64 [a2 + 0x28]\n 36556: u64 [a3 + 0xa0] = a0\n 36560: fallthrough\n      : @1289 (gas: 15)\n 36561: a0 = u64 [s1 + 0x18]\n 36564: a1 = u64 [s1 + 0x8]\n 36567: a0 = a0 | a1\n 36570: u64 [s1 + 0x190] = a0\n 36574: a0 = u64 [s1 + 0x30]\n 36577: a1 = u64 [s1 + 0x28]\n 36580: a0 = a0 | a1\n 36583: u64 [s1 + 0x188] = a0\n 36587: a0 = u64 [s1 + 0x20]\n 36590: a1 = u64 [s1 + 0x10]\n 36593: a0 = a0 | a1\n 36596: u64 [s1 + 0x180] = a0\n 36600: a1 = u64 [s1 + 0x90]\n 36604: a1 = a1 << 0x3\n 36607: t0 = 1348, jump @2011\n      : @1290 [@dyn 674] (gas: 1)\n 36613: ra = 1350, jump @2046\n      : @1291 [@dyn 675] (gas: 7)\n 36619: u64 [s1 + 0x160] = a0\n 36623: u64 [s1 + 0x178] = a1\n 36627: a0 = u64 [s1 + 0x90]\n 36631: i32 a2 = a0 << 0x3\n 36634: a0 = 0xffffffffffffffff\n 36637: a1 = 0xffffffffffffffff\n 36640: ra = 1352, jump @2041\n      : @1292 [@dyn 676] (gas: 10)\n 36646: u64 [s1 + 0x170] = a0\n 36650: u64 [s1 + 0x168] = a1\n 36654: a1 = u64 [s1 + 0x160]\n 36658: a0 = a0 | a1\n 36661: u64 [s1 + 0x160] = a0\n 36665: a0 = u64 [s1 + 0x1b8]\n 36669: i32 a2 = a0 + 0xffffffffffffff80\n 36672: a0 = 0xffffffffffffffff\n 36675: a1 = 0xffffffffffffffff\n 36678: ra = 1354, jump @2041\n      : @1293 [@dyn 677] (gas: 7)\n 36684: a4 = u64 [s1 + 0x1b8]\n 36688: a2 = a4 <u 0x80\n 36692: a3 = u64 [s1 + 0x160]\n 36696: a0 = a3 if a2 != 0\n 36699: a5 = u64 [s1 + 0x168]\n 36703: a3 = u64 [s1 + 0x178]\n 36707: t0 = 1356, jump @1995\n      : @1294 [@dyn 678] (gas: 2)\n 36713: a4 = u64 [s1 + 0x170]\n 36717: t0 = 1358, jump @1986\n      : @1295 [@dyn 679] (gas: 17)\n 36723: a4 = u64 [s1 + 0x38]\n 36726: a0 = a0 | a4\n 36729: a5 = s1 + 0x100\n 36733: a4 = u64 [a5 + 0x80]\n 36737: a1 = a1 | a4\n 36740: a4 = u64 [a5 + 0x88]\n 36744: a3 = a3 | a4\n 36747: a4 = u64 [a5 + 0x90]\n 36751: a2 = a2 | a4\n 36754: a4 = s1 + 0x5138\n 36758: a5 = a4 + 0x400\n 36762: u64 [a5 + 0xb8] = a2\n 36766: u64 [a5 + 0xc0] = a3\n 36770: u64 [a5 + 0xb0] = a1\n 36774: u64 [a5 + 0xa8] = a0\n 36778: a0 = 0x55e0\n 36782: fallthrough\n      : @1296 (gas: 3)\n 36783: a1 = s1 + a0\n 36786: a0 = u64 [s1 + 0x98]\n 36790: ra = 1360, jump @23\n      : @1297 [@dyn 680] (gas: 3)\n 36797: a0 = s1 + 0x3c00\n 36801: a1 = u64 [s1 + 0xa8]\n 36805: ra = 1362, jump @17\n      : @1298 [@dyn 681] (gas: 31)\n 36812: a3 = s1 + 0x3938\n 36816: t0 = u64 [a3 + 0x2c8]\n 36820: a0 = a3 + 0x200\n 36824: a1 = u64 [a0 + 0xd0]\n 36828: a2 = u64 [a0 + 0xd8]\n 36832: a3 = u64 [a0 + 0xe0]\n 36836: a4 = u64 [s1 + 0x70]\n 36839: a4 = a4 + 0x1\n 36842: a5 = a4 <u 0x1\n 36845: a0 = u64 [s1 + 0x78]\n 36848: a5 = a5 + a0\n 36851: a0 = s1 + 0x5138\n 36855: u64 [a0 + 0x4d0] = a5\n 36859: a5 = a5 | a4\n 36862: u64 [a0 + 0x4c8] = a4\n 36866: a4 = a5 <u 0x1\n 36869: a5 = u64 [s1 + 0x88]\n 36873: a4 = a4 + a5\n 36876: u64 [a0 + 0x4d8] = a4\n 36880: a4 = a4 <u a5\n 36883: a5 = u64 [s1 + 0x80]\n 36887: a4 = a4 + a5\n 36890: a5 = a0 + 0x400\n 36894: u64 [a5 + 0xe0] = a4\n 36898: u64 [a0 + 0x500] = a3\n 36902: u64 [a5 + 0xf8] = a2\n 36906: u64 [a5 + 0xf0] = a1\n 36910: u64 [a0 + 0x4e8] = t0\n 36914: a0 = s1 + 0x5600\n 36918: a1 = s1 + 0x5620\n 36922: ra = 1364, jump @23\n      : @1299 [@dyn 682] (gas: 27)\n 36929: a0 = sp + 0xffffffffffffffe0\n 36932: a2 = a0 & 0xffffffffffffffe0\n 36935: sp = a2\n 36937: a0 = u64 [s1 + 0x70]\n 36940: a3 = a0 + 0x2\n 36943: a0 = a3 <u a0\n 36946: a1 = u64 [s1 + 0x78]\n 36949: a4 = a1 + a0\n 36952: a1 = a4 <u a1\n 36955: a1 = a0 if a0 == 0\n 36958: a0 = u64 [s1 + 0x88]\n 36962: a1 = a1 + a0\n 36965: a0 = a1 <u a0\n 36968: a5 = u64 [s1 + 0x80]\n 36972: a0 = a0 + a5\n 36975: u64 [s1 + 0x160] = a0\n 36979: u64 [a2 + 0x18] = a0\n 36982: u64 [s1 + 0x158] = a1\n 36986: u64 [a2 + 0x10] = a1\n 36989: u64 [s1 + 0x168] = a4\n 36993: u64 [a2 + 0x8] = a4\n 36996: u64 [s1 + 0x98] = a2\n 37000: u64 [s1 + 0x170] = a3\n 37004: u64 [a2] = a3\n 37006: a0 = s1 + 0x3be0\n 37010: a1 = u64 [s1 + 0xa0]\n 37014: ra = 1366, jump @17\n      : @1300 [@dyn 683] (gas: 7)\n 37021: a1 = s1 + 0x3938\n 37025: a4 = a1 + 0x200\n 37029: a2 = u64 [a4 + 0xc0]\n 37033: a3 = u64 [a4 + 0xb8]\n 37037: a0 = u64 [a4 + 0xb0]\n 37041: a1 = u64 [a4 + 0xa8]\n 37045: t0 = 1368, jump @2009\n      : @1301 [@dyn 684] (gas: 1)\n 37051: jump @1303 if a0 == 0\n      : @1302 (gas: 1)\n 37054: jump @1603\n      : @1303 (gas: 3)\n 37057: a0 = s1 + 0x3bc0\n 37061: u64 [s1 + 0x138] = a1\n 37065: ra = 1370, jump @17\n      : @1304 [@dyn 685] (gas: 18)\n 37072: a5 = s1 + 0x3938\n 37076: a0 = a5 + 0x200\n 37080: a3 = u64 [a0 + 0xa0]\n 37084: a2 = u64 [a0 + 0x98]\n 37088: a1 = u64 [a0 + 0x90]\n 37092: a0 = a3 >u 0\n 37094: a4 = a2 >u 0\n 37096: a4 = a0 if a3 != 0\n 37099: u64 [s1 + 0xa0] = a1\n 37103: a0 = a1 >u 0\n 37105: u64 [s1 + 0x90] = a2\n 37109: u64 [s1 + 0x60] = a3\n 37112: a2 = a2 | a3\n 37115: u64 [s1 + 0x30] = a0\n 37118: u64 [s1 + 0x38] = a4\n 37121: u64 [s1 + 0x130] = a2\n 37125: a0 = a4 if a2 != 0\n 37128: jump @1306 if a0 == 0\n      : @1305 (gas: 1)\n 37131: jump @1687\n      : @1306 (gas: 5)\n 37134: a0 = u64 [a5 + 0x288]\n 37138: u64 [s1 + 0xa8] = a0\n 37142: a0 = s1 + 0x3ba0\n 37146: a1 = u64 [s1 + 0x98]\n 37150: ra = 1372, jump @21\n      : @1307 [@dyn 686] (gas: 13)\n 37157: a4 = s1 + 0x3938\n 37161: a5 = a4 + 0x200\n 37165: a2 = u64 [a5 + 0x68]\n 37168: a0 = u64 [a5 + 0x70]\n 37171: a1 = u64 [a5 + 0x78]\n 37174: a3 = u64 [a5 + 0x80]\n 37178: u64 [a5 + 0x40] = a3\n 37181: u64 [a5 + 0x38] = a1\n 37184: u64 [a5 + 0x30] = a0\n 37187: a0 = s1 + 0x3b80\n 37191: a1 = s1 + 0x3b60\n 37195: u64 [a5 + 0x28] = a2\n 37198: ra = 1374, jump @1868\n      : @1308 [@dyn 687] (gas: 23)\n 37204: a0 = s1 + 0x3938\n 37208: a1 = a0 + 0x200\n 37212: a3 = u64 [a1 + 0x60]\n 37215: a4 = u64 [a1 + 0x58]\n 37218: a5 = u64 [a1 + 0x50]\n 37221: a2 = u64 [a1 + 0x48]\n 37224: a0 = a3 >u 0\n 37226: a1 = a4 >u 0\n 37228: a1 = a0 if a3 != 0\n 37231: a0 = a5 >u 0\n 37233: u64 [s1 + 0x198] = a2\n 37237: a2 = a2 <u 0x20\n 37240: a2 = a2 ^ 0x1\n 37243: u64 [s1 + 0x1a0] = a5\n 37247: a2 = a0 if a5 != 0\n 37250: u64 [s1 + 0x1a8] = a3\n 37254: u64 [s1 + 0x1b0] = a4\n 37258: a0 = a4 | a3\n 37261: a2 = a1 if a0 != 0\n 37264: a0 = u64 [s1 + 0xa8]\n 37268: a0 = a0 <u 0x20\n 37271: u64 [s1 + 0x40] = a0\n 37274: jump @1316 if a2 == 0\n      : @1309 (gas: 14)\n 37278: a0 = s1 + 0x3938\n 37282: a3 = s1 + 0x100\n 37286: a1 = u64 [a3 + 0x70]\n 37289: a4 = a0 + 0x200\n 37293: u64 [a4 + 0x8] = a1\n 37296: a1 = u64 [a3 + 0x68]\n 37299: u64 [a4 + 0x10] = a1\n 37302: a1 = u64 [a3 + 0x58]\n 37305: u64 [a4 + 0x18] = a1\n 37308: a1 = s1 + 0x3b40\n 37312: a2 = u64 [a3 + 0x60]\n 37315: u64 [a4 + 0x20] = a2\n 37318: a0 = 0\n 37320: ra = 1376, jump @19\n      : @1310 [@dyn 688] (gas: 3)\n 37327: a0 = u64 [s1 + 0x58]\n 37330: a0 = i32 [a0]\n 37332: jump @1312 if a0 >u 31\n      : @1311 (gas: 3)\n 37336: a1 = u64 [s1 + 0x58]\n 37339: u32 [a1 + 0] = 0x20\n 37342: fallthrough\n      : @1312 (gas: 117)\n 37343: a0 = sp + 0xffffffffffffffe0\n 37346: a0 = a0 & 0xffffffffffffffe0\n 37349: u64 [s1 + 0x180] = a0\n 37353: sp = a0\n 37355: i32 a2 = a0 + 0\n 37357: a1 = 0x20\n 37360: a0 = u64 [s1 + 0x50]\n 37363: ecalli 8 // 'hash_keccak_256'\n 37365: a0 = u64 [s1 + 0xa8]\n 37369: a1 = a0 + 0x1f\n 37372: a0 = a1 <u a0\n 37375: a5 = u64 [s1 + 0xa0]\n 37379: a2 = a5 + a0\n 37382: a3 = a2 <u a5\n 37385: a3 = a0 if a0 == 0\n 37388: a4 = u64 [s1 + 0x90]\n 37392: a3 = a3 + a4\n 37395: u64 [s1 + 0x178] = a3\n 37399: a3 = a3 << 0x3b\n 37402: a4 = a2 >> 0x5\n 37405: a4 = a4 | a3\n 37408: a0 = u64 [s1 + 0x180]\n 37412: t0 = u64 [a0 + 0x18]\n 37415: a2 = a2 << 0x3b\n 37418: a0 = u64 [a0 + 0x10]\n 37421: a1 = a1 >> 0x5\n 37424: a2 = a2 | a1\n 37427: t2 = reverse t0\n 37429: a0 = reverse a0\n 37431: a1 = u64 [s1 + 0x40]\n 37434: a1 = 0 if a5 != 0\n 37436: a3 = u64 [s1 + 0x130]\n 37440: a1 = 0 if a3 != 0\n 37442: a4 = 0 if a1 != 0\n 37444: a2 = 0 if a1 != 0\n 37446: t0 = t2 + a2\n 37449: a2 = t0 <u t2\n 37452: a5 = a0 + a2\n 37455: a4 = a4 + a5\n 37458: u64 [s1 + 0x1b8] = a4\n 37462: a5 = a4 ^ a0\n 37465: a3 = a4 <u a0\n 37468: a3 = a2 if a5 == 0\n 37471: u64 [s1 + 0x58] = a3\n 37474: a2 = u64 [s1 + 0x198]\n 37478: ra = a2 + 0x1f\n 37481: a4 = ra <u a2\n 37484: a3 = u64 [s1 + 0x1a0]\n 37488: a2 = a3 + a4\n 37491: a5 = a2 <u a3\n 37494: a5 = a4 if a4 == 0\n 37497: t1 = u64 [s1 + 0x1b0]\n 37501: t1 = t1 + a5\n 37504: a4 = t1 << 0x3b\n 37507: a3 = a2 >> 0x5\n 37510: a3 = a3 | a4\n 37513: a2 = a2 << 0x3b\n 37516: a4 = ra >> 0x5\n 37519: a2 = a2 | a4\n 37522: a2 = a2 + t2\n 37525: u64 [s1 + 0x190] = a2\n 37529: a4 = a2 <u t2\n 37532: t2 = t0\n 37534: a2 = a0 + a4\n 37537: a2 = a2 + a3\n 37540: a3 = a2 ^ a0\n 37543: u64 [s1 + 0x188] = a2\n 37547: a2 = a2 <u a0\n 37550: a2 = a4 if a3 == 0\n 37553: a4 = u64 [s1 + 0x178]\n 37557: a0 = u64 [s1 + 0x90]\n 37561: a0 = a4 <u a0\n 37564: a3 = u64 [s1 + 0x60]\n 37567: a0 = a0 + a3\n 37570: a3 = a4 >> 0x5\n 37573: a4 = a0 << 0x3b\n 37576: a3 = a3 | a4\n 37579: a4 = u64 [s1 + 0x180]\n 37583: t0 = u64 [a4]\n 37585: a4 = u64 [a4 + 0x8]\n 37588: a0 = a0 >> 0x5\n 37591: a3 = 0 if a1 != 0\n 37593: a0 = 0 if a1 != 0\n 37595: a1 = reverse a4\n 37597: a4 = reverse t0\n 37599: a0 = a0 + a4\n 37602: a3 = a3 + a1\n 37605: a5 = a3 <u a1\n 37608: a0 = a0 + a5\n 37611: ra = u64 [s1 + 0x58]\n 37614: ra = ra + a3\n 37617: a3 = ra <u a3\n 37620: t0 = a0 + a3\n 37623: a0 = u64 [s1 + 0x1b0]\n 37627: a0 = t1 <u a0\n 37630: a3 = u64 [s1 + 0x1a8]\n 37634: a0 = a0 + a3\n 37637: a3 = t1 >> 0x5\n 37640: a5 = a0 << 0x3b\n 37643: a3 = a3 | a5\n 37646: a0 = a0 >> 0x5\n 37649: a0 = a0 + a4\n 37652: a5 = s1 + 0x100\n 37656: a4 = u64 [a5 + 0xb8]\n 37660: a3 = a3 + a1\n 37663: a1 = a3 <u a1\n 37666: a0 = a0 + a1\n 37669: a2 = a2 + a3\n 37672: u64 [a5 + 0x80] = a2\n 37676: a1 = a2 <u a3\n 37679: a0 = a0 + a1\n 37682: u64 [a5 + 0x78] = a0\n 37685: a0 = sp + 0xffffffffffffffe0\n 37688: a0 = a0 & 0xffffffffffffffe0\n 37691: u64 [a5 + 0xb0] = a0\n 37695: sp = a0\n 37697: fallthrough\n      : @1313 (gas: 25)\n 37698: a0 = u64 [s1 + 0x190]\n 37702: a0 = t2 <u a0\n 37705: a2 = u64 [s1 + 0x188]\n 37709: a1 = a4 ^ a2\n 37712: a2 = a4 <u a2\n 37715: a2 = a0 if a1 == 0\n 37718: a5 = u64 [s1 + 0x180]\n 37722: a0 = ra <u a5\n 37725: a3 = u64 [s1 + 0x178]\n 37729: a1 = t0 ^ a3\n 37732: a3 = t0 <u a3\n 37735: a3 = a0 if a1 == 0\n 37738: a0 = ra ^ a5\n 37741: a0 = a0 | a1\n 37744: a3 = a2 if a0 == 0\n 37747: u64 [s1 + 0x1a8] = t2\n 37751: a0 = u64 [s1 + 0x1b0]\n 37755: u64 [a0] = t2\n 37757: u64 [s1 + 0x1b8] = a4\n 37761: u64 [a0 + 0x8] = a4\n 37764: u64 [s1 + 0x198] = ra\n 37768: u64 [a0 + 0x10] = ra\n 37771: u64 [s1 + 0x1a0] = t0\n 37775: u64 [a0 + 0x18] = t0\n 37778: jump @1316 if a3 == 0\n      : @1314 (gas: 8)\n 37781: a0 = s1 + 0x5138\n 37785: u64 [a0 + 1312] = 0\n 37789: u64 [a0 + 1304] = 0\n 37793: u64 [a0 + 1296] = 0\n 37797: u64 [a0 + 1288] = 0\n 37801: a1 = s1 + 0x5640\n 37805: a0 = u64 [s1 + 0x1b0]\n 37809: ra = 1378, jump @23\n      : @1315 [@dyn 689] (gas: 14)\n 37816: t2 = u64 [s1 + 0x1a8]\n 37820: t2 = t2 + 0x1\n 37823: a0 = t2 <u 0x1\n 37826: a4 = u64 [s1 + 0x1b8]\n 37830: a4 = a4 + a0\n 37833: a0 = t2 | a4\n 37836: a0 = a0 <u 0x1\n 37839: a1 = u64 [s1 + 0x198]\n 37843: a0 = a0 + a1\n 37846: a1 = a0 <u a1\n 37849: t0 = u64 [s1 + 0x1a0]\n 37853: t0 = t0 + a1\n 37856: ra = a0\n 37858: jump @1313\n      : @1316 (gas: 9)\n 37861: a0 = u64 [s1 + 0x40]\n 37864: a0 = a0 ^ 0x1\n 37867: a1 = u64 [s1 + 0xa0]\n 37871: a2 = u64 [s1 + 0x30]\n 37874: a0 = a2 if a1 != 0\n 37877: a1 = u64 [s1 + 0x38]\n 37880: a2 = u64 [s1 + 0x130]\n 37884: a0 = a1 if a2 != 0\n 37887: jump @1333 if a0 == 0\n      : @1317 (gas: 16)\n 37891: a0 = u64 [s1 + 0xa8]\n 37895: a0 = a0 & 0xffffffffffffffe0\n 37898: u64 [s1 + 0x130] = a0\n 37902: a0 = s1 + 0x3938\n 37906: a1 = u64 [s1 + 0x170]\n 37910: a3 = a0 + 0x100\n 37914: u64 [a3 + 0xc8] = a1\n 37918: a1 = u64 [s1 + 0x168]\n 37922: u64 [a3 + 0xd0] = a1\n 37926: a1 = u64 [s1 + 0x158]\n 37930: u64 [a3 + 0xd8] = a1\n 37934: a1 = s1 + 0x3b00\n 37938: a2 = u64 [s1 + 0x160]\n 37942: u64 [a3 + 0xe0] = a2\n 37946: a0 = 0\n 37948: ra = 1380, jump @19\n      : @1318 [@dyn 690] (gas: 1)\n 37955: t0 = 1382, jump @1998\n      : @1319 [@dyn 691] (gas: 1)\n 37961: ra = 1384, jump @28\n      : @1320 [@dyn 692] (gas: 1)\n 37968: t0 = 1386, jump @1984\n      : @1321 [@dyn 693] (gas: 4)\n 37974: ra = 0x56c\n 37978: ecalli 8 // 'hash_keccak_256'\n 37980: t0 = 0x56e\n 37984: jump @2024\n      : @1322 [@dyn 694] (gas: 1)\n 37987: t0 = 1390, jump @2024\n      : @1323 [@dyn 695] (gas: 1)\n 37993: t0 = 1392, jump @1977\n      : @1324 [@dyn 696] (gas: 9)\n 37999: t0 = a0\n 38001: a1 = u64 [s1 + 0x190]\n 38005: u64 [a1 + 0x18] = a0\n 38008: u64 [s1 + 0x170] = ra\n 38012: u64 [a1 + 0x10] = ra\n 38015: u64 [a1 + 0x8] = t2\n 38018: u64 [a1] = t1\n 38020: u64 [s1 + 0x188] = t0\n 38024: t0 = 1394, jump @1968\n      : @1325 [@dyn 697] (gas: 9)\n 38030: a3 = a3 + a5\n 38033: a2 = u64 [s1 + 0x140]\n 38037: a0 = u64 [s1 + 0x1b0]\n 38041: a2 = a2 + a0\n 38044: a0 = u64 [s1 + 0x148]\n 38048: ra = a5\n 38050: a5 = u64 [s1 + 0x1a8]\n 38054: a0 = a0 + a5\n 38057: jump @1335 if a4 != 0\n      : @1326 (gas: 14)\n 38061: a4 = u64 [s1 + 0x1b8]\n 38065: a4 = a1 <u a4\n 38068: a3 = a3 + a4\n 38071: t0 = a3 ^ ra\n 38074: u64 [s1 + 0x158] = ra\n 38078: a5 = a3 <u ra\n 38081: a5 = a4 if t0 == 0\n 38084: a5 = a5 + a2\n 38087: t0 = a5 <u a2\n 38090: a4 = u64 [s1 + 0x1b0]\n 38094: a2 = a2 <u a4\n 38097: a0 = a0 + a2\n 38100: a0 = a0 + t0\n 38103: t0 = 1396, jump @1979\n      : @1327 [@dyn 698] (gas: 3)\n 38109: u64 [s1 + 0x168] = t1\n 38113: u64 [s1 + 0x160] = t2\n 38117: jump @1329 if a0 == 0\n      : @1328 (gas: 1)\n 38120: jump @1603\n      : @1329 (gas: 2)\n 38123: a0 = s1 + 0x38e0\n 38127: ra = 1398, jump @17\n      : @1330 [@dyn 699] (gas: 15)\n 38134: a3 = s1 + 0x3138\n 38138: a4 = a3 + 0x700\n 38142: a0 = u64 [a4 + 0xc0]\n 38146: a1 = u64 [a4 + 0xb8]\n 38150: a2 = u64 [a4 + 0xb0]\n 38154: a3 = u64 [a4 + 0xa8]\n 38158: a4 = s1 + 0x5138\n 38162: a5 = a4 + 0x500\n 38166: u64 [a5 + 0x40] = a0\n 38169: u64 [a5 + 0x38] = a1\n 38172: u64 [a5 + 0x30] = a2\n 38175: u64 [a5 + 0x28] = a3\n 38178: a1 = s1 + 0x5660\n 38182: a0 = u64 [s1 + 0x190]\n 38186: ra = 1400, jump @23\n      : @1331 [@dyn 700] (gas: 1)\n 38193: t0 = 1402, jump @1938\n      : @1332 [@dyn 701] (gas: 18)\n 38199: t0 = u64 [s1 + 0x1a0]\n 38203: t0 = t0 + a5\n 38206: u64 [s1 + 0x1a0] = t0\n 38210: a5 = u64 [s1 + 0x190]\n 38214: u64 [a5 + 0x8] = t2\n 38217: u64 [a5] = t1\n 38219: u64 [a5 + 0x10] = ra\n 38222: t0 = a0\n 38224: u64 [a5 + 0x18] = a0\n 38227: u64 [s1 + 0x170] = ra\n 38231: a0 = u64 [s1 + 0x188]\n 38235: u64 [s1 + 0x1b8] = a0\n 38239: a5 = u64 [s1 + 0x168]\n 38243: u64 [s1 + 0x1b0] = a3\n 38247: a3 = a1\n 38249: u64 [s1 + 0x188] = t0\n 38253: t0 = 0x572\n 38257: jump @1968\n      : @1333 (gas: 8)\n 38260: a0 = u64 [s1 + 0xa8]\n 38264: a1 = u64 [s1 + 0x90]\n 38268: a0 = a0 | a1\n 38271: a1 = u64 [s1 + 0xa0]\n 38275: a2 = u64 [s1 + 0x60]\n 38278: a1 = a1 | a2\n 38281: a0 = a0 | a1\n 38284: jump @1349 if a0 != 0\n      : @1334 (gas: 5)\n 38288: u64 [s1 + 352] = 0\n 38292: u64 [s1 + 344] = 0\n 38296: u64 [s1 + 360] = 0\n 38300: u64 [s1 + 368] = 0\n 38304: jump @1354\n      : @1335 (gas: 12)\n 38307: t2 = u64 [s1 + 0x1b0]\n 38311: t1 = u64 [s1 + 0x1b8]\n 38315: a4 = u64 [s1 + 0xa8]\n 38319: a5 = u64 [s1 + 0x130]\n 38323: a4 = a4 ^ a5\n 38326: a5 = u64 [s1 + 0x90]\n 38330: t0 = a4 | a5\n 38333: a5 = u64 [s1 + 0xa0]\n 38337: a4 = u64 [s1 + 0x60]\n 38340: a5 = a5 | a4\n 38343: a4 = t0 | a5\n 38346: jump @1348 if a4 == 0\n      : @1336 (gas: 11)\n 38350: a4 = a1 <u t1\n 38353: a3 = a3 + a4\n 38356: t0 = a3 ^ ra\n 38359: a5 = a3 <u ra\n 38362: a5 = a4 if t0 == 0\n 38365: a5 = a5 + a2\n 38368: a4 = a5 <u a2\n 38371: a2 = a2 <u t2\n 38374: a0 = a0 + a2\n 38377: a0 = a0 + a4\n 38380: t0 = 1404, jump @1979\n      : @1337 [@dyn 702] (gas: 1)\n 38386: jump @1339 if a0 == 0\n      : @1338 (gas: 1)\n 38389: jump @1603\n      : @1339 (gas: 2)\n 38392: a0 = s1 + 0x3ae0\n 38396: ra = 1406, jump @17\n      : @1340 [@dyn 703] (gas: 12)\n 38403: a0 = s1 + 0x3938\n 38407: a2 = a0 + 0x100\n 38411: a1 = u64 [a2 + 0xc0]\n 38415: u64 [s1 + 0x1b0] = a1\n 38419: a1 = u64 [a2 + 0xb8]\n 38423: u64 [s1 + 0x1a8] = a1\n 38427: a1 = u64 [a2 + 0xb0]\n 38431: u64 [s1 + 0x1a0] = a1\n 38435: a0 = u64 [a2 + 0xa8]\n 38439: u64 [s1 + 0x198] = a0\n 38443: a0 = u64 [s1 + 0xa8]\n 38447: t0 = 1408, jump @1987\n      : @1341 [@dyn 704] (gas: 1)\n 38453: ra = 1410, jump @2046\n      : @1342 [@dyn 705] (gas: 1)\n 38459: t0 = 1412, jump @2014\n      : @1343 [@dyn 706] (gas: 1)\n 38465: ra = 1414, jump @2041\n      : @1344 [@dyn 707] (gas: 1)\n 38471: t0 = 1416, jump @1969\n      : @1345 [@dyn 708] (gas: 1)\n 38477: ra = 1418, jump @2041\n      : @1346 [@dyn 709] (gas: 1)\n 38483: t0 = 1420, jump @1950\n      : @1347 [@dyn 710] (gas: 8)\n 38489: a5 = a4 + 0x500\n 38493: u64 [a5 + 0x60] = a3\n 38496: u64 [a5 + 0x58] = a2\n 38499: u64 [a5 + 0x50] = a1\n 38502: u64 [a5 + 0x48] = a0\n 38505: a1 = s1 + 0x5680\n 38509: a0 = u64 [s1 + 0x190]\n 38513: ra = 1422, jump @23\n      : @1348 [@dyn 711] (gas: 23)\n 38520: a2 = u64 [s1 + 0x90]\n 38524: a0 = a2 >> 0x3f\n 38527: a1 = u64 [s1 + 0x60]\n 38530: a1 = a1 << 0x1\n 38533: a0 = a0 | a1\n 38536: a3 = u64 [s1 + 0xa0]\n 38540: a1 = a3 >> 0x3f\n 38543: a2 = a2 << 0x1\n 38546: a1 = a1 | a2\n 38549: a4 = u64 [s1 + 0xa8]\n 38553: a2 = a4 >> 0x3f\n 38556: a3 = a3 << 0x1\n 38559: a2 = a2 | a3\n 38562: a3 = a4 << 0x1\n 38565: a3 = a3 + 0x1\n 38568: a4 = s1 + 0x5138\n 38572: a5 = a4 + 0x500\n 38576: u64 [a5 + 0x68] = a3\n 38579: u64 [a5 + 0x70] = a2\n 38582: u64 [a5 + 0x78] = a1\n 38585: u64 [a5 + 0x80] = a0\n 38589: a0 = 0x56a0\n 38593: jump @1360\n      : @1349 (gas: 1)\n 38596: t0 = 1424, jump @1996\n      : @1350 [@dyn 712] (gas: 1)\n 38602: jump @1352 if a1 != 0\n      : @1351 (gas: 1)\n 38605: jump @1603\n      : @1352 (gas: 4)\n 38608: a0 = u64 [s1 + 0x138]\n 38612: i32 a1 = a0 + 0x20\n 38615: a0 = s1 + 0x3b20\n 38619: ra = 1426, jump @17\n      : @1353 [@dyn 713] (gas: 12)\n 38626: a0 = s1 + 0x3938\n 38630: a1 = u64 [a0 + 0x200]\n 38634: a2 = s1 + 0x100\n 38638: u64 [a2 + 0x70] = a1\n 38641: a3 = a0 + 0x100\n 38645: a1 = u64 [a3 + 0xf8]\n 38649: u64 [a2 + 0x68] = a1\n 38652: a1 = u64 [a3 + 0xf0]\n 38656: u64 [a2 + 0x58] = a1\n 38659: a0 = u64 [a3 + 0xe8]\n 38663: u64 [a2 + 0x60] = a0\n 38666: fallthrough\n      : @1354 (gas: 20)\n 38667: a2 = u64 [s1 + 0xa0]\n 38671: a0 = a2 >> 0x3f\n 38674: a3 = u64 [s1 + 0x90]\n 38678: a1 = a3 << 0x1\n 38681: a0 = a0 | a1\n 38684: u64 [s1 + 0x1b0] = a0\n 38688: a0 = a3 >> 0x3f\n 38691: a1 = u64 [s1 + 0x60]\n 38694: a1 = a1 << 0x1\n 38697: a0 = a0 | a1\n 38700: u64 [s1 + 0x1a8] = a0\n 38704: a3 = u64 [s1 + 0xa8]\n 38708: a0 = a3 >> 0x3f\n 38711: a1 = a2 << 0x1\n 38714: a0 = a0 | a1\n 38717: u64 [s1 + 0x1a0] = a0\n 38721: a0 = a3 << 0x1\n 38724: u64 [s1 + 0x198] = a0\n 38728: a1 = a3 << 0x3\n 38731: t0 = 1428, jump @2011\n      : @1355 [@dyn 714] (gas: 1)\n 38737: ra = 1430, jump @2046\n      : @1356 [@dyn 715] (gas: 7)\n 38743: u64 [s1 + 0x178] = a0\n 38747: u64 [s1 + 0x190] = a1\n 38751: a0 = u64 [s1 + 0xa8]\n 38755: i32 a2 = a0 << 0x3\n 38758: a0 = 0xffffffffffffffff\n 38761: a1 = 0xffffffffffffffff\n 38764: ra = 1432, jump @2041\n      : @1357 [@dyn 716] (gas: 10)\n 38770: u64 [s1 + 0x188] = a0\n 38774: u64 [s1 + 0x180] = a1\n 38778: a1 = u64 [s1 + 0x178]\n 38782: a0 = a0 | a1\n 38785: u64 [s1 + 0x178] = a0\n 38789: a0 = u64 [s1 + 0x1b8]\n 38793: i32 a2 = a0 + 0xffffffffffffff80\n 38796: a0 = 0xffffffffffffffff\n 38799: a1 = 0xffffffffffffffff\n 38802: ra = 1434, jump @2041\n      : @1358 [@dyn 717] (gas: 7)\n 38808: a4 = u64 [s1 + 0x1b8]\n 38812: a2 = a4 <u 0x80\n 38816: a3 = u64 [s1 + 0x178]\n 38820: a0 = a3 if a2 != 0\n 38823: a5 = u64 [s1 + 0x180]\n 38827: a3 = u64 [s1 + 0x190]\n 38831: t0 = 1436, jump @1995\n      : @1359 [@dyn 718] (gas: 27)\n 38837: a4 = u64 [s1 + 0x188]\n 38841: a4 = 0 if a2 == 0\n 38843: a1 = u64 [s1 + 0x158]\n 38847: a1 = a1 & ~a3\n 38850: a2 = u64 [s1 + 0x160]\n 38854: a0 = a2 & ~a0\n 38857: a2 = u64 [s1 + 0x168]\n 38861: a2 = a2 & ~a4\n 38864: a3 = u64 [s1 + 0x170]\n 38868: a3 = a3 & ~a5\n 38871: a5 = s1 + 0x100\n 38875: a4 = u64 [a5 + 0x98]\n 38879: a0 = a0 | a4\n 38882: a4 = u64 [a5 + 0xa0]\n 38886: a1 = a1 | a4\n 38889: a4 = u64 [a5 + 0xa8]\n 38893: a3 = a3 | a4\n 38896: a4 = u64 [a5 + 0xb0]\n 38900: a2 = a2 | a4\n 38903: a4 = s1 + 0x5138\n 38907: a5 = a4 + 0x500\n 38911: u64 [a5 + 0x98] = a2\n 38915: u64 [a5 + 0xa0] = a3\n 38919: u64 [a5 + 0x90] = a1\n 38923: u64 [a5 + 0x88] = a0\n 38927: a0 = 0x56c0\n 38931: fallthrough\n      : @1360 (gas: 3)\n 38932: a1 = s1 + a0\n 38935: a0 = u64 [s1 + 0x98]\n 38939: ra = 1438, jump @23\n      : @1361 [@dyn 719] (gas: 8)\n 38946: a0 = sp + 0xffffffffffffffe0\n 38949: a5 = a0 & 0xffffffffffffffe0\n 38952: sp = a5\n 38954: a1 = u64 [s1 + 0x70]\n 38957: a0 = a1 + 0x3\n 38960: a1 = a0 <u a1\n 38963: a3 = u64 [s1 + 0x78]\n 38966: t0 = 1440, jump @2010\n      : @1362 [@dyn 720] (gas: 13)\n 38972: a1 = u64 [s1 + 0x88]\n 38976: a3 = a3 + a1\n 38979: a1 = a3 <u a1\n 38982: a4 = u64 [s1 + 0x80]\n 38986: a1 = a1 + a4\n 38989: u64 [s1 + 0x1b8] = a5\n 38993: u64 [a5 + 0x10] = a3\n 38996: u64 [a5 + 0x8] = a2\n 38999: u64 [a5] = a0\n 39001: u64 [a5 + 0x18] = a1\n 39004: a0 = s1 + 0x3ac0\n 39008: a1 = u64 [s1 + 0x68]\n 39011: ra = 1442, jump @17\n      : @1363 [@dyn 721] (gas: 2)\n 39018: a0 = 0x4000\n 39022: t0 = 1444, jump @2033\n      : @1364 [@dyn 722] (gas: 12)\n 39028: a0 = u64 [a4 + 0x98]\n 39032: a1 = u64 [a4 + 0xa0]\n 39036: a2 = u64 [a4 + 0x90]\n 39040: a3 = u64 [a4 + 0x88]\n 39044: a1 = a1 | a2\n 39047: a0 = a0 | a3\n 39050: a0 = a0 | a1\n 39053: a0 = a0 >u 0\n 39055: u64 [s1 + 0x1b0] = a0\n 39059: a0 = s1 + 0x3aa0\n 39063: a1 = u64 [s1 + 0x1b8]\n 39067: ra = 1446, jump @21\n      : @1365 [@dyn 723] (gas: 2)\n 39074: a0 = 0x4000\n 39078: t0 = 1448, jump @2033\n      : @1366 [@dyn 724] (gas: 16)\n 39084: a0 = u64 [a4 + 0x68]\n 39087: a1 = u64 [a4 + 0x70]\n 39090: a2 = u64 [a4 + 0x80]\n 39094: a3 = u64 [a4 + 0x78]\n 39097: a0 = a0 & 0xffffffffffffff00\n 39101: a4 = u64 [s1 + 0x1b0]\n 39105: a0 = a0 | a4\n 39108: a4 = s1 + 0x5138\n 39112: a5 = a4 + 0x500\n 39116: u64 [a5 + 0xc0] = a2\n 39120: u64 [a5 + 0xb8] = a3\n 39124: u64 [a5 + 0xb0] = a1\n 39128: u64 [a5 + 0xa8] = a0\n 39132: a1 = s1 + 0x56e0\n 39136: a0 = u64 [s1 + 0x1b8]\n 39140: ra = 1450, jump @23\n      : @1367 [@dyn 725] (gas: 3)\n 39147: a0 = s1 + 0x3a80\n 39151: a1 = u64 [s1 + 0x48]\n 39154: ra = 1452, jump @17\n      : @1368 [@dyn 726] (gas: 30)\n 39161: t2 = s1 + 0x3938\n 39165: t0 = u64 [t2 + 0x148]\n 39169: t1 = u64 [t2 + 0x150]\n 39173: a0 = u64 [s1 + 0x70]\n 39176: a2 = a0 + 0x4\n 39179: a3 = a2 <u a0\n 39182: a0 = u64 [s1 + 0x78]\n 39185: a4 = a0 + a3\n 39188: a5 = a4 <u a0\n 39191: a5 = a3 if a3 == 0\n 39194: ra = u64 [t2 + 0x158]\n 39198: a0 = u64 [s1 + 0x88]\n 39202: a5 = a5 + a0\n 39205: a0 = a5 <u a0\n 39208: a1 = u64 [s1 + 0x80]\n 39212: a0 = a0 + a1\n 39215: a1 = u64 [t2 + 0x160]\n 39219: a3 = s1 + 0x5138\n 39223: u64 [a3 + 0x5e0] = a0\n 39227: a0 = a3 + 0x500\n 39231: u64 [a0 + 0xd8] = a5\n 39235: u64 [a0 + 0xd0] = a4\n 39239: u64 [a0 + 0xc8] = a2\n 39243: u64 [a3 + 0x600] = a1\n 39247: u64 [a3 + 0x5f8] = ra\n 39251: u64 [a3 + 0x5f0] = t1\n 39255: u64 [a3 + 0x5e8] = t0\n 39259: a0 = s1 + 0x5700\n 39263: a1 = s1 + 0x5720\n 39267: ra = 1454, jump @23\n      : @1369 [@dyn 727] (gas: 3)\n 39274: a0 = s1 + 0x3a60\n 39278: a1 = 0x40\n 39281: ra = 1456, jump @17\n      : @1370 [@dyn 728] (gas: 7)\n 39288: a1 = s1 + 0x3938\n 39292: a4 = a1 + 0x100\n 39296: a2 = u64 [a4 + 0x40]\n 39299: a3 = u64 [a4 + 0x38]\n 39302: a0 = u64 [a4 + 0x30]\n 39305: a1 = u64 [a4 + 0x28]\n 39308: t0 = 1458, jump @2008\n      : @1371 [@dyn 729] (gas: 1)\n 39314: jump @1373 if a0 == 0\n      : @1372 (gas: 1)\n 39317: jump @1603\n      : @1373 (gas: 8)\n 39320: a2 = s1 + 0x3938\n 39324: u64 [a2 + 288] = 0\n 39328: u64 [a2 + 280] = 0\n 39332: u64 [a2 + 272] = 0\n 39336: a1 = s1 + 0x3a40\n 39340: u64 [a2 + 264] = 0x60\n 39345: a0 = u64 [s1 + 0x1b8]\n 39349: ra = 1460, jump @19\n      : @1374 [@dyn 730] (gas: 5)\n 39356: a1 = u64 [s1 + 0x1b8]\n 39360: a0 = a1 + 0x60\n 39363: a1 = a0 <u a1\n 39366: a3 = u64 [s1 + 0x1b0]\n 39370: t0 = 1462, jump @1970\n      : @1375 [@dyn 731] (gas: 18)\n 39376: a1 = s1 + 0x3938\n 39380: u64 [a1 + 0xb0] = a2\n 39384: u64 [a1 + 0xa8] = a0\n 39388: a0 = u64 [s1 + 0xf0]\n 39392: u64 [a1 + 0xe0] = a0\n 39396: a0 = u64 [s1 + 0xf8]\n 39400: u64 [a1 + 0xd8] = a0\n 39404: a0 = u64 [s1 + 0x100]\n 39408: u64 [a1 + 0xd0] = a0\n 39412: a0 = u64 [s1 + 0x108]\n 39416: u64 [a1 + 0xc8] = a0\n 39420: u64 [a1 + 0xb8] = a3\n 39424: a3 = a1\n 39426: a0 = s1 + 0x3a20\n 39430: a1 = s1 + 0x3a00\n 39434: a2 = s1 + 0x39e0\n 39438: u64 [a3 + 0xc0] = a4\n 39442: ra = 1464, jump @1707\n      : @1376 [@dyn 732] (gas: 14)\n 39448: a3 = s1 + 0x100\n 39452: a0 = u64 [a3 + 0xa0]\n 39456: a1 = u64 [a3 + 0xa8]\n 39460: a1 = a1 | a0\n 39463: a0 = 0x100000000\n 39473: u64 [a3 + 0x90] = a0\n 39477: a0 = 0xffffffe0\n 39487: a2 = u64 [a3 + 0xb8]\n 39491: a0 = a2 <u a0\n 39494: a2 = u64 [a3 + 0xb0]\n 39498: a0 = 0 if a2 != 0\n 39500: u64 [a3 + 0x98] = a1\n 39504: a0 = 0 if a1 != 0\n 39506: jump @1378 if a0 != 0\n      : @1377 (gas: 1)\n 39509: jump @1603\n      : @1378 (gas: 21)\n 39512: a2 = s1 + 0x3938\n 39516: a0 = u64 [a2 + 0x100]\n 39520: u64 [s1 + 0x170] = a0\n 39524: a0 = u64 [a2 + 0xf8]\n 39528: u64 [s1 + 0x178] = a0\n 39532: a0 = u64 [a2 + 0xf0]\n 39536: u64 [s1 + 0x180] = a0\n 39540: a0 = u64 [a2 + 0xe8]\n 39544: u64 [s1 + 0x188] = a0\n 39548: a0 = u64 [s1 + 0x1b8]\n 39552: i32 a0 = a0 + 0x20\n 39555: a1 = u64 [s1 + 0xd0]\n 39559: u64 [a2 + 0x88] = a1\n 39563: a1 = u64 [s1 + 0xd8]\n 39567: u64 [a2 + 0x90] = a1\n 39571: a1 = u64 [s1 + 0xe0]\n 39575: u64 [a2 + 0x98] = a1\n 39579: a1 = s1 + 0x39c0\n 39583: a3 = u64 [s1 + 0xe8]\n 39587: u64 [a2 + 0xa0] = a3\n 39591: ra = 1466, jump @19\n      : @1379 [@dyn 733] (gas: 10)\n 39598: a2 = s1 + 0x100\n 39602: a0 = u64 [a2 + 0x90]\n 39606: a0 = a0 + 0xffffffffffffffc0\n 39609: a1 = u64 [a2 + 0xb8]\n 39613: a0 = a1 <u a0\n 39616: a1 = u64 [a2 + 0xb0]\n 39620: a0 = 0 if a1 != 0\n 39622: a1 = u64 [a2 + 0x98]\n 39626: a0 = 0 if a1 != 0\n 39628: jump @1381 if a0 != 0\n      : @1380 (gas: 1)\n 39631: jump @1603\n      : @1381 (gas: 32)\n 39634: a5 = u64 [s1 + 0x1b8]\n 39638: a0 = u64 [s1 + 0x188]\n 39642: t1 = a0 <u a5\n 39645: t0 = a0\n 39647: a3 = u64 [s1 + 0x1b0]\n 39651: a0 = u64 [s1 + 0x180]\n 39655: a1 = a0 ^ a3\n 39658: a2 = a0 <u a3\n 39661: ra = a3\n 39663: a2 = t1 if a1 == 0\n 39666: a3 = u64 [s1 + 0x1a0]\n 39670: a4 = u64 [s1 + 0x178]\n 39674: a1 = a4 - a3\n 39677: t2 = a4 <u a3\n 39680: a3 = u64 [s1 + 0x1a8]\n 39684: a4 = u64 [s1 + 0x170]\n 39688: a4 = a4 - a3\n 39691: a4 = a4 - t2\n 39694: a3 = a1 <u a2\n 39697: a4 = a4 - a3\n 39700: a1 = a1 - a2\n 39703: a2 = a0 - ra\n 39706: a2 = a2 - t1\n 39709: a3 = t0 - a5\n 39712: i32 a0 = a5 + 0x40\n 39715: a5 = s1 + 0x3938\n 39719: u64 [a5 + 0x68] = a3\n 39722: u64 [a5 + 0x70] = a2\n 39725: u64 [a5 + 0x78] = a1\n 39728: a1 = s1 + 0x39a0\n 39732: u64 [a5 + 0x80] = a4\n 39736: ra = 1468, jump @19\n      : @1382 [@dyn 734] (gas: 3)\n 39743: t0 = 0x5be\n 39747: a1 = s1 + 0x3938\n 39751: fallthrough\n      : @1383 [@dyn 735] (gas: 21)\n 39752: a0 = u64 [s1 + 0x170]\n 39756: u64 [a1 + 0x20] = a0\n 39759: a0 = u64 [s1 + 0x178]\n 39763: u64 [a1 + 0x18] = a0\n 39766: a0 = u64 [s1 + 0x180]\n 39770: u64 [a1 + 0x10] = a0\n 39773: a0 = u64 [s1 + 0x188]\n 39777: u64 [a1 + 0x8] = a0\n 39780: a0 = u64 [s1 + 0xb0]\n 39784: u64 [a1 + 0x40] = a0\n 39787: a0 = u64 [s1 + 0xb8]\n 39791: u64 [a1 + 0x38] = a0\n 39794: a0 = u64 [s1 + 0xc0]\n 39798: u64 [a1 + 0x30] = a0\n 39801: a4 = a1\n 39803: a0 = s1 + 0x3980\n 39807: a1 = s1 + 0x3960\n 39811: a2 = s1 + 0x3940\n 39815: a3 = u64 [s1 + 0xc8]\n 39819: u64 [a4 + 0x28] = a3\n 39822: ra = 1472, jump @1707\n      : @1384 [@dyn 736] (gas: 18)\n 39828: a1 = s1 + 0x3938\n 39832: a0 = u64 [a1 + 0x50]\n 39835: t0 = u64 [a1 + 0x60]\n 39838: t1 = u64 [a1 + 0x48]\n 39841: a3 = u64 [a1 + 0x58]\n 39844: a1 = u64 [s1 + 0x1b0]\n 39848: a4 = a0 ^ a1\n 39851: a5 = a0 <u a1\n 39854: t2 = a1\n 39856: ra = u64 [s1 + 0x1b8]\n 39860: a1 = t1 <u ra\n 39863: a5 = a1 if a4 == 0\n 39866: a2 = u64 [s1 + 0x1a0]\n 39870: a4 = a3 - a2\n 39873: a3 = a3 <u a2\n 39876: a2 = u64 [s1 + 0x1a8]\n 39880: a2 = t0 - a2\n 39883: t0 = 1474, jump @1989\n      : @1385 [@dyn 737] (gas: 1)\n 39889: jump @1387 if a0 == 0\n      : @1386 (gas: 1)\n 39892: jump @1603\n      : @1387 (gas: 24)\n 39895: t0 = s1 + 0x3138\n 39899: a0 = u64 [s1 + 0x110]\n 39903: u64 [t0 + 0x7c8] = a0\n 39907: a0 = u64 [s1 + 0x118]\n 39911: u64 [t0 + 0x7d0] = a0\n 39915: a0 = u64 [0x20050]\n 39920: a2 = u64 [0x20058]\n 39925: a3 = u64 [0x20060]\n 39930: a4 = u64 [0x20068]\n 39935: a5 = s1 + 0x3938\n 39939: u64 [a5] = a0\n 39941: a0 = a5 + 0xffffffffffffff00\n 39945: u64 [a0 + 0xf8] = a2\n 39949: u64 [a0 + 0xf0] = a3\n 39953: u64 [a0 + 0xe8] = a4\n 39957: a4 = s1 + 0x100\n 39961: a0 = u64 [a4 + 0x20]\n 39964: u64 [t0 + 0x7d8] = a0\n 39968: a2 = s1 + 0x3920\n 39972: a3 = s1 + 0x3900\n 39976: a0 = u64 [a4 + 0x28]\n 39979: u64 [t0 + 0x7e0] = a0\n 39983: a0 = u64 [a4 + 0xb8]\n 39987: ra = 1476, jump @24\n      : @1388 [@dyn 738] (gas: 6)\n 39994: a0 = 0\n 39996: a1 = u64 [s1 + 0x50]\n 39999: a2 = 0\n 40001: ecalli 13 // 'seal_return'\n 40003: a1 = 0x20200\n 40008: jump @1605\n      : @1389 (gas: 9)\n 40011: a0 = 0xffffff80\n 40021: a2 = s1 + 0x100\n 40025: a1 = u64 [a2 + 0x30]\n 40028: a0 = a1 <u a0\n 40031: a1 = u64 [a2 + 0x28]\n 40034: a0 = 0 if a1 != 0\n 40036: a1 = u64 [a2 + 0x10]\n 40039: a0 = 0 if a1 != 0\n 40041: jump @1391 if a0 != 0\n      : @1390 (gas: 1)\n 40044: jump @1603\n      : @1391 (gas: 31)\n 40047: a5 = u64 [s1 + 0x130]\n 40051: a0 = u64 [s1 + 0x1a0]\n 40055: t1 = a0 <u a5\n 40058: t2 = a0\n 40060: a3 = u64 [s1 + 0x128]\n 40064: t0 = u64 [s1 + 0x190]\n 40068: a1 = t0 ^ a3\n 40071: a2 = t0 <u a3\n 40074: ra = a3\n 40076: a2 = t1 if a1 == 0\n 40079: a3 = u64 [s1 + 0x120]\n 40083: a4 = u64 [s1 + 0x188]\n 40087: a1 = a4 - a3\n 40090: a0 = a1 <u a2\n 40093: a4 = a4 <u a3\n 40096: a0 = a0 + a4\n 40099: a3 = u64 [s1 + 0x118]\n 40103: a4 = u64 [s1 + 0x180]\n 40107: a4 = a4 - a3\n 40110: a4 = a4 - a0\n 40113: a1 = a1 - a2\n 40116: a2 = t0 - ra\n 40119: a2 = a2 - t1\n 40122: a3 = t2 - a5\n 40125: i32 a0 = a5 + 0x80\n 40129: u64 [s1 + 0x740] = a3\n 40133: u64 [s1 + 0x748] = a2\n 40137: u64 [s1 + 0x750] = a1\n 40141: a1 = s1 + 0x740\n 40145: u64 [s1 + 0x758] = a4\n 40149: ra = 1478, jump @19\n      : @1392 [@dyn 739] (gas: 21)\n 40156: a0 = u64 [s1 + 0x180]\n 40160: a1 = s1 + 0x600\n 40164: u64 [a1 + 0xf8] = a0\n 40168: a0 = u64 [s1 + 0x188]\n 40172: u64 [a1 + 0xf0] = a0\n 40176: a0 = u64 [s1 + 0x190]\n 40180: u64 [a1 + 0xe8] = a0\n 40184: a0 = u64 [s1 + 0x1a0]\n 40188: u64 [a1 + 0xe0] = a0\n 40192: a0 = u64 [s1 + 0x70]\n 40195: u64 [s1 + 0x718] = a0\n 40199: a0 = u64 [s1 + 0x78]\n 40202: u64 [s1 + 0x710] = a0\n 40206: a0 = u64 [s1 + 0x80]\n 40210: u64 [s1 + 0x708] = a0\n 40214: a0 = s1 + 0x720\n 40218: a1 = s1 + 0x700\n 40222: a2 = s1 + 0x6e0\n 40226: a3 = u64 [s1 + 0x88]\n 40230: u64 [s1 + 0x700] = a3\n 40234: ra = 1480, jump @1736\n      : @1393 [@dyn 740] (gas: 32)\n 40240: a0 = u64 [s1 + 0x728]\n 40244: t0 = u64 [s1 + 0x738]\n 40248: t1 = u64 [s1 + 0x720]\n 40252: a3 = u64 [s1 + 0x730]\n 40256: a1 = u64 [s1 + 0x128]\n 40260: a4 = a0 ^ a1\n 40263: a5 = a0 <u a1\n 40266: t2 = a1\n 40268: ra = u64 [s1 + 0x130]\n 40272: a1 = t1 <u ra\n 40275: a5 = a1 if a4 == 0\n 40278: a2 = u64 [s1 + 0x120]\n 40282: a4 = a3 - a2\n 40285: a3 = a3 <u a2\n 40288: a2 = u64 [s1 + 0x118]\n 40292: a2 = t0 - a2\n 40295: a2 = a2 - a3\n 40298: a3 = a4 <u a5\n 40301: a2 = a2 - a3\n 40304: a4 = a4 - a5\n 40307: a0 = a0 - t2\n 40310: a0 = a0 - a1\n 40313: a1 = t1 - ra\n 40316: a0 = a0 | a2\n 40319: a2 = a1\n 40321: a1 = a1 | a4\n 40324: a1 = a1 | a0\n 40327: a0 = a0 | a4\n 40330: a1 = a1 >> 0x20\n 40333: a0 = a0 << 0x20\n 40336: a0 = a0 | a1\n 40339: jump @1395 if a0 == 0\n      : @1394 (gas: 1)\n 40342: jump @1603\n      : @1395 (gas: 4)\n 40345: a0 = u64 [s1 + 0x130]\n 40349: a1 = a2\n 40351: u64 [s1 + 0x1b8] = a2\n 40355: ra = 1482, jump @28\n      : @1396 [@dyn 741] (gas: 5)\n 40362: i32 a1 = a0 + 0\n 40364: a2 = i32 [s1 + 0x1b8]\n 40368: a0 = 0\n 40370: ecalli 13 // 'seal_return'\n 40372: jump @853\n      : @1397 (gas: 3)\n 40375: a0 = s1 + 0x26a0\n 40379: a1 = 0x40\n 40382: ra = 1484, jump @17\n      : @1398 [@dyn 742] (gas: 14)\n 40389: a0 = s1 + 0x2138\n 40393: a2 = a0 + 0x500\n 40397: a1 = u64 [a2 + 0x80]\n 40401: u64 [s1 + 0x1b0] = a1\n 40405: a1 = u64 [a2 + 0x78]\n 40408: u64 [s1 + 0x1a8] = a1\n 40412: a1 = u64 [a2 + 0x70]\n 40415: u64 [s1 + 0x1a0] = a1\n 40419: a0 = u64 [a2 + 0x68]\n 40422: u64 [s1 + 0x1b8] = a0\n 40426: ra = 0x5ce\n 40430: ecalli 12 // 'return_data_size'\n 40432: t0 = 0x5d0\n 40436: jump @1976\n      : @1399 [@dyn 743] (gas: 1)\n 40439: t0 = 1488, jump @1976\n      : @1400 [@dyn 744] (gas: 1)\n 40445: jump @1402 if a1 == 0\n      : @1401 (gas: 1)\n 40448: jump @1603\n      : @1402 (gas: 2)\n 40451: a1 = a0 >> 0x20\n 40454: jump @1404 if a1 == 0\n      : @1403 (gas: 1)\n 40457: jump @1603\n      : @1404 (gas: 1)\n 40460: t0 = 1490, jump @2020\n      : @1405 [@dyn 745] (gas: 1)\n 40466: ra = 1492, jump @28\n      : @1406 [@dyn 746] (gas: 11)\n 40473: a1 = s1 + 0x4938\n 40477: a2 = u64 [s1 + 0x1a8]\n 40481: u32 [a1 + 0x648] = a2\n 40485: i32 a0 = a0 + 0\n 40487: a1 = s1 + 0x5000\n 40491: i32 a1 = a1 + 0xffffffffffffff80\n 40494: a2 = 0\n 40496: ecalli 11 // 'return_data_copy'\n 40498: a0 = s1 + 0x4938\n 40502: a0 = i32 [a0 + 0x648]\n 40506: fallthrough\n      : @1407 (gas: 2)\n 40507: a1 = u64 [s1 + 0x1b0]\n 40511: jump @1409 if a0 >=u a1\n      : @1408 (gas: 1)\n 40514: jump @1603\n      : @1409 (gas: 2)\n 40517: ecalli 12 // 'return_data_size'\n 40519: fallthrough\n      : @1410 (gas: 3)\n 40520: a1 = a0\n 40522: a0 = a0 >> 0x20\n 40525: jump @1412 if a0 == 0\n      : @1411 (gas: 1)\n 40528: jump @1603\n      : @1412 (gas: 3)\n 40531: a0 = u64 [s1 + 0x1b8]\n 40535: u64 [s1 + 0x1b0] = a1\n 40539: ra = 1494, jump @28\n      : @1413 [@dyn 747] (gas: 5)\n 40546: i32 a1 = a0 + 0\n 40548: a2 = i32 [s1 + 0x1b0]\n 40552: a0 = 0x1\n 40555: ecalli 13 // 'seal_return'\n 40557: fallthrough\n      : @1414 (gas: 7)\n 40558: a1 = a1 | a0\n 40561: a1 = a1 >> 0x20\n 40564: a2 = u64 [s1 + 0x1b0]\n 40568: a0 = a0 | a2\n 40571: a0 = a0 << 0x20\n 40574: a0 = a0 | a1\n 40577: jump @1416 if a0 == 0\n      : @1415 (gas: 1)\n 40580: jump @1603\n      : @1416 (gas: 9)\n 40583: a2 = s1 + 0x2138\n 40587: u64 [a2 + 1240] = 0\n 40591: u64 [a2 + 1232] = 0\n 40595: u64 [a2 + 1224] = 0\n 40599: a0 = 0x70a0823100000000\n 40609: a1 = s1 + 0x2600\n 40613: u64 [a2 + 0x4e0] = a0\n 40617: a0 = u64 [s1 + 0x1b8]\n 40621: ra = 1496, jump @19\n      : @1417 [@dyn 748] (gas: 4)\n 40628: a0 = u64 [s1 + 0xd8]\n 40632: ra = 0x5da\n 40636: ecalli 5 // 'caller'\n 40638: fallthrough\n      : @1418 [@dyn 749] (gas: 3)\n 40639: a0 = 0xfffffffc\n 40649: a2 = s1 + 0x100\n 40653: t0 = 1500, jump @1981\n      : @1419 [@dyn 750] (gas: 1)\n 40659: jump @1421 if a0 != 0\n      : @1420 (gas: 1)\n 40662: jump @1603\n      : @1421 (gas: 1)\n 40665: t0 = 1502, jump @1966\n      : @1422 [@dyn 751] (gas: 7)\n 40671: u64 [a4 + 1216] = 0\n 40675: a5 = a4 + 0x400\n 40679: u64 [a5 + 0xb8] = a1\n 40683: u64 [a5 + 0xb0] = a2\n 40687: a1 = s1 + 0x25e0\n 40691: u64 [a5 + 0xa8] = a3\n 40695: ra = 1504, jump @19\n      : @1423 [@dyn 752] (gas: 16)\n 40702: ecalli 10 // 'ref_time_left'\n 40704: a0 = u64 [s1 + 0x168]\n 40708: a1 = u64 [s1 + 0x140]\n 40712: u64 [a1 + 0x8] = a0\n 40715: a0 = u64 [s1 + 0x178]\n 40719: u64 [a1] = a0\n 40721: a0 = u64 [s1 + 0x170]\n 40725: u32 [a1 + 0x10] = a0\n 40728: a0 = s1 + 0x4938\n 40732: u64 [a0 + 1664] = 0\n 40736: u64 [a0 + 1656] = 0\n 40740: u64 [a0 + 1648] = 0\n 40744: u64 [a0 + 1640] = 0\n 40748: a1 = 0x24\n 40751: a0 = u64 [s1 + 0x1b8]\n 40755: ra = 1506, jump @28\n      : @1424 [@dyn 753] (gas: 4)\n 40762: u64 [s1 + 0x188] = a0\n 40766: a1 = 0x20\n 40769: a0 = u64 [s1 + 0x1b8]\n 40773: ra = 1508, jump @28\n      : @1425 [@dyn 754] (gas: 28)\n 40780: u64 [s1 + 424] = 0x20\n 40785: a1 = s1 + 0x4938\n 40789: u32 [a1 + 1672] = 0x20\n 40794: u64 [a1 + 1728] = 0\n 40798: u64 [a1 + 1720] = 0\n 40802: u64 [a1 + 1712] = 0\n 40806: u64 [a1 + 1704] = 0\n 40810: a1 = s1 + 0x4fa0\n 40814: a1 = a1 << 0x20\n 40817: a1 = a1 >> 0x20\n 40820: a2 = s1 + 0x4fe0\n 40824: a2 = a2 << 0x20\n 40827: a3 = a2 | a1\n 40830: a1 = u64 [s1 + 0x188]\n 40834: a1 = a1 << 0x20\n 40837: a1 = a1 >> 0x20\n 40840: a2 = 0x2400000000\n 40850: a4 = a1 | a2\n 40853: a0 = a0 << 0x20\n 40856: a0 = a0 >> 0x20\n 40859: a1 = s1 + 0x4fc0\n 40863: a1 = a1 << 0x20\n 40866: a5 = a1 | a0\n 40869: a1 = 0xffffffffffffffff\n 40872: a2 = 0xffffffffffffffff\n 40875: a0 = u64 [s1 + 0x180]\n 40879: ecalli 1 // 'call'\n 40881: fallthrough\n      : @1426 (gas: 1)\n 40882: jump @1457 if a0 != 0\n      : @1427 (gas: 2)\n 40886: ecalli 12 // 'return_data_size'\n 40888: fallthrough\n      : @1428 (gas: 1)\n 40889: jump @1430 if a0 >=u 32\n      : @1429 (gas: 3)\n 40893: ecalli 12 // 'return_data_size'\n 40895: u64 [s1 + 0x1a8] = a0\n 40899: fallthrough\n      : @1430 (gas: 19)\n 40900: a2 = s1 + 0x2138\n 40904: a0 = u64 [s1 + 0x1a8]\n 40908: a4 = a2 + 0x400\n 40912: u64 [a4 + 0x48] = a0\n 40915: a0 = u64 [s1 + 0x1b8]\n 40919: u64 [a4 + 0x68] = a0\n 40922: u64 [s1 + 392] = 0\n 40926: u64 [a2 + 1104] = 0\n 40930: a0 = u64 [s1 + 0x1a0]\n 40934: u64 [a4 + 0x70] = a0\n 40937: u64 [a2 + 1112] = 0\n 40941: a0 = u64 [s1 + 0x1b0]\n 40945: u64 [a4 + 0x78] = a0\n 40948: u64 [a2 + 1120] = 0\n 40952: a0 = s1 + 0x25a0\n 40956: a1 = s1 + 0x2580\n 40960: a3 = u64 [s1 + 0x158]\n 40964: u64 [a4 + 0x80] = a3\n 40968: ra = 1510, jump @1749\n      : @1431 [@dyn 755] (gas: 4)\n 40974: a3 = u64 [s1 + 0x188]\n 40978: a0 = a3 >u 0\n 40980: a1 = u64 [s1 + 0x1a8]\n 40984: t0 = 1512, jump @1964\n      : @1432 [@dyn 756] (gas: 1)\n 40990: jump @1434 if a2 != 0\n      : @1433 (gas: 1)\n 40993: jump @1694\n      : @1434 (gas: 3)\n 40996: a0 = s1 + 0x2560\n 41000: a1 = u64 [s1 + 0x1b8]\n 41004: ra = 1514, jump @17\n      : @1435 [@dyn 757] (gas: 7)\n 41011: a3 = s1 + 0x2138\n 41015: a4 = a3 + 0x400\n 41019: a0 = u64 [a4 + 0x30]\n 41022: a1 = u64 [a4 + 0x40]\n 41025: a2 = u64 [a4 + 0x28]\n 41028: a3 = u64 [a4 + 0x38]\n 41031: t0 = 1516, jump @2025\n      : @1436 [@dyn 758] (gas: 9)\n 41037: t0 = a3 <u a0\n 41040: a5 = u64 [s1 + 0xf8]\n 41044: a4 = a1 ^ a5\n 41047: a1 = a1 <u a5\n 41050: a1 = t0 if a4 == 0\n 41053: a0 = a0 ^ a3\n 41056: a0 = a0 | a4\n 41059: a1 = a2 if a0 == 0\n 41062: jump @1467 if a1 == 0\n      : @1437 (gas: 3)\n 41066: a0 = s1 + 0x1e40\n 41070: a1 = 0x40\n 41073: ra = 1518, jump @17\n      : @1438 [@dyn 759] (gas: 7)\n 41080: a0 = s1 + 0x1938\n 41084: a5 = a0 + 0x500\n 41088: a3 = u64 [a5 + 0x20]\n 41091: a4 = u64 [a5 + 0x18]\n 41094: a2 = u64 [a5 + 0x10]\n 41097: a1 = u64 [a5 + 0x8]\n 41100: t0 = 1520, jump @2000\n      : @1439 [@dyn 760] (gas: 1)\n 41106: jump @1441 if a0 == 0\n      : @1440 (gas: 1)\n 41109: jump @1603\n      : @1441 (gas: 8)\n 41112: a2 = s1 + 0x1938\n 41116: u64 [a2 + 1272] = 0\n 41120: u64 [a2 + 1264] = 0\n 41124: u64 [a2 + 1256] = 0\n 41128: t0 = 0x5f2\n 41132: a0 = 0x8c379a000000000\n 41142: a1 = 0x2000\n 41146: fallthrough\n      : @1442 [@dyn 761] (gas: 5)\n 41147: i32 a1 = a1 + 0xfffffffffffffe20\n 41151: a1 = a1 + s1\n 41154: u64 [a2 + 0x500] = a0\n 41158: a0 = u64 [s1 + 0x1b8]\n 41162: ra = 1524, jump @19\n      : @1443 [@dyn 762] (gas: 1)\n 41169: t0 = 1526, jump @1961\n      : @1444 [@dyn 763] (gas: 1)\n 41175: jump @1446 if a0 != 0\n      : @1445 (gas: 1)\n 41178: jump @1603\n      : @1446 (gas: 5)\n 41181: a0 = u64 [s1 + 0x1b8]\n 41185: i32 a0 = a0 + 0x4\n 41188: t0 = 0x5f8\n 41192: a2 = s1 + 0x1938\n 41196: fallthrough\n      : @1447 [@dyn 764] (gas: 6)\n 41197: u64 [a2 + 1248] = 0\n 41201: u64 [a2 + 1240] = 0\n 41205: u64 [a2 + 1224] = 0x20\n 41210: a1 = s1 + 0x1e00\n 41214: u64 [a2 + 1232] = 0\n 41218: ra = 1530, jump @19\n      : @1448 [@dyn 765] (gas: 4)\n 41225: a2 = s1 + 0x100\n 41229: a0 = u64 [a2 + 0xa0]\n 41233: a0 = a0 + 0xffffffffffffffdc\n 41236: t0 = 1532, jump @1963\n      : @1449 [@dyn 766] (gas: 1)\n 41242: jump @1451 if a0 != 0\n      : @1450 (gas: 1)\n 41245: jump @1603\n      : @1451 (gas: 1)\n 41248: t0 = 1534, jump @2001\n      : @1452 [@dyn 767] (gas: 6)\n 41254: u64 [a2 + 1216] = 0\n 41258: u64 [a2 + 1208] = 0\n 41262: u64 [a2 + 1192] = 0x14\n 41267: a1 = s1 + 0x1de0\n 41271: u64 [a2 + 1200] = 0\n 41275: ra = 1536, jump @19\n      : @1453 [@dyn 768] (gas: 3)\n 41282: a0 = 0xffffffbc\n 41292: a2 = s1 + 0x100\n 41296: t0 = 1538, jump @1963\n      : @1454 [@dyn 769] (gas: 1)\n 41302: jump @1456 if a0 != 0\n      : @1455 (gas: 1)\n 41305: jump @1603\n      : @1456 (gas: 14)\n 41308: a0 = u64 [s1 + 0x1b8]\n 41312: i32 a0 = a0 + 0x44\n 41315: a1 = u64 [0x200f0]\n 41320: a2 = u64 [0x200f8]\n 41325: a3 = s1 + 0x1938\n 41329: a4 = a3 + 0x400\n 41333: u64 [a4 + 0xa0] = a1\n 41337: u64 [a4 + 0x98] = a2\n 41341: a1 = 0x616e636500000000\n 41351: u64 [a4 + 0x90] = a1\n 41355: a1 = s1 + 0x1dc0\n 41359: u64 [a3 + 1160] = 0\n 41363: ra = 0x64e\n 41367: jump @19\n      : @1457 (gas: 3)\n 41371: a0 = s1 + 0x25c0\n 41375: a1 = 0x40\n 41378: ra = 1540, jump @17\n      : @1458 [@dyn 770] (gas: 14)\n 41385: a0 = s1 + 0x2138\n 41389: a2 = a0 + 0x400\n 41393: a1 = u64 [a2 + 0xa0]\n 41397: u64 [s1 + 0x1b0] = a1\n 41401: a1 = u64 [a2 + 0x98]\n 41405: u64 [s1 + 0x1a8] = a1\n 41409: a1 = u64 [a2 + 0x90]\n 41413: u64 [s1 + 0x1a0] = a1\n 41417: a0 = u64 [a2 + 0x88]\n 41421: u64 [s1 + 0x1b8] = a0\n 41425: ra = 0x606\n 41429: ecalli 12 // 'return_data_size'\n 41431: t0 = 0x608\n 41435: jump @1976\n      : @1459 [@dyn 771] (gas: 1)\n 41438: t0 = 1544, jump @1976\n      : @1460 [@dyn 772] (gas: 1)\n 41444: jump @1462 if a1 == 0\n      : @1461 (gas: 1)\n 41447: jump @1603\n      : @1462 (gas: 2)\n 41450: a1 = a0 >> 0x20\n 41453: jump @1464 if a1 == 0\n      : @1463 (gas: 1)\n 41456: jump @1603\n      : @1464 (gas: 1)\n 41459: t0 = 1546, jump @2020\n      : @1465 [@dyn 773] (gas: 1)\n 41465: ra = 1548, jump @28\n      : @1466 [@dyn 774] (gas: 11)\n 41472: a1 = s1 + 0x4938\n 41476: a2 = u64 [s1 + 0x1a8]\n 41480: u32 [a1 + 0x6c8] = a2\n 41484: i32 a0 = a0 + 0\n 41486: a1 = s1 + 0x5000\n 41490: i32 a1 = a1 + 0\n 41492: a2 = 0\n 41494: ecalli 11 // 'return_data_copy'\n 41496: a0 = s1 + 0x4938\n 41500: a0 = i32 [a0 + 0x6c8]\n 41504: jump @1407\n      : @1467 (gas: 4)\n 41507: a0 = u64 [s1 + 0x138]\n 41511: t0 = 0x60e\n 41515: a2 = s1 + 0x2138\n 41519: fallthrough\n      : @1468 [@dyn 775] (gas: 11)\n 41520: a3 = a2 + 0x400\n 41524: u64 [a3 + 0x8] = a0\n 41527: a0 = u64 [s1 + 0x130]\n 41531: u64 [a3 + 0x10] = a0\n 41534: a0 = u64 [s1 + 0x128]\n 41538: u64 [a3 + 0x18] = a0\n 41541: a1 = s1 + 0x2540\n 41545: a0 = u64 [s1 + 0x120]\n 41549: u64 [a3 + 0x20] = a0\n 41552: a0 = 0\n 41554: ra = 1552, jump @19\n      : @1469 [@dyn 776] (gas: 9)\n 41561: a0 = s1 + 0x2138\n 41565: u64 [a0 + 1024] = 0\n 41569: u64 [a0 + 1016] = 0\n 41573: u64 [a0 + 1008] = 0\n 41577: a2 = a0\n 41579: a0 = 0x20\n 41582: a1 = s1 + 0x2520\n 41586: u64 [a2 + 1000] = 0\n 41590: ra = 1554, jump @19\n      : @1470 [@dyn 777] (gas: 3)\n 41597: a0 = u64 [s1 + 0x190]\n 41601: a0 = i32 [a0]\n 41603: jump @1472 if a0 >u 63\n      : @1471 (gas: 3)\n 41607: a1 = u64 [s1 + 0x190]\n 41611: u32 [a1 + 0] = 0x40\n 41614: fallthrough\n      : @1472 (gas: 4)\n 41615: a0 = sp + 0xffffffffffffffe0\n 41618: a0 = a0 & 0xffffffffffffffe0\n 41621: u64 [s1 + 0x1b8] = a0\n 41625: t0 = 1556, jump @1962\n      : @1473 [@dyn 778] (gas: 4)\n 41631: ra = 0x616\n 41635: ecalli 8 // 'hash_keccak_256'\n 41637: t0 = 0x618\n 41641: jump @1941\n      : @1474 [@dyn 779] (gas: 1)\n 41644: t0 = 1560, jump @1941\n      : @1475 [@dyn 780] (gas: 8)\n 41650: a5 = a1 + 0x600\n 41654: u64 [a5 + 0xe8] = a3\n 41658: u64 [a5 + 0xf0] = a2\n 41662: u64 [a5 + 0xf8] = a4\n 41666: u64 [a1 + 0x700] = a0\n 41670: a0 = s1 + 0x2500\n 41674: a1 = s1 + 0x5020\n 41678: ra = 1562, jump @21\n      : @1476 [@dyn 781] (gas: 10)\n 41685: a1 = s1 + 0x2138\n 41689: a0 = u32 [a1 + 0x3d8]\n 41693: u64 [s1 + 0x188] = a0\n 41697: a0 = u64 [a1 + 0x3d0]\n 41701: u64 [s1 + 0x180] = a0\n 41705: a0 = u64 [a1 + 0x3c8]\n 41709: u64 [s1 + 0x158] = a0\n 41713: a0 = s1 + 0x24e0\n 41717: a1 = 0x40\n 41720: ra = 1564, jump @17\n      : @1477 [@dyn 782] (gas: 19)\n 41727: a1 = s1 + 0x2138\n 41731: a4 = a1 + 0x300\n 41735: a0 = u64 [a4 + 0xc0]\n 41739: a2 = u64 [a4 + 0xb8]\n 41743: a3 = u64 [a4 + 0xb0]\n 41747: a1 = u64 [a4 + 0xa8]\n 41751: a4 = s1 + 0x100\n 41755: u64 [a4 + 0xa8] = a0\n 41759: u64 [a4 + 0xb0] = a3\n 41763: a0 = a0 | a3\n 41766: u64 [a4 + 0xb8] = a1\n 41770: a1 = a1 | a2\n 41773: a1 = a1 | a0\n 41776: a1 = a1 >> 0x20\n 41779: u64 [a4 + 0xa0] = a2\n 41783: a0 = a0 | a2\n 41786: a0 = a0 << 0x20\n 41789: a0 = a0 | a1\n 41792: jump @1479 if a0 == 0\n      : @1478 (gas: 1)\n 41795: jump @1603\n      : @1479 (gas: 9)\n 41798: a2 = s1 + 0x2138\n 41802: u64 [a2 + 920] = 0\n 41806: u64 [a2 + 912] = 0\n 41810: u64 [a2 + 904] = 0\n 41814: a0 = 0x23b872dd00000000\n 41824: a1 = s1 + 0x24c0\n 41828: u64 [a2 + 0x3a0] = a0\n 41832: a0 = u64 [s1 + 0x1b8]\n 41836: ra = 1566, jump @19\n      : @1480 [@dyn 783] (gas: 4)\n 41843: a0 = u64 [s1 + 0xd8]\n 41847: ra = 0x620\n 41851: ecalli 5 // 'caller'\n 41853: fallthrough\n      : @1481 [@dyn 784] (gas: 14)\n 41854: a3 = s1 + 0x100\n 41858: a0 = u64 [a3 + 0xa8]\n 41862: a1 = u64 [a3 + 0xa0]\n 41866: a2 = a1 | a0\n 41869: a0 = 0x100000000\n 41879: u64 [a3 + 0x48] = a0\n 41882: a0 = 0xfffffffc\n 41892: a1 = u64 [a3 + 0xb8]\n 41896: a0 = a1 <u a0\n 41899: a1 = u64 [a3 + 0xb0]\n 41903: a0 = 0 if a1 != 0\n 41905: u64 [a3 + 0x50] = a2\n 41908: a0 = 0 if a2 != 0\n 41910: jump @1483 if a0 != 0\n      : @1482 (gas: 1)\n 41913: jump @1603\n      : @1483 (gas: 1)\n 41916: t0 = 1570, jump @1966\n      : @1484 [@dyn 785] (gas: 7)\n 41922: u64 [a4 + 896] = 0\n 41926: a5 = a4 + 0x300\n 41930: u64 [a5 + 0x78] = a1\n 41933: u64 [a5 + 0x70] = a2\n 41936: a1 = s1 + 0x24a0\n 41940: u64 [a5 + 0x68] = a3\n 41943: ra = 1572, jump @19\n      : @1485 [@dyn 786] (gas: 10)\n 41950: a2 = s1 + 0x100\n 41954: a0 = u64 [a2 + 0x48]\n 41957: a0 = a0 + 0xffffffffffffffdc\n 41960: a1 = u64 [a2 + 0xb8]\n 41964: a0 = a1 <u a0\n 41967: a1 = u64 [a2 + 0xb0]\n 41971: a0 = 0 if a1 != 0\n 41973: a1 = u64 [a2 + 0x50]\n 41976: a0 = 0 if a1 != 0\n 41978: jump @1487 if a0 != 0\n      : @1486 (gas: 1)\n 41981: jump @1603\n      : @1487 (gas: 5)\n 41984: a0 = u64 [s1 + 0x1b8]\n 41988: i32 a0 = a0 + 0x24\n 41991: t0 = 0x626\n 41995: a2 = s1 + 0x2138\n 41999: fallthrough\n      : @1488 [@dyn 787] (gas: 10)\n 42000: u64 [a2 + 864] = 0\n 42004: a1 = u64 [s1 + 0x158]\n 42008: a4 = a2 + 0x300\n 42012: u64 [a4 + 0x48] = a1\n 42015: a1 = u64 [s1 + 0x180]\n 42019: u64 [a4 + 0x50] = a1\n 42022: a1 = s1 + 0x2480\n 42026: a3 = u64 [s1 + 0x188]\n 42030: u64 [a4 + 0x58] = a3\n 42033: ra = 1576, jump @19\n      : @1489 [@dyn 788] (gas: 9)\n 42040: a0 = 0xffffffbc\n 42050: a2 = s1 + 0x100\n 42054: a1 = u64 [a2 + 0xb8]\n 42058: a0 = a1 <u a0\n 42061: a1 = u64 [a2 + 0xb0]\n 42065: a0 = 0 if a1 != 0\n 42067: a1 = u64 [a2 + 0x50]\n 42070: a0 = 0 if a1 != 0\n 42072: jump @1491 if a0 != 0\n      : @1490 (gas: 1)\n 42075: jump @1603\n      : @1491 (gas: 5)\n 42078: a0 = u64 [s1 + 0x1b8]\n 42082: i32 a0 = a0 + 0x44\n 42085: t0 = 0x62a\n 42089: a2 = s1 + 0x2138\n 42093: fallthrough\n      : @1492 [@dyn 789] (gas: 11)\n 42094: a1 = u64 [s1 + 0xe0]\n 42098: a4 = a2 + 0x300\n 42102: u64 [a4 + 0x28] = a1\n 42105: a1 = u64 [s1 + 0xe8]\n 42109: u64 [a4 + 0x30] = a1\n 42112: a1 = u64 [s1 + 0xf0]\n 42116: u64 [a4 + 0x38] = a1\n 42119: a1 = s1 + 0x2460\n 42123: a3 = u64 [s1 + 0xf8]\n 42127: u64 [a4 + 0x40] = a3\n 42130: ra = 1580, jump @19\n      : @1493 [@dyn 790] (gas: 16)\n 42137: ecalli 10 // 'ref_time_left'\n 42139: a0 = u64 [s1 + 0x140]\n 42143: a1 = u64 [s1 + 0x168]\n 42147: u64 [a0 + 0x8] = a1\n 42150: a1 = u64 [s1 + 0x178]\n 42154: u64 [a0] = a1\n 42156: a1 = u64 [s1 + 0x170]\n 42160: u32 [a0 + 0x10] = a1\n 42163: a0 = s1 + 0x4938\n 42167: u64 [a0 + 1824] = 0\n 42171: u64 [a0 + 1816] = 0\n 42175: u64 [a0 + 1808] = 0\n 42179: u64 [a0 + 1800] = 0\n 42183: a1 = 0x64\n 42186: a0 = u64 [s1 + 0x1b8]\n 42190: ra = 1582, jump @28\n      : @1494 [@dyn 791] (gas: 4)\n 42197: u64 [s1 + 0x180] = a0\n 42201: a1 = 0x20\n 42204: a0 = u64 [s1 + 0x1b8]\n 42208: ra = 1584, jump @28\n      : @1495 [@dyn 792] (gas: 33)\n 42215: a1 = a0\n 42217: a4 = s1 + 0x100\n 42221: u64 [a4 + 136] = 0x20\n 42226: a2 = s1 + 0x4938\n 42230: a3 = a2 + 0x700\n 42234: u32 [a3 + 40] = 0x20\n 42238: u64 [a3 + 96] = 0xffffffffffffffff\n 42242: u64 [a3 + 88] = 0xffffffffffffffff\n 42246: u64 [a3 + 80] = 0xffffffffffffffff\n 42250: u64 [a3 + 72] = 0xffffffffffffffff\n 42254: a0 = 0x800000000\n 42264: a2 = u64 [a4 + 0x60]\n 42267: a0 = a0 | a2\n 42270: a2 = s1 + 0x5040\n 42274: a2 = a2 << 0x20\n 42277: a2 = a2 >> 0x20\n 42280: a3 = s1 + 0x5080\n 42284: a3 = a3 << 0x20\n 42287: a3 = a3 | a2\n 42290: a2 = u64 [a4 + 0x80]\n 42294: a2 = a2 << 0x20\n 42297: a2 = a2 >> 0x20\n 42300: a4 = 0x6400000000\n 42310: a4 = a4 | a2\n 42313: a1 = a1 << 0x20\n 42316: a1 = a1 >> 0x20\n 42319: a2 = s1 + 0x5060\n 42323: a2 = a2 << 0x20\n 42326: a5 = a2 | a1\n 42329: a1 = 0xffffffffffffffff\n 42332: a2 = 0xffffffffffffffff\n 42335: ecalli 1 // 'call'\n 42337: fallthrough\n      : @1496 (gas: 1)\n 42338: jump @1526 if a0 != 0\n      : @1497 (gas: 2)\n 42342: ecalli 12 // 'return_data_size'\n 42344: fallthrough\n      : @1498 (gas: 1)\n 42345: jump @1500 if a0 >=u 32\n      : @1499 (gas: 3)\n 42349: ecalli 12 // 'return_data_size'\n 42351: u64 [s1 + 0x188] = a0\n 42355: fallthrough\n      : @1500 (gas: 19)\n 42356: a2 = s1 + 0x2138\n 42360: a0 = u64 [s1 + 0x188]\n 42364: a1 = a2 + 0x200\n 42368: u64 [a1 + 0xc8] = a0\n 42372: a0 = u64 [s1 + 0x1b8]\n 42376: u64 [a1 + 0xe8] = a0\n 42380: u64 [s1 + 384] = 0\n 42384: u64 [a2 + 720] = 0\n 42388: a0 = u64 [s1 + 0x1b0]\n 42392: u64 [a1 + 0xf0] = a0\n 42396: u64 [a2 + 728] = 0\n 42400: a0 = u64 [s1 + 0x1a0]\n 42404: u64 [a1 + 0xf8] = a0\n 42408: u64 [a2 + 736] = 0\n 42412: a0 = s1 + 0x2420\n 42416: a1 = s1 + 0x2400\n 42420: a3 = u64 [s1 + 0x1a8]\n 42424: u64 [a2 + 0x300] = a3\n 42428: ra = 1586, jump @1749\n      : @1501 [@dyn 793] (gas: 4)\n 42434: a3 = u64 [s1 + 0x180]\n 42438: a0 = a3 >u 0\n 42440: a1 = u64 [s1 + 0x188]\n 42444: t0 = 1588, jump @1964\n      : @1502 [@dyn 794] (gas: 1)\n 42450: jump @1504 if a2 != 0\n      : @1503 (gas: 1)\n 42453: jump @1694\n      : @1504 (gas: 3)\n 42456: a0 = s1 + 0x23e0\n 42460: a1 = u64 [s1 + 0x1b8]\n 42464: ra = 1590, jump @17\n      : @1505 [@dyn 795] (gas: 11)\n 42471: a3 = s1 + 0x2138\n 42475: a4 = a3 + 0x200\n 42479: a0 = u64 [a4 + 0xc0]\n 42483: a1 = u64 [a4 + 0xb8]\n 42487: a2 = u64 [a4 + 0xa8]\n 42491: a3 = u64 [a4 + 0xb0]\n 42495: a4 = a1 | a0\n 42498: a5 = a2 <u 0x2\n 42501: a5 = 0 if a3 != 0\n 42503: a5 = 0 if a4 != 0\n 42505: jump @1507 if a5 != 0\n      : @1506 (gas: 1)\n 42508: jump @1695\n      : @1507 (gas: 4)\n 42511: a1 = a1 | a2\n 42514: a0 = a0 | a3\n 42517: a0 = a0 | a1\n 42520: jump @1534 if a0 != 0\n      : @1508 (gas: 3)\n 42524: a0 = s1 + 0x1ee0\n 42528: a1 = 0x40\n 42531: ra = 1592, jump @17\n      : @1509 [@dyn 796] (gas: 7)\n 42538: a0 = s1 + 0x1938\n 42542: a5 = a0 + 0x500\n 42546: a3 = u64 [a5 + 0xc0]\n 42550: a4 = u64 [a5 + 0xb8]\n 42554: a2 = u64 [a5 + 0xb0]\n 42558: a1 = u64 [a5 + 0xa8]\n 42562: t0 = 1594, jump @2000\n      : @1510 [@dyn 797] (gas: 1)\n 42568: jump @1603 if a0 != 0\n      : @1511 (gas: 8)\n 42572: a2 = s1 + 0x1938\n 42576: u64 [a2 + 1432] = 0\n 42580: u64 [a2 + 1424] = 0\n 42584: u64 [a2 + 1416] = 0\n 42588: t0 = 0x63c\n 42592: a0 = 0x8c379a000000000\n 42602: a1 = 0x2000\n 42606: fallthrough\n      : @1512 [@dyn 798] (gas: 5)\n 42607: i32 a1 = a1 + 0xfffffffffffffec0\n 42611: a1 = a1 + s1\n 42614: u64 [a2 + 0x5a0] = a0\n 42618: a0 = u64 [s1 + 0x1b8]\n 42622: ra = 1598, jump @19\n      : @1513 [@dyn 799] (gas: 1)\n 42629: t0 = 1600, jump @1961\n      : @1514 [@dyn 800] (gas: 1)\n 42635: jump @1603 if a0 == 0\n      : @1515 (gas: 5)\n 42639: a0 = u64 [s1 + 0x1b8]\n 42643: i32 a0 = a0 + 0x4\n 42646: t0 = 0x642\n 42650: a2 = s1 + 0x1938\n 42654: fallthrough\n      : @1516 [@dyn 801] (gas: 6)\n 42655: u64 [a2 + 1408] = 0\n 42659: u64 [a2 + 1400] = 0\n 42663: u64 [a2 + 1384] = 0x20\n 42668: a1 = s1 + 0x1ea0\n 42672: u64 [a2 + 1392] = 0\n 42676: ra = 1604, jump @19\n      : @1517 [@dyn 802] (gas: 4)\n 42683: a2 = s1 + 0x100\n 42687: a0 = u64 [a2 + 0xa0]\n 42691: a0 = a0 + 0xffffffffffffffdc\n 42694: t0 = 1606, jump @1963\n      : @1518 [@dyn 803] (gas: 1)\n 42700: jump @1603 if a0 == 0\n      : @1519 (gas: 1)\n 42704: t0 = 1608, jump @2001\n      : @1520 [@dyn 804] (gas: 6)\n 42710: u64 [a2 + 1376] = 0\n 42714: u64 [a2 + 1368] = 0\n 42718: u64 [a2 + 1352] = 0xf\n 42723: a1 = s1 + 0x1e80\n 42727: u64 [a2 + 1360] = 0\n 42731: ra = 1610, jump @19\n      : @1521 [@dyn 805] (gas: 3)\n 42738: a0 = 0xffffffbc\n 42748: a2 = s1 + 0x100\n 42752: t0 = 1612, jump @1963\n      : @1522 [@dyn 806] (gas: 1)\n 42758: jump @1603 if a0 == 0\n      : @1523 (gas: 11)\n 42762: a0 = u64 [s1 + 0x1b8]\n 42766: i32 a0 = a0 + 0x44\n 42769: a1 = u64 [0x200e0]\n 42774: a2 = u64 [0x200e8]\n 42779: a3 = s1 + 0x1938\n 42783: u64 [a3 + 0x540] = a1\n 42787: u64 [a3 + 1328] = 0\n 42791: u64 [a3 + 0x538] = a2\n 42795: a1 = s1 + 0x1e60\n 42799: u64 [a3 + 1320] = 0\n 42803: ra = 1614, jump @19\n      : @1524 [@dyn 807] (gas: 3)\n 42810: a1 = 0x64\n 42813: a0 = u64 [s1 + 0x1b8]\n 42817: ra = 1616, jump @28\n      : @1525 [@dyn 808] (gas: 5)\n 42824: i32 a1 = a0 + 0\n 42826: a0 = 0x1\n 42829: a2 = 0x64\n 42832: ecalli 13 // 'seal_return'\n 42834: fallthrough\n      : @1526 (gas: 3)\n 42835: a0 = s1 + 0x2440\n 42839: a1 = 0x40\n 42842: ra = 1618, jump @17\n      : @1527 [@dyn 809] (gas: 14)\n 42849: a0 = s1 + 0x2138\n 42853: a2 = a0 + 0x300\n 42857: a1 = u64 [a2 + 0x20]\n 42860: u64 [s1 + 0x1b0] = a1\n 42864: a1 = u64 [a2 + 0x18]\n 42867: u64 [s1 + 0x1a8] = a1\n 42871: a1 = u64 [a2 + 0x10]\n 42874: u64 [s1 + 0x1a0] = a1\n 42878: a0 = u64 [a2 + 0x8]\n 42881: u64 [s1 + 0x1b8] = a0\n 42885: ra = 0x654\n 42889: ecalli 12 // 'return_data_size'\n 42891: t0 = 0x656\n 42895: jump @1976\n      : @1528 [@dyn 810] (gas: 1)\n 42898: t0 = 1622, jump @1976\n      : @1529 [@dyn 811] (gas: 1)\n 42904: jump @1603 if a1 != 0\n      : @1530 (gas: 2)\n 42908: a1 = a0 >> 0x20\n 42911: jump @1603 if a1 != 0\n      : @1531 (gas: 1)\n 42915: t0 = 1624, jump @2020\n      : @1532 [@dyn 812] (gas: 1)\n 42921: ra = 1626, jump @28\n      : @1533 [@dyn 813] (gas: 11)\n 42928: a1 = s1 + 0x4938\n 42932: a2 = u64 [s1 + 0x1a8]\n 42936: u32 [a1 + 0x768] = a2\n 42940: i32 a0 = a0 + 0\n 42942: a1 = s1 + 0x5000\n 42946: i32 a1 = a1 + 0xa0\n 42950: a2 = 0\n 42952: ecalli 11 // 'return_data_copy'\n 42954: a0 = s1 + 0x4938\n 42958: a0 = i32 [a0 + 0x768]\n 42962: jump @1407\n      : @1534 (gas: 1)\n 42965: t0 = 1628, jump @2016\n      : @1535 [@dyn 814] (gas: 3)\n 42971: a0 = s1 + 0x23c0\n 42975: a1 = u64 [s1 + 0x118]\n 42979: ra = 1630, jump @17\n      : @1536 [@dyn 815] (gas: 35)\n 42986: a4 = s1 + 0x2138\n 42990: a5 = a4 + 0x200\n 42994: a0 = u64 [a5 + 0x90]\n 42998: a1 = u64 [a5 + 0xa0]\n 43002: a2 = u64 [a5 + 0x88]\n 43006: a3 = u64 [a5 + 0x98]\n 43010: t1 = a4\n 43012: a5 = u64 [s1 + 0x1b0]\n 43016: a4 = a5 ^ a0\n 43019: a0 = a5 <u a0\n 43022: a5 = u64 [s1 + 0x1b8]\n 43026: a2 = a5 <u a2\n 43029: a2 = a0 if a4 != 0\n 43032: a0 = u64 [s1 + 0x1a0]\n 43036: t0 = a0 <u a3\n 43039: a5 = u64 [s1 + 0x1a8]\n 43043: a4 = a5 ^ a1\n 43046: a1 = a5 <u a1\n 43049: a1 = t0 if a4 == 0\n 43052: a0 = a0 ^ a3\n 43055: a0 = a0 | a4\n 43058: a1 = a2 if a0 == 0\n 43061: u64 [s1 + 0x188] = a1\n 43065: a0 = u64 [s1 + 0x120]\n 43069: a2 = t1 + 0x200\n 43073: u64 [a2 + 0x80] = a0\n 43077: a0 = u64 [s1 + 0x128]\n 43081: u64 [a2 + 0x78] = a0\n 43084: a0 = u64 [s1 + 0x130]\n 43088: u64 [a2 + 0x70] = a0\n 43091: a1 = s1 + 0x23a0\n 43095: a0 = u64 [s1 + 0x138]\n 43099: u64 [a2 + 0x68] = a0\n 43102: a0 = 0\n 43104: ra = 1632, jump @19\n      : @1537 [@dyn 816] (gas: 9)\n 43111: a0 = s1 + 0x2138\n 43115: u64 [a0 + 608] = 0\n 43119: u64 [a0 + 600] = 0\n 43123: u64 [a0 + 592] = 0\n 43127: a2 = a0\n 43129: a0 = 0x20\n 43132: a1 = s1 + 0x2380\n 43136: u64 [a2 + 584] = 0\n 43140: ra = 1634, jump @19\n      : @1538 [@dyn 817] (gas: 2)\n 43147: a0 = u64 [s1 + 0x188]\n 43151: jump @1550 if a0 == 0\n      : @1539 (gas: 3)\n 43155: a1 = u64 [s1 + 0x190]\n 43159: a0 = i32 [a1]\n 43161: jump @1541 if a0 >u 63\n      : @1540 (gas: 2)\n 43165: u32 [a1 + 0] = 0x40\n 43168: fallthrough\n      : @1541 (gas: 4)\n 43169: a0 = sp + 0xffffffffffffffe0\n 43172: a0 = a0 & 0xffffffffffffffe0\n 43175: u64 [s1 + 0x188] = a0\n 43179: t0 = 1636, jump @1962\n      : @1542 [@dyn 818] (gas: 32)\n 43185: ecalli 8 // 'hash_keccak_256'\n 43187: a5 = s1 + 0x100\n 43191: a1 = u64 [a5 + 0x88]\n 43195: a0 = u64 [a1 + 0x18]\n 43198: u64 [a5 + 0x80] = a0\n 43202: a0 = u64 [a1 + 0x10]\n 43205: u64 [a5 + 0x78] = a0\n 43208: a0 = u64 [a1 + 0x8]\n 43211: u64 [a5 + 0x70] = a0\n 43214: a0 = u64 [a1]\n 43216: u64 [a5 + 0x88] = a0\n 43220: a4 = s1 + 0x1938\n 43224: a0 = u64 [a5 + 0xa8]\n 43228: u64 [a4 + 0x6a0] = a0\n 43232: a0 = u64 [a5 + 0xa0]\n 43236: u64 [a4 + 0x698] = a0\n 43240: a0 = u64 [a5 + 0xb0]\n 43244: u64 [a4 + 0x690] = a0\n 43248: a0 = u64 [a5 + 0xb8]\n 43252: u64 [a4 + 0x688] = a0\n 43256: a0 = u64 [a5]\n 43258: u64 [a4 + 0x6c0] = a0\n 43262: a0 = u64 [a5 + 0x8]\n 43265: u64 [a4 + 0x6b8] = a0\n 43269: a0 = u64 [a5 + 0x10]\n 43272: u64 [a4 + 0x6b0] = a0\n 43276: a0 = s1 + 0x2000\n 43280: a1 = s1 + 0x1fe0\n 43284: a2 = s1 + 0x1fc0\n 43288: a3 = u64 [a5 + 0x18]\n 43291: u64 [a4 + 0x6a8] = a3\n 43295: ra = 1638, jump @1858\n      : @1543 [@dyn 819] (gas: 7)\n 43301: a1 = s1 + 0x1938\n 43305: a4 = a1 + 0x600\n 43309: a0 = u64 [a4 + 0xe0]\n 43313: a2 = u64 [a4 + 0xd8]\n 43317: a3 = u64 [a4 + 0xd0]\n 43321: a1 = u64 [a4 + 0xc8]\n 43325: t0 = 1640, jump @1991\n      : @1544 [@dyn 820] (gas: 1)\n 43331: jump @1603 if a0 != 0\n      : @1545 (gas: 22)\n 43335: a0 = u64 [s1 + 0x188]\n 43339: a0 = reverse a0\n 43341: a2 = u64 [s1 + 0x170]\n 43345: a2 = reverse a2\n 43347: a3 = u64 [s1 + 0x178]\n 43351: a3 = reverse a3\n 43353: a4 = u64 [s1 + 0x180]\n 43357: a4 = reverse a4\n 43359: a5 = a4 + 0x5\n 43362: u64 [s1 + 0x180] = a5\n 43366: a4 = a5 <u a4\n 43369: a5 = a3 + a4\n 43372: u64 [s1 + 0x178] = a5\n 43376: a3 = a5 <u a3\n 43379: a3 = a4 if a4 == 0\n 43382: a3 = a3 + a2\n 43385: u64 [s1 + 0x170] = a3\n 43389: a2 = a3 <u a2\n 43392: a0 = a0 + a2\n 43395: u64 [s1 + 0x188] = a0\n 43399: a0 = s1 + 0x1fa0\n 43403: ra = 1642, jump @17\n      : @1546 [@dyn 821] (gas: 23)\n 43410: a4 = s1 + 0x1938\n 43414: a5 = a4 + 0x600\n 43418: a0 = u64 [a5 + 0x68]\n 43421: a1 = u64 [a5 + 0x70]\n 43424: a2 = u64 [a5 + 0x78]\n 43427: a3 = u64 [a5 + 0x80]\n 43431: u64 [a5] = a3\n 43433: a3 = a4 + 0x500\n 43437: u64 [a3 + 0xf8] = a2\n 43441: u64 [a3 + 0xf0] = a1\n 43445: u64 [a3 + 0xe8] = a0\n 43449: a0 = u64 [s1 + 0x180]\n 43453: u64 [a5 + 0x8] = a0\n 43456: a0 = u64 [s1 + 0x178]\n 43460: u64 [a5 + 0x10] = a0\n 43463: a0 = u64 [s1 + 0x170]\n 43467: u64 [a5 + 0x18] = a0\n 43470: a0 = s1 + 0x1f60\n 43474: a1 = s1 + 0x1f40\n 43478: a2 = s1 + 0x1f20\n 43482: a3 = u64 [s1 + 0x188]\n 43486: u64 [a5 + 0x20] = a3\n 43489: ra = 1644, jump @1847\n      : @1547 [@dyn 822] (gas: 25)\n 43495: a0 = s1 + 0x1938\n 43499: t0 = u64 [a0 + 0x640]\n 43503: a4 = a0 + 0x600\n 43507: a1 = u64 [a4 + 0x38]\n 43510: a2 = u64 [a4 + 0x30]\n 43513: a3 = u64 [a4 + 0x28]\n 43516: a4 = sp + 0xffffffffffffffe0\n 43519: a0 = a4 & 0xffffffffffffffe0\n 43522: sp = a0\n 43524: a4 = a3 + 0x3\n 43527: a3 = a4 <u a3\n 43530: a5 = a2 + a3\n 43533: a2 = a5 <u a2\n 43536: a2 = a3 if a3 == 0\n 43539: a2 = a2 + a1\n 43542: a1 = a2 <u a1\n 43545: t0 = t0 + a1\n 43548: a1 = a0\n 43550: u64 [s1 + 0x188] = a0\n 43554: u64 [a0 + 0x10] = a2\n 43557: u64 [a0 + 0x8] = a5\n 43560: u64 [a0] = a4\n 43562: u64 [a0 + 0x18] = t0\n 43565: a0 = s1 + 0x1f00\n 43569: ra = 1646, jump @21\n      : @1548 [@dyn 823] (gas: 17)\n 43576: a3 = s1 + 0x1938\n 43580: a4 = a3 + 0x500\n 43584: a0 = u64 [a4 + 0xc8]\n 43588: a1 = u64 [a4 + 0xd0]\n 43592: a2 = u64 [a4 + 0xe0]\n 43596: a3 = u64 [a4 + 0xd8]\n 43600: a0 = a0 & 0xffffffffffffff00\n 43604: a0 = a0 | 0x1\n 43607: a4 = s1 + 0x4938\n 43611: a5 = a4 + 0x700\n 43615: u64 [a5 + 0xa0] = a2\n 43619: u64 [a5 + 0x98] = a3\n 43623: u64 [a5 + 0x90] = a1\n 43627: u64 [a5 + 0x88] = a0\n 43631: a1 = s1 + 0x50c0\n 43635: a0 = u64 [s1 + 0x188]\n 43639: ra = 1648, jump @23\n      : @1549 [@dyn 824] (gas: 18)\n 43646: a3 = s1 + 0x100\n 43650: a1 = u64 [a3 + 0xb8]\n 43654: a1 = a1 + 0x1\n 43657: a0 = a1 <u 0x1\n 43660: a2 = u64 [a3 + 0xb0]\n 43664: a2 = a2 + a0\n 43667: u64 [a3 + 0xb8] = a1\n 43671: u64 [a3 + 0xb0] = a2\n 43675: a0 = a1 | a2\n 43678: a0 = a0 <u 0x1\n 43681: a1 = u64 [a3 + 0xa0]\n 43685: a0 = a0 + a1\n 43688: a1 = a0 <u a1\n 43691: a2 = u64 [a3 + 0xa8]\n 43695: a2 = a2 + a1\n 43698: u64 [a3 + 0xa8] = a2\n 43702: u64 [a3 + 0xa0] = a0\n 43706: jump @1535\n      : @1550 (gas: 1)\n 43709: t0 = 1650, jump @2023\n      : @1551 [@dyn 825] (gas: 1)\n 43715: jump @1553 if a1 <u a0\n      : @1552 (gas: 3)\n 43718: a1 = u64 [s1 + 0x190]\n 43722: u32 [a1 + 0] = 0x40\n 43725: fallthrough\n      : @1553 (gas: 4)\n 43726: a0 = sp + 0xffffffffffffffe0\n 43729: a0 = a0 & 0xffffffffffffffe0\n 43732: u64 [s1 + 0x1b0] = a0\n 43736: t0 = 1652, jump @1962\n      : @1554 [@dyn 826] (gas: 4)\n 43742: ra = 0x676\n 43746: ecalli 8 // 'hash_keccak_256'\n 43748: t0 = 0x678\n 43752: jump @1957\n      : @1555 [@dyn 827] (gas: 1)\n 43755: t0 = 1656, jump @1957\n      : @1556 [@dyn 828] (gas: 15)\n 43761: a4 = a3 + 0x6\n 43764: a3 = a4 <u a3\n 43767: a5 = a2 + a3\n 43770: a2 = a5 <u a2\n 43773: a2 = a3 if a3 == 0\n 43776: a2 = a2 + a1\n 43779: a1 = a2 <u a1\n 43782: a0 = a0 + a1\n 43785: a1 = u64 [s1 + 0x1b8]\n 43789: u64 [a1] = a4\n 43791: u64 [a1 + 0x8] = a5\n 43794: u64 [a1 + 0x10] = a2\n 43797: u64 [a1 + 0x18] = a0\n 43800: a0 = s1 + 0x2360\n 43804: ra = 1658, jump @21\n      : @1557 [@dyn 829] (gas: 22)\n 43811: a5 = s1 + 0x2138\n 43815: a3 = u64 [a5 + 0x228]\n 43819: a0 = u64 [a5 + 0x230]\n 43823: a1 = u64 [a5 + 0x238]\n 43827: a2 = u64 [a5 + 0x240]\n 43831: a4 = u64 [s1 + 0xf8]\n 43835: u64 [a5 + 0x1e0] = a4\n 43839: a4 = u64 [s1 + 0xf0]\n 43843: u64 [a5 + 0x1d8] = a4\n 43847: a4 = u64 [s1 + 0xe8]\n 43851: u64 [a5 + 0x1d0] = a4\n 43855: a4 = u64 [s1 + 0xe0]\n 43859: u64 [a5 + 0x1c8] = a4\n 43863: u64 [a5 + 0x200] = a2\n 43867: a4 = a5 + 0x100\n 43871: u64 [a4 + 0xf8] = a1\n 43875: u64 [a4 + 0xf0] = a0\n 43879: a0 = s1 + 0x2340\n 43883: a1 = s1 + 0x2320\n 43887: a2 = s1 + 0x2300\n 43891: u64 [a4 + 0xe8] = a3\n 43895: ra = 1660, jump @1926\n      : @1558 [@dyn 830] (gas: 15)\n 43901: a3 = s1 + 0x2138\n 43905: a4 = a3 + 0x200\n 43909: a0 = u64 [a4 + 0x20]\n 43912: a1 = u64 [a4 + 0x18]\n 43915: a2 = u64 [a4 + 0x10]\n 43918: a3 = u64 [a4 + 0x8]\n 43921: a4 = s1 + 0x4938\n 43925: a5 = a4 + 0x700\n 43929: u64 [a5 + 0xc0] = a0\n 43933: u64 [a5 + 0xb8] = a1\n 43937: u64 [a5 + 0xb0] = a2\n 43941: u64 [a5 + 0xa8] = a3\n 43945: a1 = s1 + 0x50e0\n 43949: a0 = u64 [s1 + 0x1b8]\n 43953: ra = 1662, jump @23\n      : @1559 [@dyn 831] (gas: 3)\n 43960: a0 = 0x2138\n 43964: a3 = s1 + a0\n 43967: t0 = 1664, jump @2016\n      : @1560 [@dyn 832] (gas: 12)\n 43973: a0 = u64 [s1 + 0x138]\n 43977: a2 = a3 + 0x100\n 43981: u64 [a2 + 0xa8] = a0\n 43985: a0 = u64 [s1 + 0x130]\n 43989: u64 [a2 + 0xb0] = a0\n 43993: a0 = u64 [s1 + 0x128]\n 43997: u64 [a2 + 0xb8] = a0\n 44001: a1 = s1 + 0x22e0\n 44005: a0 = u64 [s1 + 0x120]\n 44009: u64 [a2 + 0xc0] = a0\n 44013: a0 = 0\n 44015: ra = 1666, jump @19\n      : @1561 [@dyn 833] (gas: 9)\n 44022: a0 = s1 + 0x2138\n 44026: u64 [a0 + 416] = 0\n 44030: u64 [a0 + 408] = 0\n 44034: u64 [a0 + 400] = 0\n 44038: a2 = a0\n 44040: a0 = 0x20\n 44043: a1 = s1 + 0x22c0\n 44047: u64 [a2 + 392] = 0\n 44051: ra = 1668, jump @19\n      : @1562 [@dyn 834] (gas: 3)\n 44058: a1 = u64 [s1 + 0x190]\n 44062: a0 = i32 [a1]\n 44064: jump @1564 if a0 >u 63\n      : @1563 (gas: 2)\n 44068: u32 [a1 + 0] = 0x40\n 44071: fallthrough\n      : @1564 (gas: 4)\n 44072: a0 = sp + 0xffffffffffffffe0\n 44075: a0 = a0 & 0xffffffffffffffe0\n 44078: u64 [s1 + 0x188] = a0\n 44082: t0 = 1670, jump @1962\n      : @1565 [@dyn 835] (gas: 4)\n 44088: ra = 0x688\n 44092: ecalli 8 // 'hash_keccak_256'\n 44094: t0 = 0x68a\n 44098: jump @1967\n      : @1566 [@dyn 836] (gas: 1)\n 44101: t0 = 1674, jump @1967\n      : @1567 [@dyn 837] (gas: 10)\n 44107: a0 = a0 + a1\n 44110: a1 = s1 + 0x4938\n 44114: a3 = a1 + 0x700\n 44118: u64 [a3 + 0xc8] = a4\n 44122: u64 [a3 + 0xd0] = a5\n 44126: u64 [a3 + 0xd8] = a2\n 44130: u64 [a3 + 0xe0] = a0\n 44134: a0 = s1 + 0x22a0\n 44138: a1 = s1 + 0x5100\n 44142: ra = 1676, jump @21\n      : @1568 [@dyn 838] (gas: 35)\n 44149: a4 = s1 + 0x2138\n 44153: a5 = a4 + 0x100\n 44157: a0 = u64 [a5 + 0x70]\n 44160: a1 = u64 [a5 + 0x68]\n 44163: a2 = u64 [a5 + 0x78]\n 44166: a3 = u64 [a5 + 0x80]\n 44170: t0 = a4\n 44172: a5 = u64 [s1 + 0x1b0]\n 44176: a4 = a5 ^ a0\n 44179: a0 = a5 <u a0\n 44182: a5 = u64 [s1 + 0x1b8]\n 44186: a5 = a5 <u a1\n 44189: a5 = a0 if a4 != 0\n 44192: a1 = u64 [s1 + 0x1a8]\n 44196: a0 = a1 ^ a3\n 44199: a1 = a1 <u a3\n 44202: a4 = u64 [s1 + 0x1a0]\n 44206: a3 = a4 <u a2\n 44209: a3 = a1 if a0 != 0\n 44212: a1 = a4 ^ a2\n 44215: a0 = a0 | a1\n 44218: a5 = a3 if a0 != 0\n 44221: u64 [s1 + 0x188] = a5\n 44225: a0 = u64 [s1 + 0x120]\n 44229: a2 = t0 + 0x100\n 44233: u64 [a2 + 0x60] = a0\n 44236: a0 = u64 [s1 + 0x128]\n 44240: u64 [a2 + 0x58] = a0\n 44243: a0 = u64 [s1 + 0x130]\n 44247: u64 [a2 + 0x50] = a0\n 44250: a1 = s1 + 0x2280\n 44254: a0 = u64 [s1 + 0x138]\n 44258: u64 [a2 + 0x48] = a0\n 44261: a0 = 0\n 44263: ra = 1678, jump @19\n      : @1569 [@dyn 839] (gas: 9)\n 44270: a0 = s1 + 0x2138\n 44274: u64 [a0 + 320] = 0\n 44278: u64 [a0 + 312] = 0\n 44282: u64 [a0 + 304] = 0\n 44286: a2 = a0\n 44288: a0 = 0x20\n 44291: a1 = s1 + 0x2260\n 44295: u64 [a2 + 296] = 0\n 44299: ra = 1680, jump @19\n      : @1570 [@dyn 840] (gas: 2)\n 44306: a0 = u64 [s1 + 0x188]\n 44310: jump @1581 if a0 == 0\n      : @1571 (gas: 3)\n 44314: a1 = u64 [s1 + 0x190]\n 44318: a0 = i32 [a1]\n 44320: jump @1573 if a0 >u 63\n      : @1572 (gas: 2)\n 44324: u32 [a1 + 0] = 0x40\n 44327: fallthrough\n      : @1573 (gas: 4)\n 44328: a0 = sp + 0xffffffffffffffe0\n 44331: a0 = a0 & 0xffffffffffffffe0\n 44334: u64 [s1 + 0x188] = a0\n 44338: t0 = 1682, jump @1962\n      : @1574 [@dyn 841] (gas: 4)\n 44344: ra = 0x694\n 44348: ecalli 8 // 'hash_keccak_256'\n 44350: t0 = 0x696\n 44354: jump @1967\n      : @1575 [@dyn 842] (gas: 1)\n 44357: t0 = 1686, jump @1967\n      : @1576 [@dyn 843] (gas: 19)\n 44363: a3 = a0 + a1\n 44366: a1 = s1 + 0x2138\n 44370: a0 = u64 [s1 + 0x1a8]\n 44374: u64 [a1 + 0xa0] = a0\n 44378: a0 = u64 [s1 + 0x1a0]\n 44382: u64 [a1 + 0x98] = a0\n 44386: a0 = u64 [s1 + 0x1b0]\n 44390: u64 [a1 + 0x90] = a0\n 44394: a0 = u64 [s1 + 0x1b8]\n 44398: u64 [a1 + 0x88] = a0\n 44402: u64 [a1 + 0xa8] = a4\n 44406: u64 [a1 + 0xb0] = a5\n 44410: u64 [a1 + 0xb8] = a2\n 44414: a4 = a1\n 44416: a0 = s1 + 0x2200\n 44420: a1 = s1 + 0x21e0\n 44424: a2 = s1 + 0x21c0\n 44428: u64 [a4 + 0xc0] = a3\n 44432: ra = 1688, jump @1847\n      : @1577 [@dyn 844] (gas: 6)\n 44438: a3 = s1 + 0x2138\n 44442: a0 = u64 [a3 + 0xc8]\n 44446: a1 = u64 [a3 + 0xe0]\n 44450: a2 = u64 [a3 + 0xd0]\n 44454: a3 = u64 [a3 + 0xd8]\n 44458: t0 = 1690, jump @1985\n      : @1578 [@dyn 845] (gas: 9)\n 44464: a3 = a1 + 0x700\n 44468: u64 [a3 + 0xe8] = a4\n 44472: u64 [a3 + 0xf0] = a5\n 44476: u64 [a3 + 0xf8] = a2\n 44480: a1 = s1 + 0x5138\n 44484: u64 [a1] = a0\n 44486: a0 = s1 + 0x21a0\n 44490: a1 = s1 + 0x5120\n 44494: ra = 1692, jump @21\n      : @1579 [@dyn 846] (gas: 20)\n 44501: a3 = s1 + 0x2138\n 44505: a0 = u8 [a3 + 0x68]\n 44508: a5 = s1 + 0x100\n 44512: a4 = u64 [a5 + 0xb8]\n 44516: a4 = a4 + 0x1\n 44519: a1 = a4 <u 0x1\n 44522: a2 = u64 [a5 + 0xb0]\n 44526: a2 = a2 + a1\n 44529: u64 [a5 + 0xb8] = a4\n 44533: u64 [a5 + 0xb0] = a2\n 44537: a1 = a4 | a2\n 44540: a1 = a1 <u 0x1\n 44543: a2 = u64 [a5 + 0xa0]\n 44547: a1 = a1 + a2\n 44550: a2 = a1 <u a2\n 44553: a4 = u64 [a5 + 0xa8]\n 44557: a4 = a4 + a2\n 44560: u64 [a5 + 0xa8] = a4\n 44564: u64 [a5 + 0xa0] = a1\n 44568: jump @1560 if a0 != 0\n      : @1580 (gas: 1)\n 44572: jump @1589\n      : @1581 (gas: 1)\n 44574: t0 = 1694, jump @2023\n      : @1582 [@dyn 847] (gas: 1)\n 44580: jump @1584 if a1 <u a0\n      : @1583 (gas: 3)\n 44583: a1 = u64 [s1 + 0x190]\n 44587: u32 [a1 + 0] = 0x40\n 44590: fallthrough\n      : @1584 (gas: 4)\n 44591: a0 = sp + 0xffffffffffffffe0\n 44594: a0 = a0 & 0xffffffffffffffe0\n 44597: u64 [s1 + 0x1b0] = a0\n 44601: t0 = 1696, jump @1962\n      : @1585 [@dyn 848] (gas: 4)\n 44607: ra = 0x6a2\n 44611: ecalli 8 // 'hash_keccak_256'\n 44613: t0 = 0x6a4\n 44617: jump @1958\n      : @1586 [@dyn 849] (gas: 1)\n 44620: t0 = 1700, jump @1958\n      : @1587 [@dyn 850] (gas: 2)\n 44626: a0 = s1 + 0x2240\n 44630: ra = 1702, jump @21\n      : @1588 [@dyn 851] (gas: 16)\n 44637: a3 = s1 + 0x2138\n 44641: a4 = a3 + 0x100\n 44645: a0 = u64 [a4 + 0x10]\n 44648: a1 = u64 [a4 + 0x18]\n 44651: a2 = u64 [a4 + 0x8]\n 44654: a3 = u64 [a4 + 0x20]\n 44657: a2 = a2 & 0xffffffffffff00ff\n 44662: a2 = a2 | 0x100\n 44666: a4 = s1 + 0x5138\n 44670: u64 [a4 + 0x20] = a3\n 44673: u64 [a4 + 0x18] = a1\n 44676: u64 [a4 + 0x10] = a0\n 44679: u64 [a4 + 0x8] = a2\n 44682: a1 = s1 + 0x5140\n 44686: a0 = u64 [s1 + 0x1b8]\n 44690: ra = 1704, jump @23\n      : @1589 [@dyn 852] (gas: 3)\n 44697: a0 = s1 + 0x2180\n 44701: a1 = 0x40\n 44704: ra = 1706, jump @17\n      : @1590 [@dyn 853] (gas: 6)\n 44711: a1 = s1 + 0x2138\n 44715: a2 = u64 [a1 + 0x60]\n 44718: a3 = u64 [a1 + 0x58]\n 44721: a0 = u64 [a1 + 0x50]\n 44724: a1 = u64 [a1 + 0x48]\n 44727: t0 = 1708, jump @2008\n      : @1591 [@dyn 854] (gas: 1)\n 44733: jump @1603 if a0 != 0\n      : @1592 (gas: 8)\n 44737: a0 = s1 + 0x2138\n 44741: u64 [a0 + 64] = 0\n 44744: u64 [a0 + 56] = 0\n 44747: u64 [a0 + 48] = 0\n 44750: a1 = s1 + 0x2160\n 44754: u64 [a0 + 40] = 0x40\n 44758: a0 = u64 [s1 + 0x1b8]\n 44762: ra = 1710, jump @19\n      : @1593 [@dyn 855] (gas: 5)\n 44769: a1 = u64 [s1 + 0x1b8]\n 44773: a0 = a1 + 0x40\n 44776: a1 = a0 <u a1\n 44779: a3 = u64 [s1 + 0x1b0]\n 44783: t0 = 1712, jump @1970\n      : @1594 [@dyn 856] (gas: 19)\n 44789: a5 = s1 + 0x1938\n 44793: u64 [a5 + 0x7d0] = a2\n 44797: u64 [a5 + 0x7c8] = a0\n 44801: a0 = u64 [s1 + 0x100]\n 44805: a1 = s1 + 0x2138\n 44809: u64 [a1] = a0\n 44811: a0 = u64 [s1 + 0x108]\n 44815: a2 = a1 + 0xffffffffffffff00\n 44819: u64 [a2 + 0xf8] = a0\n 44823: a0 = u64 [s1 + 0x110]\n 44827: u64 [a2 + 0xf0] = a0\n 44831: a0 = u64 [s1 + 0x118]\n 44835: u64 [a2 + 0xe8] = a0\n 44839: u64 [a5 + 0x7d8] = a3\n 44843: a0 = s1 + 0x2140\n 44847: a1 = s1 + 0x2120\n 44851: a2 = s1 + 0x2100\n 44855: u64 [a5 + 0x7e0] = a4\n 44859: ra = 1714, jump @1736\n      : @1595 [@dyn 857] (gas: 11)\n 44865: a3 = s1 + 0x100\n 44869: a0 = u64 [a3 + 0xa0]\n 44873: a1 = u64 [a3 + 0xa8]\n 44877: a0 = a0 | a1\n 44880: a1 = 0xffffffe0\n 44890: a2 = u64 [a3 + 0xb8]\n 44894: a1 = a2 <u a1\n 44897: a2 = u64 [a3 + 0xb0]\n 44901: a1 = 0 if a2 != 0\n 44903: a1 = 0 if a0 != 0\n 44905: jump @1603 if a1 == 0\n      : @1596 (gas: 14)\n 44909: a0 = s1 + 0x2138\n 44913: a1 = u64 [a0 + 0x20]\n 44916: u64 [s1 + 0x190] = a1\n 44920: a1 = u64 [a0 + 0x18]\n 44923: u64 [s1 + 0x188] = a1\n 44927: a1 = u64 [a0 + 0x10]\n 44930: u64 [s1 + 0x180] = a1\n 44934: a0 = u64 [a0 + 0x8]\n 44937: u64 [s1 + 0x178] = a0\n 44941: a0 = u64 [s1 + 0x1b8]\n 44945: i32 a0 = a0 + 0x20\n 44948: t0 = 0x6b4\n 44952: a2 = s1 + 0x1938\n 44956: fallthrough\n      : @1597 [@dyn 858] (gas: 11)\n 44957: a1 = u64 [s1 + 0xe0]\n 44961: a4 = a2 + 0x700\n 44965: u64 [a4 + 0xa8] = a1\n 44969: a1 = u64 [s1 + 0xe8]\n 44973: u64 [a4 + 0xb0] = a1\n 44977: a1 = u64 [s1 + 0xf0]\n 44981: u64 [a4 + 0xb8] = a1\n 44985: a1 = s1 + 0x20e0\n 44989: a3 = u64 [s1 + 0xf8]\n 44993: u64 [a4 + 0xc0] = a3\n 44997: ra = 1718, jump @19\n      : @1598 [@dyn 859] (gas: 31)\n 45004: t0 = u64 [s1 + 0x178]\n 45008: t2 = u64 [s1 + 0x1b8]\n 45012: a0 = t0 <u t2\n 45015: a5 = u64 [s1 + 0x1b0]\n 45019: a3 = u64 [s1 + 0x180]\n 45023: a1 = a3 ^ a5\n 45026: a2 = a3 <u a5\n 45029: t1 = a3\n 45031: a2 = a0 if a1 == 0\n 45034: a3 = u64 [s1 + 0x1a0]\n 45038: a4 = u64 [s1 + 0x188]\n 45042: a1 = a4 - a3\n 45045: ra = a4 <u a3\n 45048: a4 = u64 [s1 + 0x1a8]\n 45052: a3 = u64 [s1 + 0x190]\n 45056: a4 = a3 - a4\n 45059: a4 = a4 - ra\n 45062: a3 = a1 <u a2\n 45065: a4 = a4 - a3\n 45068: a2 = a1 - a2\n 45071: a1 = t1 - a5\n 45074: a0 = a1 - a0\n 45077: a1 = t0 - t2\n 45080: a0 = a0 | a4\n 45083: a3 = a1 | a2\n 45086: a3 = a3 | a0\n 45089: a0 = a0 | a2\n 45092: a3 = a3 >> 0x20\n 45095: a0 = a0 << 0x20\n 45098: a0 = a0 | a3\n 45101: jump @1603 if a0 != 0\n      : @1599 (gas: 23)\n 45105: a0 = u64 [0x200a0]\n 45110: a2 = u64 [0x200a8]\n 45115: a4 = s1 + 0x1938\n 45119: a5 = a4 + 0x700\n 45123: u64 [a5 + 0xa0] = a0\n 45127: u64 [a5 + 0x98] = a2\n 45131: a0 = u64 [0x200b0]\n 45136: a2 = u64 [0x200b8]\n 45141: a4 = s1 + 0x100\n 45145: a3 = u64 [a4 + 0x38]\n 45148: u64 [a5 + 0x68] = a3\n 45151: a3 = u64 [a4 + 0x30]\n 45154: u64 [a5 + 0x70] = a3\n 45157: u64 [a5 + 0x90] = a0\n 45161: u64 [a5 + 0x88] = a2\n 45165: a0 = u64 [a4 + 0x28]\n 45168: u64 [a5 + 0x78] = a0\n 45171: a2 = s1 + 0x20c0\n 45175: a3 = s1 + 0x20a0\n 45179: a0 = u64 [a4 + 0x20]\n 45182: u64 [a5 + 0x80] = a0\n 45186: a0 = u64 [a4 + 0xb8]\n 45190: ra = 1720, jump @24\n      : @1600 [@dyn 860] (gas: 3)\n 45197: a0 = s1 + 0x2080\n 45201: a1 = 0x40\n 45204: ra = 1722, jump @17\n      : @1601 [@dyn 861] (gas: 7)\n 45211: a3 = s1 + 0x1938\n 45215: a5 = a3 + 0x700\n 45219: a0 = u64 [a5 + 0x60]\n 45222: a1 = u64 [a5 + 0x58]\n 45225: a2 = u64 [a5 + 0x50]\n 45228: a4 = u64 [a5 + 0x48]\n 45231: t0 = 1724, jump @2019\n      : @1602 [@dyn 862] (gas: 1)\n 45237: jump @1696 if a0 == 0\n      : @1603 (gas: 1)\n 45241: trap\n      : @1604 (gas: 4)\n 45242: a1 = 0x20200\n 45247: i32 a1 = a1 + 0\n 45249: a0 = 0x1\n 45252: jump @1606\n      : @1605 (gas: 6)\n 45254: i32 a1 = a1 + 0\n 45256: a0 = 0x1\n 45259: a2 = 0\n 45261: ecalli 13 // 'seal_return'\n 45263: a1 = 0x20200\n 45268: jump @1605\n      : @1606 (gas: 4)\n 45270: a2 = 0\n 45272: ecalli 13 // 'seal_return'\n 45274: a1 = 0x20200\n 45279: jump @1605\n      : @1607 (gas: 2)\n 45281: a1 = 0x20200\n 45286: jump @1605\n      : @1608 (gas: 2)\n 45288: a1 = 0x20200\n 45293: jump @1605\n      : @1609 (gas: 3)\n 45295: a0 = u64 [s1 + 0x198]\n 45299: a1 = 0x1000\n 45303: t0 = 1726, jump @2040\n      : @1610 [@dyn 863] (gas: 10)\n 45309: u64 [a3 + 0xa8] = a0\n 45313: a0 = u64 [s1 + 0x190]\n 45317: u64 [a3 + 0xb0] = a0\n 45321: a0 = u64 [s1 + 0x188]\n 45325: u64 [a3 + 0xb8] = a0\n 45329: a1 = s1 + 0x16e0\n 45333: a0 = u64 [s1 + 0x180]\n 45337: u64 [a3 + 0xc0] = a0\n 45341: a0 = 0\n 45343: ra = 1728, jump @19\n      : @1611 [@dyn 864] (gas: 9)\n 45350: a0 = s1 + 0x1138\n 45354: u64 [a0 + 1440] = 0\n 45358: u64 [a0 + 1432] = 0\n 45362: u64 [a0 + 1424] = 0\n 45366: a2 = a0\n 45368: a0 = 0x20\n 45371: a1 = s1 + 0x16c0\n 45375: u64 [a2 + 1416] = 0\n 45379: ra = 1730, jump @19\n      : @1612 [@dyn 865] (gas: 7)\n 45386: a0 = sp + 0xffffffffffffffe0\n 45389: a0 = a0 & 0xffffffffffffffe0\n 45392: u64 [s1 + 0x1b8] = a0\n 45396: sp = a0\n 45398: a0 = u64 [s1 + 0x170]\n 45402: a0 = i32 [a0]\n 45404: jump @1614 if a0 >u 63\n      : @1613 (gas: 4)\n 45408: a1 = u64 [s1 + 0x170]\n 45412: u32 [a1 + 0] = 0x40\n 45415: t0 = 0x6c4\n 45419: jump @1992\n      : @1614 (gas: 1)\n 45422: t0 = 1732, jump @1992\n      : @1615 [@dyn 866] (gas: 5)\n 45428: a0 = u64 [s1 + 0x178]\n 45432: ra = 0x6c6\n 45436: ecalli 8 // 'hash_keccak_256'\n 45438: t0 = 0x6c8\n 45442: jump @1958\n      : @1616 [@dyn 867] (gas: 1)\n 45445: t0 = 1736, jump @1958\n      : @1617 [@dyn 868] (gas: 2)\n 45451: a0 = s1 + 0x16a0\n 45455: ra = 1738, jump @21\n      : @1618 [@dyn 869] (gas: 17)\n 45462: a3 = s1 + 0x1138\n 45466: a4 = a3 + 0x500\n 45470: a0 = u64 [a4 + 0x68]\n 45473: a1 = u64 [a4 + 0x70]\n 45476: a2 = u64 [a4 + 0x80]\n 45480: a3 = u64 [a4 + 0x78]\n 45483: a0 = a0 & 0xffffffffffffff00\n 45487: a0 = a0 | 0x1\n 45490: a4 = s1 + 0x4938\n 45494: a5 = a4 + 0x400\n 45498: u64 [a5 + 0x60] = a2\n 45501: u64 [a5 + 0x58] = a3\n 45504: u64 [a5 + 0x50] = a1\n 45507: u64 [a5 + 0x48] = a0\n 45510: a1 = s1 + 0x4d80\n 45514: a0 = u64 [s1 + 0x1b8]\n 45518: ra = 1740, jump @23\n      : @1619 [@dyn 870] (gas: 3)\n 45525: a0 = u64 [s1 + 0x180]\n 45529: a1 = 0x1000\n 45533: t0 = 1742, jump @2040\n      : @1620 [@dyn 871] (gas: 21)\n 45539: u64 [a3 + 0x40] = a0\n 45542: a0 = u64 [s1 + 0x188]\n 45546: u64 [a3 + 0x38] = a0\n 45549: a0 = u64 [s1 + 0x190]\n 45553: u64 [a3 + 0x30] = a0\n 45556: a0 = u64 [0x20168]\n 45561: a1 = u64 [s1 + 0x198]\n 45565: u64 [a3 + 0x28] = a1\n 45568: a1 = u64 [0x20170]\n 45573: u64 [a3 + 0x60] = a0\n 45576: a0 = u64 [0x20178]\n 45581: u64 [a3 + 0x58] = a1\n 45584: a1 = u64 [0x20180]\n 45589: u64 [a3 + 0x50] = a0\n 45592: a0 = a2\n 45594: a2 = s1 + 0x1680\n 45598: a3 = s1 + 0x1660\n 45602: u64 [a0 + 0x548] = a1\n 45606: a0 = 0\n 45608: a1 = 0\n 45610: ra = 1744, jump @24\n      : @1621 [@dyn 872] (gas: 3)\n 45617: a0 = 0\n 45619: a1 = u64 [s1 + 0x178]\n 45623: jump @1606\n      : @1622 (gas: 2)\n 45626: a1 = 0x20200\n 45631: jump @1605\n      : @1623 (gas: 2)\n 45634: a1 = 0x20200\n 45639: jump @1605\n      : @1624 (gas: 2)\n 45642: a1 = 0x20200\n 45647: jump @1605\n      : @1625 (gas: 2)\n 45650: a1 = 0x20200\n 45655: jump @1605\n      : @1626 (gas: 2)\n 45658: a1 = 0x20200\n 45663: jump @1605\n      : @1627 (gas: 2)\n 45666: a1 = 0x20200\n 45671: jump @1605\n      : @1628 (gas: 2)\n 45674: a1 = 0x20200\n 45679: jump @1605\n      : @1629 (gas: 2)\n 45682: a1 = 0x20200\n 45687: jump @1605\n      : @1630 (gas: 2)\n 45690: a1 = 0x20200\n 45695: jump @1605\n      : @1631 (gas: 2)\n 45698: a1 = 0x20200\n 45703: jump @1605\n      : @1632 (gas: 12)\n 45706: a0 = u64 [s1 + 0x188]\n 45710: a0 = a0 << 0x20\n 45713: a0 = a0 >> 0x20\n 45716: u64 [s1 + 0x1b8] = a0\n 45720: a1 = s1 + 0x5138\n 45724: u64 [a1 + 1632] = 0\n 45728: u64 [a1 + 1624] = 0\n 45732: u64 [a1 + 1616] = 0\n 45736: u64 [a1 + 1608] = 0x4\n 45741: a0 = s1 + 0x4180\n 45745: a1 = s1 + 0x5780\n 45749: ra = 1746, jump @21\n      : @1633 [@dyn 873] (gas: 22)\n 45756: a1 = s1 + 0x4138\n 45760: a0 = u32 [a1 + 0x5c]\n 45763: a0 = a0 << 0x20\n 45766: a1 = u64 [a1 + 0x60]\n 45769: a4 = s1 + 0x100\n 45773: a2 = u64 [a4 + 0xb8]\n 45777: a0 = a0 | a2\n 45780: a3 = s1 + 0x5138\n 45784: u64 [a3 + 1664] = 0\n 45788: u64 [a3 + 1656] = 0\n 45792: u64 [a3 + 1648] = 0\n 45796: a5 = a3 + 0x600\n 45800: u64 [a5 + 104] = 0x4\n 45804: a2 = u64 [a4 + 0x90]\n 45808: u64 [a5 + 0x90] = a2\n 45812: a2 = u64 [a4 + 0x98]\n 45816: u64 [a5 + 0x88] = a2\n 45820: u64 [a5 + 0xa0] = a1\n 45824: u64 [a5 + 0x98] = a0\n 45828: a0 = s1 + 0x57a0\n 45832: a1 = s1 + 0x57c0\n 45836: ra = 1748, jump @23\n      : @1634 [@dyn 874] (gas: 4)\n 45843: a1 = 0x20200\n 45848: i32 a1 = a1 + 0\n 45850: a0 = 0\n 45852: jump @1606\n      : @1635 (gas: 2)\n 45855: a1 = 0x20200\n 45860: jump @1605\n      : @1636 (gas: 2)\n 45863: a1 = 0x20200\n 45868: jump @1605\n      : @1637 (gas: 2)\n 45871: a1 = 0x20200\n 45876: jump @1605\n      : @1638 (gas: 2)\n 45879: a1 = 0x20200\n 45884: jump @1605\n      : @1639 (gas: 2)\n 45887: a1 = 0x20200\n 45892: jump @1605\n      : @1640 (gas: 2)\n 45895: a1 = 0x20200\n 45900: jump @1605\n      : @1641 (gas: 12)\n 45903: a0 = u64 [s1 + 0x188]\n 45907: a0 = a0 << 0x20\n 45910: a0 = a0 >> 0x20\n 45913: u64 [s1 + 0x1b8] = a0\n 45917: a1 = s1 + 0x4938\n 45921: u64 [a1 + 544] = 0\n 45925: u64 [a1 + 536] = 0\n 45929: u64 [a1 + 528] = 0\n 45933: u64 [a1 + 520] = 0x2\n 45938: a0 = s1 + 0x1160\n 45942: a1 = s1 + 0x4b40\n 45946: ra = 1750, jump @21\n      : @1642 [@dyn 875] (gas: 22)\n 45953: a1 = s1 + 0x1138\n 45957: a0 = u32 [a1 + 0x3c]\n 45960: a0 = a0 << 0x20\n 45963: a1 = u64 [a1 + 0x40]\n 45966: a4 = s1 + 0x100\n 45970: a2 = u64 [a4 + 0xb8]\n 45974: a0 = a0 | a2\n 45977: a3 = s1 + 0x4938\n 45981: u64 [a3 + 576] = 0\n 45985: u64 [a3 + 568] = 0\n 45989: u64 [a3 + 560] = 0\n 45993: a5 = a3 + 0x200\n 45997: u64 [a5 + 40] = 0x2\n 46001: a2 = u64 [a4 + 0x90]\n 46005: u64 [a5 + 0x50] = a2\n 46008: a2 = u64 [a4 + 0x98]\n 46012: u64 [a5 + 0x48] = a2\n 46015: u64 [a5 + 0x60] = a1\n 46018: u64 [a5 + 0x58] = a0\n 46021: a0 = s1 + 0x4b60\n 46025: a1 = s1 + 0x4b80\n 46029: ra = 1752, jump @23\n      : @1643 [@dyn 876] (gas: 4)\n 46036: a1 = 0x20200\n 46041: i32 a1 = a1 + 0\n 46043: a0 = 0\n 46045: jump @1606\n      : @1644 (gas: 2)\n 46048: a1 = 0x20200\n 46053: jump @1605\n      : @1645 (gas: 2)\n 46056: a1 = 0x20200\n 46061: jump @1605\n      : @1646 (gas: 2)\n 46064: a1 = 0x20200\n 46069: jump @1605\n      : @1647 (gas: 2)\n 46072: a1 = 0x20200\n 46077: jump @1605\n      : @1648 (gas: 2)\n 46080: a1 = 0x20200\n 46085: jump @1605\n      : @1649 (gas: 2)\n 46088: a1 = 0x20200\n 46093: jump @1605\n      : @1650 (gas: 2)\n 46096: a1 = 0x20200\n 46101: jump @1605\n      : @1651 (gas: 2)\n 46104: a1 = 0x20200\n 46109: jump @1605\n      : @1652 (gas: 2)\n 46112: a1 = 0x20200\n 46117: jump @1605\n      : @1653 (gas: 2)\n 46120: a1 = 0x20200\n 46125: jump @1605\n      : @1654 (gas: 2)\n 46128: a1 = 0x20200\n 46133: jump @1605\n      : @1655 (gas: 2)\n 46136: a1 = 0x20200\n 46141: jump @1605\n      : @1656 (gas: 2)\n 46144: a1 = 0x20200\n 46149: jump @1605\n      : @1657 (gas: 2)\n 46152: a1 = 0x20200\n 46157: jump @1605\n      : @1658 (gas: 2)\n 46160: a1 = 0x20200\n 46165: jump @1605\n      : @1659 (gas: 2)\n 46168: a1 = 0x20200\n 46173: jump @1605\n      : @1660 (gas: 2)\n 46176: a1 = 0x20200\n 46181: jump @1605\n      : @1661 (gas: 2)\n 46184: a1 = 0x20200\n 46189: jump @1605\n      : @1662 (gas: 2)\n 46192: a1 = 0x20200\n 46197: jump @1605\n      : @1663 (gas: 2)\n 46200: a1 = 0x20200\n 46205: jump @1605\n      : @1664 (gas: 2)\n 46208: a1 = 0x20200\n 46213: jump @1605\n      : @1665 (gas: 9)\n 46216: u64 [a2 + 984] = 0\n 46220: u64 [a2 + 976] = 0\n 46224: u64 [a2 + 968] = 0\n 46228: a0 = 0x4e487b7100000000\n 46238: a1 = s1 + 0x7ff\n 46242: a1 = a1 + 0x501\n 46246: u64 [a2 + 0x3e0] = a0\n 46250: a0 = 0\n 46252: ra = 1754, jump @19\n      : @1666 [@dyn 877] (gas: 11)\n 46259: a1 = s1 + 0x7ff\n 46263: a1 = a1 + 0x139\n 46267: u64 [a1 + 960] = 0\n 46271: u64 [a1 + 952] = 0\n 46275: u64 [a1 + 936] = 0x41\n 46280: a2 = a1\n 46282: a0 = 0x4\n 46285: a1 = s1 + 0x7ff\n 46289: a1 = a1 + 0x4e1\n 46293: u64 [a2 + 944] = 0\n 46297: ra = 1756, jump @19\n      : @1667 [@dyn 878] (gas: 3)\n 46304: a0 = u64 [s1 + 0x1a8]\n 46308: a0 = i32 [a0]\n 46310: jump @1669 if a0 >u 63\n      : @1668 (gas: 3)\n 46314: a1 = u64 [s1 + 0x1a8]\n 46318: u32 [a1 + 0] = 0x40\n 46321: fallthrough\n      : @1669 (gas: 5)\n 46322: a0 = 0x1\n 46325: a2 = 0x24\n 46328: a1 = u64 [s1 + 0x1b0]\n 46332: ecalli 13 // 'seal_return'\n 46334: fallthrough\n      : @1670 (gas: 10)\n 46335: a0 = s1 + 0x3138\n 46339: u64 [a0 + 1720] = 0\n 46343: u64 [a0 + 1712] = 0\n 46347: u64 [a0 + 1704] = 0\n 46351: a2 = a0\n 46353: a0 = 0x4e487b7100000000\n 46363: a1 = s1 + 0x37e0\n 46367: u64 [a2 + 0x6c0] = a0\n 46371: a0 = 0\n 46373: ra = 1758, jump @19\n      : @1671 [@dyn 879] (gas: 3)\n 46380: t0 = 0x6e0\n 46384: a1 = s1 + 0x3138\n 46388: fallthrough\n      : @1672 [@dyn 880] (gas: 8)\n 46389: u64 [a1 + 1696] = 0\n 46393: u64 [a1 + 1688] = 0\n 46397: u64 [a1 + 1672] = 0x41\n 46402: a2 = a1\n 46404: a0 = 0x4\n 46407: a1 = s1 + 0x37c0\n 46411: u64 [a2 + 1680] = 0\n 46415: ra = 1762, jump @19\n      : @1673 [@dyn 881] (gas: 2)\n 46422: a1 = i32 [0x201ec]\n 46427: jump @1675 if a1 >u 63\n      : @1674 (gas: 2)\n 46431: u32 [0x201ec] = 0x40\n 46437: fallthrough\n      : @1675 (gas: 7)\n 46438: a1 = 0x20200\n 46443: i32 a1 = a1 + 0\n 46445: a0 = 0x1\n 46448: a2 = 0x24\n 46451: ra = 0x6e4\n 46455: ecalli 13 // 'seal_return'\n 46457: fallthrough\n      : @1676 [@dyn 882] (gas: 5)\n 46458: a0 = s1 + 0x3138\n 46462: u64 [a0 + 1784] = 0\n 46466: u64 [a0 + 1776] = 0\n 46470: u64 [a0 + 1768] = 0\n 46474: t0 = 1766, jump @2006\n      : @1677 [@dyn 883] (gas: 5)\n 46480: i32 a1 = a1 + 0xfffffffffffff820\n 46484: a1 = a1 + s1\n 46487: u64 [a2 + 0x700] = a0\n 46491: a0 = 0\n 46493: ra = 1768, jump @19\n      : @1678 [@dyn 884] (gas: 3)\n 46500: t0 = 0x6ea\n 46504: a1 = s1 + 0x3138\n 46508: fallthrough\n      : @1679 [@dyn 885] (gas: 9)\n 46509: u64 [a1 + 1760] = 0\n 46513: u64 [a1 + 1752] = 0\n 46517: u64 [a1 + 1736] = 0x41\n 46522: a2 = a1\n 46524: a0 = 0x4\n 46527: a1 = s1 + 0x3800\n 46531: u64 [a2 + 1744] = 0\n 46535: ra = 0x6fc\n 46539: jump @19\n      : @1680 (gas: 5)\n 46543: a0 = s1 + 0x3938\n 46547: u64 [a0 + 1080] = 0\n 46551: u64 [a0 + 1072] = 0\n 46555: u64 [a0 + 1064] = 0\n 46559: t0 = 1772, jump @2006\n      : @1681 [@dyn 886] (gas: 5)\n 46565: i32 a1 = a1 + 0xfffffffffffffd60\n 46569: a1 = a1 + s1\n 46572: u64 [a2 + 0x440] = a0\n 46576: a0 = 0\n 46578: ra = 1774, jump @19\n      : @1682 [@dyn 887] (gas: 10)\n 46585: a0 = s1 + 0x3938\n 46589: u64 [a0 + 1056] = 0\n 46593: u64 [a0 + 1048] = 0\n 46597: u64 [a0 + 1040] = 0\n 46601: a2 = a0\n 46603: a0 = 0x4\n 46606: a1 = s1 + 0x3d40\n 46610: u64 [a2 + 1032] = 0\n 46614: ra = 0x6fc\n 46618: jump @19\n      : @1683 (gas: 5)\n 46622: a0 = s1 + 0x3138\n 46626: u64 [a0 + 1848] = 0\n 46630: u64 [a0 + 1840] = 0\n 46634: u64 [a0 + 1832] = 0\n 46638: t0 = 1776, jump @2006\n      : @1684 [@dyn 888] (gas: 5)\n 46644: i32 a1 = a1 + 0xfffffffffffff860\n 46648: a1 = a1 + s1\n 46651: u64 [a2 + 0x740] = a0\n 46655: a0 = 0\n 46657: ra = 1778, jump @19\n      : @1685 [@dyn 889] (gas: 3)\n 46664: t0 = 0x6f4\n 46668: a1 = s1 + 0x3138\n 46672: fallthrough\n      : @1686 [@dyn 890] (gas: 9)\n 46673: u64 [a1 + 1824] = 0\n 46677: u64 [a1 + 1816] = 0\n 46681: u64 [a1 + 1800] = 0x41\n 46686: a2 = a1\n 46688: a0 = 0x4\n 46691: a1 = s1 + 0x3840\n 46695: u64 [a2 + 1808] = 0\n 46699: ra = 0x6fc\n 46703: jump @19\n      : @1687 (gas: 5)\n 46707: a0 = s1 + 0x3138\n 46711: u64 [a0 + 1944] = 0\n 46715: u64 [a0 + 1936] = 0\n 46719: u64 [a0 + 1928] = 0\n 46723: t0 = 1782, jump @2006\n      : @1688 [@dyn 891] (gas: 5)\n 46729: i32 a1 = a1 + 0xfffffffffffff8c0\n 46733: a1 = a1 + s1\n 46736: u64 [a2 + 0x7a0] = a0\n 46740: a0 = 0\n 46742: ra = 1784, jump @19\n      : @1689 [@dyn 892] (gas: 3)\n 46749: t0 = 0x6fa\n 46753: a1 = s1 + 0x3138\n 46757: fallthrough\n      : @1690 [@dyn 893] (gas: 8)\n 46758: u64 [a1 + 1920] = 0\n 46762: u64 [a1 + 1912] = 0\n 46766: u64 [a1 + 1896] = 0x41\n 46771: a2 = a1\n 46773: a0 = 0x4\n 46776: a1 = s1 + 0x38a0\n 46780: u64 [a2 + 1904] = 0\n 46784: ra = 1788, jump @19\n      : @1691 [@dyn 894] (gas: 3)\n 46791: a0 = u64 [s1 + 0x58]\n 46794: a0 = i32 [a0]\n 46796: jump @1693 if a0 >u 63\n      : @1692 (gas: 3)\n 46800: a1 = u64 [s1 + 0x58]\n 46803: u32 [a1 + 0] = 0x40\n 46806: fallthrough\n      : @1693 (gas: 5)\n 46807: a0 = 0x1\n 46810: a2 = 0x24\n 46813: a1 = u64 [s1 + 0x50]\n 46816: ecalli 13 // 'seal_return'\n 46818: fallthrough\n      : @1694 (gas: 6)\n 46819: a0 = 0x1\n 46822: a1 = u64 [s1 + 0x198]\n 46826: ecalli 13 // 'seal_return'\n 46828: a0 = 0x1\n 46831: a1 = u64 [s1 + 0x198]\n 46835: jump @1606\n      : @1695 (gas: 3)\n 46838: a0 = 0x1\n 46841: a1 = u64 [s1 + 0x198]\n 46845: jump @1606\n      : @1696 (gas: 15)\n 46848: a3 = a4\n 46850: a2 = s1 + 0x1938\n 46854: a0 = u64 [s1 + 0xe0]\n 46858: a5 = a2 + 0x700\n 46862: u64 [a5 + 0x28] = a0\n 46865: a0 = u64 [s1 + 0xe8]\n 46869: u64 [a5 + 0x30] = a0\n 46872: a0 = u64 [s1 + 0xf0]\n 46876: u64 [a5 + 0x38] = a0\n 46879: a1 = s1 + 0x2060\n 46883: a0 = u64 [s1 + 0xf8]\n 46887: u64 [a5 + 0x40] = a0\n 46890: a0 = a4\n 46892: u64 [s1 + 0x1b8] = a3\n 46896: ra = 1790, jump @19\n      : @1697 [@dyn 895] (gas: 23)\n 46903: a5 = s1 + 0x100\n 46907: a0 = u64 [a5 + 0x20]\n 46910: a4 = s1 + 0x1938\n 46914: u64 [a4 + 0x700] = a0\n 46918: a0 = u64 [a5 + 0x28]\n 46921: u64 [a4 + 0x6f8] = a0\n 46925: a0 = u64 [a5 + 0x30]\n 46928: u64 [a4 + 0x6f0] = a0\n 46932: a0 = u64 [0x200c0]\n 46937: a1 = u64 [0x200c8]\n 46942: a2 = u64 [0x200d0]\n 46947: a3 = u64 [a5 + 0x38]\n 46950: u64 [a4 + 0x6e8] = a3\n 46954: u64 [a4 + 0x720] = a0\n 46958: u64 [a4 + 0x718] = a1\n 46962: u64 [a4 + 0x710] = a2\n 46966: a0 = u64 [0x200d8]\n 46971: a1 = 0x20\n 46974: a2 = s1 + 0x2040\n 46978: a3 = s1 + 0x2020\n 46982: u64 [a4 + 0x708] = a0\n 46986: a0 = u64 [a5 + 0xb8]\n 46990: ra = 1792, jump @24\n      : @1698 [@dyn 896] (gas: 3)\n 46997: a0 = 0\n 46999: a1 = u64 [s1 + 0x198]\n 47003: jump @1606\n      : @1699 (gas: 18)\n 47006: sp = sp + 0xffffffffffffffc0\n 47009: u64 [sp + 0x38] = ra\n 47012: u64 [sp + 0x30] = s0\n 47015: u64 [sp + 0x28] = s1\n 47018: s0 = sp + 0x40\n 47021: sp = sp & 0xfffffffffffffff0\n 47024: a2 = u64 [a1 + 0x10]\n 47027: a3 = u64 [a1 + 0x18]\n 47030: a4 = u64 [a1 + 0x8]\n 47033: a1 = u64 [a1]\n 47035: a3 = a3 | a4\n 47038: a4 = a1 | a2\n 47041: a4 = a4 | a3\n 47044: a4 = a4 >> 0x20\n 47047: a2 = a2 | a3\n 47050: a2 = a2 << 0x20\n 47053: a2 = a2 | a4\n 47056: jump @1705 if a2 != 0\n      : @1700 (gas: 3)\n 47059: s1 = a0\n 47061: a0 = sp\n 47063: ra = 1794, jump @17\n      : @1701 [@dyn 897] (gas: 1)\n 47070: t0 = 1796, jump @2003\n      : @1702 [@dyn 898] (gas: 1)\n 47076: jump @1706 if a3 == 0\n      : @1703 (gas: 1)\n 47079: t0 = 1798, jump @2018\n      : @1704 [@dyn 899] (gas: 1)\n 47085: ret\n      : @1705 (gas: 1)\n 47087: trap\n      : @1706 (gas: 7)\n 47088: a1 = 0x20200\n 47093: i32 a1 = a1 + 0\n 47095: a0 = 0x1\n 47098: a2 = 0\n 47100: ra = 0x708\n 47104: ecalli 13 // 'seal_return'\n 47106: fallthrough\n      : @1707 [@dyn 900] (gas: 21)\n 47107: sp = sp + 0xffffffffffffff10\n 47111: u64 [sp + 0xe8] = ra\n 47115: u64 [sp + 0xe0] = s0\n 47119: u64 [sp + 0xd8] = s1\n 47123: s0 = sp + 0xf0\n 47127: sp = sp & 0xfffffffffffffff0\n 47130: a5 = u64 [a1 + 0x10]\n 47133: a4 = u64 [a1 + 0x18]\n 47136: a3 = u64 [a1 + 0x8]\n 47139: a1 = u64 [a1]\n 47141: u64 [sp + 0x28] = a3\n 47144: u64 [sp + 0x18] = a4\n 47147: a4 = a4 | a3\n 47150: a3 = a1 | a5\n 47153: a3 = a3 | a4\n 47156: a3 = a3 >> 0x20\n 47159: u64 [sp + 0x20] = a5\n 47162: a4 = a4 | a5\n 47165: a4 = a4 << 0x20\n 47168: a3 = a3 | a4\n 47171: jump @1721 if a3 != 0\n      : @1708 (gas: 11)\n 47175: u64 [sp + 0x8] = a0\n 47178: a0 = u64 [a2 + 0x18]\n 47181: u64 [sp + 0x68] = a0\n 47184: s1 = u64 [a2 + 0x10]\n 47187: a0 = u64 [a2 + 0x8]\n 47190: u64 [sp + 0x60] = a0\n 47193: a0 = u64 [a2]\n 47195: u64 [sp + 0x58] = a0\n 47198: a0 = sp + 0xb0\n 47202: u64 [sp + 0x10] = a1\n 47205: ra = 1802, jump @17\n      : @1709 [@dyn 901] (gas: 12)\n 47212: a0 = u64 [sp + 0x58]\n 47215: a2 = a0 | s1\n 47218: a1 = u64 [sp + 0x68]\n 47221: a3 = u64 [sp + 0x60]\n 47224: a1 = a1 | a3\n 47227: a2 = a2 | a1\n 47230: a2 = a2 >> 0x20\n 47233: u64 [sp + 0x50] = s1\n 47236: a1 = a1 | s1\n 47239: a1 = a1 << 0x20\n 47242: a1 = a1 | a2\n 47245: jump @1721 if a1 != 0\n      : @1710 (gas: 15)\n 47249: a2 = u64 [sp + 0xc8]\n 47253: a3 = u64 [sp + 0xc0]\n 47257: a4 = u64 [sp + 0xb8]\n 47261: a1 = u64 [sp + 0xb0]\n 47265: u64 [sp + 0x30] = a1\n 47268: u64 [sp + 0x90] = a1\n 47272: u64 [sp + 0x38] = a4\n 47275: u64 [sp + 0x98] = a4\n 47279: u64 [sp + 0x40] = a3\n 47282: u64 [sp + 0xa0] = a3\n 47286: a1 = sp + 0x90\n 47290: u64 [sp + 0x48] = a2\n 47293: u64 [sp + 0xa8] = a2\n 47297: s1 = a0\n 47299: ra = 1804, jump @19\n      : @1711 [@dyn 902] (gas: 9)\n 47306: a0 = u64 [sp + 0x68]\n 47309: a1 = u64 [sp + 0x50]\n 47312: a1 = a1 | a0\n 47315: a0 = 0xffffffe0\n 47325: a2 = s1 <u a0\n 47328: a3 = u64 [sp + 0x60]\n 47331: a2 = 0 if a3 != 0\n 47333: a2 = 0 if a1 != 0\n 47335: jump @1721 if a2 == 0\n      : @1712 (gas: 9)\n 47339: a1 = u64 [sp + 0x20]\n 47342: a2 = u64 [sp + 0x18]\n 47345: a1 = a1 | a2\n 47348: a2 = u64 [sp + 0x10]\n 47351: a0 = a2 <u a0\n 47354: a3 = u64 [sp + 0x28]\n 47357: a0 = 0 if a3 != 0\n 47359: a0 = 0 if a1 != 0\n 47361: jump @1721 if a0 == 0\n      : @1713 (gas: 13)\n 47365: a5 = s1\n 47367: s1 = u64 [sp + 0x30]\n 47370: a3 = u64 [sp + 0x40]\n 47373: a0 = s1 | a3\n 47376: a1 = u64 [sp + 0x48]\n 47379: a4 = u64 [sp + 0x38]\n 47382: a1 = a1 | a4\n 47385: a0 = a0 | a1\n 47388: a0 = a0 >> 0x20\n 47391: a1 = a1 | a3\n 47394: a1 = a1 << 0x20\n 47397: a0 = a0 | a1\n 47400: jump @1721 if a0 != 0\n      : @1714 (gas: 5)\n 47404: i32 a0 = a5 + 0x20\n 47407: i32 a1 = a2 + 0x20\n 47410: u64 [sp + 0x28] = a1\n 47413: a1 = s1\n 47415: ra = 1806, jump @28\n      : @1715 [@dyn 903] (gas: 4)\n 47422: u64 [sp + 0x20] = a0\n 47425: a0 = u64 [sp + 0x28]\n 47428: a1 = s1\n 47430: ra = 1808, jump @28\n      : @1716 [@dyn 904] (gas: 4)\n 47437: a1 = a0\n 47439: a0 = u64 [sp + 0x20]\n 47442: a2 = s1\n 47444: ra = 1810, jump @0\n      : @1717 [@dyn 905] (gas: 27)\n 47451: a0 = u64 [sp + 0x58]\n 47454: a0 = a0 + s1\n 47457: a1 = a0 <u s1\n 47460: a2 = u64 [sp + 0x60]\n 47463: a4 = u64 [sp + 0x38]\n 47466: a2 = a2 + a4\n 47469: a2 = a2 + a1\n 47472: a3 = a2 ^ a4\n 47475: a4 = a2 <u a4\n 47478: a4 = a1 if a3 == 0\n 47481: a1 = u64 [sp + 0x50]\n 47484: a3 = u64 [sp + 0x40]\n 47487: a1 = a1 + a3\n 47490: a3 = a1 <u a3\n 47493: a5 = u64 [sp + 0x68]\n 47496: s1 = u64 [sp + 0x48]\n 47499: a5 = a5 + s1\n 47502: a3 = a3 + a5\n 47505: a4 = a4 + a1\n 47508: a1 = a4 <u a1\n 47511: a1 = a1 + a3\n 47514: a1 = a1 | a4\n 47517: a3 = 0xffffffe0\n 47527: a3 = a0 <u a3\n 47530: a3 = 0 if a2 != 0\n 47532: a3 = 0 if a1 != 0\n 47534: jump @1721 if a3 == 0\n      : @1718 (gas: 7)\n 47538: i32 a0 = a0 + 0x20\n 47541: u64 [sp + 136] = 0\n 47545: u64 [sp + 128] = 0\n 47549: u64 [sp + 120] = 0\n 47552: a1 = sp + 0x70\n 47555: u64 [sp + 112] = 0\n 47558: ra = 1812, jump @19\n      : @1719 [@dyn 906] (gas: 9)\n 47565: s1 = u64 [sp + 0x30]\n 47568: s1 = s1 + 0x1f\n 47571: a0 = 0x1ffffffe0\n 47581: a0 = a0 & s1\n 47584: a1 = u64 [sp + 0x58]\n 47587: a0 = a0 + a1\n 47590: a1 = a0 <u a1\n 47593: a3 = u64 [sp + 0x60]\n 47596: t0 = 1814, jump @2010\n      : @1720 [@dyn 907] (gas: 24)\n 47602: a1 = u64 [sp + 0x50]\n 47605: a3 = a3 + a1\n 47608: a1 = a3 <u a1\n 47611: a4 = u64 [sp + 0x68]\n 47614: a1 = a1 + a4\n 47617: a4 = a0 + 0x20\n 47620: a0 = a4 <u a0\n 47623: a5 = a2 + a0\n 47626: a2 = a5 <u a2\n 47629: a2 = a0 if a0 == 0\n 47632: a2 = a2 + a3\n 47635: a0 = a2 <u a3\n 47638: a0 = a0 + a1\n 47641: a1 = u64 [sp + 0x8]\n 47644: u64 [a1] = a4\n 47646: u64 [a1 + 0x8] = a5\n 47649: u64 [a1 + 0x10] = a2\n 47652: u64 [a1 + 0x18] = a0\n 47655: sp = s0 + 0xffffffffffffff10\n 47659: ra = u64 [sp + 0xe8]\n 47663: s0 = u64 [sp + 0xe0]\n 47667: s1 = u64 [sp + 0xd8]\n 47671: sp = sp + 0xf0\n 47675: ret\n      : @1721 (gas: 1)\n 47677: trap\n      : @1722 (gas: 22)\n 47678: sp = sp + 0xfffffffffffffe10\n 47682: u64 [sp + 0x1e8] = ra\n 47686: u64 [sp + 0x1e0] = s0\n 47690: u64 [sp + 0x1d8] = s1\n 47694: s0 = sp + 0x1f0\n 47698: sp = sp & 0xfffffffffffffff0\n 47701: a4 = u64 [a1 + 0x10]\n 47704: a3 = u64 [a1 + 0x18]\n 47707: a5 = u64 [a1 + 0x8]\n 47710: a1 = u64 [a1]\n 47712: u64 [sp + 0x98] = a3\n 47716: u64 [sp + 0x88] = a5\n 47720: a5 = a5 | a3\n 47723: a3 = a1 | a4\n 47726: a3 = a3 | a5\n 47729: a3 = a3 >> 0x20\n 47732: u64 [sp + 0x90] = a4\n 47736: a4 = a4 | a5\n 47739: a4 = a4 << 0x20\n 47742: a3 = a3 | a4\n 47745: u64 [sp + 0x8] = a0\n 47748: jump @1735 if a3 != 0\n      : @1723 (gas: 10)\n 47752: a0 = u64 [a2 + 0x18]\n 47755: u64 [sp + 0x38] = a0\n 47758: s1 = u64 [a2 + 0x10]\n 47761: a0 = u64 [a2 + 0x8]\n 47764: u64 [sp + 0x48] = a0\n 47767: a0 = u64 [a2]\n 47769: u64 [sp + 0x40] = a0\n 47772: a0 = sp + 0x1b0\n 47776: u64 [sp + 0x80] = a1\n 47780: ra = 1816, jump @17\n      : @1724 [@dyn 908] (gas: 12)\n 47787: a0 = u64 [sp + 0x40]\n 47790: a2 = a0 | s1\n 47793: a1 = u64 [sp + 0x38]\n 47796: a3 = u64 [sp + 0x48]\n 47799: a1 = a1 | a3\n 47802: a2 = a2 | a1\n 47805: a2 = a2 >> 0x20\n 47808: u64 [sp + 0x18] = s1\n 47811: a1 = a1 | s1\n 47814: a1 = a1 << 0x20\n 47817: a1 = a1 | a2\n 47820: jump @1735 if a1 != 0\n      : @1725 (gas: 13)\n 47824: a3 = u64 [sp + 0x1c8]\n 47828: u64 [sp + 0x30] = a3\n 47831: s1 = u64 [sp + 0x1c0]\n 47835: a2 = u64 [sp + 0x1b8]\n 47839: u64 [sp + 0x28] = a2\n 47842: a1 = u64 [sp + 0x1b0]\n 47846: u64 [sp + 0x20] = a1\n 47849: u64 [sp + 0x190] = a1\n 47853: u64 [sp + 0x198] = a2\n 47857: u64 [sp + 0x1a0] = s1\n 47861: a1 = sp + 0x190\n 47865: u64 [sp + 0x1a8] = a3\n 47869: ra = 1818, jump @19\n      : @1726 [@dyn 909] (gas: 65)\n 47876: ra = 0\n 47878: a5 = 0\n 47880: u64 [sp + 168] = 0\n 47884: t2 = 0\n 47886: a0 = s1 >> 0x3b\n 47889: a1 = u64 [sp + 0x30]\n 47892: a1 = a1 << 0x5\n 47895: a0 = a0 | a1\n 47898: u64 [sp + 0xe8] = a0\n 47902: a3 = u64 [sp + 0x28]\n 47905: a1 = a3 >> 0x3b\n 47908: u64 [sp + 0x10] = s1\n 47911: a2 = s1 << 0x5\n 47914: a1 = a1 | a2\n 47917: a0 = u64 [sp + 0x20]\n 47920: a2 = a0 >> 0x3b\n 47923: a3 = a3 << 0x5\n 47926: a2 = a2 | a3\n 47929: a3 = a0 << 0x5\n 47932: a4 = u64 [sp + 0x40]\n 47935: a3 = a3 + a4\n 47938: a4 = u64 [sp + 0x40]\n 47941: a4 = a3 <u a4\n 47944: a0 = u64 [sp + 0x48]\n 47947: a2 = a2 + a0\n 47950: a2 = a2 + a4\n 47953: a0 = a0 ^ a2\n 47956: s1 = u64 [sp + 0x48]\n 47959: s1 = a2 <u s1\n 47962: s1 = a4 if a0 == 0\n 47965: t1 = u64 [sp + 0x40]\n 47968: t0 = u64 [sp + 0x18]\n 47971: a1 = a1 + t0\n 47974: s1 = s1 + a1\n 47977: a0 = s1 <u a1\n 47980: u64 [sp + 0xe0] = a0\n 47984: a4 = a1 <u t0\n 47987: a1 = u64 [sp + 0x38]\n 47990: a0 = u64 [sp + 0xe8]\n 47994: a0 = a0 + a1\n 47997: a0 = a0 + a4\n 48000: a1 = u64 [sp + 0xe0]\n 48004: a0 = a0 + a1\n 48007: a1 = a3 + 0x20\n 48010: u64 [sp + 0xd8] = a1\n 48014: a1 = a1 <u a3\n 48017: a3 = u64 [sp + 0xa8]\n 48021: a4 = a2 + a1\n 48024: u64 [sp + 0xe8] = a4\n 48028: a2 = a4 <u a2\n 48031: a2 = a1 if a1 == 0\n 48034: a2 = a2 + s1\n 48037: u64 [sp + 0xd0] = a2\n 48041: a1 = a2 <u s1\n 48044: a0 = a0 + a1\n 48047: u64 [sp + 0xe0] = a0\n 48051: a0 = 0xffffffe0\n 48061: u64 [sp + 0xa0] = a0\n 48065: a4 = t1\n 48067: a0 = u64 [sp + 0x48]\n 48070: u64 [sp + 0xb8] = a0\n 48074: u64 [sp + 0xc0] = t0\n 48078: a0 = u64 [sp + 0x38]\n 48081: u64 [sp + 0xc8] = a0\n 48085: fallthrough\n      : @1727 (gas: 19)\n 48086: a0 = u64 [sp + 0x20]\n 48089: a0 = ra <u a0\n 48092: a2 = u64 [sp + 0x28]\n 48095: a1 = a5 ^ a2\n 48098: a2 = a5 <u a2\n 48101: a2 = a0 if a1 == 0\n 48104: s1 = u64 [sp + 0x10]\n 48107: t0 = a3 <u s1\n 48110: a0 = a3\n 48112: a3 = u64 [sp + 0x30]\n 48115: a1 = t2 ^ a3\n 48118: u64 [sp + 0x78] = t2\n 48121: a3 = t2 <u a3\n 48124: a3 = t0 if a1 == 0\n 48127: u64 [sp + 0xa8] = a0\n 48131: a0 = a0 ^ s1\n 48134: a0 = a0 | a1\n 48137: a3 = a2 if a0 == 0\n 48140: jump @1734 if a3 == 0\n      : @1728 (gas: 16)\n 48144: a3 = u64 [sp + 0xd0]\n 48148: u64 [sp + 0x68] = a5\n 48151: u64 [sp + 0x70] = ra\n 48154: a0 = u64 [sp + 0xc8]\n 48158: a1 = u64 [sp + 0xc0]\n 48162: a0 = a0 | a1\n 48165: ra = a4\n 48167: a1 = u64 [sp + 0xa0]\n 48171: a1 = a4 <u a1\n 48174: a2 = u64 [sp + 0xb8]\n 48178: a1 = 0 if a2 != 0\n 48180: a1 = 0 if a0 != 0\n 48182: a4 = u64 [sp + 0xe8]\n 48186: t2 = u64 [sp + 0xe0]\n 48190: a5 = u64 [sp + 0xd8]\n 48194: jump @1735 if a1 == 0\n      : @1729 (gas: 46)\n 48198: a2 = a5 <u t1\n 48201: s1 = u64 [sp + 0x48]\n 48204: a1 = a4 ^ s1\n 48207: a0 = a4 <u s1\n 48210: a0 = a2 if a1 == 0\n 48213: t0 = t1\n 48215: t1 = a3\n 48217: a1 = u64 [sp + 0x18]\n 48220: a3 = a3 - a1\n 48223: u64 [sp + 0xb0] = a3\n 48227: a3 = a4 - s1\n 48230: a3 = a3 - a2\n 48233: a2 = a5 - t0\n 48236: u64 [sp + 0xd8] = a5\n 48240: t0 = a2 + 0xffffffffffffffe0\n 48243: a2 = t0 <u a2\n 48246: a5 = a3 + a2\n 48249: a5 = a5 + 0xffffffffffffffff\n 48252: s1 = a5 ^ a3\n 48255: a3 = a5 <u a3\n 48258: a3 = a2 if s1 == 0\n 48261: a2 = t1 <u a1\n 48264: s1 = u64 [sp + 0x38]\n 48267: s1 = t2 - s1\n 48270: s1 = s1 - a2\n 48273: a1 = u64 [sp + 0xb0]\n 48277: a2 = a1 <u a0\n 48280: s1 = s1 - a2\n 48283: a1 = a1 - a0\n 48286: a0 = a1 <u 0x1\n 48289: s1 = s1 - a0\n 48292: a1 = a1 + 0xffffffffffffffff\n 48295: a3 = a3 + a1\n 48298: a0 = a3 <u a1\n 48301: s1 = s1 + a0\n 48304: a0 = ra + 0x20\n 48307: u64 [sp + 0x170] = t0\n 48311: u64 [sp + 0x178] = a5\n 48315: u64 [sp + 0x180] = a3\n 48319: a1 = sp + 0x170\n 48323: u64 [sp + 0x188] = s1\n 48327: u64 [sp + 0xb0] = a0\n 48331: u64 [sp + 0xe8] = a4\n 48335: u64 [sp + 0xe0] = t2\n 48339: s1 = ra\n 48341: ra = 1820, jump @19\n      : @1730 [@dyn 910] (gas: 10)\n 48348: a2 = u64 [sp + 0x98]\n 48352: a3 = u64 [sp + 0x90]\n 48356: a0 = a3 | a2\n 48359: a5 = u64 [sp + 0x80]\n 48363: a1 = u64 [sp + 0xa0]\n 48367: a1 = a5 <u a1\n 48370: a4 = u64 [sp + 0x88]\n 48374: a1 = 0 if a4 != 0\n 48376: a1 = 0 if a0 != 0\n 48378: jump @1735 if a1 == 0\n      : @1731 (gas: 29)\n 48382: a1 = a5 + 0x20\n 48385: a0 = a1 <u a5\n 48388: a5 = a1\n 48390: u64 [sp + 0x50] = a1\n 48393: a1 = a4 + a0\n 48396: u64 [sp + 0x60] = a1\n 48399: a1 = a1 <u a4\n 48402: a1 = a0 if a0 == 0\n 48405: a1 = a1 + a3\n 48408: u64 [sp + 0x58] = a1\n 48411: a0 = a1 <u a3\n 48414: a2 = a2 + a0\n 48417: u64 [sp + 0x98] = a2\n 48421: a0 = u64 [sp + 0xb0]\n 48425: a0 = a0 <u s1\n 48428: a1 = u64 [sp + 0xb8]\n 48432: a2 = a1 + a0\n 48435: u64 [sp + 0x90] = a2\n 48439: a1 = a2 <u a1\n 48442: a1 = a0 if a0 == 0\n 48445: a0 = u64 [sp + 0xc0]\n 48449: s1 = a0 + a1\n 48452: a0 = s1 <u a0\n 48455: a1 = u64 [sp + 0xc8]\n 48459: a1 = a1 + a0\n 48462: u64 [sp + 0xc8] = a1\n 48466: a0 = sp + 0x150\n 48470: a1 = a5\n 48472: ra = 1822, jump @17\n      : @1732 [@dyn 911] (gas: 20)\n 48479: a3 = u64 [sp + 0x150]\n 48483: a0 = u64 [sp + 0x158]\n 48487: a1 = u64 [sp + 0x160]\n 48491: a2 = u64 [sp + 0x168]\n 48495: a4 = u64 [sp + 0xe0]\n 48499: u64 [sp + 0x108] = a4\n 48503: a4 = u64 [sp + 0xd0]\n 48507: u64 [sp + 0x100] = a4\n 48511: a4 = u64 [sp + 0xe8]\n 48515: u64 [sp + 0xf8] = a4\n 48519: a4 = u64 [sp + 0xd8]\n 48523: u64 [sp + 0xf0] = a4\n 48527: u64 [sp + 0x128] = a2\n 48531: u64 [sp + 0x120] = a1\n 48535: u64 [sp + 0x118] = a0\n 48539: a0 = sp + 0x130\n 48543: a1 = sp + 0x110\n 48547: a2 = sp + 0xf0\n 48551: u64 [sp + 0x110] = a3\n 48555: ra = 1824, jump @1707\n      : @1733 [@dyn 912] (gas: 33)\n 48561: a0 = u64 [sp + 0x148]\n 48565: u64 [sp + 0xe0] = a0\n 48569: a0 = u64 [sp + 0x140]\n 48573: u64 [sp + 0xd0] = a0\n 48577: a0 = u64 [sp + 0x138]\n 48581: u64 [sp + 0xe8] = a0\n 48585: ra = u64 [sp + 0x70]\n 48588: ra = ra + 0x1\n 48591: a0 = ra <u 0x1\n 48594: a5 = u64 [sp + 0x68]\n 48597: a5 = a5 + a0\n 48600: a0 = ra | a5\n 48603: a0 = a0 <u 0x1\n 48606: a1 = u64 [sp + 0x130]\n 48610: u64 [sp + 0xd8] = a1\n 48614: a1 = u64 [sp + 0xa8]\n 48618: a0 = a0 + a1\n 48621: a1 = a0 <u a1\n 48624: t2 = u64 [sp + 0x78]\n 48627: t2 = t2 + a1\n 48630: a4 = u64 [sp + 0xb0]\n 48634: a1 = u64 [sp + 0x90]\n 48638: u64 [sp + 0xb8] = a1\n 48642: u64 [sp + 0xc0] = s1\n 48646: a1 = u64 [sp + 0x50]\n 48649: u64 [sp + 0x80] = a1\n 48653: a1 = u64 [sp + 0x60]\n 48656: u64 [sp + 0x88] = a1\n 48660: a1 = u64 [sp + 0x58]\n 48663: u64 [sp + 0x90] = a1\n 48667: a3 = a0\n 48669: t1 = u64 [sp + 0x40]\n 48672: jump @1727\n      : @1734 (gas: 15)\n 48675: a0 = u64 [sp + 0x8]\n 48678: a1 = u64 [sp + 0xd8]\n 48682: u64 [a0] = a1\n 48684: a1 = u64 [sp + 0xe8]\n 48688: u64 [a0 + 0x8] = a1\n 48691: a1 = u64 [sp + 0xd0]\n 48695: u64 [a0 + 0x10] = a1\n 48698: a1 = u64 [sp + 0xe0]\n 48702: u64 [a0 + 0x18] = a1\n 48705: sp = s0 + 0xfffffffffffffe10\n 48709: ra = u64 [sp + 0x1e8]\n 48713: s0 = u64 [sp + 0x1e0]\n 48717: s1 = u64 [sp + 0x1d8]\n 48721: sp = sp + 0x1f0\n 48725: ret\n      : @1735 (gas: 1)\n 48727: trap\n      : @1736 (gas: 22)\n 48728: sp = sp + 0xfffffffffffffea0\n 48732: u64 [sp + 0x158] = ra\n 48736: u64 [sp + 0x150] = s0\n 48740: u64 [sp + 0x148] = s1\n 48744: s0 = sp + 0x160\n 48748: sp = sp & 0xfffffffffffffff0\n 48751: a5 = u64 [a1 + 0x10]\n 48754: a3 = u64 [a1 + 0x18]\n 48757: a4 = u64 [a1 + 0x8]\n 48760: a1 = u64 [a1]\n 48762: u64 [sp + 0xa0] = a3\n 48766: u64 [sp + 0x90] = a4\n 48770: a4 = a4 | a3\n 48773: a3 = a1 | a5\n 48776: a3 = a3 | a4\n 48779: a3 = a3 >> 0x20\n 48782: u64 [sp + 0x98] = a5\n 48786: a4 = a4 | a5\n 48789: a4 = a4 << 0x20\n 48792: a3 = a3 | a4\n 48795: u64 [sp + 0x8] = a0\n 48798: jump @1748 if a3 != 0\n      : @1737 (gas: 10)\n 48802: a0 = u64 [a2 + 0x18]\n 48805: u64 [sp + 0xb0] = a0\n 48809: s1 = u64 [a2 + 0x10]\n 48812: a0 = u64 [a2 + 0x8]\n 48815: u64 [sp + 0x80] = a0\n 48819: a0 = u64 [a2]\n 48821: u64 [sp + 0x78] = a0\n 48824: a0 = sp + 0x120\n 48828: u64 [sp + 0xb8] = a1\n 48832: ra = 1826, jump @17\n      : @1738 [@dyn 913] (gas: 12)\n 48839: a0 = u64 [sp + 0x78]\n 48842: a2 = a0 | s1\n 48845: a1 = u64 [sp + 0xb0]\n 48849: a3 = u64 [sp + 0x80]\n 48853: a1 = a1 | a3\n 48856: a2 = a2 | a1\n 48859: a2 = a2 >> 0x20\n 48862: u64 [sp + 0xa8] = s1\n 48866: a1 = a1 | s1\n 48869: a1 = a1 << 0x20\n 48872: a1 = a1 | a2\n 48875: jump @1748 if a1 != 0\n      : @1739 (gas: 15)\n 48879: a4 = u64 [sp + 0x138]\n 48883: a1 = u64 [sp + 0x130]\n 48887: a2 = u64 [sp + 0x128]\n 48891: a3 = u64 [sp + 0x120]\n 48895: u64 [sp + 0x18] = a3\n 48898: u64 [sp + 0x100] = a3\n 48902: u64 [sp + 0x20] = a2\n 48905: u64 [sp + 0x108] = a2\n 48909: u64 [sp + 0x28] = a1\n 48912: u64 [sp + 0x110] = a1\n 48916: a1 = sp + 0x100\n 48920: u64 [sp + 0x30] = a4\n 48923: u64 [sp + 0x118] = a4\n 48927: s1 = a0\n 48929: ra = 1828, jump @19\n      : @1740 [@dyn 914] (gas: 8)\n 48936: a2 = 0\n 48938: a3 = 0\n 48940: t1 = 0\n 48942: t0 = 0\n 48944: a0 = 0xffffffe0\n 48954: u64 [sp + 0x10] = a0\n 48957: a5 = u64 [sp + 0x80]\n 48961: fallthrough\n      : @1741 (gas: 32)\n 48962: ra = s1 + 0x20\n 48965: a0 = u64 [sp + 0x18]\n 48968: u64 [sp + 0x68] = a2\n 48971: a0 = a2 <u a0\n 48974: a2 = u64 [sp + 0x20]\n 48977: a1 = a3 ^ a2\n 48980: u64 [sp + 0x60] = a3\n 48983: a2 = a3 <u a2\n 48986: a2 = a0 if a1 == 0\n 48989: a4 = u64 [sp + 0x28]\n 48992: a0 = t1 <u a4\n 48995: a3 = u64 [sp + 0x30]\n 48998: a1 = t0 ^ a3\n 49001: u64 [sp + 0x58] = t0\n 49004: a3 = t0 <u a3\n 49007: a3 = a0 if a1 == 0\n 49010: a0 = t1 ^ a4\n 49013: a4 = s1\n 49015: a0 = a0 | a1\n 49018: u64 [sp + 0x70] = ra\n 49021: a1 = ra <u s1\n 49024: a3 = a2 if a0 == 0\n 49027: a2 = a5 + a1\n 49030: s1 = a5\n 49032: a0 = a2 <u a5\n 49035: a0 = a1 if a1 == 0\n 49038: a1 = u64 [sp + 0xa8]\n 49042: a5 = a1 + a0\n 49045: a0 = a5 <u a1\n 49048: a1 = u64 [sp + 0xb0]\n 49052: a0 = a0 + a1\n 49055: jump @1747 if a3 == 0\n      : @1742 (gas: 16)\n 49059: u64 [sp + 0x38] = a0\n 49062: u64 [sp + 0x40] = a5\n 49065: u64 [sp + 0x48] = a2\n 49068: u64 [sp + 0x50] = t1\n 49071: u64 [sp + 0x78] = a4\n 49074: u64 [sp + 0x80] = s1\n 49078: a0 = u64 [sp + 0xa0]\n 49082: a1 = u64 [sp + 0x98]\n 49086: a0 = a0 | a1\n 49089: s1 = u64 [sp + 0x10]\n 49092: a2 = u64 [sp + 0xb8]\n 49096: a1 = a2 <u s1\n 49099: a3 = u64 [sp + 0x90]\n 49103: a1 = 0 if a3 != 0\n 49105: a1 = 0 if a0 != 0\n 49107: jump @1748 if a1 == 0\n      : @1743 (gas: 5)\n 49111: a1 = a2 + 0x20\n 49114: a0 = sp + 0xe0\n 49118: u64 [sp + 0x88] = a1\n 49122: u64 [sp + 0xb8] = a2\n 49126: ra = 1830, jump @17\n      : @1744 [@dyn 915] (gas: 9)\n 49133: a0 = u64 [sp + 0xa8]\n 49137: a1 = u64 [sp + 0xb0]\n 49141: a0 = a0 | a1\n 49144: a1 = u64 [sp + 0x78]\n 49147: a1 = a1 <u s1\n 49150: a2 = u64 [sp + 0x80]\n 49154: a1 = 0 if a2 != 0\n 49156: a1 = 0 if a0 != 0\n 49158: jump @1748 if a1 == 0\n      : @1745 (gas: 27)\n 49162: a0 = u64 [sp + 0x88]\n 49166: a1 = u64 [sp + 0xb8]\n 49170: a0 = a0 <u a1\n 49173: s1 = u64 [sp + 0x90]\n 49177: a1 = s1 + a0\n 49180: u64 [sp + 0x80] = a1\n 49184: a1 = a1 <u s1\n 49187: a1 = a0 if a0 == 0\n 49190: a0 = u64 [sp + 0xf8]\n 49194: a2 = u64 [sp + 0xf0]\n 49198: a3 = u64 [sp + 0xe8]\n 49202: a4 = u64 [sp + 0xe0]\n 49206: s1 = u64 [sp + 0x98]\n 49210: a1 = a1 + s1\n 49213: u64 [sp + 0x78] = a1\n 49216: a1 = a1 <u s1\n 49219: a5 = u64 [sp + 0xa0]\n 49223: a5 = a5 + a1\n 49226: u64 [sp + 0xa0] = a5\n 49230: u64 [sp + 0xc0] = a4\n 49234: u64 [sp + 0xc8] = a3\n 49238: u64 [sp + 0xd0] = a2\n 49242: a1 = sp + 0xc0\n 49246: u64 [sp + 0xd8] = a0\n 49250: s1 = u64 [sp + 0x70]\n 49253: a0 = s1\n 49255: ra = 1832, jump @19\n      : @1746 [@dyn 916] (gas: 24)\n 49262: a2 = u64 [sp + 0x68]\n 49265: a2 = a2 + 0x1\n 49268: a0 = a2 <u 0x1\n 49271: a3 = u64 [sp + 0x60]\n 49274: a3 = a3 + a0\n 49277: a0 = a2 | a3\n 49280: a0 = a0 <u 0x1\n 49283: a1 = u64 [sp + 0x50]\n 49286: t1 = a1 + a0\n 49289: a1 = t1 <u a1\n 49292: t0 = u64 [sp + 0x58]\n 49295: t0 = t0 + a1\n 49298: a5 = u64 [sp + 0x48]\n 49301: a1 = u64 [sp + 0x40]\n 49304: u64 [sp + 0xa8] = a1\n 49308: a1 = u64 [sp + 0x38]\n 49311: u64 [sp + 0xb0] = a1\n 49315: a1 = u64 [sp + 0x88]\n 49319: u64 [sp + 0xb8] = a1\n 49323: a1 = u64 [sp + 0x80]\n 49327: u64 [sp + 0x90] = a1\n 49331: a1 = u64 [sp + 0x78]\n 49334: u64 [sp + 0x98] = a1\n 49338: jump @1741\n      : @1747 (gas: 12)\n 49341: a3 = u64 [sp + 0x8]\n 49344: a1 = u64 [sp + 0x70]\n 49347: u64 [a3] = a1\n 49349: u64 [a3 + 0x8] = a2\n 49352: u64 [a3 + 0x10] = a5\n 49355: u64 [a3 + 0x18] = a0\n 49358: sp = s0 + 0xfffffffffffffea0\n 49362: ra = u64 [sp + 0x158]\n 49366: s0 = u64 [sp + 0x150]\n 49370: s1 = u64 [sp + 0x148]\n 49374: sp = sp + 0x160\n 49378: ret\n      : @1748 (gas: 1)\n 49380: trap\n      : @1749 (gas: 46)\n 49381: sp = sp + 0xffffffffffffff70\n 49385: u64 [sp + 0x88] = ra\n 49389: u64 [sp + 0x80] = s0\n 49393: u64 [sp + 0x78] = s1\n 49396: s0 = sp + 0x90\n 49400: sp = sp & 0xfffffffffffffff0\n 49403: t0 = a0\n 49405: a2 = u64 [a1]\n 49407: t2 = u64 [a0 + 0x8]\n 49410: a5 = u64 [a1 + 0x8]\n 49413: t1 = u64 [a0]\n 49415: a3 = a2 + 0x1f\n 49418: ra = a3 <u a2\n 49421: a2 = a5 + ra\n 49424: a3 = a3 & 0xffffffffffffffe0\n 49427: u64 [sp + 0x8] = t1\n 49430: t1 = t1 + a3\n 49433: a4 = t1 <u a3\n 49436: a3 = a2 + t2\n 49439: a3 = a3 + a4\n 49442: s1 = a3 ^ a2\n 49445: a0 = a3 <u a2\n 49448: a0 = a4 if s1 == 0\n 49451: a4 = u64 [t0 + 0x18]\n 49454: a5 = a2 <u a5\n 49457: s1 = u64 [a1 + 0x10]\n 49460: t0 = u64 [t0 + 0x10]\n 49463: a1 = u64 [a1 + 0x18]\n 49466: a5 = ra if ra == 0\n 49469: a5 = a5 + s1\n 49472: s1 = a5 <u s1\n 49475: a2 = a5 + t0\n 49478: a0 = a0 + a2\n 49481: a5 = a2 <u a5\n 49484: a2 = a0 <u a2\n 49487: a1 = a1 + a4\n 49490: a1 = a1 + s1\n 49493: a1 = a1 + a5\n 49496: a5 = a1 + a2\n 49499: a1 = a5 >u 0\n 49501: a2 = a0 >u 0\n 49503: a2 = a1 if a5 != 0\n 49506: a1 = a0 | a5\n 49509: s1 = a3 >u 0\n 49511: s1 = a2 if a1 != 0\n 49514: jump @1753 if s1 != 0\n      : @1750 (gas: 13)\n 49517: a1 = u64 [sp + 0x8]\n 49520: a1 = t1 <u a1\n 49523: a2 = a3 ^ t2\n 49526: s1 = a3 <u t2\n 49529: s1 = a1 if a2 == 0\n 49532: a1 = a0 <u t0\n 49535: a2 = a5 ^ a4\n 49538: a4 = a5 <u a4\n 49541: a4 = a1 if a2 == 0\n 49544: a1 = a0 ^ t0\n 49547: a1 = a1 | a2\n 49550: a4 = s1 if a1 == 0\n 49553: jump @1753 if a4 != 0\n      : @1751 (gas: 7)\n 49556: u64 [sp + 0x50] = t1\n 49559: u64 [sp + 0x58] = a3\n 49562: u64 [sp + 0x60] = a0\n 49565: a0 = 0x40\n 49568: a1 = sp + 0x50\n 49571: u64 [sp + 0x68] = a5\n 49574: ra = 1834, jump @19\n      : @1752 [@dyn 917] (gas: 6)\n 49581: sp = s0 + 0xffffffffffffff70\n 49585: ra = u64 [sp + 0x88]\n 49589: s0 = u64 [sp + 0x80]\n 49593: s1 = u64 [sp + 0x78]\n 49596: sp = sp + 0x90\n 49600: ret\n      : @1753 (gas: 1)\n 49602: t0 = 1836, jump @2021\n      : @1754 [@dyn 918] (gas: 1)\n 49608: ra = 1838, jump @19\n      : @1755 [@dyn 919] (gas: 7)\n 49615: u64 [sp + 40] = 0\n 49618: u64 [sp + 32] = 0\n 49621: u64 [sp + 16] = 0x41\n 49625: a0 = 0x4\n 49628: a1 = sp + 0x10\n 49631: u64 [sp + 24] = 0\n 49634: ra = 1840, jump @19\n      : @1756 [@dyn 920] (gas: 2)\n 49641: a1 = i32 [0x201ec]\n 49646: jump @1758 if a1 >u 63\n      : @1757 (gas: 2)\n 49650: u32 [0x201ec] = 0x40\n 49656: fallthrough\n      : @1758 (gas: 7)\n 49657: a1 = 0x20200\n 49662: i32 a1 = a1 + 0\n 49664: a0 = 0x1\n 49667: a2 = 0x24\n 49670: ra = 0x732\n 49674: ecalli 13 // 'seal_return'\n 49676: fallthrough\n      : @1759 [@dyn 921] (gas: 37)\n 49677: sp = sp + 0xfffffffffffffe40\n 49681: u64 [sp + 0x1b8] = ra\n 49685: u64 [sp + 0x1b0] = s0\n 49689: u64 [sp + 0x1a8] = s1\n 49693: s0 = sp + 0x1c0\n 49697: sp = sp & 0xffffffffffffffe0\n 49700: ra = u64 [a1]\n 49702: a4 = u64 [a2 + 0x8]\n 49705: t2 = u64 [a1 + 0x8]\n 49708: s1 = u64 [a2]\n 49710: a3 = ra + 0x1f\n 49713: t0 = a3 <u ra\n 49716: a5 = t2 + t0\n 49719: u64 [sp + 0x30] = s1\n 49722: t1 = a3 <u s1\n 49725: a3 = a5 ^ a4\n 49728: u64 [sp + 0x40] = a4\n 49731: a4 = a5 <u a4\n 49734: a4 = t1 if a3 == 0\n 49737: s1 = u64 [a1 + 0x10]\n 49740: a3 = a5 <u t2\n 49743: a3 = t0 if t0 == 0\n 49746: a5 = u64 [a2 + 0x18]\n 49749: t0 = u64 [a1 + 0x18]\n 49752: t1 = u64 [a2 + 0x10]\n 49755: a3 = a3 + s1\n 49758: a1 = a3 <u s1\n 49761: a1 = a1 + t0\n 49764: a2 = a1 ^ a5\n 49767: u64 [sp + 0x20] = a5\n 49770: a1 = a1 <s a5\n 49773: a5 = a3 <u t1\n 49776: a1 = a5 if a2 == 0\n 49779: a3 = a3 ^ t1\n 49782: a2 = a2 | a3\n 49785: a4 = a1 if a2 != 0\n 49788: jump @1777 if a4 == 0\n      : @1760 (gas: 13)\n 49792: u64 [sp + 0x18] = a0\n 49795: u64 [sp + 0x28] = t1\n 49798: a0 = ra | s1\n 49801: u64 [sp + 0x50] = t2\n 49804: u64 [sp + 0x38] = t0\n 49807: a1 = t2 | t0\n 49810: a0 = a0 | a1\n 49813: a0 = a0 >> 0x20\n 49816: u64 [sp + 0x48] = s1\n 49819: a1 = a1 | s1\n 49822: a1 = a1 << 0x20\n 49825: a0 = a0 | a1\n 49828: jump @1776 if a0 != 0\n      : @1761 (gas: 6)\n 49832: u64 [sp + 0x60] = ra\n 49835: i32 a1 = ra + 0\n 49837: i32 a0 = sp + 0x180\n 49841: u64 [sp + 0x10] = a1\n 49844: ecalli 3 // 'call_data_load'\n 49846: fallthrough\n      : @1762 (gas: 13)\n 49847: a2 = u64 [sp + 0x198]\n 49851: a3 = u64 [sp + 0x190]\n 49855: a4 = u64 [sp + 0x188]\n 49859: a0 = a2 >u 0\n 49861: a1 = a3 >u 0\n 49863: a1 = a0 if a2 != 0\n 49866: u64 [sp + 0x90] = a2\n 49870: u64 [sp + 0x88] = a3\n 49874: a0 = a3 | a2\n 49877: u64 [sp + 0x98] = a4\n 49881: a2 = a4 >u 0\n 49883: a2 = a1 if a0 != 0\n 49886: jump @1778 if a2 != 0\n      : @1763 (gas: 4)\n 49890: s1 = u64 [sp + 0x180]\n 49894: a0 = sp + 0x160\n 49898: a1 = 0x40\n 49901: ra = 1844, jump @17\n      : @1764 [@dyn 922] (gas: 31)\n 49908: t0 = u64 [sp + 0x178]\n 49912: a5 = u64 [sp + 0x170]\n 49916: u64 [sp + 0x78] = a5\n 49919: t1 = u64 [sp + 0x168]\n 49923: u64 [sp + 0x80] = t1\n 49927: t2 = u64 [sp + 0x160]\n 49931: u64 [sp + 0x70] = t2\n 49934: a0 = s1 + 0x1f\n 49937: u64 [sp + 0x58] = s1\n 49940: a1 = a0 <u s1\n 49943: a2 = u64 [sp + 0x98]\n 49947: a1 = a1 + a2\n 49950: a1 = a1 & 0x1\n 49953: a0 = a0 & 0xffffffffffffffe0\n 49956: a2 = a0 + 0x20\n 49959: a0 = a2 <u a0\n 49962: a3 = a1 + a0\n 49965: a4 = a3 <u a1\n 49968: a4 = a0 if a0 == 0\n 49971: u64 [sp + 312] = 0\n 49975: u64 [sp + 0x120] = a2\n 49979: s1 = t0\n 49981: u64 [sp + 0x158] = t0\n 49985: u64 [sp + 0x150] = a5\n 49989: u64 [sp + 0x148] = t1\n 49993: u64 [sp + 0x140] = t2\n 49997: u64 [sp + 0x128] = a3\n 50001: a0 = sp + 0x140\n 50005: a1 = sp + 0x120\n 50009: u64 [sp + 0x130] = a4\n 50013: ra = 1846, jump @1749\n      : @1765 [@dyn 923] (gas: 12)\n 50019: a2 = u64 [sp + 0x70]\n 50022: u64 [sp + 0x68] = s1\n 50025: a1 = u64 [sp + 0x80]\n 50029: a0 = a1 | s1\n 50032: a3 = u64 [sp + 0x78]\n 50035: a1 = a2 | a3\n 50038: a1 = a1 | a0\n 50041: a1 = a1 >> 0x20\n 50044: a0 = a0 | a3\n 50047: a0 = a0 << 0x20\n 50050: a0 = a0 | a1\n 50053: jump @1776 if a0 != 0\n      : @1766 (gas: 11)\n 50057: s1 = u64 [sp + 0x58]\n 50060: u64 [sp + 0x100] = s1\n 50064: a0 = u64 [sp + 0x98]\n 50068: u64 [sp + 0x108] = a0\n 50072: a0 = u64 [sp + 0x88]\n 50076: u64 [sp + 0x110] = a0\n 50080: a1 = sp + 0x100\n 50084: a0 = u64 [sp + 0x90]\n 50088: u64 [sp + 0x118] = a0\n 50092: a0 = a2\n 50094: ra = 1848, jump @19\n      : @1767 [@dyn 924] (gas: 46)\n 50101: a0 = u64 [sp + 0x60]\n 50104: a3 = a0 + s1\n 50107: a2 = a3 <u a0\n 50110: t2 = u64 [sp + 0x50]\n 50113: a0 = u64 [sp + 0x98]\n 50117: a0 = a0 + t2\n 50120: a0 = a0 + a2\n 50123: a4 = a0 ^ t2\n 50126: a1 = a0 <u t2\n 50129: a1 = a2 if a4 == 0\n 50132: ra = u64 [sp + 0x48]\n 50135: a2 = u64 [sp + 0x88]\n 50139: a2 = a2 + ra\n 50142: a5 = a3 + 0x20\n 50145: t0 = a5 <u a3\n 50148: a4 = a0 + t0\n 50151: a3 = u64 [sp + 0x30]\n 50154: a5 = a3 <u a5\n 50157: a3 = u64 [sp + 0x40]\n 50160: s1 = a4 ^ a3\n 50163: a3 = a3 <u a4\n 50166: a5 = a3 if s1 != 0\n 50169: a3 = a2 <u ra\n 50172: t1 = u64 [sp + 0x38]\n 50175: s1 = u64 [sp + 0x90]\n 50179: s1 = s1 + t1\n 50182: a3 = a3 + s1\n 50185: a1 = a1 + a2\n 50188: a2 = a1 <u a2\n 50191: a2 = a2 + a3\n 50194: a0 = a4 <u a0\n 50197: a0 = t0 if t0 == 0\n 50200: a0 = a0 + a1\n 50203: a1 = a0 <u a1\n 50206: a1 = a1 + a2\n 50209: a3 = u64 [sp + 0x20]\n 50212: a2 = a1 ^ a3\n 50215: a1 = a3 <u a1\n 50218: a4 = u64 [sp + 0x28]\n 50221: a3 = a4 <u a0\n 50224: a1 = a3 if a2 == 0\n 50227: a0 = a0 ^ a4\n 50230: a0 = a0 | a2\n 50233: a5 = a1 if a0 != 0\n 50236: a3 = u64 [sp + 0x98]\n 50240: jump @1783 if a5 != 0\n      : @1768 (gas: 7)\n 50244: a0 = ra | t1\n 50247: a1 = 0xffffffe0\n 50257: a2 = u64 [sp + 0x60]\n 50260: a1 = a2 <u a1\n 50263: a1 = 0 if t2 != 0\n 50265: a1 = 0 if a0 != 0\n 50267: jump @1776 if a1 == 0\n      : @1769 (gas: 15)\n 50271: a2 = u64 [sp + 0x88]\n 50275: a5 = u64 [sp + 0x58]\n 50278: a0 = a5 | a2\n 50281: a1 = u64 [sp + 0x90]\n 50285: a1 = a1 | a3\n 50288: a0 = a0 | a1\n 50291: a0 = a0 >> 0x20\n 50294: a1 = a1 | a2\n 50297: a1 = a1 << 0x20\n 50300: a0 = a0 | a1\n 50303: s1 = u64 [sp + 0x70]\n 50306: a2 = u64 [sp + 0x80]\n 50310: a3 = u64 [sp + 0x78]\n 50313: a4 = u64 [sp + 0x68]\n 50316: jump @1776 if a0 != 0\n      : @1770 (gas: 7)\n 50320: a0 = a3 | a4\n 50323: a1 = 0xffffffe0\n 50333: u64 [sp + 0x60] = a1\n 50336: a1 = s1 <u a1\n 50339: a1 = 0 if a2 != 0\n 50341: a1 = 0 if a0 != 0\n 50343: jump @1776 if a1 == 0\n      : @1771 (gas: 7)\n 50347: a0 = u64 [sp + 0x10]\n 50350: i32 a0 = a0 + 0x20\n 50353: u64 [sp + 0x50] = a0\n 50356: i32 a0 = s1 + 0x20\n 50359: a1 = a5\n 50361: s1 = a5\n 50363: ra = 1850, jump @28\n      : @1772 [@dyn 925] (gas: 5)\n 50370: i32 a0 = a0 + 0\n 50372: i32 a1 = s1 + 0\n 50374: a2 = u64 [sp + 0x50]\n 50377: ecalli 2 // 'call_data_copy'\n 50379: fallthrough\n      : @1773 (gas: 27)\n 50380: t0 = u64 [sp + 0x70]\n 50383: a0 = t0 + s1\n 50386: a1 = a0 <u t0\n 50389: a2 = u64 [sp + 0x98]\n 50393: a4 = u64 [sp + 0x80]\n 50397: a2 = a2 + a4\n 50400: a2 = a2 + a1\n 50403: a3 = a2 ^ a4\n 50406: a4 = a2 <u a4\n 50409: a4 = a1 if a3 == 0\n 50412: a1 = u64 [sp + 0x88]\n 50416: a3 = u64 [sp + 0x78]\n 50419: a1 = a1 + a3\n 50422: a3 = a1 <u a3\n 50425: a5 = u64 [sp + 0x90]\n 50429: s1 = u64 [sp + 0x68]\n 50432: a5 = a5 + s1\n 50435: a3 = a3 + a5\n 50438: a4 = a4 + a1\n 50441: a1 = a4 <u a1\n 50444: a1 = a1 + a3\n 50447: a1 = a1 | a4\n 50450: a3 = u64 [sp + 0x60]\n 50453: a3 = a0 <u a3\n 50456: a3 = 0 if a2 != 0\n 50458: a3 = 0 if a1 != 0\n 50460: jump @1776 if a3 == 0\n      : @1774 (gas: 8)\n 50463: s1 = t0\n 50465: i32 a0 = a0 + 0x20\n 50468: u64 [sp + 248] = 0\n 50472: u64 [sp + 240] = 0\n 50476: u64 [sp + 232] = 0\n 50480: a1 = sp + 0xe0\n 50484: u64 [sp + 224] = 0\n 50488: ra = 1852, jump @19\n      : @1775 [@dyn 926] (gas: 14)\n 50495: a0 = u64 [sp + 0x18]\n 50498: a1 = u64 [sp + 0x68]\n 50501: u64 [a0 + 0x18] = a1\n 50504: a1 = u64 [sp + 0x78]\n 50507: u64 [a0 + 0x10] = a1\n 50510: a1 = u64 [sp + 0x80]\n 50514: u64 [a0 + 0x8] = a1\n 50517: u64 [a0] = s1\n 50519: sp = s0 + 0xfffffffffffffe40\n 50523: ra = u64 [sp + 0x1b8]\n 50527: s0 = u64 [sp + 0x1b0]\n 50531: s1 = u64 [sp + 0x1a8]\n 50535: sp = sp + 0x1c0\n 50539: ret\n      : @1776 (gas: 1)\n 50541: trap\n      : @1777 (gas: 2)\n 50542: a1 = 0x20200\n 50547: jump @1784\n      : @1778 (gas: 8)\n 50549: u64 [sp + 208] = 0\n 50553: u64 [sp + 200] = 0\n 50557: u64 [sp + 192] = 0\n 50561: a0 = 0x4e487b7100000000\n 50571: a1 = sp + 0xc0\n 50575: u64 [sp + 0xd8] = a0\n 50579: a0 = 0\n 50581: ra = 1854, jump @19\n      : @1779 [@dyn 927] (gas: 7)\n 50588: u64 [sp + 184] = 0\n 50592: u64 [sp + 176] = 0\n 50596: u64 [sp + 160] = 0x41\n 50601: a0 = 0x4\n 50604: a1 = sp + 0xa0\n 50608: u64 [sp + 168] = 0\n 50612: ra = 1856, jump @19\n      : @1780 [@dyn 928] (gas: 2)\n 50619: a1 = i32 [0x201ec]\n 50624: jump @1782 if a1 >u 63\n      : @1781 (gas: 2)\n 50628: u32 [0x201ec] = 0x40\n 50634: fallthrough\n      : @1782 (gas: 7)\n 50635: a1 = 0x20200\n 50640: i32 a1 = a1 + 0\n 50642: a0 = 0x1\n 50645: a2 = 0x24\n 50648: ecalli 13 // 'seal_return'\n 50650: a1 = 0x20200\n 50655: jump @1784\n      : @1783 (gas: 2)\n 50657: a1 = 0x20200\n 50662: fallthrough\n      : @1784 (gas: 6)\n 50663: i32 a1 = a1 + 0\n 50665: a0 = 0x1\n 50668: a2 = 0\n 50670: ra = 0x742\n 50674: ecalli 13 // 'seal_return'\n 50676: fallthrough\n      : @1785 [@dyn 929] (gas: 13)\n 50677: sp = sp + 0xffffffffffffffc0\n 50680: u64 [sp + 0x38] = ra\n 50683: u64 [sp + 0x30] = s0\n 50686: u64 [sp + 0x28] = s1\n 50689: s0 = sp + 0x40\n 50692: sp = sp & 0xffffffffffffffe0\n 50695: s1 = a0\n 50697: i32 a0 = sp + 0\n 50699: a1 = 0x4\n 50702: ra = 0x744\n 50706: ecalli 3 // 'call_data_load'\n 50708: t0 = 0x746\n 50712: jump @2003\n      : @1786 [@dyn 930] (gas: 1)\n 50715: t0 = 1862, jump @2003\n      : @1787 [@dyn 931] (gas: 1)\n 50721: jump @1790 if a3 == 0\n      : @1788 (gas: 1)\n 50724: t0 = 1864, jump @2018\n      : @1789 [@dyn 932] (gas: 1)\n 50730: ret\n      : @1790 (gas: 7)\n 50732: a1 = 0x20200\n 50737: i32 a1 = a1 + 0\n 50739: a0 = 0x1\n 50742: a2 = 0\n 50744: ra = 0x74a\n 50748: ecalli 13 // 'seal_return'\n 50750: fallthrough\n      : @1791 [@dyn 933] (gas: 10)\n 50751: a4 = u64 [a1 + 0x18]\n 50754: a3 = u64 [a1 + 0x10]\n 50757: t1 = u64 [a1 + 0x8]\n 50760: t0 = a4 >u 0\n 50762: a5 = a3 >u 0\n 50764: a5 = t0 if a4 != 0\n 50767: t0 = a3 | a4\n 50770: a2 = t1 >u 0\n 50772: a2 = a5 if t0 != 0\n 50775: jump @1793 if a2 != 0\n      : @1792 (gas: 24)\n 50778: a1 = u64 [a1]\n 50780: a2 = a3 >> 0x3b\n 50783: a4 = a4 << 0x5\n 50786: t0 = a4 | a2\n 50789: a4 = t1 >> 0x3b\n 50792: a3 = a3 << 0x5\n 50795: a3 = a3 | a4\n 50798: a4 = a1 >> 0x3b\n 50801: t1 = t1 << 0x5\n 50804: a4 = t1 | a4\n 50807: a1 = a1 << 0x5\n 50810: a5 = a1 + 0x20\n 50813: a1 = a5 <u a1\n 50816: a2 = a4 + a1\n 50819: a4 = a2 <u a4\n 50822: a4 = a1 if a1 == 0\n 50825: a4 = a4 + a3\n 50828: a1 = a4 <u a3\n 50831: a1 = a1 + t0\n 50834: u64 [a0] = a5\n 50836: u64 [a0 + 0x8] = a2\n 50839: u64 [a0 + 0x10] = a4\n 50842: u64 [a0 + 0x18] = a1\n 50845: ret\n      : @1793 (gas: 6)\n 50847: sp = sp + 0xffffffffffffffb0\n 50850: u64 [sp + 0x48] = ra\n 50853: u64 [sp + 0x40] = s0\n 50856: s0 = sp + 0x50\n 50859: sp = sp & 0xfffffffffffffff0\n 50862: t0 = 1868, jump @1982\n      : @1794 [@dyn 934] (gas: 1)\n 50868: ra = 1870, jump @19\n      : @1795 [@dyn 935] (gas: 7)\n 50875: u64 [sp + 24] = 0\n 50878: u64 [sp + 16] = 0\n 50881: u64 [sp + 0] = 0x41\n 50884: a0 = 0x4\n 50887: a1 = sp\n 50889: u64 [sp + 8] = 0\n 50892: ra = 1872, jump @19\n      : @1796 [@dyn 936] (gas: 2)\n 50899: a1 = i32 [0x201ec]\n 50904: jump @1798 if a1 >u 63\n      : @1797 (gas: 2)\n 50908: u32 [0x201ec] = 0x40\n 50914: fallthrough\n      : @1798 (gas: 7)\n 50915: a1 = 0x20200\n 50920: i32 a1 = a1 + 0\n 50922: a0 = 0x1\n 50925: a2 = 0x24\n 50928: ra = 0x752\n 50932: ecalli 13 // 'seal_return'\n 50934: fallthrough\n      : @1799 [@dyn 937] (gas: 14)\n 50935: sp = sp + 0xffffffffffffff00\n 50939: u64 [sp + 0xf8] = ra\n 50943: u64 [sp + 0xf0] = s0\n 50947: u64 [sp + 0xe8] = s1\n 50951: s0 = sp + 0x100\n 50955: sp = sp & 0xfffffffffffffff0\n 50958: a1 = u64 [a0 + 0x10]\n 50961: a2 = u64 [a0 + 0x18]\n 50964: a3 = u64 [a0 + 0x8]\n 50967: a0 = u64 [a0]\n 50969: a2 = a2 | a3\n 50972: a0 = a0 | a1\n 50975: a0 = a0 | a2\n 50978: jump @1801 if a0 == 0\n      : @1800 (gas: 6)\n 50981: sp = s0 + 0xffffffffffffff00\n 50985: ra = u64 [sp + 0xf8]\n 50989: s0 = u64 [sp + 0xf0]\n 50993: s1 = u64 [sp + 0xe8]\n 50997: sp = sp + 0x100\n 51001: ret\n      : @1801 (gas: 3)\n 51003: a0 = sp + 0xc0\n 51007: a1 = 0x40\n 51010: ra = 1876, jump @17\n      : @1802 [@dyn 938] (gas: 5)\n 51017: a2 = u64 [sp + 0xd8]\n 51021: s1 = u64 [sp + 0xd0]\n 51025: a0 = u64 [sp + 0xc8]\n 51029: a1 = u64 [sp + 0xc0]\n 51033: t0 = 1878, jump @2039\n      : @1803 [@dyn 939] (gas: 1)\n 51039: jump @1816 if a0 != 0\n      : @1804 (gas: 8)\n 51043: u64 [sp + 176] = 0\n 51047: u64 [sp + 168] = 0\n 51051: u64 [sp + 160] = 0\n 51055: a0 = 0x8c379a000000000\n 51065: a1 = sp + 0xa0\n 51069: u64 [sp + 0xb8] = a0\n 51073: a0 = u64 [sp + 0x18]\n 51076: ra = 1880, jump @19\n      : @1805 [@dyn 940] (gas: 1)\n 51083: t0 = 1882, jump @1997\n      : @1806 [@dyn 941] (gas: 1)\n 51089: jump @1816 if a0 == 0\n      : @1807 (gas: 8)\n 51093: a0 = u64 [sp + 0x18]\n 51096: i32 a0 = a0 + 0x4\n 51099: u64 [sp + 152] = 0\n 51103: u64 [sp + 144] = 0\n 51107: u64 [sp + 128] = 0x20\n 51112: a1 = sp + 0x80\n 51116: u64 [sp + 136] = 0\n 51120: ra = 1884, jump @19\n      : @1808 [@dyn 942] (gas: 1)\n 51127: t0 = 1886, jump @2029\n      : @1809 [@dyn 943] (gas: 1)\n 51133: jump @1816 if a0 == 0\n      : @1810 (gas: 8)\n 51136: s1 = u64 [sp + 0x18]\n 51139: i32 a0 = s1 + 0x24\n 51142: u64 [sp + 120] = 0\n 51145: u64 [sp + 112] = 0\n 51148: u64 [sp + 96] = 0x25\n 51152: a1 = sp + 0x60\n 51155: u64 [sp + 104] = 0\n 51158: ra = 1888, jump @19\n      : @1811 [@dyn 944] (gas: 4)\n 51165: a0 = 0x100000000\n 51175: u64 [sp] = a0\n 51177: a0 = 0xffffffbc\n 51187: t0 = 1890, jump @2013\n      : @1812 [@dyn 945] (gas: 1)\n 51193: jump @1816 if a0 == 0\n      : @1813 (gas: 12)\n 51196: s1 = u64 [sp + 0x18]\n 51199: i32 a0 = s1 + 0x44\n 51202: a1 = u64 [0x201b8]\n 51207: u64 [sp + 0x58] = a1\n 51210: a1 = u64 [0x201c0]\n 51215: a2 = u64 [0x201c8]\n 51220: a3 = u64 [0x201d0]\n 51225: u64 [sp + 0x50] = a1\n 51228: u64 [sp + 0x48] = a2\n 51231: a1 = sp + 0x40\n 51234: u64 [sp + 0x40] = a3\n 51237: ra = 1892, jump @19\n      : @1814 [@dyn 946] (gas: 3)\n 51244: a0 = u64 [sp]\n 51246: a0 = a0 + 0xffffffffffffff9c\n 51249: t0 = 1894, jump @2013\n      : @1815 [@dyn 947] (gas: 1)\n 51255: jump @1817 if a0 != 0\n      : @1816 (gas: 1)\n 51258: trap\n      : @1817 (gas: 9)\n 51259: s1 = u64 [sp + 0x18]\n 51262: i32 a0 = s1 + 0x64\n 51265: u64 [sp + 48] = 0\n 51268: u64 [sp + 40] = 0\n 51271: a1 = 0x70656e7365000000\n 51281: u64 [sp + 0x38] = a1\n 51284: a1 = sp + 0x20\n 51287: u64 [sp + 32] = 0\n 51290: ra = 1896, jump @19\n      : @1818 [@dyn 948] (gas: 3)\n 51297: a1 = 0x84\n 51301: a0 = s1\n 51303: ra = 1898, jump @28\n      : @1819 [@dyn 949] (gas: 6)\n 51310: i32 a1 = a0 + 0\n 51312: a0 = 0x1\n 51315: a2 = 0x84\n 51319: ra = 0x76c\n 51323: ecalli 13 // 'seal_return'\n 51325: fallthrough\n      : @1820 [@dyn 950] (gas: 22)\n 51326: sp = sp + 0xfffffffffffffe30\n 51330: u64 [sp + 0x1c8] = ra\n 51334: u64 [sp + 0x1c0] = s0\n 51338: u64 [sp + 0x1b8] = s1\n 51342: s0 = sp + 0x1d0\n 51346: sp = sp & 0xfffffffffffffff0\n 51349: a2 = u64 [a1]\n 51351: a3 = u64 [a1 + 0x8]\n 51354: a4 = u64 [a1 + 0x10]\n 51357: a1 = u64 [a1 + 0x18]\n 51360: u64 [sp + 0x8] = a0\n 51363: u64 [sp + 0x40] = a1\n 51366: u64 [sp + 0x188] = a1\n 51370: u64 [sp + 0x78] = a4\n 51373: u64 [sp + 0x180] = a4\n 51377: u64 [sp + 0x80] = a3\n 51381: u64 [sp + 0x178] = a3\n 51385: a0 = sp + 0x190\n 51389: a1 = sp + 0x170\n 51393: u64 [sp + 0x88] = a2\n 51397: u64 [sp + 0x170] = a2\n 51401: ra = 1902, jump @1791\n      : @1821 [@dyn 951] (gas: 11)\n 51407: a0 = u64 [sp + 0x190]\n 51411: u64 [sp + 0x70] = a0\n 51414: a0 = u64 [sp + 0x198]\n 51418: u64 [sp + 0x58] = a0\n 51421: a0 = u64 [sp + 0x1a0]\n 51425: u64 [sp + 0x50] = a0\n 51428: a0 = u64 [sp + 0x1a8]\n 51432: u64 [sp + 0x48] = a0\n 51435: a0 = sp + 0x150\n 51439: a1 = 0x40\n 51442: ra = 1904, jump @17\n      : @1822 [@dyn 952] (gas: 23)\n 51449: a1 = u64 [sp + 0x168]\n 51453: u64 [sp + 0x68] = a1\n 51456: a0 = u64 [sp + 0x160]\n 51460: s1 = u64 [sp + 0x158]\n 51464: a2 = u64 [sp + 0x150]\n 51468: u64 [sp + 0x10] = a2\n 51471: a3 = u64 [sp + 0x48]\n 51474: u64 [sp + 0x128] = a3\n 51478: a3 = a0\n 51480: u64 [sp + 0x18] = a0\n 51483: a0 = u64 [sp + 0x50]\n 51486: u64 [sp + 0x120] = a0\n 51490: a0 = u64 [sp + 0x58]\n 51493: u64 [sp + 0x118] = a0\n 51497: a0 = u64 [sp + 0x70]\n 51500: u64 [sp + 0x110] = a0\n 51504: u64 [sp + 0x148] = a1\n 51508: u64 [sp + 0x140] = a3\n 51512: u64 [sp + 0x138] = s1\n 51516: a0 = sp + 0x130\n 51520: a1 = sp + 0x110\n 51524: u64 [sp + 0x130] = a2\n 51528: ra = 1906, jump @1749\n      : @1823 [@dyn 953] (gas: 6)\n 51534: a0 = u64 [sp + 0x10]\n 51537: u64 [sp + 0x60] = s1\n 51540: a2 = u64 [sp + 0x68]\n 51543: a2 = a2 | s1\n 51546: a3 = u64 [sp + 0x18]\n 51549: t0 = 1908, jump @2004\n      : @1824 [@dyn 954] (gas: 1)\n 51555: jump @1835 if a1 != 0\n      : @1825 (gas: 10)\n 51559: a1 = u64 [sp + 0x88]\n 51563: u64 [sp + 0xf0] = a1\n 51567: a1 = u64 [sp + 0x80]\n 51571: u64 [sp + 0xf8] = a1\n 51575: a1 = u64 [sp + 0x78]\n 51578: u64 [sp + 0x100] = a1\n 51582: a1 = sp + 0xf0\n 51586: s1 = u64 [sp + 0x40]\n 51589: u64 [sp + 0x108] = s1\n 51593: ra = 1910, jump @19\n      : @1826 [@dyn 955] (gas: 10)\n 51600: u64 [sp + 0xc8] = s1\n 51604: a0 = u64 [sp + 0x78]\n 51607: u64 [sp + 0xc0] = a0\n 51611: a0 = u64 [sp + 0x80]\n 51615: u64 [sp + 0xb8] = a0\n 51619: a0 = sp + 0xd0\n 51623: a1 = sp + 0xb0\n 51627: a2 = u64 [sp + 0x88]\n 51631: u64 [sp + 0xb0] = a2\n 51635: ra = 1912, jump @1791\n      : @1827 [@dyn 956] (gas: 43)\n 51641: t1 = 0\n 51643: t2 = 0\n 51645: t0 = 0\n 51647: a5 = 0\n 51649: a0 = u64 [sp + 0xd0]\n 51653: ra = u64 [sp + 0xe8]\n 51657: a2 = u64 [sp + 0xd8]\n 51661: a3 = u64 [sp + 0xe0]\n 51665: a4 = a0 + 0xffffffffffffffe0\n 51668: u64 [sp + 0x58] = a4\n 51671: a0 = a4 <u a0\n 51674: a4 = a2 + a0\n 51677: a4 = a4 + 0xffffffffffffffff\n 51680: a1 = a4 ^ a2\n 51683: u64 [sp + 0x50] = a4\n 51686: a2 = a4 <u a2\n 51689: a2 = a0 if a1 == 0\n 51692: a0 = a3 + 0xffffffffffffffff\n 51695: a2 = a2 + a0\n 51698: u64 [sp + 0x48] = a2\n 51701: a0 = a2 <u a0\n 51704: a2 = a3 <u 0x1\n 51707: a1 = ra - a2\n 51710: a0 = a0 + a1\n 51713: u64 [sp + 0x40] = a0\n 51716: a1 = u64 [sp + 0x10]\n 51719: a0 = a1 + 0x20\n 51722: u64 [sp + 0x38] = a0\n 51725: a0 = a0 <u a1\n 51728: a4 = u64 [sp + 0x60]\n 51731: a1 = a4 + a0\n 51734: u64 [sp + 0x30] = a1\n 51737: a1 = a1 <u a4\n 51740: a1 = a0 if a0 == 0\n 51743: a0 = u64 [sp + 0x18]\n 51746: a1 = a1 + a0\n 51749: u64 [sp + 0x28] = a1\n 51752: a0 = a1 <u a0\n 51755: s1 = u64 [sp + 0x68]\n 51758: a0 = a0 + s1\n 51761: u64 [sp + 0x20] = a0\n 51764: ra = s1\n 51766: fallthrough\n      : @1828 (gas: 16)\n 51767: a0 = u64 [sp + 0x58]\n 51770: a0 = t1 <u a0\n 51773: a2 = u64 [sp + 0x50]\n 51776: a1 = t2 ^ a2\n 51779: a2 = t2 <u a2\n 51782: a2 = a0 if a1 == 0\n 51785: s1 = u64 [sp + 0x48]\n 51788: a0 = t0 <u s1\n 51791: a3 = u64 [sp + 0x40]\n 51794: a1 = a5 ^ a3\n 51797: a3 = a5 <u a3\n 51800: a3 = a0 if a1 == 0\n 51803: a0 = t0 ^ s1\n 51806: a0 = a0 | a1\n 51809: a3 = a2 if a0 == 0\n 51812: jump @1834 if a3 == 0\n      : @1829 (gas: 20)\n 51816: u64 [sp + 0x80] = t1\n 51820: a1 = u64 [sp + 0x38]\n 51823: a0 = a1 + t1\n 51826: a1 = a0 <u a1\n 51829: u64 [sp + 0x78] = t2\n 51832: a4 = u64 [sp + 0x30]\n 51835: a2 = a4 + t2\n 51838: a2 = a2 + a1\n 51841: a3 = a2 ^ a4\n 51844: a4 = a2 <u a4\n 51847: a4 = a1 if a3 == 0\n 51850: u64 [sp + 0x88] = t0\n 51854: a3 = u64 [sp + 0x28]\n 51857: a1 = a3 + t0\n 51860: a3 = a1 <u a3\n 51863: u64 [sp + 0x70] = a5\n 51866: s1 = u64 [sp + 0x20]\n 51869: a5 = a5 + s1\n 51872: a3 = a3 + a5\n 51875: t0 = 1914, jump @2012\n      : @1830 [@dyn 957] (gas: 1)\n 51881: jump @1835 if a1 != 0\n      : @1831 (gas: 6)\n 51884: u64 [sp + 168] = 0\n 51888: u64 [sp + 160] = 0\n 51892: u64 [sp + 152] = 0\n 51896: a1 = sp + 0x90\n 51900: u64 [sp + 144] = 0x60\n 51905: ra = 1916, jump @19\n      : @1832 [@dyn 958] (gas: 5)\n 51912: a1 = u64 [sp + 0x80]\n 51916: a0 = a1 + 0x20\n 51919: a1 = a0 <u a1\n 51922: a3 = u64 [sp + 0x78]\n 51925: t0 = 1918, jump @2010\n      : @1833 [@dyn 959] (gas: 11)\n 51931: a1 = u64 [sp + 0x88]\n 51935: a3 = a3 + a1\n 51938: a1 = a3 <u a1\n 51941: a5 = u64 [sp + 0x70]\n 51944: a5 = a5 + a1\n 51947: t1 = a0\n 51949: t2 = a2\n 51951: t0 = a3\n 51953: ra = u64 [sp + 0x68]\n 51956: a4 = u64 [sp + 0x60]\n 51959: jump @1828\n      : @1834 (gas: 13)\n 51962: a0 = u64 [sp + 0x8]\n 51965: a1 = u64 [sp + 0x10]\n 51968: u64 [a0] = a1\n 51970: u64 [a0 + 0x8] = a4\n 51973: a1 = u64 [sp + 0x18]\n 51976: u64 [a0 + 0x10] = a1\n 51979: u64 [a0 + 0x18] = ra\n 51982: sp = s0 + 0xfffffffffffffe30\n 51986: ra = u64 [sp + 0x1c8]\n 51990: s0 = u64 [sp + 0x1c0]\n 51994: s1 = u64 [sp + 0x1b8]\n 51998: sp = sp + 0x1d0\n 52002: ret\n      : @1835 (gas: 1)\n 52004: trap\n      : @1836 (gas: 22)\n 52005: sp = sp + 0xfffffffffffffe80\n 52009: u64 [sp + 0x178] = ra\n 52013: u64 [sp + 0x170] = s0\n 52017: u64 [sp + 0x168] = s1\n 52021: s0 = sp + 0x180\n 52025: sp = sp & 0xfffffffffffffff0\n 52028: a2 = u64 [a1]\n 52030: a3 = u64 [a1 + 0x8]\n 52033: a4 = u64 [a1 + 0x10]\n 52036: a1 = u64 [a1 + 0x18]\n 52039: u64 [sp] = a0\n 52041: u64 [sp + 0x8] = a1\n 52044: u64 [sp + 0x138] = a1\n 52048: u64 [sp + 0x28] = a4\n 52051: u64 [sp + 0x130] = a4\n 52055: u64 [sp + 0x30] = a3\n 52058: u64 [sp + 0x128] = a3\n 52062: a0 = sp + 0x140\n 52066: a1 = sp + 0x120\n 52070: u64 [sp + 0x38] = a2\n 52073: u64 [sp + 0x120] = a2\n 52077: ra = 1920, jump @1791\n      : @1837 [@dyn 960] (gas: 11)\n 52083: a0 = u64 [sp + 0x140]\n 52087: u64 [sp + 0x40] = a0\n 52090: a0 = u64 [sp + 0x148]\n 52094: u64 [sp + 0x20] = a0\n 52097: a0 = u64 [sp + 0x150]\n 52101: u64 [sp + 0x18] = a0\n 52104: a0 = u64 [sp + 0x158]\n 52108: u64 [sp + 0x10] = a0\n 52111: a0 = sp + 0x100\n 52115: a1 = 0x40\n 52118: ra = 1922, jump @17\n      : @1838 [@dyn 961] (gas: 22)\n 52125: a0 = u64 [sp + 0x118]\n 52129: u64 [sp + 0x50] = a0\n 52132: a1 = u64 [sp + 0x110]\n 52136: u64 [sp + 0x48] = a1\n 52139: a3 = u64 [sp + 0x108]\n 52143: u64 [sp + 0x58] = a3\n 52146: s1 = u64 [sp + 0x100]\n 52150: a2 = u64 [sp + 0x10]\n 52153: u64 [sp + 0xd8] = a2\n 52157: a2 = u64 [sp + 0x18]\n 52160: u64 [sp + 0xd0] = a2\n 52164: a2 = u64 [sp + 0x20]\n 52167: u64 [sp + 0xc8] = a2\n 52171: a2 = u64 [sp + 0x40]\n 52174: u64 [sp + 0xc0] = a2\n 52178: u64 [sp + 0xf8] = a0\n 52182: u64 [sp + 0xf0] = a1\n 52186: u64 [sp + 0xe8] = a3\n 52190: a0 = sp + 0xe0\n 52194: a1 = sp + 0xc0\n 52198: u64 [sp + 0xe0] = s1\n 52202: ra = 1924, jump @1749\n      : @1839 [@dyn 962] (gas: 12)\n 52208: a0 = u64 [sp + 0x50]\n 52211: a1 = u64 [sp + 0x58]\n 52214: a0 = a0 | a1\n 52217: u64 [sp + 0x40] = s1\n 52220: a2 = u64 [sp + 0x48]\n 52223: a1 = s1 | a2\n 52226: a1 = a1 | a0\n 52229: a1 = a1 >> 0x20\n 52232: a0 = a0 | a2\n 52235: a0 = a0 << 0x20\n 52238: a0 = a0 | a1\n 52241: jump @1846 if a0 != 0\n      : @1840 (gas: 11)\n 52245: a0 = u64 [sp + 0x38]\n 52248: u64 [sp + 0xa0] = a0\n 52252: a0 = u64 [sp + 0x30]\n 52255: u64 [sp + 0xa8] = a0\n 52259: a0 = u64 [sp + 0x28]\n 52262: u64 [sp + 0xb0] = a0\n 52266: a1 = sp + 0xa0\n 52270: s1 = u64 [sp + 0x8]\n 52273: u64 [sp + 0xb8] = s1\n 52277: a0 = u64 [sp + 0x40]\n 52280: ra = 1926, jump @19\n      : @1841 [@dyn 963] (gas: 10)\n 52287: u64 [sp + 0x78] = s1\n 52290: a0 = u64 [sp + 0x28]\n 52293: u64 [sp + 0x70] = a0\n 52296: a0 = u64 [sp + 0x30]\n 52299: u64 [sp + 0x68] = a0\n 52302: a0 = sp + 0x80\n 52306: a1 = sp + 0x60\n 52309: a2 = u64 [sp + 0x38]\n 52312: u64 [sp + 0x60] = a2\n 52315: ra = 1928, jump @1791\n      : @1842 [@dyn 964] (gas: 25)\n 52321: a0 = u64 [sp + 0x80]\n 52325: s1 = u64 [sp + 0x98]\n 52329: a2 = u64 [sp + 0x88]\n 52333: a3 = u64 [sp + 0x90]\n 52337: a1 = a0 + 0xffffffffffffffe0\n 52340: a0 = a1 <u a0\n 52343: a4 = a2 + a0\n 52346: a4 = a4 + 0xffffffffffffffff\n 52349: a5 = a4 ^ a2\n 52352: a2 = a4 <u a2\n 52355: a2 = a0 if a5 == 0\n 52358: a0 = a3 + 0xffffffffffffffff\n 52361: a2 = a2 + a0\n 52364: a0 = a2 <u a0\n 52367: a3 = a3 <u 0x1\n 52370: s1 = s1 - a3\n 52373: a0 = a0 + s1\n 52376: a3 = a1 | a2\n 52379: a0 = a0 | a4\n 52382: a3 = a3 | a0\n 52385: a3 = a3 >> 0x20\n 52388: a0 = a0 | a2\n 52391: a0 = a0 << 0x20\n 52394: a0 = a0 | a3\n 52397: jump @1846 if a0 != 0\n      : @1843 (gas: 10)\n 52400: a0 = u64 [sp + 0x50]\n 52403: a2 = u64 [sp + 0x48]\n 52406: a0 = a0 | a2\n 52409: a4 = 0xffffffe0\n 52419: a2 = u64 [sp + 0x40]\n 52422: a2 = a2 <u a4\n 52425: a4 = u64 [sp + 0x58]\n 52428: a2 = 0 if a4 != 0\n 52430: a2 = 0 if a0 != 0\n 52432: jump @1846 if a2 == 0\n      : @1844 (gas: 6)\n 52435: a0 = i32 [0x201e8]\n 52440: u64 [sp + 0x38] = a0\n 52443: s1 = u64 [sp + 0x40]\n 52446: i32 a0 = s1 + 0x20\n 52449: u64 [sp + 0x30] = a1\n 52452: ra = 1930, jump @28\n      : @1845 [@dyn 965] (gas: 18)\n 52459: i32 a0 = a0 + 0\n 52461: a1 = i32 [sp + 0x30]\n 52464: a2 = u64 [sp + 0x38]\n 52467: ecalli 2 // 'call_data_copy'\n 52469: a0 = u64 [sp]\n 52471: a1 = u64 [sp + 0x50]\n 52474: u64 [a0 + 0x18] = a1\n 52477: a1 = u64 [sp + 0x48]\n 52480: u64 [a0 + 0x10] = a1\n 52483: a1 = u64 [sp + 0x58]\n 52486: u64 [a0 + 0x8] = a1\n 52489: u64 [a0] = s1\n 52491: sp = s0 + 0xfffffffffffffe80\n 52495: ra = u64 [sp + 0x178]\n 52499: s0 = u64 [sp + 0x170]\n 52503: s1 = u64 [sp + 0x168]\n 52507: sp = sp + 0x180\n 52511: ret\n      : @1846 (gas: 1)\n 52513: trap\n      : @1847 (gas: 31)\n 52514: sp = sp + 0xfffffffffffffee0\n 52518: u64 [sp + 0x118] = ra\n 52522: u64 [sp + 0x110] = s0\n 52526: u64 [sp + 0x108] = s1\n 52530: s0 = sp + 0x120\n 52534: sp = sp & 0xffffffffffffffe0\n 52537: s1 = sp\n 52539: u64 [s1 + 0x38] = a0\n 52542: a0 = u64 [a2]\n 52544: u64 [s1 + 0x40] = a0\n 52547: a0 = u64 [a2 + 0x8]\n 52550: u64 [s1 + 0x48] = a0\n 52553: a0 = u64 [a2 + 0x10]\n 52556: u64 [s1 + 0x50] = a0\n 52559: a0 = u64 [a2 + 0x18]\n 52562: u64 [s1 + 0x58] = a0\n 52565: a0 = u64 [a1 + 0x18]\n 52568: a2 = u64 [a1 + 0x10]\n 52571: a3 = u64 [a1 + 0x8]\n 52574: a1 = u64 [a1]\n 52576: u64 [s1 + 0x30] = a0\n 52579: u64 [s1 + 0xf8] = a0\n 52583: u64 [s1 + 0x28] = a2\n 52586: u64 [s1 + 0xf0] = a2\n 52590: u64 [s1 + 0x20] = a3\n 52593: u64 [s1 + 0xe8] = a3\n 52597: u64 [s1 + 0x18] = a1\n 52600: u64 [s1 + 0xe0] = a1\n 52604: a0 = s1 + 0xc0\n 52608: a1 = s1 + 0xe0\n 52612: ra = 1932, jump @21\n      : @1848 [@dyn 966] (gas: 20)\n 52619: a0 = u64 [s1 + 0xd8]\n 52623: t0 = u64 [s1 + 0xc0]\n 52627: a2 = u64 [s1 + 0xd0]\n 52631: a3 = u64 [s1 + 0xc8]\n 52635: a1 = u64 [s1 + 0x58]\n 52638: a4 = a0 ^ a1\n 52641: a1 = a1 <u a0\n 52644: a0 = u64 [s1 + 0x50]\n 52647: a5 = a0 <u a2\n 52650: a5 = a1 if a4 != 0\n 52653: a1 = u64 [s1 + 0x48]\n 52656: t1 = a3 ^ a1\n 52659: a3 = a1 <u a3\n 52662: a1 = u64 [s1 + 0x40]\n 52665: a1 = a1 <u t0\n 52668: a1 = a3 if t1 != 0\n 52671: a0 = a0 ^ a2\n 52674: a0 = a0 | a4\n 52677: a1 = a5 if a0 != 0\n 52680: jump @1853 if a1 == 0\n      : @1849 (gas: 11)\n 52684: a0 = u64 [s1 + 0x18]\n 52687: u64 [s1 + 0x60] = a0\n 52690: a0 = u64 [s1 + 0x20]\n 52693: u64 [s1 + 0x68] = a0\n 52696: a0 = u64 [s1 + 0x28]\n 52699: u64 [s1 + 0x70] = a0\n 52702: a1 = s1 + 0x60\n 52705: a0 = u64 [s1 + 0x30]\n 52708: u64 [s1 + 0x78] = a0\n 52711: a0 = 0\n 52713: ra = 1934, jump @19\n      : @1850 [@dyn 967] (gas: 2)\n 52720: a1 = i32 [0x201ec]\n 52725: jump @1852 if a1 >u 31\n      : @1851 (gas: 2)\n 52729: u32 [0x201ec] = 0x20\n 52735: fallthrough\n      : @1852 (gas: 72)\n 52736: a0 = sp + 0xffffffffffffffe0\n 52739: a2 = a0 & 0xffffffffffffffe0\n 52742: u64 [s1 + 0x30] = a2\n 52745: sp = a2\n 52747: a0 = 0x20200\n 52752: i32 a0 = a0 + 0\n 52754: i32 a2 = a2 + 0\n 52756: a1 = 0x20\n 52759: ecalli 8 // 'hash_keccak_256'\n 52761: t0 = u64 [s1 + 0x30]\n 52764: a0 = u64 [t0 + 0x18]\n 52767: a1 = u64 [t0 + 0x10]\n 52770: a3 = reverse a0\n 52772: a1 = reverse a1\n 52774: a4 = 0x5\n 52777: a0 = u64 [s1 + 0x40]\n 52780: a2 = a0 << 0x2\n 52783: t1 = a2 + a0\n 52786: a4 = a0 mulhu a4\n 52789: a2 = u64 [s1 + 0x48]\n 52792: a5 = a2 << 0x2\n 52795: a5 = a5 + a2\n 52798: a4 = a4 + a5\n 52801: t1 = t1 + a3\n 52804: a3 = t1 <u a3\n 52807: a0 = a1 + a4\n 52810: ra = a0 + a3\n 52813: a0 = ra ^ a1\n 52816: a1 = ra <u a1\n 52819: a1 = a3 if a0 == 0\n 52822: a0 = a4 <u a5\n 52825: a4 = 0x5\n 52828: a3 = a2 mulhu a4\n 52831: a0 = a0 + a3\n 52834: a2 = u64 [s1 + 0x50]\n 52837: a3 = a2 << 0x2\n 52840: t2 = a3 + a2\n 52843: a4 = a2 mulhu a4\n 52846: a5 = u64 [t0]\n 52848: a2 = u64 [s1 + 0x58]\n 52851: a3 = a2 << 0x2\n 52854: a3 = a3 + a2\n 52857: a3 = a3 + a4\n 52860: a4 = reverse a5\n 52862: a3 = a3 + a4\n 52865: a4 = u64 [t0 + 0x8]\n 52868: t2 = t2 + a0\n 52871: a0 = t2 <u a0\n 52874: a0 = a0 + a3\n 52877: a3 = reverse a4\n 52879: t2 = t2 + a3\n 52882: a3 = t2 <u a3\n 52885: a0 = a0 + a3\n 52888: a1 = a1 + t2\n 52891: a3 = a1 <u t2\n 52894: a0 = a0 + a3\n 52897: a3 = u64 [s1 + 0x38]\n 52900: u64 [a3] = t1\n 52902: u64 [a3 + 0x8] = ra\n 52905: u64 [a3 + 0x10] = a1\n 52908: u64 [a3 + 0x18] = a0\n 52911: a0 = 0\n 52913: u64 [a3 + 56] = 0\n 52916: u64 [a3 + 48] = 0\n 52919: u64 [a3 + 40] = 0\n 52922: u64 [a3 + 32] = 0\n 52925: sp = s0 + 0xfffffffffffffee0\n 52929: ra = u64 [sp + 0x118]\n 52933: s0 = u64 [sp + 0x110]\n 52937: s1 = u64 [sp + 0x108]\n 52941: sp = sp + 0x120\n 52945: ret\n      : @1853 (gas: 8)\n 52947: u64 [s1 + 176] = 0\n 52951: u64 [s1 + 168] = 0\n 52955: u64 [s1 + 160] = 0\n 52959: a0 = 0x4e487b7100000000\n 52969: a1 = s1 + 0xa0\n 52973: u64 [s1 + 0xb8] = a0\n 52977: a0 = 0\n 52979: ra = 1936, jump @19\n      : @1854 [@dyn 968] (gas: 7)\n 52986: u64 [s1 + 152] = 0\n 52990: u64 [s1 + 144] = 0\n 52994: u64 [s1 + 128] = 0x32\n 52999: a0 = 0x4\n 53002: a1 = s1 + 0x80\n 53006: u64 [s1 + 136] = 0\n 53010: ra = 1938, jump @19\n      : @1855 [@dyn 969] (gas: 2)\n 53017: a1 = i32 [0x201ec]\n 53022: jump @1857 if a1 >u 63\n      : @1856 (gas: 2)\n 53026: u32 [0x201ec] = 0x40\n 53032: fallthrough\n      : @1857 (gas: 7)\n 53033: a1 = 0x20200\n 53038: i32 a1 = a1 + 0\n 53040: a0 = 0x1\n 53043: a2 = 0x24\n 53046: ra = 0x794\n 53050: ecalli 13 // 'seal_return'\n 53052: fallthrough\n      : @1858 [@dyn 970] (gas: 22)\n 53053: sp = sp + 0xffffffffffffff40\n 53057: u64 [sp + 0xb8] = ra\n 53061: u64 [sp + 0xb0] = s0\n 53065: u64 [sp + 0xa8] = s1\n 53069: s0 = sp + 0xc0\n 53073: sp = sp & 0xfffffffffffffff0\n 53076: a4 = u64 [a1 + 0x10]\n 53079: a3 = u64 [a1 + 0x18]\n 53082: a5 = u64 [a1 + 0x8]\n 53085: a1 = u64 [a1]\n 53087: u64 [sp + 0x28] = a3\n 53090: u64 [sp + 0x20] = a5\n 53093: a5 = a5 | a3\n 53096: a3 = a1 | a4\n 53099: a3 = a3 | a5\n 53102: a3 = a3 >> 0x20\n 53105: u64 [sp + 0x30] = a4\n 53108: a4 = a4 | a5\n 53111: a4 = a4 << 0x20\n 53114: a3 = a3 | a4\n 53117: u64 [sp + 0x38] = a0\n 53120: jump @1862 if a3 != 0\n      : @1859 (gas: 10)\n 53124: a0 = u64 [a2 + 0x18]\n 53127: u64 [sp + 0x10] = a0\n 53130: s1 = u64 [a2 + 0x10]\n 53133: a0 = u64 [a2 + 0x8]\n 53136: u64 [sp + 0x8] = a0\n 53139: a0 = u64 [a2]\n 53141: u64 [sp] = a0\n 53143: a0 = sp + 0x80\n 53147: u64 [sp + 0x18] = a1\n 53150: ra = 1942, jump @17\n      : @1860 [@dyn 971] (gas: 19)\n 53157: t0 = u64 [sp + 0x10]\n 53160: a5 = u64 [sp + 0x8]\n 53163: t1 = u64 [sp]\n 53165: a0 = u64 [sp + 0x88]\n 53169: a1 = u64 [sp + 0x98]\n 53173: a2 = u64 [sp + 0x80]\n 53177: a3 = u64 [sp + 0x90]\n 53181: a4 = a0 ^ a5\n 53184: a0 = a5 <u a0\n 53187: a2 = t1 <u a2\n 53190: a2 = a0 if a4 != 0\n 53193: a0 = s1 <u a3\n 53196: a4 = a1 ^ t0\n 53199: a1 = t0 <u a1\n 53202: a1 = a0 if a4 == 0\n 53205: a3 = a3 ^ s1\n 53208: a3 = a3 | a4\n 53211: a1 = a2 if a3 == 0\n 53214: jump @1863 if a1 == 0\n      : @1861 (gas: 47)\n 53218: a0 = s1 >> 0x3b\n 53221: a1 = t0 << 0x5\n 53224: t0 = a1 | a0\n 53227: a1 = a5 >> 0x3b\n 53230: s1 = s1 << 0x5\n 53233: a1 = a1 | s1\n 53236: a2 = t1 >> 0x3b\n 53239: a3 = a5 << 0x5\n 53242: a2 = a2 | a3\n 53245: a3 = t1 << 0x5\n 53248: a0 = u64 [sp + 0x18]\n 53251: a3 = a3 + a0\n 53254: a4 = a3 <u a0\n 53257: a5 = u64 [sp + 0x20]\n 53260: a2 = a2 + a5\n 53263: a2 = a2 + a4\n 53266: a0 = a2 ^ a5\n 53269: s1 = a2 <u a5\n 53272: s1 = a4 if a0 == 0\n 53275: a5 = u64 [sp + 0x30]\n 53278: a1 = a1 + a5\n 53281: s1 = s1 + a1\n 53284: a4 = s1 <u a1\n 53287: a1 = a1 <u a5\n 53290: a5 = u64 [sp + 0x28]\n 53293: a0 = a5 + t0\n 53296: a0 = a0 + a1\n 53299: a0 = a0 + a4\n 53302: a1 = a3 + 0x20\n 53305: a3 = a1 <u a3\n 53308: a4 = a2 + a3\n 53311: a2 = a4 <u a2\n 53314: a2 = a3 if a3 == 0\n 53317: a2 = a2 + s1\n 53320: a3 = a2 <u s1\n 53323: a0 = a0 + a3\n 53326: a3 = u64 [sp + 0x38]\n 53329: u64 [a3] = a1\n 53331: u64 [a3 + 0x8] = a4\n 53334: u64 [a3 + 0x10] = a2\n 53337: u64 [a3 + 0x18] = a0\n 53340: sp = s0 + 0xffffffffffffff40\n 53344: ra = u64 [sp + 0xb8]\n 53348: s0 = u64 [sp + 0xb0]\n 53352: s1 = u64 [sp + 0xa8]\n 53356: sp = sp + 0xc0\n 53360: ret\n      : @1862 (gas: 1)\n 53362: trap\n      : @1863 (gas: 8)\n 53363: u64 [sp + 112] = 0\n 53366: u64 [sp + 104] = 0\n 53369: u64 [sp + 96] = 0\n 53372: a0 = 0x4e487b7100000000\n 53382: a1 = sp + 0x60\n 53385: u64 [sp + 0x78] = a0\n 53388: a0 = 0\n 53390: ra = 1944, jump @19\n      : @1864 [@dyn 972] (gas: 7)\n 53397: u64 [sp + 88] = 0\n 53400: u64 [sp + 80] = 0\n 53403: u64 [sp + 64] = 0x32\n 53407: a0 = 0x4\n 53410: a1 = sp + 0x40\n 53413: u64 [sp + 72] = 0\n 53416: ra = 1946, jump @19\n      : @1865 [@dyn 973] (gas: 2)\n 53423: a1 = i32 [0x201ec]\n 53428: jump @1867 if a1 >u 63\n      : @1866 (gas: 2)\n 53432: u32 [0x201ec] = 0x40\n 53438: fallthrough\n      : @1867 (gas: 7)\n 53439: a1 = 0x20200\n 53444: i32 a1 = a1 + 0\n 53446: a0 = 0x1\n 53449: a2 = 0x24\n 53452: ra = 0x79c\n 53456: ecalli 13 // 'seal_return'\n 53458: fallthrough\n      : @1868 [@dyn 974] (gas: 33)\n 53459: sp = sp + 0xffffffffffffffa0\n 53462: u64 [sp + 0x58] = ra\n 53465: u64 [sp + 0x50] = s0\n 53468: u64 [sp + 0x48] = s1\n 53471: s0 = sp + 0x60\n 53474: sp = sp & 0xfffffffffffffff0\n 53477: a2 = u64 [a1 + 0x10]\n 53480: a5 = u64 [a1 + 0x8]\n 53483: a4 = u64 [a1]\n 53485: a1 = u64 [a1 + 0x18]\n 53488: t0 = a2 << 0x3f\n 53491: a3 = a5 >> 0x1\n 53494: t0 = a3 | t0\n 53497: a3 = a1 << 0x3f\n 53500: a2 = a2 >> 0x1\n 53503: a3 = a3 | a2\n 53506: a5 = a5 << 0x3f\n 53509: a2 = a4 >> 0x1\n 53512: a5 = a5 | a2\n 53515: t1 = a1 >> 0x1\n 53518: a4 = a4 & 0x1\n 53521: a1 = -a4\n 53523: s1 = a4 <u 0x1\n 53526: a2 = a5 & 0x7f\n 53529: t2 = a1 & a3\n 53532: a3 = a1 & t0\n 53535: a2 = a5 if a4 != 0\n 53538: a4 = a1 & t1\n 53541: a1 = a2 <u 0x20\n 53544: a1 = 0 if a3 != 0\n 53546: a5 = t2 | a4\n 53549: a1 = 0 if a5 != 0\n 53551: jump @1871 if s1 != a1\n      : @1869 (gas: 5)\n 53554: u64 [a0] = a2\n 53556: u64 [a0 + 0x8] = a3\n 53559: u64 [a0 + 0x10] = t2\n 53562: u64 [a0 + 0x18] = a4\n 53565: t0 = 1950, jump @2030\n      : @1870 [@dyn 975] (gas: 1)\n 53571: ret\n      : @1871 (gas: 1)\n 53573: t0 = 1952, jump @1982\n      : @1872 [@dyn 976] (gas: 1)\n 53579: ra = 1954, jump @19\n      : @1873 [@dyn 977] (gas: 7)\n 53586: u64 [sp + 24] = 0\n 53589: u64 [sp + 16] = 0\n 53592: u64 [sp + 0] = 0x22\n 53595: a0 = 0x4\n 53598: a1 = sp\n 53600: u64 [sp + 8] = 0\n 53603: ra = 1956, jump @19\n      : @1874 [@dyn 978] (gas: 2)\n 53610: a1 = i32 [0x201ec]\n 53615: jump @1876 if a1 >u 63\n      : @1875 (gas: 2)\n 53619: u32 [0x201ec] = 0x40\n 53625: fallthrough\n      : @1876 (gas: 7)\n 53626: a1 = 0x20200\n 53631: i32 a1 = a1 + 0\n 53633: a0 = 0x1\n 53636: a2 = 0x24\n 53639: ra = 0x7a6\n 53643: ecalli 13 // 'seal_return'\n 53645: fallthrough\n      : @1877 [@dyn 979] (gas: 24)\n 53646: sp = sp + 0xfffffffffffffda0\n 53650: a2 = sp + 0x200\n 53654: u64 [a2 + 0x58] = ra\n 53657: u64 [a2 + 0x50] = s0\n 53660: u64 [a2 + 0x48] = s1\n 53663: s0 = sp + 0x260\n 53667: sp = sp & 0xffffffffffffffe0\n 53670: s1 = sp\n 53672: u64 [s1 + 0x10] = a0\n 53675: a0 = u64 [a1 + 0x18]\n 53678: a2 = u64 [a1 + 0x10]\n 53681: a3 = u64 [a1 + 0x8]\n 53684: a1 = u64 [a1]\n 53686: u64 [s1 + 0xb0] = a0\n 53690: u64 [s1 + 0x238] = a0\n 53694: u64 [s1 + 0xa8] = a2\n 53698: u64 [s1 + 0x230] = a2\n 53702: u64 [s1 + 0xa0] = a3\n 53706: u64 [s1 + 0x228] = a3\n 53710: u64 [s1 + 0x98] = a1\n 53714: u64 [s1 + 0x220] = a1\n 53718: a0 = s1 + 0x200\n 53722: a1 = 0x40\n 53725: ra = 1960, jump @17\n      : @1878 [@dyn 980] (gas: 12)\n 53732: a1 = s1 + 0x200\n 53736: a0 = u64 [a1 + 0x18]\n 53739: u64 [s1 + 0x18] = a0\n 53742: a0 = u64 [a1 + 0x10]\n 53745: u64 [s1 + 0x20] = a0\n 53748: a0 = u64 [a1 + 0x8]\n 53751: u64 [s1 + 0x28] = a0\n 53754: a0 = u64 [a1]\n 53756: u64 [s1 + 0x30] = a0\n 53759: a0 = s1 + 0x1e0\n 53763: a1 = s1 + 0x220\n 53767: ra = 1962, jump @21\n      : @1879 [@dyn 981] (gas: 16)\n 53774: a4 = s1 + 0x100\n 53778: a0 = u64 [a4 + 0xf8]\n 53782: a1 = u64 [a4 + 0xf0]\n 53786: a2 = u64 [a4 + 0xe8]\n 53790: a3 = u64 [a4 + 0xe0]\n 53794: u64 [s1 + 0x90] = a0\n 53798: u64 [a4 + 0xb8] = a0\n 53802: u64 [s1 + 0x88] = a1\n 53806: u64 [a4 + 0xb0] = a1\n 53810: u64 [s1 + 0x80] = a2\n 53814: u64 [a4 + 0xa8] = a2\n 53818: a0 = s1 + 0x1c0\n 53822: a1 = s1 + 0x1a0\n 53826: u64 [s1 + 0xb8] = a3\n 53830: u64 [a4 + 0xa0] = a3\n 53834: ra = 1964, jump @1868\n      : @1880 [@dyn 982] (gas: 6)\n 53840: a0 = u64 [s1 + 0x30]\n 53843: a1 = u64 [s1 + 0x18]\n 53846: a2 = u64 [s1 + 0x28]\n 53849: a2 = a2 | a1\n 53852: a3 = u64 [s1 + 0x20]\n 53855: t0 = 1966, jump @2004\n      : @1881 [@dyn 983] (gas: 1)\n 53861: jump @1899 if a1 != 0\n      : @1882 (gas: 15)\n 53865: a5 = s1 + 0x100\n 53869: a2 = u64 [a5 + 0xd8]\n 53873: a3 = u64 [a5 + 0xd0]\n 53877: a1 = u64 [a5 + 0xc8]\n 53881: a4 = u64 [a5 + 0xc0]\n 53885: u64 [s1 + 0x60] = a4\n 53888: u64 [a5 + 0x80] = a4\n 53892: u64 [s1 + 0x70] = a1\n 53895: u64 [a5 + 0x88] = a1\n 53899: u64 [s1 + 0x68] = a3\n 53902: u64 [a5 + 0x90] = a3\n 53906: a1 = s1 + 0x180\n 53910: u64 [s1 + 0x78] = a2\n 53913: u64 [a5 + 0x98] = a2\n 53917: ra = 1968, jump @19\n      : @1883 [@dyn 984] (gas: 3)\n 53924: a3 = u64 [s1 + 0xb8]\n 53928: a0 = a3 & 0x1\n 53931: jump @1889 if a0 != 0\n      : @1884 (gas: 10)\n 53935: a0 = u64 [s1 + 0x20]\n 53938: a1 = u64 [s1 + 0x18]\n 53941: a0 = a0 | a1\n 53944: a1 = 0xffffffe0\n 53954: a4 = u64 [s1 + 0x30]\n 53957: a1 = a4 <u a1\n 53960: a2 = u64 [s1 + 0x28]\n 53963: a1 = 0 if a2 != 0\n 53965: a1 = 0 if a0 != 0\n 53967: jump @1899 if a1 == 0\n      : @1885 (gas: 12)\n 53971: a1 = a3 & 0xffffffffffffff00\n 53975: i32 a0 = a4 + 0x20\n 53978: a3 = u64 [s1 + 0x80]\n 53982: a2 = s1 + 0x100\n 53986: u64 [a2 + 0x8] = a3\n 53989: u64 [a2] = a1\n 53991: a1 = u64 [s1 + 0x88]\n 53995: u64 [a2 + 0x10] = a1\n 53998: a1 = s1 + 0x100\n 54002: a3 = u64 [s1 + 0x90]\n 54006: u64 [a2 + 0x18] = a3\n 54009: ra = 1970, jump @19\n      : @1886 [@dyn 985] (gas: 14)\n 54016: t2 = 0\n 54018: t1 = 0\n 54020: t0 = 0\n 54022: a0 = u64 [s1 + 0x68]\n 54025: a1 = u64 [s1 + 0x60]\n 54028: a0 = a0 | a1\n 54031: a1 = u64 [s1 + 0x78]\n 54034: a2 = u64 [s1 + 0x70]\n 54037: a1 = a1 | a2\n 54040: a0 = a0 | a1\n 54043: a0 = a0 >u 0\n 54045: a0 = a0 << 0x5\n 54048: u64 [s1 + 0xb8] = a0\n 54052: fallthrough\n      : @1887 (gas: 24)\n 54053: a1 = u64 [s1 + 0xb8]\n 54057: a0 = a1 + 0x20\n 54060: a1 = a0 <u a1\n 54063: a2 = t2 + a1\n 54066: a3 = a2 <u t2\n 54069: a3 = a1 if a1 == 0\n 54072: a3 = a3 + t1\n 54075: a1 = a3 <u t1\n 54078: a4 = t0 + a1\n 54081: a1 = u64 [s1 + 0x30]\n 54084: u64 [s1 + 0xe0] = a1\n 54088: u64 [s1 + 0xc0] = a0\n 54092: a0 = u64 [s1 + 0x28]\n 54095: u64 [s1 + 0xe8] = a0\n 54099: a0 = u64 [s1 + 0x20]\n 54102: u64 [s1 + 0xf0] = a0\n 54106: u64 [s1 + 0xc8] = a2\n 54110: a0 = u64 [s1 + 0x18]\n 54113: u64 [s1 + 0xf8] = a0\n 54117: u64 [s1 + 0xd0] = a3\n 54121: a0 = s1 + 0xe0\n 54125: a1 = s1 + 0xc0\n 54129: u64 [s1 + 0xd8] = a4\n 54133: ra = 1972, jump @1749\n      : @1888 [@dyn 986] (gas: 16)\n 54139: a0 = u64 [s1 + 0x10]\n 54142: a1 = u64 [s1 + 0x18]\n 54145: u64 [a0 + 0x18] = a1\n 54148: a1 = u64 [s1 + 0x20]\n 54151: u64 [a0 + 0x10] = a1\n 54154: a1 = u64 [s1 + 0x28]\n 54157: u64 [a0 + 0x8] = a1\n 54160: a1 = u64 [s1 + 0x30]\n 54163: u64 [a0] = a1\n 54165: sp = s0 + 0xfffffffffffffda0\n 54169: a0 = sp + 0x200\n 54173: ra = u64 [a0 + 0x58]\n 54176: s0 = u64 [a0 + 0x50]\n 54179: s1 = u64 [a0 + 0x48]\n 54182: sp = sp + 0x260\n 54186: ret\n      : @1889 (gas: 12)\n 54188: a0 = u64 [s1 + 0x98]\n 54192: a2 = s1 + 0x100\n 54196: u64 [a2 + 0x60] = a0\n 54199: a0 = u64 [s1 + 0xa0]\n 54203: u64 [a2 + 0x68] = a0\n 54206: a0 = u64 [s1 + 0xa8]\n 54210: u64 [a2 + 0x70] = a0\n 54213: a1 = s1 + 0x160\n 54217: a0 = u64 [s1 + 0xb0]\n 54221: u64 [a2 + 0x78] = a0\n 54224: a0 = 0\n 54226: ra = 1974, jump @19\n      : @1890 [@dyn 987] (gas: 6)\n 54233: a0 = sp + 0xffffffffffffffe0\n 54236: a0 = a0 & 0xffffffffffffffe0\n 54239: u64 [s1 + 0x58] = a0\n 54242: sp = a0\n 54244: a1 = i32 [0x201ec]\n 54249: jump @1892 if a1 >u 31\n      : @1891 (gas: 2)\n 54253: u32 [0x201ec] = 0x20\n 54259: fallthrough\n      : @1892 (gas: 49)\n 54260: a0 = sp + 0xffffffffffffffe0\n 54263: a2 = a0 & 0xffffffffffffffe0\n 54266: u64 [s1 + 0xb0] = a2\n 54270: sp = a2\n 54272: a0 = 0x20200\n 54277: i32 a0 = a0 + 0\n 54279: i32 a2 = a2 + 0\n 54281: a1 = 0x20\n 54284: ecalli 8 // 'hash_keccak_256'\n 54286: u64 [s1 + 184] = 0\n 54290: t2 = 0\n 54292: t1 = 0\n 54294: t0 = 0\n 54296: a5 = u64 [s1 + 0xb0]\n 54300: a0 = u64 [a5 + 0x18]\n 54303: a1 = u64 [s1 + 0x30]\n 54306: a2 = a1 + 0x20\n 54309: u64 [s1 + 0x50] = a2\n 54312: a1 = a2 <u a1\n 54315: a2 = u64 [s1 + 0x28]\n 54318: a3 = a2 + a1\n 54321: u64 [s1 + 0x48] = a3\n 54324: a4 = a3 <u a2\n 54327: a4 = a1 if a1 == 0\n 54330: a1 = u64 [a5 + 0x10]\n 54333: a2 = u64 [a5 + 0x8]\n 54336: a3 = u64 [a5]\n 54338: a0 = reverse a0\n 54340: a1 = reverse a1\n 54342: ra = reverse a2\n 54344: a2 = reverse a3\n 54346: a5 = u64 [s1 + 0x58]\n 54349: a3 = a2\n 54351: u64 [a5 + 0x18] = a2\n 54354: a2 = ra\n 54356: u64 [s1 + 0x80] = a2\n 54360: u64 [a5 + 0x10] = a2\n 54363: u64 [s1 + 0x90] = a1\n 54367: u64 [a5 + 0x8] = a1\n 54370: a2 = a0\n 54372: u64 [a5] = a0\n 54374: a0 = u64 [s1 + 0x20]\n 54377: a4 = a4 + a0\n 54380: u64 [s1 + 0x40] = a4\n 54383: a0 = a4 <u a0\n 54386: a1 = u64 [s1 + 0x18]\n 54389: a0 = a0 + a1\n 54392: u64 [s1 + 0x38] = a0\n 54395: fallthrough\n      : @1893 (gas: 19)\n 54396: u64 [s1 + 0x88] = a3\n 54400: u64 [s1 + 0x98] = a2\n 54404: a0 = u64 [s1 + 0x60]\n 54407: a1 = u64 [s1 + 0xb8]\n 54411: a0 = a1 <u a0\n 54414: a2 = u64 [s1 + 0x70]\n 54417: a1 = t2 ^ a2\n 54420: a2 = t2 <u a2\n 54423: a2 = a0 if a1 == 0\n 54426: a4 = u64 [s1 + 0x68]\n 54429: a0 = t1 <u a4\n 54432: a3 = u64 [s1 + 0x78]\n 54435: a1 = t0 ^ a3\n 54438: a3 = t0 <u a3\n 54441: a3 = a0 if a1 == 0\n 54444: a0 = t1 ^ a4\n 54447: a0 = a0 | a1\n 54450: a3 = a2 if a0 == 0\n 54453: jump @1887 if a3 == 0\n      : @1894 (gas: 6)\n 54457: a0 = s1 + 0x140\n 54461: a1 = a5\n 54463: u64 [s1 + 0xb0] = t0\n 54467: u64 [s1 + 0xa8] = t1\n 54471: u64 [s1 + 0xa0] = t2\n 54475: ra = 1976, jump @21\n      : @1895 [@dyn 988] (gas: 20)\n 54482: a1 = u64 [s1 + 0x50]\n 54485: a0 = u64 [s1 + 0xb8]\n 54489: a0 = a0 + a1\n 54492: a1 = a0 <u a1\n 54495: a4 = u64 [s1 + 0x48]\n 54498: a2 = u64 [s1 + 0xa0]\n 54502: a2 = a2 + a4\n 54505: a2 = a2 + a1\n 54508: a3 = a2 ^ a4\n 54511: a4 = a2 <u a4\n 54514: a4 = a1 if a3 == 0\n 54517: a3 = u64 [s1 + 0x40]\n 54520: a1 = u64 [s1 + 0xa8]\n 54524: a1 = a1 + a3\n 54527: t0 = a1 <u a3\n 54530: a5 = u64 [s1 + 0x38]\n 54533: a3 = u64 [s1 + 0xb0]\n 54537: a5 = a5 + a3\n 54540: a3 = a5 + t0\n 54543: t0 = 1978, jump @2012\n      : @1896 [@dyn 989] (gas: 1)\n 54549: jump @1899 if a1 != 0\n      : @1897 (gas: 11)\n 54553: a5 = s1 + 0x100\n 54557: a2 = u64 [a5 + 0x58]\n 54560: a1 = u64 [a5 + 0x50]\n 54563: a3 = u64 [a5 + 0x48]\n 54566: a4 = u64 [a5 + 0x40]\n 54569: u64 [a5 + 0x20] = a4\n 54572: u64 [a5 + 0x28] = a3\n 54575: u64 [a5 + 0x30] = a1\n 54578: a1 = s1 + 0x120\n 54582: u64 [a5 + 0x38] = a2\n 54585: ra = 1980, jump @19\n      : @1898 [@dyn 990] (gas: 38)\n 54592: a3 = u64 [s1 + 0x98]\n 54596: a3 = a3 + 0x1\n 54599: a0 = a3 <u 0x1\n 54602: t2 = u64 [s1 + 0x90]\n 54606: t2 = t2 + a0\n 54609: a0 = a3 | t2\n 54612: a0 = a0 <u 0x1\n 54615: a1 = u64 [s1 + 0x80]\n 54619: t1 = a1 + a0\n 54622: a1 = t1 <u a1\n 54625: a0 = u64 [s1 + 0x88]\n 54629: a0 = a0 + a1\n 54632: a1 = u64 [s1 + 0xb8]\n 54636: ra = a1 + 0x20\n 54639: a2 = ra <u a1\n 54642: a4 = u64 [s1 + 0xa0]\n 54646: a1 = a4 + a2\n 54649: a4 = a1 <u a4\n 54652: a4 = a2 if a2 == 0\n 54655: a2 = u64 [s1 + 0xa8]\n 54659: a4 = a4 + a2\n 54662: a2 = a4 <u a2\n 54665: t0 = u64 [s1 + 0xb0]\n 54669: t0 = t0 + a2\n 54672: a2 = t2\n 54674: u64 [s1 + 0x90] = a2\n 54678: a5 = u64 [s1 + 0x58]\n 54681: u64 [a5 + 0x8] = a2\n 54684: a2 = a3\n 54686: u64 [a5] = a3\n 54688: u64 [a5 + 0x10] = t1\n 54691: a3 = a0\n 54693: u64 [a5 + 0x18] = a0\n 54696: u64 [s1 + 0x80] = t1\n 54700: u64 [s1 + 0xb8] = ra\n 54704: t2 = a1\n 54706: t1 = a4\n 54708: jump @1893\n      : @1899 (gas: 1)\n 54711: trap\n      : @1900 (gas: 16)\n 54712: a2 = u64 [a1]\n 54714: t0 = u64 [a1 + 0x18]\n 54717: a3 = u64 [a1 + 0x8]\n 54720: a5 = u64 [a1 + 0x10]\n 54723: a4 = a2 + 0x1\n 54726: a2 = a4 <u 0x1\n 54729: a2 = a2 + a3\n 54732: a3 = a4 | a2\n 54735: a3 = a3 <u 0x1\n 54738: a3 = a3 + a5\n 54741: a5 = a3 <u a5\n 54744: a5 = a5 + t0\n 54747: t0 = a2 | a5\n 54750: a1 = a4 | a3\n 54753: a1 = a1 | t0\n 54756: jump @1902 if a1 == 0\n      : @1901 (gas: 5)\n 54759: u64 [a0] = a4\n 54761: u64 [a0 + 0x8] = a2\n 54764: u64 [a0 + 0x10] = a3\n 54767: u64 [a0 + 0x18] = a5\n 54770: ret\n      : @1902 (gas: 6)\n 54772: sp = sp + 0xffffffffffffffb0\n 54775: u64 [sp + 0x48] = ra\n 54778: u64 [sp + 0x40] = s0\n 54781: s0 = sp + 0x50\n 54784: sp = sp & 0xfffffffffffffff0\n 54787: t0 = 1982, jump @1982\n      : @1903 [@dyn 991] (gas: 1)\n 54793: ra = 1984, jump @19\n      : @1904 [@dyn 992] (gas: 7)\n 54800: u64 [sp + 24] = 0\n 54803: u64 [sp + 16] = 0\n 54806: u64 [sp + 0] = 0x11\n 54809: a0 = 0x4\n 54812: a1 = sp\n 54814: u64 [sp + 8] = 0\n 54817: ra = 1986, jump @19\n      : @1905 [@dyn 993] (gas: 2)\n 54824: a1 = i32 [0x201ec]\n 54829: jump @1907 if a1 >u 63\n      : @1906 (gas: 2)\n 54833: u32 [0x201ec] = 0x40\n 54839: fallthrough\n      : @1907 (gas: 7)\n 54840: a1 = 0x20200\n 54845: i32 a1 = a1 + 0\n 54847: a0 = 0x1\n 54850: a2 = 0x24\n 54853: ra = 0x7c4\n 54857: ecalli 13 // 'seal_return'\n 54859: fallthrough\n      : @1908 [@dyn 994] (gas: 14)\n 54860: sp = sp + 0xffffffffffffff20\n 54864: u64 [sp + 0xd8] = ra\n 54868: u64 [sp + 0xd0] = s0\n 54872: u64 [sp + 0xc8] = s1\n 54876: s0 = sp + 0xe0\n 54880: sp = sp & 0xfffffffffffffff0\n 54883: a1 = u64 [a0 + 0x10]\n 54886: a2 = u64 [a0 + 0x18]\n 54889: a3 = u64 [a0 + 0x8]\n 54892: a0 = u64 [a0]\n 54894: a2 = a2 | a3\n 54897: a0 = a0 | a1\n 54900: a0 = a0 | a2\n 54903: jump @1910 if a0 == 0\n      : @1909 (gas: 6)\n 54906: sp = s0 + 0xffffffffffffff20\n 54910: ra = u64 [sp + 0xd8]\n 54914: s0 = u64 [sp + 0xd0]\n 54918: s1 = u64 [sp + 0xc8]\n 54922: sp = sp + 0xe0\n 54926: ret\n      : @1910 (gas: 3)\n 54928: a0 = sp + 0xa0\n 54932: a1 = 0x40\n 54935: ra = 1990, jump @17\n      : @1911 [@dyn 995] (gas: 5)\n 54942: a2 = u64 [sp + 0xb8]\n 54946: s1 = u64 [sp + 0xb0]\n 54950: a0 = u64 [sp + 0xa8]\n 54954: a1 = u64 [sp + 0xa0]\n 54958: t0 = 1992, jump @2039\n      : @1912 [@dyn 996] (gas: 1)\n 54964: jump @1922 if a0 != 0\n      : @1913 (gas: 8)\n 54968: u64 [sp + 144] = 0\n 54972: u64 [sp + 136] = 0\n 54976: u64 [sp + 128] = 0\n 54980: a0 = 0x8c379a000000000\n 54990: a1 = sp + 0x80\n 54994: u64 [sp + 0x98] = a0\n 54998: a0 = u64 [sp + 0x18]\n 55001: ra = 1994, jump @19\n      : @1914 [@dyn 997] (gas: 1)\n 55008: t0 = 1996, jump @1997\n      : @1915 [@dyn 998] (gas: 1)\n 55014: jump @1922 if a0 == 0\n      : @1916 (gas: 8)\n 55017: a0 = u64 [sp + 0x18]\n 55020: i32 a0 = a0 + 0x4\n 55023: u64 [sp + 120] = 0\n 55026: u64 [sp + 112] = 0\n 55029: u64 [sp + 96] = 0x20\n 55033: a1 = sp + 0x60\n 55036: u64 [sp + 104] = 0\n 55039: ra = 1998, jump @19\n      : @1917 [@dyn 999] (gas: 1)\n 55046: t0 = 2000, jump @2029\n      : @1918 [@dyn 1000] (gas: 1)\n 55052: jump @1922 if a0 == 0\n      : @1919 (gas: 8)\n 55055: s1 = u64 [sp + 0x18]\n 55058: i32 a0 = s1 + 0x24\n 55061: u64 [sp + 88] = 0\n 55064: u64 [sp + 80] = 0\n 55067: u64 [sp + 64] = 0xf\n 55071: a1 = sp + 0x40\n 55074: u64 [sp + 72] = 0\n 55077: ra = 2002, jump @19\n      : @1920 [@dyn 1001] (gas: 2)\n 55084: a0 = 0xffffffbc\n 55094: t0 = 2004, jump @2013\n      : @1921 [@dyn 1002] (gas: 1)\n 55100: jump @1923 if a0 != 0\n      : @1922 (gas: 1)\n 55103: trap\n      : @1923 (gas: 10)\n 55104: s1 = u64 [sp + 0x18]\n 55107: i32 a0 = s1 + 0x44\n 55110: a1 = u64 [0x201d8]\n 55115: a2 = u64 [0x201e0]\n 55120: u64 [sp + 0x38] = a1\n 55123: u64 [sp + 40] = 0\n 55126: u64 [sp + 0x30] = a2\n 55129: a1 = sp + 0x20\n 55132: u64 [sp + 32] = 0\n 55135: ra = 2006, jump @19\n      : @1924 [@dyn 1003] (gas: 3)\n 55142: a1 = 0x64\n 55145: a0 = s1\n 55147: ra = 2008, jump @28\n      : @1925 [@dyn 1004] (gas: 6)\n 55154: i32 a1 = a0 + 0\n 55156: a0 = 0x1\n 55159: a2 = 0x64\n 55162: ra = 0x7da\n 55166: ecalli 13 // 'seal_return'\n 55168: fallthrough\n      : @1926 [@dyn 1005] (gas: 45)\n 55169: sp = sp + 0xffffffffffffff90\n 55172: u64 [sp + 0x68] = ra\n 55175: u64 [sp + 0x60] = s0\n 55178: u64 [sp + 0x58] = s1\n 55181: s0 = sp + 0x70\n 55184: sp = sp & 0xfffffffffffffff0\n 55187: a3 = u64 [a1 + 0x18]\n 55190: u64 [sp + 0x8] = a3\n 55193: a4 = u64 [a2 + 0x18]\n 55196: t2 = u64 [a1]\n 55198: u64 [sp] = t2\n 55200: a3 = u64 [a1 + 0x8]\n 55203: s1 = u64 [a2 + 0x8]\n 55206: a5 = u64 [a2]\n 55208: t1 = u64 [a1 + 0x10]\n 55211: t0 = u64 [a2 + 0x10]\n 55214: a2 = s1 + a3\n 55217: t2 = t2 + a5\n 55220: a5 = t2 <u a5\n 55223: a2 = a2 + a5\n 55226: ra = a2 ^ s1\n 55229: s1 = a2 <u s1\n 55232: s1 = a5 if ra == 0\n 55235: a1 = t0 + t1\n 55238: a5 = u64 [sp + 0x8]\n 55241: a5 = a5 + a4\n 55244: a4 = a1 <u t0\n 55247: a4 = a4 + a5\n 55250: a5 = a1 + s1\n 55253: a1 = a5 <u a1\n 55256: ra = a4 + a1\n 55259: a4 = a2 ^ a3\n 55262: a3 = a2 <u a3\n 55265: a1 = u64 [sp]\n 55267: s1 = t2 <u a1\n 55270: s1 = a3 if a4 != 0\n 55273: t0 = a5 <u t1\n 55276: a1 = u64 [sp + 0x8]\n 55279: a4 = ra ^ a1\n 55282: a3 = ra <u a1\n 55285: a3 = t0 if a4 == 0\n 55288: a1 = a5 ^ t1\n 55291: a1 = a1 | a4\n 55294: s1 = a3 if a1 != 0\n 55297: jump @1928 if s1 != 0\n      : @1927 (gas: 10)\n 55300: u64 [a0] = t2\n 55302: u64 [a0 + 0x8] = a2\n 55305: u64 [a0 + 0x10] = a5\n 55308: u64 [a0 + 0x18] = ra\n 55311: sp = s0 + 0xffffffffffffff90\n 55314: ra = u64 [sp + 0x68]\n 55317: s0 = u64 [sp + 0x60]\n 55320: s1 = u64 [sp + 0x58]\n 55323: sp = sp + 0x70\n 55326: ret\n      : @1928 (gas: 1)\n 55328: t0 = 2012, jump @2021\n      : @1929 [@dyn 1006] (gas: 1)\n 55334: ra = 2014, jump @19\n      : @1930 [@dyn 1007] (gas: 7)\n 55341: u64 [sp + 40] = 0\n 55344: u64 [sp + 32] = 0\n 55347: u64 [sp + 16] = 0x11\n 55351: a0 = 0x4\n 55354: a1 = sp + 0x10\n 55357: u64 [sp + 24] = 0\n 55360: ra = 2016, jump @19\n      : @1931 [@dyn 1008] (gas: 2)\n 55367: a1 = i32 [0x201ec]\n 55372: jump @1933 if a1 >u 63\n      : @1932 (gas: 2)\n 55376: u32 [0x201ec] = 0x40\n 55382: fallthrough\n      : @1933 (gas: 8)\n 55383: a1 = 0x20200\n 55388: i32 a1 = a1 + 0\n 55390: a0 = 0x1\n 55393: a2 = 0x24\n 55396: ecalli 13 // 'seal_return'\n 55398: a0 = 0\n 55400: ra = 0x7e2\n 55404: jump @34\n      : @1934 [export #0: 'call'] (gas: 2)\n 55408: a0 = 0\n 55410: ra = 2018, jump @34\n      : @1935 [@dyn 1009] [export #1: 'deploy'] (gas: 2)\n 55417: a0 = 0x1\n 55420: ra = 2020, jump @34\n      : @1936 [@dyn 1010] (gas: 22)\n 55427: a0 = u64 [a2 + 0x8]\n 55430: a1 = u64 [a2]\n 55432: a2 = i32 [a2 + 0x10]\n 55435: a0 = reverse a0\n 55437: a3 = a0 >> 0x20\n 55440: a1 = reverse a1\n 55442: a4 = a1 << 0x20\n 55445: a3 = a3 | a4\n 55448: a0 = a0 << 0x20\n 55451: a2 = reverse a2\n 55453: a2 = a2 >> 0x20\n 55456: a0 = a0 | a2\n 55459: a1 = a1 >> 0x20\n 55462: a2 = u64 [a5 + 0xa8]\n 55466: a1 = a1 ^ a2\n 55469: a2 = u64 [a5 + 0xb0]\n 55473: a0 = a0 ^ a2\n 55476: a0 = a0 | a1\n 55479: a1 = u64 [a5 + 0xb8]\n 55483: a1 = a1 ^ a3\n 55486: a0 = a0 | a1\n 55489: jump [t0]\n      : @1937 (gas: 13)\n 55491: a1 = a0 <u a1\n 55494: a3 = u64 [s1 + 0x1a8]\n 55498: a2 = a3 + a1\n 55501: a3 = a2 <u a3\n 55504: a3 = a1 if a1 == 0\n 55507: a1 = u64 [s1 + 0x1a0]\n 55511: a3 = a3 + a1\n 55514: a1 = a3 <u a1\n 55517: a4 = u64 [s1 + 0x1b8]\n 55521: a1 = a1 + a4\n 55524: a4 = s1 + 0x4938\n 55528: a5 = a4 + 0x300\n 55532: jump [t0]\n      : @1938 (gas: 38)\n 55534: t1 = u64 [s1 + 0x168]\n 55538: t1 = t1 + 0x1\n 55541: a0 = t1 <u 0x1\n 55544: t2 = u64 [s1 + 0x160]\n 55548: t2 = t2 + a0\n 55551: a0 = t1 | t2\n 55554: a0 = a0 <u 0x1\n 55557: a1 = u64 [s1 + 0x170]\n 55561: ra = a1 + a0\n 55564: a1 = ra <u a1\n 55567: a0 = u64 [s1 + 0x188]\n 55571: a0 = a0 + a1\n 55574: a1 = u64 [s1 + 0x1b8]\n 55578: a2 = a1 + 0x20\n 55581: u64 [s1 + 0x188] = a2\n 55585: a3 = a2 <u a1\n 55588: a1 = u64 [s1 + 0x158]\n 55592: a2 = a1 + a3\n 55595: u64 [s1 + 0x168] = a2\n 55599: a4 = a2 <u a1\n 55602: a4 = a3 if a3 == 0\n 55605: a1 = u64 [s1 + 0x1b0]\n 55609: a3 = a1 + a4\n 55612: a4 = a3 <u a1\n 55615: a1 = u64 [s1 + 0x1a8]\n 55619: a1 = a1 + a4\n 55622: u64 [s1 + 0x1a8] = a1\n 55626: a1 = u64 [s1 + 0x198]\n 55630: a4 = a1 + 0x20\n 55633: a5 = a4 <u a1\n 55636: a2 = u64 [s1 + 0x178]\n 55640: a1 = a2 + a5\n 55643: a2 = a1 <u a2\n 55646: a2 = a5 if a5 == 0\n 55649: a5 = u64 [s1 + 0x180]\n 55653: a2 = a2 + a5\n 55656: a5 = a2 <u a5\n 55659: jump [t0]\n      : @1939 (gas: 12)\n 55661: a5 = s1 + 0x100\n 55665: a1 = u64 [a5 + 0xb8]\n 55669: a0 = u64 [a5 + 0xa8]\n 55673: a3 = u64 [a5 + 0xa0]\n 55677: a3 = a3 | a0\n 55680: a4 = 0x100000000\n 55690: a0 = 0xfffffffc\n 55700: a0 = a1 <u a0\n 55703: a2 = u64 [a5 + 0xb0]\n 55707: a0 = 0 if a2 != 0\n 55709: a0 = 0 if a3 != 0\n 55711: jump [t0]\n      : @1940 (gas: 18)\n 55713: a0 = u64 [a3]\n 55715: a1 = u64 [a3 + 0x8]\n 55718: a2 = u64 [a3 + 0x10]\n 55721: a3 = u64 [a3 + 0x18]\n 55724: a0 = reverse a0\n 55726: a1 = reverse a1\n 55728: a2 = reverse a2\n 55730: a3 = reverse a3\n 55732: a4 = a3 + 0x2\n 55735: a3 = a4 <u a3\n 55738: a5 = a2 + a3\n 55741: a2 = a5 <u a2\n 55744: a2 = a3 if a3 == 0\n 55747: a2 = a2 + a1\n 55750: a1 = a2 <u a1\n 55753: a0 = a0 + a1\n 55756: a1 = s1 + 0x5138\n 55760: jump [t0]\n      : @1941 (gas: 19)\n 55762: a3 = u64 [s1 + 0x1b8]\n 55766: a0 = u64 [a3]\n 55768: a1 = u64 [a3 + 0x8]\n 55771: a2 = u64 [a3 + 0x10]\n 55774: a3 = u64 [a3 + 0x18]\n 55777: a0 = reverse a0\n 55779: a1 = reverse a1\n 55781: a2 = reverse a2\n 55783: a3 = reverse a3\n 55785: a3 = a3 + 0x1\n 55788: a4 = a3 <u 0x1\n 55791: a2 = a2 + a4\n 55794: a4 = a3 | a2\n 55797: a4 = a4 <u 0x1\n 55800: a4 = a4 + a1\n 55803: a1 = a4 <u a1\n 55806: a0 = a0 + a1\n 55809: a1 = s1 + 0x4938\n 55813: jump [t0]\n      : @1942 (gas: 24)\n 55815: a5 = s1 + 0x100\n 55819: a2 = u64 [a5 + 0x68]\n 55822: a0 = u64 [a2 + 0x8]\n 55825: a1 = u64 [a2]\n 55827: a2 = i32 [a2 + 0x10]\n 55830: a0 = reverse a0\n 55832: a3 = a0 >> 0x20\n 55835: a1 = reverse a1\n 55837: a4 = a1 << 0x20\n 55840: a3 = a3 | a4\n 55843: a0 = a0 << 0x20\n 55846: a2 = reverse a2\n 55848: a2 = a2 >> 0x20\n 55851: a0 = a0 | a2\n 55854: a1 = a1 >> 0x20\n 55857: a2 = u64 [a5 + 0x50]\n 55860: a1 = a1 ^ a2\n 55863: a2 = u64 [a5 + 0x58]\n 55866: a0 = a0 ^ a2\n 55869: a0 = a0 | a1\n 55872: a1 = u64 [a5 + 0x60]\n 55875: a1 = a1 ^ a3\n 55878: a0 = a0 | a1\n 55881: jump [t0]\n      : @1943 (gas: 24)\n 55883: a5 = s1 + 0x100\n 55887: a2 = u64 [a5 + 0xb0]\n 55891: a0 = u64 [a2 + 0x8]\n 55894: a1 = u64 [a2]\n 55896: a2 = i32 [a2 + 0x10]\n 55899: a0 = reverse a0\n 55901: a3 = a0 >> 0x20\n 55904: a1 = reverse a1\n 55906: a4 = a1 << 0x20\n 55909: a3 = a3 | a4\n 55912: a0 = a0 << 0x20\n 55915: a2 = reverse a2\n 55917: a2 = a2 >> 0x20\n 55920: a0 = a0 | a2\n 55923: a1 = a1 >> 0x20\n 55926: a2 = u64 [a5 + 0x98]\n 55930: a1 = a1 ^ a2\n 55933: a2 = u64 [a5 + 0xa0]\n 55937: a0 = a0 ^ a2\n 55940: a0 = a0 | a1\n 55943: a1 = u64 [a5 + 0xa8]\n 55947: a1 = a1 ^ a3\n 55950: a0 = a0 | a1\n 55953: jump [t0]\n      : @1944 (gas: 24)\n 55955: a5 = s1 + 0x100\n 55959: a2 = u64 [a5 + 0xb8]\n 55963: a0 = u64 [a2 + 0x8]\n 55966: a1 = u64 [a2]\n 55968: a2 = i32 [a2 + 0x10]\n 55971: a0 = reverse a0\n 55973: a3 = a0 >> 0x20\n 55976: a1 = reverse a1\n 55978: a4 = a1 << 0x20\n 55981: a3 = a3 | a4\n 55984: a0 = a0 << 0x20\n 55987: a2 = reverse a2\n 55989: a2 = a2 >> 0x20\n 55992: a0 = a0 | a2\n 55995: a1 = a1 >> 0x20\n 55998: a2 = u64 [a5 + 0x70]\n 56001: a1 = a1 ^ a2\n 56004: a2 = u64 [a5 + 0x78]\n 56007: a0 = a0 ^ a2\n 56010: a0 = a0 | a1\n 56013: a1 = u64 [a5 + 0x80]\n 56017: a1 = a1 ^ a3\n 56020: a0 = a0 | a1\n 56023: jump [t0]\n      : @1945 (gas: 24)\n 56025: a5 = s1 + 0x100\n 56029: a2 = u64 [a5 + 0xb8]\n 56033: a0 = u64 [a2 + 0x8]\n 56036: a1 = u64 [a2]\n 56038: a2 = i32 [a2 + 0x10]\n 56041: a0 = reverse a0\n 56043: a3 = a0 >> 0x20\n 56046: a1 = reverse a1\n 56048: a4 = a1 << 0x20\n 56051: a3 = a3 | a4\n 56054: a0 = a0 << 0x20\n 56057: a2 = reverse a2\n 56059: a2 = a2 >> 0x20\n 56062: a0 = a0 | a2\n 56065: a1 = a1 >> 0x20\n 56068: a2 = u64 [a5 + 0xa0]\n 56072: a1 = a1 ^ a2\n 56075: a2 = u64 [a5 + 0xa8]\n 56079: a0 = a0 ^ a2\n 56082: a0 = a0 | a1\n 56085: a1 = u64 [a5 + 0xb0]\n 56089: a1 = a1 ^ a3\n 56092: a0 = a0 | a1\n 56095: jump [t0]\n      : @1946 (gas: 18)\n 56097: a0 = u64 [a3]\n 56099: a1 = u64 [a3 + 0x8]\n 56102: a2 = u64 [a3 + 0x10]\n 56105: a3 = u64 [a3 + 0x18]\n 56108: a0 = reverse a0\n 56110: a1 = reverse a1\n 56112: a2 = reverse a2\n 56114: a3 = reverse a3\n 56116: a3 = a3 + 0x1\n 56119: a4 = a3 <u 0x1\n 56122: a2 = a2 + a4\n 56125: a4 = a3 | a2\n 56128: a4 = a4 <u 0x1\n 56131: a4 = a4 + a1\n 56134: a1 = a4 <u a1\n 56137: a0 = a0 + a1\n 56140: a1 = s1 + 0x5138\n 56144: jump [t0]\n      : @1947 (gas: 15)\n 56146: a0 = u64 [a5 + 0x8]\n 56149: a1 = u64 [a5]\n 56151: a2 = i32 [a5 + 0x10]\n 56154: a0 = reverse a0\n 56156: a3 = a0 >> 0x20\n 56159: a1 = reverse a1\n 56161: a4 = a1 << 0x20\n 56164: a3 = a3 | a4\n 56167: a0 = a0 << 0x20\n 56170: a2 = reverse a2\n 56172: a2 = a2 >> 0x20\n 56175: a0 = a0 | a2\n 56178: a1 = a1 >> 0x20\n 56181: a4 = s1 + 0x100\n 56185: jump [t0]\n      : @1948 (gas: 7)\n 56187: a4 = 0x100000000\n 56197: a0 = 0xfffffffc\n 56207: a0 = a1 <u a0\n 56210: a2 = u64 [a5 + 0xb0]\n 56214: a0 = 0 if a2 != 0\n 56216: a0 = 0 if a3 != 0\n 56218: jump [t0]\n      : @1949 (gas: 17)\n 56220: a0 = u64 [a3]\n 56222: a1 = u64 [a3 + 0x8]\n 56225: a2 = u64 [a3 + 0x10]\n 56228: a3 = u64 [a3 + 0x18]\n 56231: a0 = reverse a0\n 56233: a1 = reverse a1\n 56235: a2 = reverse a2\n 56237: a3 = reverse a3\n 56239: a4 = a3 + 0x5\n 56242: a3 = a4 <u a3\n 56245: a5 = a2 + a3\n 56248: a2 = a5 <u a2\n 56251: a2 = a3 if a3 == 0\n 56254: a2 = a2 + a1\n 56257: a1 = a2 <u a1\n 56260: a3 = a0 + a1\n 56263: jump [t0]\n      : @1950 (gas: 23)\n 56265: a4 = u64 [s1 + 0x1b8]\n 56269: a2 = a4 <u 0x80\n 56273: a3 = u64 [s1 + 0x170]\n 56277: a1 = a3 if a2 != 0\n 56280: a5 = u64 [s1 + 0x178]\n 56284: a3 = u64 [s1 + 0x188]\n 56288: a3 = a3 | a5\n 56291: a3 = a0 if a2 == 0\n 56294: a1 = 0xffffffffffffffff if a4 == 0\n 56297: a3 = 0xffffffffffffffff if a4 == 0\n 56300: a4 = u64 [s1 + 0x180]\n 56304: a4 = 0 if a2 == 0\n 56306: a5 = 0 if a2 == 0\n 56308: a0 = u64 [s1 + 0x198]\n 56312: a0 = a0 & ~a3\n 56315: a2 = u64 [s1 + 0x1a0]\n 56319: a1 = a2 & ~a1\n 56322: a2 = u64 [s1 + 0x1a8]\n 56326: a2 = a2 & ~a5\n 56329: a3 = u64 [s1 + 0x1b0]\n 56333: a3 = a3 & ~a4\n 56336: a4 = s1 + 0x5138\n 56340: jump [t0]\n      : @1951 (gas: 10)\n 56342: a3 = s1 + 0x100\n 56346: a2 = u64 [a3 + 0xb8]\n 56350: a0 = u64 [a3 + 0xa0]\n 56354: a0 = a0 + 0xffffffffffffff9c\n 56357: a0 = a2 <u a0\n 56360: a1 = u64 [a3 + 0xb0]\n 56364: a0 = 0 if a1 != 0\n 56366: a1 = u64 [a3 + 0xa8]\n 56370: a0 = 0 if a1 != 0\n 56372: jump [t0]\n      : @1952 (gas: 10)\n 56374: a3 = s1 + 0x100\n 56378: a1 = u64 [a3 + 0xb8]\n 56382: a0 = u64 [a3 + 0xa0]\n 56386: a0 = a0 + 0xffffffffffffffdc\n 56389: a0 = a1 <u a0\n 56392: a2 = u64 [a3 + 0xb0]\n 56396: a0 = 0 if a2 != 0\n 56398: a2 = u64 [a3 + 0xa8]\n 56402: a0 = 0 if a2 != 0\n 56404: jump [t0]\n      : @1953 (gas: 10)\n 56406: a0 = s1 + 0x100\n 56410: a4 = u64 [a0 + 0xa8]\n 56414: a3 = u64 [a0 + 0xb0]\n 56418: a1 = u64 [a0 + 0xb8]\n 56422: a2 = 0x100000000\n 56432: a0 = 0xffffffbc\n 56442: a0 = a1 <u a0\n 56445: a0 = 0 if a3 != 0\n 56447: a0 = 0 if a4 != 0\n 56449: jump [t0]\n      : @1954 (gas: 20)\n 56451: a3 = u64 [s1 + 0x148]\n 56455: a0 = u64 [a3]\n 56457: a1 = u64 [a3 + 0x8]\n 56460: a2 = u64 [a3 + 0x10]\n 56463: a3 = u64 [a3 + 0x18]\n 56466: a0 = reverse a0\n 56468: a1 = reverse a1\n 56470: a2 = reverse a2\n 56472: a3 = reverse a3\n 56474: a4 = a3 + 0x5\n 56477: a3 = a4 <u a3\n 56480: a5 = a2 + a3\n 56483: a2 = a5 <u a2\n 56486: a2 = a3 if a3 == 0\n 56489: a2 = a2 + a1\n 56492: a1 = a2 <u a1\n 56495: a3 = a0 + a1\n 56498: a1 = s1 + 0x1938\n 56502: a0 = u64 [s1 + 0x1a0]\n 56506: jump [t0]\n      : @1955 (gas: 8)\n 56508: a1 = a1 | a3\n 56511: a3 = a0 | a2\n 56514: a3 = a3 | a1\n 56517: a3 = a3 >> 0x20\n 56520: a1 = a1 | a2\n 56523: a1 = a1 << 0x20\n 56526: a1 = a1 | a3\n 56529: jump [t0]\n      : @1956 (gas: 20)\n 56531: a3 = u64 [s1 + 0x198]\n 56535: a0 = u64 [a3]\n 56537: a1 = u64 [a3 + 0x8]\n 56540: a2 = u64 [a3 + 0x10]\n 56543: a3 = u64 [a3 + 0x18]\n 56546: a0 = reverse a0\n 56548: a1 = reverse a1\n 56550: a2 = reverse a2\n 56552: a3 = reverse a3\n 56554: a4 = a3 + 0x4\n 56557: a3 = a4 <u a3\n 56560: a5 = a2 + a3\n 56563: a2 = a5 <u a2\n 56566: a2 = a3 if a3 == 0\n 56569: a2 = a2 + a1\n 56572: a1 = a2 <u a1\n 56575: a0 = a0 + a1\n 56578: a1 = s1 + 0x5138\n 56582: a3 = a1 + 0x100\n 56586: jump [t0]\n      : @1957 (gas: 10)\n 56588: a3 = u64 [s1 + 0x1b0]\n 56592: a0 = u64 [a3]\n 56594: a1 = u64 [a3 + 0x8]\n 56597: a2 = u64 [a3 + 0x10]\n 56600: a3 = u64 [a3 + 0x18]\n 56603: a0 = reverse a0\n 56605: a1 = reverse a1\n 56607: a2 = reverse a2\n 56609: a3 = reverse a3\n 56611: jump [t0]\n      : @1958 (gas: 23)\n 56613: a3 = u64 [s1 + 0x1b0]\n 56617: a0 = u64 [a3]\n 56619: a1 = u64 [a3 + 0x8]\n 56622: a2 = u64 [a3 + 0x10]\n 56625: a3 = u64 [a3 + 0x18]\n 56628: a0 = reverse a0\n 56630: a1 = reverse a1\n 56632: a2 = reverse a2\n 56634: a3 = reverse a3\n 56636: a4 = a3 + 0x4\n 56639: a3 = a4 <u a3\n 56642: a5 = a2 + a3\n 56645: a2 = a5 <u a2\n 56648: a2 = a3 if a3 == 0\n 56651: a2 = a2 + a1\n 56654: a1 = a2 <u a1\n 56657: a0 = a0 + a1\n 56660: a1 = u64 [s1 + 0x1b8]\n 56664: u64 [a1] = a4\n 56666: u64 [a1 + 0x8] = a5\n 56669: u64 [a1 + 0x10] = a2\n 56672: u64 [a1 + 0x18] = a0\n 56675: jump [t0]\n      : @1959 (gas: 19)\n 56677: a3 = u64 [s1 + 0x168]\n 56681: a0 = u64 [a3]\n 56683: a1 = u64 [a3 + 0x8]\n 56686: a2 = u64 [a3 + 0x10]\n 56689: a3 = u64 [a3 + 0x18]\n 56692: a0 = reverse a0\n 56694: a1 = reverse a1\n 56696: a2 = reverse a2\n 56698: a3 = reverse a3\n 56700: a4 = a3 + 0x5\n 56703: a3 = a4 <u a3\n 56706: a5 = a2 + a3\n 56709: a2 = a5 <u a2\n 56712: a2 = a3 if a3 == 0\n 56715: a2 = a2 + a1\n 56718: a1 = a2 <u a1\n 56721: a0 = a0 + a1\n 56724: a1 = s1 + 0x5138\n 56728: jump [t0]\n      : @1960 (gas: 10)\n 56730: a3 = a4 <u a3\n 56733: a5 = a2 + a3\n 56736: a2 = a5 <u a2\n 56739: a2 = a3 if a3 == 0\n 56742: a2 = a2 + a1\n 56745: a1 = a2 <u a1\n 56748: a0 = a0 + a1\n 56751: a1 = s1 + 0x4938\n 56755: a3 = a1 + 0x500\n 56759: jump [t0]\n      : @1961 (gas: 14)\n 56761: a3 = s1 + 0x100\n 56765: a0 = u64 [a3 + 0xa8]\n 56769: a2 = u64 [a3 + 0xa0]\n 56773: a2 = a2 | a0\n 56776: a0 = 0x100000000\n 56786: u64 [a3 + 0xa0] = a0\n 56790: a0 = 0xfffffffc\n 56800: a1 = u64 [a3 + 0xb8]\n 56804: a0 = a1 <u a0\n 56807: a1 = u64 [a3 + 0xb0]\n 56811: a0 = 0 if a1 != 0\n 56813: u64 [a3 + 0xa8] = a2\n 56817: a0 = 0 if a2 != 0\n 56819: jump [t0]\n      : @1962 (gas: 5)\n 56821: sp = a0\n 56823: i32 a2 = a0 + 0\n 56825: a1 = 0x40\n 56828: a0 = u64 [s1 + 0x198]\n 56832: jump [t0]\n      : @1963 (gas: 7)\n 56834: a1 = u64 [a2 + 0xb8]\n 56838: a0 = a1 <u a0\n 56841: a1 = u64 [a2 + 0xb0]\n 56845: a0 = 0 if a1 != 0\n 56847: a1 = u64 [a2 + 0xa8]\n 56851: a0 = 0 if a1 != 0\n 56853: jump [t0]\n      : @1964 (gas: 9)\n 56855: a1 = a1 <u 0x20\n 56858: a1 = a1 ^ 0x1\n 56861: a1 = a0 if a3 != 0\n 56864: a0 = a3 >u 0\n 56866: a2 = a3 >u 0\n 56868: a2 = a0 if a3 == 0\n 56871: a0 = a3 | a3\n 56874: a2 = a1 if a0 == 0\n 56877: jump [t0]\n      : @1965 (gas: 18)\n 56879: a1 = a0 <u a1\n 56882: a3 = u64 [s1 + 0x110]\n 56886: a2 = a3 + a1\n 56889: a3 = a2 <u a3\n 56892: a3 = a1 if a1 == 0\n 56895: a1 = u64 [s1 + 0x120]\n 56899: a3 = a3 + a1\n 56902: a1 = a3 <u a1\n 56905: a4 = u64 [s1 + 0x118]\n 56909: a4 = a4 + a1\n 56912: a1 = a5\n 56914: u64 [s1 + 0x1b8] = a5\n 56918: u64 [a5 + 0x18] = a4\n 56921: u64 [a5 + 0x10] = a3\n 56924: u64 [a5 + 0x8] = a2\n 56927: u64 [a5] = a0\n 56929: a0 = s1 + 0x7ff\n 56933: jump [t0]\n      : @1966 (gas: 18)\n 56935: a2 = u64 [s1 + 0x140]\n 56939: a0 = u64 [a2 + 0x8]\n 56942: a1 = i32 [a2 + 0x10]\n 56945: a2 = u64 [a2]\n 56947: a0 = reverse a0\n 56949: a3 = a0 << 0x20\n 56952: a1 = reverse a1\n 56954: a1 = a1 >> 0x20\n 56957: a3 = a3 | a1\n 56960: a0 = a0 >> 0x20\n 56963: a1 = reverse a2\n 56965: a2 = a1 << 0x20\n 56968: a2 = a2 | a0\n 56971: a1 = a1 >> 0x20\n 56974: a0 = u64 [s1 + 0x1b8]\n 56978: i32 a0 = a0 + 0x4\n 56981: a4 = s1 + 0x2138\n 56985: jump [t0]\n      : @1967 (gas: 17)\n 56987: a3 = u64 [s1 + 0x188]\n 56991: a0 = u64 [a3]\n 56993: a1 = u64 [a3 + 0x8]\n 56996: a2 = u64 [a3 + 0x10]\n 56999: a3 = u64 [a3 + 0x18]\n 57002: a0 = reverse a0\n 57004: a1 = reverse a1\n 57006: a2 = reverse a2\n 57008: a3 = reverse a3\n 57010: a4 = a3 + 0x5\n 57013: a3 = a4 <u a3\n 57016: a5 = a2 + a3\n 57019: a2 = a5 <u a2\n 57022: a2 = a3 if a3 == 0\n 57025: a2 = a2 + a1\n 57028: a1 = a2 <u a1\n 57031: jump [t0]\n      : @1968 (gas: 15)\n 57033: a0 = u64 [s1 + 0x130]\n 57037: u64 [s1 + 0x198] = a4\n 57041: a0 = a4 <u a0\n 57044: a4 = a0 ^ 0x1\n 57047: u64 [s1 + 0x178] = a3\n 57051: a4 = 0x1 if a3 != 0\n 57054: u64 [s1 + 0x180] = a2\n 57058: a0 = u64 [s1 + 0x1a0]\n 57062: a0 = a0 | a2\n 57065: a4 = 0x1 if a0 != 0\n 57068: a1 = u64 [s1 + 0x138]\n 57072: a0 = u64 [s1 + 0x1b8]\n 57076: a1 = a1 + a0\n 57079: a3 = u64 [s1 + 0x150]\n 57083: jump [t0]\n      : @1969 (gas: 10)\n 57085: u64 [s1 + 0x178] = a0\n 57089: u64 [s1 + 0x180] = a1\n 57093: a0 = u64 [s1 + 0x170]\n 57097: a0 = a0 | a1\n 57100: u64 [s1 + 0x170] = a0\n 57104: a0 = u64 [s1 + 0x1b8]\n 57108: a2 = a0 + 0xffffffffffffff80\n 57111: a0 = 0xffffffffffffffff\n 57114: a1 = 0xffffffffffffffff\n 57117: jump [t0]\n      : @1970 (gas: 9)\n 57119: a2 = a3 + a1\n 57122: a3 = a2 <u a3\n 57125: a3 = a1 if a1 == 0\n 57128: a1 = u64 [s1 + 0x1a0]\n 57132: a3 = a3 + a1\n 57135: a1 = a3 <u a1\n 57138: a4 = u64 [s1 + 0x1a8]\n 57142: a4 = a4 + a1\n 57145: jump [t0]\n      : @1971 (gas: 10)\n 57147: a3 = u64 [s1 + 0x1b8]\n 57151: a0 = u64 [a3]\n 57153: a1 = u64 [a3 + 0x8]\n 57156: a2 = u64 [a3 + 0x10]\n 57159: a3 = u64 [a3 + 0x18]\n 57162: a0 = reverse a0\n 57164: a1 = reverse a1\n 57166: a2 = reverse a2\n 57168: a3 = reverse a3\n 57170: jump [t0]\n      : @1972 (gas: 12)\n 57172: a1 = a0 <u a1\n 57175: a3 = u64 [s1 + 0x188]\n 57179: a2 = a3 + a1\n 57182: a3 = a2 <u a3\n 57185: a3 = a1 if a1 == 0\n 57188: a1 = u64 [s1 + 0x198]\n 57192: a3 = a3 + a1\n 57195: a1 = a3 <u a1\n 57198: a4 = u64 [s1 + 0x190]\n 57202: a1 = a1 + a4\n 57205: a4 = s1 + 0x4138\n 57209: jump [t0]\n      : @1973 (gas: 12)\n 57211: a1 = a0 <u a1\n 57214: a3 = u64 [s1 + 0x1a0]\n 57218: a2 = a3 + a1\n 57221: a3 = a2 <u a3\n 57224: a3 = a1 if a1 == 0\n 57227: a1 = u64 [s1 + 0x1b0]\n 57231: a3 = a3 + a1\n 57234: a1 = a3 <u a1\n 57237: a4 = u64 [s1 + 0x1b8]\n 57241: a1 = a1 + a4\n 57244: a4 = s1 + 0x5138\n 57248: jump [t0]\n      : @1974 (gas: 13)\n 57250: a1 = u64 [s1 + 0x1b8]\n 57254: a1 = a0 <u a1\n 57257: a3 = u64 [s1 + 0x1b0]\n 57261: a2 = a3 + a1\n 57264: a3 = a2 <u a3\n 57267: a3 = a1 if a1 == 0\n 57270: a1 = u64 [s1 + 0x1a8]\n 57274: a3 = a3 + a1\n 57277: a1 = u64 [s1 + 0x1a8]\n 57281: a1 = a3 <u a1\n 57284: a4 = u64 [s1 + 0x1a0]\n 57288: a4 = a4 + a1\n 57291: jump [t0]\n      : @1975 (gas: 16)\n 57293: a5 = s1 + 0x100\n 57297: a0 = u64 [a5 + 0xb8]\n 57301: a0 = a0 + 0x20\n 57304: a1 = u64 [a5 + 0xb8]\n 57308: a1 = a0 <u a1\n 57311: a3 = u64 [a5 + 0xa0]\n 57315: a2 = a3 + a1\n 57318: a3 = a2 <u a3\n 57321: a3 = a1 if a1 == 0\n 57324: a1 = u64 [a5 + 0xa8]\n 57328: a3 = a3 + a1\n 57331: a1 = a3 <u a1\n 57334: a4 = u64 [a5 + 0xb0]\n 57338: a4 = a4 + a1\n 57341: a1 = 0x3000\n 57345: jump [t0]\n      : @1976 (gas: 13)\n 57347: a4 = s1 + 0x100\n 57351: a1 = u64 [a4 + 0xb0]\n 57355: a2 = u64 [a4 + 0xa0]\n 57359: a1 = a1 | a2\n 57362: a3 = u64 [a4 + 0xa8]\n 57366: a2 = u64 [a4 + 0xb8]\n 57370: a2 = a2 | a3\n 57373: a2 = a2 | a1\n 57376: a2 = a2 >> 0x20\n 57379: a1 = a1 | a3\n 57382: a1 = a1 << 0x20\n 57385: a1 = a1 | a2\n 57388: jump [t0]\n      : @1977 (gas: 14)\n 57390: u64 [s1 + 416] = 0\n 57394: a3 = u64 [s1 + 0x188]\n 57398: a0 = u64 [a3 + 0x18]\n 57401: a1 = u64 [a3 + 0x10]\n 57404: a2 = u64 [a3 + 0x8]\n 57407: a3 = u64 [a3]\n 57409: t1 = reverse a0\n 57411: t2 = reverse a1\n 57413: ra = reverse a2\n 57415: a2 = 0\n 57417: a4 = u64 [s1 + 0x198]\n 57421: a0 = reverse a3\n 57423: a3 = 0\n 57425: jump [t0]\n      : @1978 (gas: 8)\n 57427: a0 = sp + 0xffffffffffffffe0\n 57430: a0 = a0 & 0xffffffffffffffe0\n 57433: u64 [s1 + 0x168] = a0\n 57437: sp = a0\n 57439: i32 a2 = a0 + 0\n 57441: a1 = 0x40\n 57444: a0 = u64 [s1 + 0x170]\n 57448: jump [t0]\n      : @1979 (gas: 8)\n 57450: a2 = a1 | a5\n 57453: a0 = a0 | a3\n 57456: a2 = a2 | a0\n 57459: a2 = a2 >> 0x20\n 57462: a0 = a0 | a5\n 57465: a0 = a0 << 0x20\n 57468: a0 = a0 | a2\n 57471: jump [t0]\n      : @1980 (gas: 15)\n 57473: a2 = u64 [s1 + 0x140]\n 57477: a0 = u64 [a2 + 0x8]\n 57480: a1 = i32 [a2 + 0x10]\n 57483: a2 = u64 [a2]\n 57485: a0 = reverse a0\n 57487: a3 = a0 << 0x20\n 57490: a1 = reverse a1\n 57492: a1 = a1 >> 0x20\n 57495: a3 = a3 | a1\n 57498: a0 = a0 >> 0x20\n 57501: a1 = reverse a2\n 57503: a2 = a1 << 0x20\n 57506: a2 = a2 | a0\n 57509: a1 = a1 >> 0x20\n 57512: jump [t0]\n      : @1981 (gas: 7)\n 57514: a1 = u64 [a2 + 0xb8]\n 57518: a0 = a1 <u a0\n 57521: a1 = u64 [a2 + 0xa0]\n 57525: a0 = 0 if a1 != 0\n 57527: a1 = u64 [a2 + 0x88]\n 57531: a0 = 0 if a1 != 0\n 57533: jump [t0]\n      : @1982 (gas: 8)\n 57535: u64 [sp + 48] = 0\n 57538: u64 [sp + 40] = 0\n 57541: u64 [sp + 32] = 0\n 57544: a0 = 0x4e487b7100000000\n 57554: a1 = sp + 0x20\n 57557: u64 [sp + 0x38] = a0\n 57560: a0 = 0\n 57562: jump [t0]\n      : @1983 (gas: 12)\n 57564: a5 = s1 + 0x100\n 57568: a1 = u64 [a5 + 0xb8]\n 57572: a0 = u64 [a5 + 0xa0]\n 57576: a2 = u64 [a5 + 0xa8]\n 57580: a2 = a2 | a0\n 57583: a4 = 0x100000000\n 57593: a0 = 0xffffffe0\n 57603: a0 = a1 <u a0\n 57606: a3 = u64 [a5 + 0xb0]\n 57610: a0 = 0 if a3 != 0\n 57612: a0 = 0 if a2 != 0\n 57614: jump [t0]\n      : @1984 (gas: 8)\n 57616: a1 = sp + 0xffffffffffffffe0\n 57619: a1 = a1 & 0xffffffffffffffe0\n 57622: u64 [s1 + 0x188] = a1\n 57626: sp = a1\n 57628: i32 a0 = a0 + 0\n 57630: i32 a2 = a1 + 0\n 57632: a1 = 0x20\n 57635: jump [t0]\n      : @1985 (gas: 10)\n 57637: a4 = a0 + 0x3\n 57640: a0 = a4 <u a0\n 57643: a5 = a2 + a0\n 57646: a2 = a5 <u a2\n 57649: a2 = a0 if a0 == 0\n 57652: a2 = a2 + a3\n 57655: a0 = a2 <u a3\n 57658: a0 = a0 + a1\n 57661: a1 = s1 + 0x4938\n 57665: jump [t0]\n      : @1986 (gas: 10)\n 57667: a4 = 0 if a2 == 0\n 57669: a1 = u64 [s1 + 0x198]\n 57673: a1 = a1 & ~a3\n 57676: a2 = u64 [s1 + 0x1a0]\n 57680: a0 = a2 & ~a0\n 57683: a2 = u64 [s1 + 0x1a8]\n 57687: a2 = a2 & ~a4\n 57690: a3 = u64 [s1 + 0x1b0]\n 57694: a3 = a3 & ~a5\n 57697: jump [t0]\n      : @1987 (gas: 7)\n 57699: a0 = a0 << 0x3b\n 57702: a1 = a0 >> 0x38\n 57705: u64 [s1 + 0x1b8] = a1\n 57709: a2 = 0x80 - a1\n 57713: a0 = 0xffffffffffffffff\n 57716: a1 = 0xffffffffffffffff\n 57719: jump [t0]\n      : @1988 (gas: 10)\n 57721: a3 = a4 <u a3\n 57724: a5 = a2 + a3\n 57727: a2 = a5 <u a2\n 57730: a2 = a3 if a3 == 0\n 57733: a2 = a2 + a1\n 57736: a1 = a2 <u a1\n 57739: a0 = a0 + a1\n 57742: a1 = s1 + 0x4138\n 57746: a3 = a1 + 0x600\n 57750: jump [t0]\n      : @1989 (gas: 15)\n 57752: a2 = a2 - a3\n 57755: a3 = a4 <u a5\n 57758: a2 = a2 - a3\n 57761: a4 = a4 - a5\n 57764: a0 = a0 - t2\n 57767: a0 = a0 - a1\n 57770: a1 = t1 - ra\n 57773: a0 = a0 | a2\n 57776: a2 = a1 | a4\n 57779: a2 = a2 | a0\n 57782: a0 = a0 | a4\n 57785: a2 = a2 >> 0x20\n 57788: a0 = a0 << 0x20\n 57791: a0 = a0 | a2\n 57794: jump [t0]\n      : @1990 (gas: 12)\n 57796: a3 = a3 << 0x3b\n 57799: a4 = a2 >> 0x5\n 57802: a4 = a4 | a3\n 57805: a0 = u64 [s1 + 0x1a8]\n 57809: t1 = u64 [a0 + 0x18]\n 57812: a2 = a2 << 0x3b\n 57815: a3 = u64 [a0 + 0x10]\n 57818: a1 = a1 >> 0x5\n 57821: a0 = a1 | a2\n 57824: t2 = reverse t1\n 57826: a2 = reverse a3\n 57828: jump [t0]\n      : @1991 (gas: 8)\n 57830: a0 = a0 | a3\n 57833: a3 = a1 | a2\n 57836: a3 = a3 | a0\n 57839: a3 = a3 >> 0x20\n 57842: a0 = a0 | a2\n 57845: a0 = a0 << 0x20\n 57848: a0 = a0 | a3\n 57851: jump [t0]\n      : @1992 (gas: 7)\n 57853: a0 = sp + 0xffffffffffffffe0\n 57856: a0 = a0 & 0xffffffffffffffe0\n 57859: u64 [s1 + 0x1b0] = a0\n 57863: sp = a0\n 57865: i32 a2 = a0 + 0\n 57867: a1 = 0x40\n 57870: jump [t0]\n      : @1993 (gas: 5)\n 57872: a0 = sp + 0xffffffffffffffe0\n 57875: a2 = a0 & 0xffffffffffffffe0\n 57878: u64 [s1 + 0x1b8] = a2\n 57882: sp = a2\n 57884: jump [t0]\n      : @1994 (gas: 6)\n 57886: a0 = a1 <u a0\n 57889: a2 = u64 [a3 + 0xb0]\n 57893: a0 = 0 if a2 != 0\n 57895: a2 = u64 [a3 + 0x98]\n 57899: a0 = 0 if a2 != 0\n 57901: jump [t0]\n      : @1995 (gas: 7)\n 57903: a3 = a3 | a5\n 57906: a3 = a1 if a2 == 0\n 57909: a1 = 0xffffffffffffffff\n 57912: a0 = a1 if a4 == 0\n 57915: a3 = a1 if a4 == 0\n 57918: a5 = 0 if a2 == 0\n 57920: jump [t0]\n      : @1996 (gas: 11)\n 57922: a3 = s1 + 0x100\n 57926: a0 = u64 [a3 + 0x48]\n 57929: a1 = u64 [a3 + 0x40]\n 57932: a0 = a0 | a1\n 57935: a1 = 0xffffffe0\n 57945: a2 = u64 [a3 + 0x38]\n 57948: a1 = a2 <u a1\n 57951: a2 = u64 [a3 + 0x50]\n 57954: a1 = 0 if a2 != 0\n 57956: a1 = 0 if a0 != 0\n 57958: jump [t0]\n      : @1997 (gas: 11)\n 57960: a2 = u64 [sp + 0x8]\n 57963: a2 = a2 | s1\n 57966: s1 = 0x100000000\n 57976: a0 = 0xfffffffc\n 57986: a1 = u64 [sp + 0x18]\n 57989: a0 = a1 <u a0\n 57992: a1 = u64 [sp + 0x10]\n 57995: a0 = 0 if a1 != 0\n 57997: u64 [sp + 0x8] = a2\n 58000: a0 = 0 if a2 != 0\n 58002: jump [t0]\n      : @1998 (gas: 7)\n 58004: a0 = sp + 0xffffffffffffffe0\n 58007: a0 = a0 & 0xffffffffffffffe0\n 58010: u64 [s1 + 0x190] = a0\n 58014: sp = a0\n 58016: a1 = 0x20\n 58019: a0 = 0\n 58021: jump [t0]\n      : @1999 (gas: 10)\n 58023: a3 = u64 [s1 + 0x1a8]\n 58027: a0 = u64 [a3]\n 58029: a1 = u64 [a3 + 0x8]\n 58032: a2 = u64 [a3 + 0x10]\n 58035: a3 = u64 [a3 + 0x18]\n 58038: a0 = reverse a0\n 58040: a1 = reverse a1\n 58042: a2 = reverse a2\n 58044: a3 = reverse a3\n 58046: jump [t0]\n      : @2000 (gas: 13)\n 58048: a5 = s1 + 0x100\n 58052: u64 [a5 + 0xb0] = a2\n 58056: u64 [a5 + 0xa8] = a3\n 58060: a0 = a2 | a3\n 58063: u64 [a5 + 0xb8] = a1\n 58067: a1 = a1 | a4\n 58070: a1 = a1 | a0\n 58073: a1 = a1 >> 0x20\n 58076: u64 [a5 + 0xa0] = a4\n 58080: a0 = a0 | a4\n 58083: a0 = a0 << 0x20\n 58086: a0 = a0 | a1\n 58089: jump [t0]\n      : @2001 (gas: 5)\n 58091: a0 = u64 [s1 + 0x1b8]\n 58095: i32 a0 = a0 + 0x24\n 58098: a1 = 0x1938\n 58102: a2 = s1 + a1\n 58105: jump [t0]\n      : @2002 (gas: 11)\n 58107: i32 a0 = a0 + 0x138\n 58111: a3 = s1 + a0\n 58114: a4 = a3 + 0x600\n 58118: a0 = u64 [a4 + 0xf8]\n 58122: a1 = u64 [a3 + 0x700]\n 58126: a2 = u64 [a4 + 0xf0]\n 58130: a3 = u64 [a4 + 0xe8]\n 58134: a1 = a1 | a2\n 58137: a0 = a0 | a3\n 58140: a0 = a0 | a1\n 58143: jump [t0]\n      : @2003 (gas: 10)\n 58145: a0 = u64 [sp + 0x10]\n 58148: a1 = u64 [sp + 0x18]\n 58151: a2 = 0x100000000\n 58161: a2 = a2 ^ a0\n 58164: a2 = a2 | a1\n 58167: a3 = a0 >> 0x20\n 58170: a3 = a3 <u 0x1\n 58173: a3 = 0 if a1 != 0\n 58175: a3 = 0 if a2 == 0\n 58177: jump [t0]\n      : @2004 (gas: 7)\n 58179: a1 = a0 | a3\n 58182: a1 = a1 | a2\n 58185: a1 = a1 >> 0x20\n 58188: a2 = a2 | a3\n 58191: a2 = a2 << 0x20\n 58194: a1 = a1 | a2\n 58197: jump [t0]\n      : @2005 (gas: 5)\n 58199: sp = a0\n 58201: i32 a2 = a0 + 0\n 58203: a1 = 0x40\n 58206: a0 = u64 [s1 + 0x188]\n 58210: jump [t0]\n      : @2006 (gas: 4)\n 58212: a2 = a0\n 58214: a0 = 0x4e487b7100000000\n 58224: a1 = 0x4000\n 58228: jump [t0]\n      : @2007 (gas: 10)\n 58230: a0 = a0 + 0x1\n 58233: a4 = a0 <u 0x1\n 58236: a2 = a2 + a4\n 58239: a4 = a0 | a2\n 58242: a4 = a4 <u 0x1\n 58245: a4 = a4 + a3\n 58248: a3 = a4 <u a3\n 58251: a1 = a1 + a3\n 58254: a3 = 0x5000\n 58258: jump [t0]\n      : @2008 (gas: 13)\n 58260: a4 = s1 + 0x100\n 58264: u64 [a4 + 0xb0] = a0\n 58268: u64 [a4 + 0xa8] = a2\n 58272: a0 = a0 | a2\n 58275: u64 [a4 + 0xb8] = a1\n 58279: a1 = a1 | a3\n 58282: a1 = a1 | a0\n 58285: a1 = a1 >> 0x20\n 58288: u64 [a4 + 0xa0] = a3\n 58292: a0 = a0 | a3\n 58295: a0 = a0 << 0x20\n 58298: a0 = a0 | a1\n 58301: jump [t0]\n      : @2009 (gas: 12)\n 58303: a4 = s1 + 0x100\n 58307: u64 [a4 + 0x50] = a0\n 58310: u64 [a4 + 0x48] = a2\n 58313: a0 = a0 | a2\n 58316: a2 = a1 | a3\n 58319: a2 = a2 | a0\n 58322: a2 = a2 >> 0x20\n 58325: u64 [a4 + 0x40] = a3\n 58328: a0 = a0 | a3\n 58331: a0 = a0 << 0x20\n 58334: a0 = a0 | a2\n 58337: jump [t0]\n      : @2010 (gas: 4)\n 58339: a2 = a3 + a1\n 58342: a3 = a2 <u a3\n 58345: a3 = a1 if a1 == 0\n 58348: jump [t0]\n      : @2011 (gas: 5)\n 58350: u64 [s1 + 0x1b8] = a1\n 58354: i32 a2 = 0x80 - a1\n 58358: a0 = 0xffffffffffffffff\n 58361: a1 = 0xffffffffffffffff\n 58364: jump [t0]\n      : @2012 (gas: 11)\n 58366: a4 = a4 + a1\n 58369: a1 = a4 <u a1\n 58372: a1 = a1 + a3\n 58375: a1 = a1 | a2\n 58378: a2 = a0 | a4\n 58381: a2 = a2 | a1\n 58384: a1 = a1 | a4\n 58387: a2 = a2 >> 0x20\n 58390: a1 = a1 << 0x20\n 58393: a1 = a1 | a2\n 58396: jump [t0]\n      : @2013 (gas: 6)\n 58398: a0 = s1 <u a0\n 58401: a1 = u64 [sp + 0x10]\n 58404: a0 = 0 if a1 != 0\n 58406: a1 = u64 [sp + 0x8]\n 58409: a0 = 0 if a1 != 0\n 58411: jump [t0]\n      : @2014 (gas: 6)\n 58413: u64 [s1 + 0x188] = a0\n 58417: u64 [s1 + 0x170] = a1\n 58421: a0 = 0xffffffffffffffff\n 58424: a1 = 0xffffffffffffffff\n 58427: a2 = u64 [s1 + 0x1b8]\n 58431: jump [t0]\n      : @2015 (gas: 4)\n 58433: i32 a0 = a0 + 0x138\n 58437: a1 = s1 + a0\n 58440: a2 = a1 + 0x100\n 58444: jump [t0]\n      : @2016 (gas: 5)\n 58446: u64 [s1 + 440] = 0\n 58450: u64 [s1 + 432] = 0\n 58454: u64 [s1 + 416] = 0\n 58458: u64 [s1 + 424] = 0\n 58462: jump [t0]\n      : @2017 (gas: 8)\n 58464: a4 = a4 | a2\n 58467: a2 = a0 | a1\n 58470: a2 = a2 | a4\n 58473: a2 = a2 >> 0x20\n 58476: a1 = a1 | a4\n 58479: a1 = a1 << 0x20\n 58482: a1 = a1 | a2\n 58485: jump [t0]\n      : @2018 (gas: 12)\n 58487: a2 = u64 [sp]\n 58489: a3 = u64 [sp + 0x8]\n 58492: u64 [s1] = a2\n 58494: u64 [s1 + 0x8] = a3\n 58497: u64 [s1 + 0x10] = a0\n 58500: u64 [s1 + 0x18] = a1\n 58503: sp = s0 + 0xffffffffffffffc0\n 58506: ra = u64 [sp + 0x38]\n 58509: s0 = u64 [sp + 0x30]\n 58512: s1 = u64 [sp + 0x28]\n 58515: sp = sp + 0x40\n 58518: jump [t0]\n      : @2019 (gas: 8)\n 58520: a0 = a0 | a2\n 58523: a2 = a4 | a1\n 58526: a2 = a2 | a0\n 58529: a2 = a2 >> 0x20\n 58532: a0 = a0 | a1\n 58535: a0 = a0 << 0x20\n 58538: a0 = a0 | a2\n 58541: jump [t0]\n      : @2020 (gas: 6)\n 58543: a1 = a0\n 58545: u64 [s1 + 0x1a8] = a0\n 58549: i32 a0 = a0 + 0\n 58551: u64 [s1 + 0x1b0] = a0\n 58555: a0 = u64 [s1 + 0x1b8]\n 58559: jump [t0]\n      : @2021 (gas: 8)\n 58561: u64 [sp + 64] = 0\n 58564: u64 [sp + 56] = 0\n 58567: u64 [sp + 48] = 0\n 58570: a0 = 0x4e487b7100000000\n 58580: a1 = sp + 0x30\n 58583: u64 [sp + 0x48] = a0\n 58586: a0 = 0\n 58588: jump [t0]\n      : @2022 (gas: 9)\n 58590: u64 [s1 + 0x1b0] = a1\n 58594: a3 = a1 | a4\n 58597: a1 = a0 | a5\n 58600: a1 = a1 | a3\n 58603: a1 = a1 >> 0x20\n 58606: a3 = a3 | a5\n 58609: a3 = a3 << 0x20\n 58612: a1 = a1 | a3\n 58615: jump [t0]\n      : @2023 (gas: 8)\n 58617: a0 = sp + 0xffffffffffffffe0\n 58620: a0 = a0 & 0xffffffffffffffe0\n 58623: u64 [s1 + 0x1b8] = a0\n 58627: sp = a0\n 58629: a0 = u64 [s1 + 0x190]\n 58633: a0 = i32 [a0]\n 58635: a1 = 0x3f\n 58638: jump [t0]\n      : @2024 (gas: 7)\n 58640: a0 = 0x20\n 58643: u64 [s1 + 0x1b8] = a0\n 58647: a5 = 0\n 58649: u64 [s1 + 432] = 0\n 58653: u64 [s1 + 424] = 0\n 58657: u64 [s1 + 408] = 0\n 58661: jump [t0]\n      : @2025 (gas: 8)\n 58663: a5 = u64 [s1 + 0xe8]\n 58667: a4 = a0 ^ a5\n 58670: a0 = a0 <u a5\n 58673: a5 = u64 [s1 + 0xe0]\n 58677: a2 = a2 <u a5\n 58680: a2 = a0 if a4 != 0\n 58683: a0 = u64 [s1 + 0xf0]\n 58687: jump [t0]\n      : @2026 (gas: 4)\n 58689: a0 = u64 [s1 + 0x1b8]\n 58693: a0 = i32 [a0]\n 58695: a1 = 0x23\n 58698: jump [t0]\n      : @2027 (gas: 8)\n 58700: a0 = a0 + s1\n 58703: u64 [a0 + 1856] = 0\n 58707: u64 [a0 + 1848] = 0\n 58711: u64 [a0 + 1840] = 0\n 58715: a2 = a0\n 58717: a0 = 0x20\n 58720: a1 = 0x3000\n 58724: jump [t0]\n      : @2028 (gas: 7)\n 58726: a4 = a2 + a0\n 58729: a4 = a4 + a3\n 58732: a3 = a4 ^ a2\n 58735: u64 [s1 + 0x190] = a4\n 58739: a2 = a4 <u a2\n 58742: a2 = a0 if a3 == 0\n 58745: jump [t0]\n      : @2029 (gas: 8)\n 58747: a0 = s1 + 0xffffffffffffffdc\n 58750: a1 = u64 [sp + 0x18]\n 58753: a0 = a1 <u a0\n 58756: a1 = u64 [sp + 0x10]\n 58759: a0 = 0 if a1 != 0\n 58761: a1 = u64 [sp + 0x8]\n 58764: a0 = 0 if a1 != 0\n 58766: jump [t0]\n      : @2030 (gas: 6)\n 58768: sp = s0 + 0xffffffffffffffa0\n 58771: ra = u64 [sp + 0x58]\n 58774: s0 = u64 [sp + 0x50]\n 58777: s1 = u64 [sp + 0x48]\n 58780: sp = sp + 0x60\n 58783: jump [t0]\n      : @2031 (gas: 7)\n 58785: a0 = sp + 0xffffffffffffffe0\n 58788: a0 = a0 & 0xffffffffffffffe0\n 58791: u64 [s1 + 0x1a8] = a0\n 58795: sp = a0\n 58797: i32 a2 = a0 + 0\n 58799: a1 = 0x20\n 58802: jump [t0]\n      : @2032 (gas: 4)\n 58804: a0 = 0x1138\n 58808: a1 = s1 + a0\n 58811: a2 = a1 + 0x300\n 58815: jump [t0]\n      : @2033 (gas: 4)\n 58817: i32 a0 = a0 + 0xfffffffffffff938\n 58821: a3 = s1 + a0\n 58824: a4 = a3 + 0x100\n 58828: jump [t0]\n      : @2034 (gas: 7)\n 58830: a0 = a0 + s1\n 58833: u64 [a0 + 736] = 0\n 58837: u64 [a0 + 728] = 0\n 58841: u64 [a0 + 720] = 0\n 58845: a2 = a0\n 58847: a0 = 0x20\n 58850: jump [t0]\n      : @2035 (gas: 7)\n 58852: a0 = a0 + s1\n 58855: u64 [a0 + 1280] = 0\n 58859: u64 [a0 + 1272] = 0\n 58863: u64 [a0 + 1264] = 0\n 58867: a2 = a0\n 58869: a0 = 0x20\n 58872: jump [t0]\n      : @2036 (gas: 8)\n 58874: a0 = a0 + a4\n 58877: a3 = a3 + a1\n 58880: a5 = a3 <u a1\n 58883: a0 = a0 + a5\n 58886: ra = u64 [s1 + 0x180]\n 58890: ra = ra + a3\n 58893: a3 = ra <u a3\n 58896: jump [t0]\n      : @2037 (gas: 8)\n 58898: a0 = u64 [a4 + 0x18]\n 58901: a1 = u64 [a4 + 0x20]\n 58904: a2 = u64 [a4 + 0x10]\n 58907: a3 = u64 [a4 + 0x8]\n 58910: a1 = a1 | a2\n 58913: a0 = a0 | a3\n 58916: a0 = a0 | a1\n 58919: jump [t0]\n      : @2038 (gas: 5)\n 58921: sp = a0\n 58923: i32 a2 = a0 + 0\n 58925: a1 = 0x40\n 58928: a0 = u64 [s1 + 0x190]\n 58932: jump [t0]\n      : @2039 (gas: 11)\n 58934: u64 [sp + 0x10] = a0\n 58937: u64 [sp + 0x8] = a2\n 58940: a0 = a0 | a2\n 58943: u64 [sp + 0x18] = a1\n 58946: a1 = a1 | s1\n 58949: a1 = a1 | a0\n 58952: a1 = a1 >> 0x20\n 58955: a0 = a0 | s1\n 58958: a0 = a0 << 0x20\n 58961: a0 = a0 | a1\n 58964: jump [t0]\n      : @2040 (gas: 4)\n 58966: i32 a1 = a1 + 0x138\n 58970: a2 = s1 + a1\n 58973: a3 = a2 + 0x500\n 58977: jump [t0]\n      : @2041 (gas: 2)\n 58979: a3 = a2 & 0x40\n 58982: jump @2045 if a3 != 0\n      : @2042 (gas: 1)\n 58985: jump @2044 if a2 == 0\n      : @2043 (gas: 6)\n 58988: i32 a3 = 0x40 - a2\n 58991: a3 = a1 << a3\n 58994: a1 = a1 >> a2\n 58997: a0 = a0 >> a2\n 59000: a0 = a0 | a3\n 59003: ret\n      : @2044 (gas: 1)\n 59005: ret\n      : @2045 (gas: 4)\n 59007: a0 = a2 + 0xffffffffffffffc0\n 59010: a0 = a1 >> a0\n 59013: a1 = 0\n 59015: ret\n      : @2046 (gas: 2)\n 59017: a3 = a2 & 0x40\n 59020: jump @2050 if a3 != 0\n      : @2047 (gas: 1)\n 59023: jump @2049 if a2 == 0\n      : @2048 (gas: 6)\n 59026: i32 a3 = 0x40 - a2\n 59029: a3 = a0 >> a3\n 59032: a0 = a0 << a2\n 59035: a1 = a1 << a2\n 59038: a1 = a1 | a3\n 59041: ret\n      : @2049 (gas: 1)\n 59043: ret\n      : @2050 (gas: 4)\n 59045: a1 = a2 + 0xffffffffffffffc0\n 59048: a1 = a0 << a1\n 59051: a0 = 0\n 59053: ret\n",
            "bytecode": {
              "object": ""
            },
            "deployedBytecode": {
              "object": ""
            },
            "methodIdentifiers": {
              "addExpenseItem(uint256,string,uint256,string)": "d1528534",
              "batchPayItems(uint256,uint256[],uint256)": "7faedbef",
              "createExpenseRequest(string,address)": "114fe745",
              "getAllExpenseItems(uint256)": "0551e19f",
              "getCreatorExpenses(address)": "be522186",
              "getExpenseCounter()": "1e4a21f6",
              "getExpenseItem(uint256,uint256)": "ceecd1a6",
              "getExpenseRequest(uint256)": "59104836",
              "getExpensesReadyForReview(address)": "c2cfc2d5",
              "getUnpaidTotal(uint256)": "f7eb2096",
              "iAppPublicKey()": "ea34ffb1",
              "owner()": "8da5cb5b",
              "setReadyForReview(uint256)": "6646179a",
              "stableCoin()": "992642e5",
              "updateIAppPublicKey(address)": "2039c070",
              "updateStableCoin(address)": "e0baeb29"
            }
          },
          "irOptimized": "/// @use-src 1:\"contracts/OnChainExpenses.sol\"\nobject \"OnChainExpenses_1891\" {\n    code {\n        {\n            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n            let _1 := memoryguard(0x80)\n            if callvalue() { revert(0, 0) }\n            let programSize := datasize(\"OnChainExpenses_1891\")\n            let argSize := sub(codesize(), programSize)\n            let newFreePtr := add(_1, and(add(argSize, 31), not(31)))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, _1))\n            {\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0x24)\n            }\n            mstore(64, newFreePtr)\n            codecopy(_1, programSize, argSize)\n            if slt(sub(add(_1, argSize), _1), 64)\n            {\n                revert(/** @src -1:-1:-1 */ 0, 0)\n            }\n            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n            let value0 := abi_decode_address_fromMemory(_1)\n            let value1 := abi_decode_address_fromMemory(add(_1, 32))\n            sstore(/** @src 1:1890:1908  \"owner = msg.sender\" */ 0x03, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ or(and(sload(/** @src 1:1890:1908  \"owner = msg.sender\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ not(sub(shl(160, 1), 1))), /** @src 1:1898:1908  \"msg.sender\" */ caller()))\n            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n            sstore(/** @src 1:1918:1948  \"iAppPublicKey = _iAppPublicKey\" */ 0x02, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ or(and(sload(/** @src 1:1918:1948  \"iAppPublicKey = _iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ not(sub(shl(160, 1), 1))), and(value0, sub(shl(160, 1), 1))))\n            sstore(/** @src 1:1958:1997  \"stableCoin = IERC20(_stableCoinAddress)\" */ 0x04, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ or(and(sload(/** @src 1:1958:1997  \"stableCoin = IERC20(_stableCoinAddress)\" */ 0x04), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ not(sub(shl(160, 1), 1))), and(/** @src 1:1971:1997  \"IERC20(_stableCoinAddress)\" */ value1, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n            sstore(/** @src 1:2007:2025  \"expenseCounter = 0\" */ 0x01, /** @src -1:-1:-1 */ 0)\n            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n            let _2 := mload(64)\n            let _3 := datasize(\"OnChainExpenses_1891_deployed\")\n            codecopy(_2, dataoffset(\"OnChainExpenses_1891_deployed\"), _3)\n            return(_2, _3)\n        }\n        function abi_decode_address_fromMemory(offset) -> value\n        {\n            value := mload(offset)\n            if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        }\n    }\n    /// @use-src 1:\"contracts/OnChainExpenses.sol\"\n    object \"OnChainExpenses_1891_deployed\" {\n        code {\n            {\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x0551e19f {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(4)\n                        mstore(0, value)\n                        mstore(32, 0)\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr := /** @src 1:2147:2188  \"msg.sender == expenses[expenseId].creator\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2161:2188  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1)))\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        if iszero(expr)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value)\n                            mstore(32, 0)\n                            /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                            expr := /** @src 1:2205:2244  \"msg.sender == expenses[expenseId].payer\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2219:2244  \"expenses[expenseId].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:2219:2244  \"expenses[expenseId].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2288  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_1 := expr\n                        if iszero(expr)\n                        {\n                            expr_1 := /** @src 1:2261:2288  \"msg.sender == iAppPublicKey\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2275:2288  \"iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2323  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_2 := expr_1\n                        if iszero(expr_1)\n                        {\n                            expr_2 := /** @src 1:2304:2323  \"msg.sender == owner\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2318:2323  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2126:2386  \"require(...\"\n                        require_helper_stringliteral(expr_2)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, value)\n                        mstore(32, 0)\n                        /// @src 1:8549:8581  \"expenses[expenseId].items.length\"\n                        let expr_3 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:8549:8574  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:8549:8574  \"expenses[expenseId].items\" */ 5))\n                        /// @src 1:8613:8636  \"new string[](itemCount)\"\n                        let expr_mpos := allocate_and_zero_memory_array_array_string_dyn(expr_3)\n                        /// @src 1:8656:8680  \"new uint256[](itemCount)\"\n                        let expr_mpos_1 := allocate_and_zero_memory_array_array_uint256_dyn(expr_3)\n                        /// @src 1:8703:8726  \"new string[](itemCount)\"\n                        let expr_mpos_2 := allocate_and_zero_memory_array_array_string_dyn(expr_3)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let _1 := array_allocation_size_array_uint256_dyn(expr_3)\n                        let memPtr := mload(64)\n                        finalize_allocation(memPtr, _1)\n                        mstore(memPtr, expr_3)\n                        let dataSize := array_allocation_size_array_uint256_dyn(expr_3)\n                        let dataStart := add(memPtr, 32)\n                        calldatacopy(dataStart, calldatasize(), add(dataSize, not(31)))\n                        /// @src 1:8793:8817  \"new uint256[](itemCount)\"\n                        let expr_mpos_3 := allocate_and_zero_memory_array_array_uint256_dyn(expr_3)\n                        /// @src 1:8841:8854  \"uint256 i = 0\"\n                        let var_i := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:8836:9163  \"for (uint256 i = 0; i < itemCount; i++) {...\"\n                        for { }\n                        /** @src 1:8856:8869  \"i < itemCount\" */ lt(var_i, expr_3)\n                        /// @src 1:8841:8854  \"uint256 i = 0\"\n                        {\n                            /// @src 1:8871:8874  \"i++\"\n                            var_i := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:8871:8874  \"i++\" */ var_i, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)\n                        }\n                        /// @src 1:8871:8874  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value)\n                            mstore(32, 0)\n                            /// @src 1:8917:8945  \"expenses[expenseId].items[i]\"\n                            let _2, _3 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:8917:8942  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:8549:8574  \"expenses[expenseId].items\" */ 5), /** @src 1:8917:8945  \"expenses[expenseId].items[i]\" */ var_i)\n                            /// @src 1:8959:8988  \"ipfsHashes[i] = item.ipfsHash\"\n                            mstore(memory_array_index_access_string_dyn(expr_mpos, var_i), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ copy_array_from_storage_to_memory_string(/** @src 1:8959:8988  \"ipfsHashes[i] = item.ipfsHash\" */ _2))\n                            pop(memory_array_index_access_string_dyn(expr_mpos, var_i))\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(/** @src 1:9002:9026  \"amounts[i] = item.amount\" */ memory_array_index_access_string_dyn(expr_mpos_1, var_i), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:9015:9026  \"item.amount\" */ add(_2, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)))\n                            /// @src 1:9040:9069  \"categories[i] = item.category\"\n                            mstore(memory_array_index_access_string_dyn(expr_mpos_2, var_i), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ copy_array_from_storage_to_memory_string(/** @src 1:9056:9069  \"item.category\" */ add(_2, 2)))\n                            /// @src 1:9040:9069  \"categories[i] = item.category\"\n                            pop(memory_array_index_access_string_dyn(expr_mpos_2, var_i))\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            let value_1 := and(sload(/** @src 1:9099:9108  \"item.paid\" */ add(_2, 3)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0xff)\n                            /// @src 1:9083:9108  \"paidStatus[i] = item.paid\"\n                            let _4 := memory_array_index_access_string_dyn(memPtr, var_i)\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(_4, iszero(iszero(value_1)))\n                            mstore(/** @src 1:9122:9152  \"timestamps[i] = item.timestamp\" */ memory_array_index_access_string_dyn(expr_mpos_3, var_i), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:9138:9152  \"item.timestamp\" */ add(_2, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4)))\n                        }\n                        let memPos := mload(64)\n                        mstore(memPos, 160)\n                        let tail := abi_encode_array_string_dyn(expr_mpos, add(memPos, 160))\n                        mstore(add(memPos, 32), sub(tail, memPos))\n                        let tail_1 := abi_encode_array_uint256_dyn(expr_mpos_1, tail)\n                        mstore(add(memPos, 64), sub(tail_1, memPos))\n                        let tail_2 := abi_encode_array_string_dyn(expr_mpos_2, tail_1)\n                        mstore(add(memPos, 96), sub(tail_2, memPos))\n                        let pos := tail_2\n                        let length := mload(memPtr)\n                        mstore(tail_2, length)\n                        pos := add(tail_2, 32)\n                        let srcPtr := dataStart\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(pos, iszero(iszero(mload(srcPtr))))\n                            pos := add(pos, 32)\n                            srcPtr := add(srcPtr, 32)\n                        }\n                        mstore(add(memPos, 128), sub(pos, memPos))\n                        return(memPos, sub(abi_encode_array_uint256_dyn(expr_mpos_3, pos), memPos))\n                    }\n                    case 0x114fe745 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let offset := calldataload(4)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        let value0 := abi_decode_string(add(4, offset), calldatasize())\n                        let value_2 := 0\n                        value_2 := calldataload(36)\n                        let _5 := and(value_2, sub(shl(160, 1), 1))\n                        if iszero(eq(value_2, _5)) { revert(0, 0) }\n                        let _6 := sload(/** @src 1:3096:3112  \"expenseCounter++\" */ 0x01)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        sstore(/** @src 1:3096:3112  \"expenseCounter++\" */ 0x01, increment_uint256(_6))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, _6)\n                        mstore(32, 0)\n                        let dataSlot := keccak256(0, 64)\n                        let newLen := mload(value0)\n                        if gt(newLen, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        let _7 := extract_byte_array_length(sload(dataSlot))\n                        if gt(_7, 31)\n                        {\n                            mstore(0, dataSlot)\n                            let data := keccak256(0, 32)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, 32) { deleteStart := data }\n                            let _8 := add(data, shr(5, add(_7, 31)))\n                            let start := deleteStart\n                            for { }\n                            lt(start, _8)\n                            {\n                                start := add(start, /** @src 1:3096:3112  \"expenseCounter++\" */ 0x01)\n                            }\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            { sstore(start, 0) }\n                        }\n                        let srcOffset := 0\n                        srcOffset := 32\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(0, dataSlot)\n                            let dstPtr := keccak256(0, srcOffset)\n                            let i_1 := 0\n                            for { } lt(i_1, loopEnd) { i_1 := add(i_1, 32) }\n                            {\n                                sstore(dstPtr, mload(add(value0, srcOffset)))\n                                dstPtr := add(dstPtr, /** @src 1:3096:3112  \"expenseCounter++\" */ 0x01)\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                srcOffset := add(srcOffset, 32)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(value0, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(dataSlot, add(shl(/** @src 1:3096:3112  \"expenseCounter++\" */ 0x01, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ newLen), /** @src 1:3096:3112  \"expenseCounter++\" */ 0x01))\n                        }\n                        default /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        {\n                            let value_3 := 0\n                            if newLen\n                            {\n                                value_3 := mload(add(value0, srcOffset))\n                            }\n                            sstore(dataSlot, or(and(value_3, not(shr(shl(3, newLen), not(0)))), shl(/** @src 1:3096:3112  \"expenseCounter++\" */ 0x01, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ newLen)))\n                        }\n                        /// @src 1:3231:3262  \"newExpense.creator = msg.sender\"\n                        let slot := /** @src 1:3231:3249  \"newExpense.creator\" */ add(dataSlot, /** @src 1:3096:3112  \"expenseCounter++\" */ 0x01)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        sstore(slot, or(and(sload(slot), shl(160, 0xffffffffffffffffffffffff)), and(/** @src 1:3252:3262  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 1:3272:3297  \"newExpense.payer = _payer\"\n                        let slot_1 := /** @src 1:3272:3288  \"newExpense.payer\" */ add(dataSlot, 2)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        sstore(slot_1, or(and(sload(slot_1), shl(160, 0xffffffffffffffffffffffff)), _5))\n                        sstore(/** @src 1:3307:3327  \"newExpense.timestamp\" */ add(dataSlot, 3), /** @src 1:3330:3345  \"block.timestamp\" */ timestamp())\n                        /// @src 1:3355:3379  \"newExpense.readyToReview\"\n                        let _9 := add(dataSlot, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4)\n                        sstore(_9, and(sload(_9), not(65535)))\n                        sstore(/** @src 1:3435:3461  \"newExpense.totalPaidAmount\" */ add(dataSlot, 6), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0)\n                        /// @src 1:3489:3542  \"ExpenseCreated(expenseId, msg.sender, _payer, _title)\"\n                        let _10 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        mstore(_10, 32)\n                        /// @src 1:3489:3542  \"ExpenseCreated(expenseId, msg.sender, _payer, _title)\"\n                        log4(_10, sub(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ abi_encode_string(value0, add(_10, 32)), /** @src 1:3489:3542  \"ExpenseCreated(expenseId, msg.sender, _payer, _title)\" */ _10), 0x81d85dd113f54588522518b915cb1ff3f44f2c5802ce17c796a1b01c005190c7, _6, /** @src 1:3252:3262  \"msg.sender\" */ caller(), /** @src 1:3489:3542  \"ExpenseCreated(expenseId, msg.sender, _payer, _title)\" */ _5)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, _6)\n                        return(memPos_1, 32)\n                    }\n                    case 0x1e4a21f6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let _11 := sload(/** @src 1:11683:11697  \"expenseCounter\" */ 0x01)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, _11)\n                        return(memPos_2, 32)\n                    }\n                    case 0x2039c070 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_1 := abi_decode_address()\n                        if iszero(/** @src 1:11274:11293  \"msg.sender == owner\" */ eq(/** @src 1:11274:11284  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:11288:11293  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_1 := mload(64)\n                            mstore(memPtr_1, shl(229, 4594637))\n                            mstore(add(memPtr_1, 4), 32)\n                            mstore(add(memPtr_1, 36), 37)\n                            mstore(add(memPtr_1, 68), \"Only owner can update iApp publi\")\n                            mstore(add(memPtr_1, 100), \"c key\")\n                            revert(memPtr_1, 132)\n                        }\n                        sstore(/** @src 1:11345:11378  \"iAppPublicKey = _newIAppPublicKey\" */ 0x02, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ or(and(sload(/** @src 1:11345:11378  \"iAppPublicKey = _newIAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(160, 0xffffffffffffffffffffffff)), and(value0_1, sub(shl(160, 1), 1))))\n                        return(0, 0)\n                    }\n                    case 0x59104836 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_4 := calldataload(4)\n                        mstore(0, value_4)\n                        mstore(32, 0)\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_4 := /** @src 1:2147:2188  \"msg.sender == expenses[expenseId].creator\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2161:2188  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1)))\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        if iszero(expr_4)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_4)\n                            mstore(32, 0)\n                            /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                            expr_4 := /** @src 1:2205:2244  \"msg.sender == expenses[expenseId].payer\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2219:2244  \"expenses[expenseId].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:2219:2244  \"expenses[expenseId].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2288  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_5 := expr_4\n                        if iszero(expr_4)\n                        {\n                            expr_5 := /** @src 1:2261:2288  \"msg.sender == iAppPublicKey\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2275:2288  \"iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2323  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_6 := expr_5\n                        if iszero(expr_5)\n                        {\n                            expr_6 := /** @src 1:2304:2323  \"msg.sender == owner\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2318:2323  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2126:2386  \"require(...\"\n                        require_helper_stringliteral(expr_6)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, value_4)\n                        mstore(32, 0)\n                        let dataSlot_1 := keccak256(0, 64)\n                        let cleaned := and(sload(/** @src 1:7307:7322  \"expense.creator\" */ add(dataSlot_1, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)), sub(shl(160, 1), 1))\n                        let cleaned_1 := and(sload(/** @src 1:7336:7349  \"expense.payer\" */ add(dataSlot_1, 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))\n                        let _12 := sload(/** @src 1:7363:7380  \"expense.timestamp\" */ add(dataSlot_1, 3))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let _13 := sload(/** @src 1:7394:7415  \"expense.readyToReview\" */ add(dataSlot_1, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4))\n                        let _14 := sload(/** @src 1:7460:7483  \"expense.totalPaidAmount\" */ add(dataSlot_1, 6))\n                        /// @src 1:7497:7517  \"expense.items.length\"\n                        let expr_7 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:7497:7510  \"expense.items\" */ add(dataSlot_1, 5))\n                        /// @src 1:7259:7527  \"return (...\"\n                        let var_title_mpos := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ copy_array_from_storage_to_memory_string(/** @src 1:7259:7527  \"return (...\" */ dataSlot_1)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, 256)\n                        let tail_3 := abi_encode_string(var_title_mpos, add(memPos_3, 256))\n                        mstore(add(memPos_3, 32), cleaned)\n                        mstore(add(memPos_3, 64), cleaned_1)\n                        mstore(add(memPos_3, 96), _12)\n                        mstore(add(memPos_3, 128), iszero(iszero(and(_13, 0xff))))\n                        mstore(add(memPos_3, 160), iszero(iszero(and(shr(8, _13), 0xff))))\n                        mstore(add(memPos_3, 192), _14)\n                        mstore(add(memPos_3, 224), expr_7)\n                        return(memPos_3, sub(tail_3, memPos_3))\n                    }\n                    case 0x6646179a {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_5 := calldataload(4)\n                        mstore(0, value_5)\n                        mstore(32, 0)\n                        if iszero(/** @src 1:2472:2513  \"msg.sender == expenses[expenseId].creator\" */ eq(/** @src 1:2472:2482  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2486:2513  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_2 := mload(64)\n                            mstore(memPtr_2, shl(229, 4594637))\n                            mstore(add(memPtr_2, 4), 32)\n                            mstore(add(memPtr_2, 36), 36)\n                            mstore(add(memPtr_2, 68), \"Only creator can perform this ac\")\n                            mstore(add(memPtr_2, 100), \"tion\")\n                            revert(memPtr_2, 132)\n                        }\n                        mstore(0, value_5)\n                        mstore(32, 0)\n                        /// @src 1:4410:4443  \"expenses[expenseId].readyToReview\"\n                        let _15 := add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 4)\n                        sstore(_15, or(and(sload(_15), not(255)), 1))\n                        /// @src 1:4465:4490  \"ReadyForReview(expenseId)\"\n                        log2(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0, 0, /** @src 1:4465:4490  \"ReadyForReview(expenseId)\" */ 0x9d4440e839d2b8c50ff7601cd5743385d0186a9eed027d34a004606f5cd31ad6, value_5)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        return(0, 0)\n                    }\n                    case 0x7faedbef {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 96) { revert(0, 0) }\n                        let value_6 := calldataload(4)\n                        let offset_1 := calldataload(36)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        if iszero(slt(add(offset_1, 35), calldatasize())) { revert(0, 0) }\n                        let length_1 := calldataload(add(4, offset_1))\n                        let _16 := array_allocation_size_array_uint256_dyn(length_1)\n                        let memPtr_3 := mload(64)\n                        finalize_allocation(memPtr_3, _16)\n                        let dst := memPtr_3\n                        mstore(memPtr_3, length_1)\n                        dst := add(memPtr_3, 32)\n                        let srcEnd := add(add(offset_1, shl(5, length_1)), 36)\n                        if gt(srcEnd, calldatasize()) { revert(0, 0) }\n                        let src := add(offset_1, 36)\n                        for { } lt(src, srcEnd) { src := add(src, 32) }\n                        {\n                            mstore(dst, calldataload(src))\n                            dst := add(dst, 32)\n                        }\n                        let value_7 := calldataload(68)\n                        mstore(0, value_6)\n                        mstore(32, 0)\n                        if iszero(/** @src 1:2638:2677  \"msg.sender == expenses[expenseId].payer\" */ eq(/** @src 1:2638:2648  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2652:2677  \"expenses[expenseId].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:2652:2677  \"expenses[expenseId].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_4 := mload(64)\n                            mstore(memPtr_4, shl(229, 4594637))\n                            mstore(add(memPtr_4, 4), 32)\n                            mstore(add(memPtr_4, 36), 34)\n                            mstore(add(memPtr_4, 68), \"Only payer can perform this acti\")\n                            mstore(add(memPtr_4, 100), \"on\")\n                            revert(memPtr_4, 132)\n                        }\n                        mstore(0, value_6)\n                        mstore(32, 0)\n                        if iszero(and(sload(/** @src 1:4735:4768  \"expenses[expenseId].readyToReview\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 4)), 0xff))\n                        {\n                            let memPtr_5 := mload(64)\n                            mstore(memPtr_5, shl(229, 4594637))\n                            mstore(add(memPtr_5, 4), 32)\n                            mstore(add(memPtr_5, 36), 28)\n                            mstore(add(memPtr_5, 68), \"Expense not ready for review\")\n                            revert(memPtr_5, 100)\n                        }\n                        if /** @src 1:4819:4837  \"itemIds.length > 0\" */ iszero(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:4819:4833  \"itemIds.length\" */ memPtr_3))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        {\n                            let memPtr_6 := mload(64)\n                            mstore(memPtr_6, shl(229, 4594637))\n                            mstore(add(memPtr_6, 4), 32)\n                            mstore(add(memPtr_6, 36), 17)\n                            mstore(add(memPtr_6, 68), \"No items selected\")\n                            revert(memPtr_6, 100)\n                        }\n                        /// @src 1:4878:4905  \"uint256 calculatedTotal = 0\"\n                        let var_calculatedTotal := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:4975:4988  \"uint256 i = 0\"\n                        let var_i_1 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:4970:5319  \"for (uint256 i = 0; i < itemIds.length; i++) {...\"\n                        for { }\n                        /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1\n                        /// @src 1:4975:4988  \"uint256 i = 0\"\n                        {\n                            /// @src 1:5010:5013  \"i++\"\n                            var_i_1 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:5010:5013  \"i++\" */ var_i_1, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)\n                        }\n                        /// @src 1:5010:5013  \"i++\"\n                        {\n                            /// @src 1:4990:5008  \"i < itemIds.length\"\n                            if iszero(lt(var_i_1, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:4994:5008  \"itemIds.length\" */ memPtr_3)))\n                            /// @src 1:4990:5008  \"i < itemIds.length\"\n                            { break }\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            let _17 := mload(/** @src 1:5046:5056  \"itemIds[i]\" */ memory_array_index_access_string_dyn(memPtr_3, var_i_1))\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:5070:5139  \"require(itemId < expenses[expenseId].items.length, \\\"Invalid item ID\\\")\"\n                            require_helper_stringliteral_1f36(/** @src 1:5078:5119  \"itemId < expenses[expenseId].items.length\" */ lt(_17, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:5087:5112  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5))))\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:5162:5195  \"expenses[expenseId].items[itemId]\"\n                            let _18, _19 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:5162:5187  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5), /** @src 1:5162:5195  \"expenses[expenseId].items[itemId]\" */ _17)\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            if iszero(/** @src 1:5161:5200  \"!expenses[expenseId].items[itemId].paid\" */ iszero(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:5162:5200  \"expenses[expenseId].items[itemId].paid\" */ add(_18, 3)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0xff)))\n                            {\n                                let memPtr_7 := mload(64)\n                                mstore(memPtr_7, shl(229, 4594637))\n                                mstore(add(memPtr_7, 4), 32)\n                                mstore(add(memPtr_7, 36), 17)\n                                mstore(add(memPtr_7, 68), \"Item already paid\")\n                                revert(memPtr_7, 100)\n                            }\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:5268:5301  \"expenses[expenseId].items[itemId]\"\n                            let _20, _21 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:5268:5293  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5), /** @src 1:5268:5301  \"expenses[expenseId].items[itemId]\" */ _17)\n                            /// @src 1:5249:5308  \"calculatedTotal += expenses[expenseId].items[itemId].amount\"\n                            var_calculatedTotal := checked_add_uint256(var_calculatedTotal, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:5268:5308  \"expenses[expenseId].items[itemId].amount\" */ add(_20, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)))\n                        }\n                        if iszero(/** @src 1:5403:5433  \"totalAmount == calculatedTotal\" */ eq(value_7, var_calculatedTotal))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        {\n                            let memPtr_8 := mload(64)\n                            mstore(memPtr_8, shl(229, 4594637))\n                            mstore(add(memPtr_8, 4), 32)\n                            mstore(add(memPtr_8, 36), 21)\n                            mstore(add(memPtr_8, 68), \"Total amount mismatch\")\n                            revert(memPtr_8, 100)\n                        }\n                        let cleaned_2 := and(sload(4), sub(shl(160, 1), 1))\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        let _22 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        mstore(_22, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(225, 0x6eb1769f))\n                        mstore(/** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ add(_22, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4), /** @src 1:2638:2648  \"msg.sender\" */ caller())\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(add(/** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ _22, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 36), /** @src 1:5579:5583  \"this\" */ address())\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        let _23 := staticcall(gas(), cleaned_2, _22, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 68, /** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ _22, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32)\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        if iszero(_23)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            let pos_1 := mload(64)\n                            returndatacopy(pos_1, 0, returndatasize())\n                            revert(pos_1, returndatasize())\n                        }\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        let expr_8 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                        if _23\n                        {\n                            let _24 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32\n                            /// @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\"\n                            if gt(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32, /** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ returndatasize()) { _24 := returndatasize() }\n                            finalize_allocation(_22, _24)\n                            let value0_2 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                            if slt(sub(/** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ add(_22, _24), _22), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32) { revert(0, 0) }\n                            value0_2 := mload(/** @src 1:5538:5585  \"stableCoin.allowance(msg.sender, address(this))\" */ _22)\n                            expr_8 := value0_2\n                        }\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        if /** @src 1:5538:5600  \"stableCoin.allowance(msg.sender, address(this)) >= totalAmount\" */ lt(expr_8, value_7)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        {\n                            let memPtr_9 := mload(64)\n                            mstore(memPtr_9, shl(229, 4594637))\n                            mstore(add(memPtr_9, 4), 32)\n                            mstore(add(memPtr_9, 36), 22)\n                            mstore(add(memPtr_9, 68), \"Insufficient allowance\")\n                            revert(memPtr_9, 100)\n                        }\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        let _25 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        mstore(_25, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(224, 0x70a08231))\n                        mstore(/** @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\" */ add(_25, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4), /** @src 1:2638:2648  \"msg.sender\" */ caller())\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        let _26 := staticcall(gas(), cleaned_2, _25, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 36, /** @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\" */ _25, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32)\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        if iszero(_26)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            let pos_2 := mload(64)\n                            returndatacopy(pos_2, 0, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        let expr_9 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                        if _26\n                        {\n                            let _27 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32\n                            /// @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\"\n                            if gt(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32, /** @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\" */ returndatasize()) { _27 := returndatasize() }\n                            finalize_allocation(_25, _27)\n                            let value0_3 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                            if slt(sub(/** @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\" */ add(_25, _27), _25), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32) { revert(0, 0) }\n                            value0_3 := mload(/** @src 1:5679:5711  \"stableCoin.balanceOf(msg.sender)\" */ _25)\n                            expr_9 := value0_3\n                        }\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        if /** @src 1:5679:5726  \"stableCoin.balanceOf(msg.sender) >= totalAmount\" */ lt(expr_9, value_7)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        {\n                            let memPtr_10 := mload(64)\n                            mstore(memPtr_10, shl(229, 4594637))\n                            mstore(add(memPtr_10, 4), 32)\n                            mstore(add(memPtr_10, 36), 20)\n                            mstore(add(memPtr_10, 68), \"Insufficient balance\")\n                            revert(memPtr_10, 100)\n                        }\n                        mstore(0, value_6)\n                        mstore(32, 0)\n                        let cleaned_3 := and(sload(/** @src 1:5897:5924  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1))\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        let _28 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        mstore(_28, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(224, 0x23b872dd))\n                        mstore(/** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ add(_28, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4), /** @src 1:2638:2648  \"msg.sender\" */ caller())\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(add(/** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ _28, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 36), cleaned_3)\n                        mstore(add(/** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ _28, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 68), value_7)\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        let _29 := call(gas(), cleaned_2, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0, /** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ _28, 100, _28, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32)\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        if iszero(_29)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, 0, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        let expr_10 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                        if _29\n                        {\n                            let _30 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32\n                            /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                            if gt(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32, /** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ returndatasize()) { _30 := returndatasize() }\n                            finalize_allocation(_28, _30)\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            if slt(sub(/** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ add(_28, _30), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ _28), 32) { revert(0, 0) }\n                            let value_8 := mload(_28)\n                            if iszero(eq(value_8, iszero(iszero(value_8)))) { revert(0, 0) }\n                            /// @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\"\n                            expr_10 := value_8\n                        }\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        if iszero(expr_10)\n                        {\n                            let memPtr_11 := mload(64)\n                            mstore(memPtr_11, shl(229, 4594637))\n                            mstore(add(memPtr_11, 4), 32)\n                            mstore(add(memPtr_11, 36), 15)\n                            mstore(add(memPtr_11, 68), \"Transfer failed\")\n                            revert(memPtr_11, /** @src 1:5861:5938  \"stableCoin.transferFrom(msg.sender, expenses[expenseId].creator, totalAmount)\" */ 100)\n                        }\n                        /// @src 1:6033:6046  \"uint256 i = 0\"\n                        let var_i_2 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:6028:6147  \"for (uint256 i = 0; i < itemIds.length; i++) {...\"\n                        for { }\n                        /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1\n                        /// @src 1:6033:6046  \"uint256 i = 0\"\n                        {\n                            /// @src 1:6068:6071  \"i++\"\n                            var_i_2 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:6068:6071  \"i++\" */ var_i_2, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)\n                        }\n                        /// @src 1:6068:6071  \"i++\"\n                        {\n                            /// @src 1:6048:6066  \"i < itemIds.length\"\n                            if iszero(lt(var_i_2, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:6052:6066  \"itemIds.length\" */ memPtr_3)))\n                            /// @src 1:6048:6066  \"i < itemIds.length\"\n                            { break }\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:6087:6112  \"expenses[expenseId].items\"\n                            let _31 := add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5)\n                            /// @src 1:6087:6124  \"expenses[expenseId].items[itemIds[i]]\"\n                            let _32, _33 := storage_array_index_access_struct_ExpenseItem__dyn(_31, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:6113:6123  \"itemIds[i]\" */ memory_array_index_access_string_dyn(memPtr_3, var_i_2)))\n                            /// @src 1:6087:6129  \"expenses[expenseId].items[itemIds[i]].paid\"\n                            let _34 := add(_32, /** @src 1:5162:5200  \"expenses[expenseId].items[itemId].paid\" */ 3)\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            sstore(_34, or(and(sload(_34), not(255)), 1))\n                        }\n                        mstore(0, value_6)\n                        mstore(32, 0)\n                        /// @src 1:6165:6200  \"expenses[expenseId].totalPaidAmount\"\n                        let _35 := add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:6165:6200  \"expenses[expenseId].totalPaidAmount\" */ 6)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        sstore(_35, /** @src 1:6165:6215  \"expenses[expenseId].totalPaidAmount += totalAmount\" */ checked_add_uint256(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:6165:6215  \"expenses[expenseId].totalPaidAmount += totalAmount\" */ _35), value_7))\n                        /// @src 1:6273:6297  \"bool allItemsPaid = true\"\n                        let var_allItemsPaid := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1\n                        /// @src 1:6312:6325  \"uint256 i = 0\"\n                        let var_i_3 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:6307:6510  \"for (uint256 i = 0; i < expenses[expenseId].items.length; i++) {...\"\n                        for { }\n                        /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1\n                        /// @src 1:6312:6325  \"uint256 i = 0\"\n                        {\n                            /// @src 1:6365:6368  \"i++\"\n                            var_i_3 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:6365:6368  \"i++\" */ var_i_3, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)\n                        }\n                        /// @src 1:6365:6368  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:6327:6363  \"i < expenses[expenseId].items.length\"\n                            if iszero(lt(var_i_3, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:6331:6356  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5))))\n                            /// @src 1:6327:6363  \"i < expenses[expenseId].items.length\"\n                            { break }\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:6389:6417  \"expenses[expenseId].items[i]\"\n                            let _36, _37 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:6389:6414  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 5), /** @src 1:6389:6417  \"expenses[expenseId].items[i]\" */ var_i_3)\n                            /// @src 1:6384:6500  \"if (!expenses[expenseId].items[i].paid) {...\"\n                            if /** @src 1:6388:6422  \"!expenses[expenseId].items[i].paid\" */ iszero(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:6389:6422  \"expenses[expenseId].items[i].paid\" */ add(_36, /** @src 1:5162:5200  \"expenses[expenseId].items[itemId].paid\" */ 3)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0xff))\n                            /// @src 1:6384:6500  \"if (!expenses[expenseId].items[i].paid) {...\"\n                            {\n                                /// @src 1:6442:6462  \"allItemsPaid = false\"\n                                var_allItemsPaid := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                                /// @src 1:6480:6485  \"break\"\n                                break\n                            }\n                        }\n                        /// @src 1:6528:6607  \"if (allItemsPaid) {...\"\n                        if var_allItemsPaid\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_6)\n                            mstore(32, 0)\n                            /// @src 1:6560:6589  \"expenses[expenseId].fullyPaid\"\n                            let _38 := add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 4)\n                            sstore(_38, or(and(sload(_38), not(65280)), 256))\n                        }\n                        /// @src 1:6630:6677  \"ItemsPaidBatch(expenseId, itemIds, totalAmount)\"\n                        let _39 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        mstore(_39, 64)\n                        let tail_4 := abi_encode_array_uint256_dyn(memPtr_3, add(_39, 64))\n                        mstore(add(_39, 32), value_7)\n                        /// @src 1:6630:6677  \"ItemsPaidBatch(expenseId, itemIds, totalAmount)\"\n                        log2(_39, sub(tail_4, _39), 0x9b593c6508854bfce8a23310c01c7eca2ee5e37aa9b6c957cc614a1634a2b168, value_6)\n                        /// @src 1:6692:6732  \"PaymentCompleted(expenseId, totalAmount)\"\n                        let _40 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        mstore(_40, value_7)\n                        /// @src 1:6692:6732  \"PaymentCompleted(expenseId, totalAmount)\"\n                        log2(_40, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32, /** @src 1:6692:6732  \"PaymentCompleted(expenseId, totalAmount)\" */ 0x804fbdce9b2b430341d671cd679f22ccb903e9db545bedbbc7da4e6230e2bdb9, value_6)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        return(0, 0)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_9 := and(sload(/** @src 1:1258:1278  \"address public owner\" */ 3), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))\n                        let memPos_4 := mload(64)\n                        mstore(memPos_4, value_9)\n                        return(memPos_4, 32)\n                    }\n                    case 0x992642e5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_10 := and(sload(4), sub(shl(160, 1), 1))\n                        let memPos_5 := mload(64)\n                        mstore(memPos_5, value_10)\n                        return(memPos_5, 32)\n                    }\n                    case 0xbe522186 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        let _41 := sload(/** @src 1:10174:10188  \"expenseCounter\" */ 0x01)\n                        /// @src 1:10160:10189  \"new uint256[](expenseCounter)\"\n                        let expr_mpos_4 := allocate_and_zero_memory_array_array_uint256_dyn(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ _41)\n                        /// @src 1:10199:10216  \"uint256 count = 0\"\n                        let var_count := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:10240:10253  \"uint256 i = 0\"\n                        let var_i_4 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        let _42 := and(/** @src 1:10298:10328  \"expenses[i].creator == creator\" */ value0_4, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:10235:10424  \"for (uint256 i = 0; i < expenseCounter; i++) {...\"\n                        for { }\n                        /** @src 1:10255:10273  \"i < expenseCounter\" */ lt(var_i_4, _41)\n                        /// @src 1:10240:10253  \"uint256 i = 0\"\n                        {\n                            /// @src 1:10275:10278  \"i++\"\n                            var_i_4 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:10275:10278  \"i++\" */ var_i_4, /** @src 1:10174:10188  \"expenseCounter\" */ 0x01)\n                        }\n                        /// @src 1:10275:10278  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, var_i_4)\n                            mstore(32, 0)\n                            /// @src 1:10294:10414  \"if (expenses[i].creator == creator) {...\"\n                            if /** @src 1:10298:10328  \"expenses[i].creator == creator\" */ eq(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:10298:10317  \"expenses[i].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:10174:10188  \"expenseCounter\" */ 0x01)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)), _42)\n                            /// @src 1:10294:10414  \"if (expenses[i].creator == creator) {...\"\n                            {\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                mstore(/** @src 1:10348:10374  \"creatorExpenses[count] = i\" */ memory_array_index_access_string_dyn(expr_mpos_4, var_count), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ var_i_4)\n                                /// @src 1:10392:10399  \"count++\"\n                                var_count := increment_uint256(var_count)\n                            }\n                        }\n                        /// @src 1:10508:10528  \"new uint256[](count)\"\n                        let expr_mpos_5 := allocate_and_zero_memory_array_array_uint256_dyn(var_count)\n                        /// @src 1:10543:10556  \"uint256 i = 0\"\n                        let var_i_5 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:10538:10629  \"for (uint256 i = 0; i < count; i++) {...\"\n                        for { }\n                        /** @src 1:10558:10567  \"i < count\" */ lt(var_i_5, var_count)\n                        /// @src 1:10543:10556  \"uint256 i = 0\"\n                        {\n                            /// @src 1:10569:10572  \"i++\"\n                            var_i_5 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:10569:10572  \"i++\" */ var_i_5, /** @src 1:10174:10188  \"expenseCounter\" */ 0x01)\n                        }\n                        /// @src 1:10569:10572  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(/** @src 1:10588:10618  \"result[i] = creatorExpenses[i]\" */ memory_array_index_access_string_dyn(expr_mpos_5, var_i_5), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:10600:10618  \"creatorExpenses[i]\" */ memory_array_index_access_string_dyn(expr_mpos_4, var_i_5)))\n                        }\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, 32)\n                        return(memPos_6, sub(abi_encode_array_uint256_dyn(expr_mpos_5, add(memPos_6, 32)), memPos_6))\n                    }\n                    case 0xc2cfc2d5 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_5 := abi_decode_address()\n                        let _43 := sload(/** @src 1:9417:9431  \"expenseCounter\" */ 0x01)\n                        /// @src 1:9403:9432  \"new uint256[](expenseCounter)\"\n                        let expr_mpos_6 := allocate_and_zero_memory_array_array_uint256_dyn(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ _43)\n                        /// @src 1:9442:9459  \"uint256 count = 0\"\n                        let var_count_1 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:9483:9496  \"uint256 i = 0\"\n                        let var_i_6 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        let _44 := and(/** @src 1:9541:9567  \"expenses[i].payer == payer\" */ value0_5, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))\n                        /// @src 1:9478:9716  \"for (uint256 i = 0; i < expenseCounter; i++) {...\"\n                        for { }\n                        /** @src 1:9498:9516  \"i < expenseCounter\" */ lt(var_i_6, _43)\n                        /// @src 1:9483:9496  \"uint256 i = 0\"\n                        {\n                            /// @src 1:9518:9521  \"i++\"\n                            var_i_6 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:9518:9521  \"i++\" */ var_i_6, /** @src 1:9417:9431  \"expenseCounter\" */ 0x01)\n                        }\n                        /// @src 1:9518:9521  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, var_i_6)\n                            mstore(32, 0)\n                            /// @src 1:9541:9596  \"expenses[i].payer == payer && expenses[i].readyToReview\"\n                            let expr_11 := /** @src 1:9541:9567  \"expenses[i].payer == payer\" */ eq(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:9541:9558  \"expenses[i].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:9541:9558  \"expenses[i].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)), _44)\n                            /// @src 1:9541:9596  \"expenses[i].payer == payer && expenses[i].readyToReview\"\n                            if expr_11\n                            {\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                mstore(0, var_i_6)\n                                mstore(32, 0)\n                                /// @src 1:9541:9596  \"expenses[i].payer == payer && expenses[i].readyToReview\"\n                                expr_11 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:9571:9596  \"expenses[i].readyToReview\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 4)), 0xff)\n                            }\n                            /// @src 1:9541:9622  \"expenses[i].payer == payer && expenses[i].readyToReview && !expenses[i].fullyPaid\"\n                            let expr_12 := expr_11\n                            if expr_11\n                            {\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                mstore(0, var_i_6)\n                                mstore(32, 0)\n                                /// @src 1:9541:9622  \"expenses[i].payer == payer && expenses[i].readyToReview && !expenses[i].fullyPaid\"\n                                expr_12 := /** @src 1:9600:9622  \"!expenses[i].fullyPaid\" */ iszero(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(shr(8, sload(/** @src 1:9601:9622  \"expenses[i].fullyPaid\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 4))), 0xff))\n                            }\n                            /// @src 1:9537:9706  \"if (expenses[i].payer == payer && expenses[i].readyToReview && !expenses[i].fullyPaid) {...\"\n                            if expr_12\n                            {\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                mstore(/** @src 1:9642:9666  \"readyExpenses[count] = i\" */ memory_array_index_access_string_dyn(expr_mpos_6, var_count_1), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ var_i_6)\n                                /// @src 1:9684:9691  \"count++\"\n                                var_count_1 := increment_uint256(var_count_1)\n                            }\n                        }\n                        /// @src 1:9800:9820  \"new uint256[](count)\"\n                        let expr_mpos_7 := allocate_and_zero_memory_array_array_uint256_dyn(var_count_1)\n                        /// @src 1:9835:9848  \"uint256 i = 0\"\n                        let var_i_7 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:9830:9919  \"for (uint256 i = 0; i < count; i++) {...\"\n                        for { }\n                        /** @src 1:9850:9859  \"i < count\" */ lt(var_i_7, var_count_1)\n                        /// @src 1:9835:9848  \"uint256 i = 0\"\n                        {\n                            /// @src 1:9861:9864  \"i++\"\n                            var_i_7 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:9861:9864  \"i++\" */ var_i_7, /** @src 1:9417:9431  \"expenseCounter\" */ 0x01)\n                        }\n                        /// @src 1:9861:9864  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(/** @src 1:9880:9908  \"result[i] = readyExpenses[i]\" */ memory_array_index_access_string_dyn(expr_mpos_7, var_i_7), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(/** @src 1:9892:9908  \"readyExpenses[i]\" */ memory_array_index_access_string_dyn(expr_mpos_6, var_i_7)))\n                        }\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_7 := mload(64)\n                        mstore(memPos_7, 32)\n                        return(memPos_7, sub(abi_encode_array_uint256_dyn(expr_mpos_7, add(memPos_7, 32)), memPos_7))\n                    }\n                    case 0xceecd1a6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value_11 := calldataload(4)\n                        let value_12 := calldataload(36)\n                        mstore(0, value_11)\n                        mstore(32, 0)\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_13 := /** @src 1:2147:2188  \"msg.sender == expenses[expenseId].creator\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2161:2188  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1)))\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        if iszero(expr_13)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_11)\n                            mstore(32, 0)\n                            /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                            expr_13 := /** @src 1:2205:2244  \"msg.sender == expenses[expenseId].payer\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2219:2244  \"expenses[expenseId].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:2219:2244  \"expenses[expenseId].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2288  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_14 := expr_13\n                        if iszero(expr_13)\n                        {\n                            expr_14 := /** @src 1:2261:2288  \"msg.sender == iAppPublicKey\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2275:2288  \"iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2323  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_15 := expr_14\n                        if iszero(expr_14)\n                        {\n                            expr_15 := /** @src 1:2304:2323  \"msg.sender == owner\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2318:2323  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2126:2386  \"require(...\"\n                        require_helper_stringliteral(expr_15)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, value_11)\n                        mstore(32, 0)\n                        /// @src 1:7867:7936  \"require(itemId < expenses[expenseId].items.length, \\\"Invalid item ID\\\")\"\n                        require_helper_stringliteral_1f36(/** @src 1:7875:7916  \"itemId < expenses[expenseId].items.length\" */ lt(value_12, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:7884:7909  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:7884:7909  \"expenses[expenseId].items\" */ 5))))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, value_11)\n                        mstore(32, 0)\n                        /// @src 1:7973:8006  \"expenses[expenseId].items[itemId]\"\n                        let _45, _46 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:7973:7998  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:7884:7909  \"expenses[expenseId].items\" */ 5), /** @src 1:7973:8006  \"expenses[expenseId].items[itemId]\" */ value_12)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let _47 := sload(/** @src 1:8039:8050  \"item.amount\" */ add(_45, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1))\n                        let value_13 := and(sload(/** @src 1:8067:8076  \"item.paid\" */ add(_45, 3)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0xff)\n                        let _48 := sload(/** @src 1:8078:8092  \"item.timestamp\" */ add(_45, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 4))\n                        /// @src 1:8016:8093  \"return (item.ipfsHash, item.amount, item.category, item.paid, item.timestamp)\"\n                        let var_ipfsHash_mpos := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ copy_array_from_storage_to_memory_string(/** @src 1:8016:8093  \"return (item.ipfsHash, item.amount, item.category, item.paid, item.timestamp)\" */ _45)\n                        let var_category_mpos := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ copy_array_from_storage_to_memory_string(/** @src 1:8052:8065  \"item.category\" */ add(_45, 2))\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let memPos_8 := mload(64)\n                        mstore(memPos_8, 160)\n                        let tail_5 := abi_encode_string(var_ipfsHash_mpos, add(memPos_8, 160))\n                        mstore(add(memPos_8, 32), _47)\n                        mstore(add(memPos_8, 64), sub(tail_5, memPos_8))\n                        let tail_6 := abi_encode_string(var_category_mpos, tail_5)\n                        mstore(add(memPos_8, 96), iszero(iszero(value_13)))\n                        mstore(add(memPos_8, 128), _48)\n                        return(memPos_8, sub(tail_6, memPos_8))\n                    }\n                    case 0xd1528534 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 128) { revert(0, 0) }\n                        let value_14 := calldataload(4)\n                        let offset_2 := calldataload(36)\n                        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                        let value1 := abi_decode_string(add(4, offset_2), calldatasize())\n                        let value_15 := calldataload(68)\n                        let offset_3 := calldataload(100)\n                        if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                        let value3 := abi_decode_string(add(4, offset_3), calldatasize())\n                        if iszero(/** @src 1:2782:2809  \"msg.sender == iAppPublicKey\" */ eq(/** @src 1:2782:2792  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2796:2809  \"iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_12 := mload(64)\n                            mstore(memPtr_12, shl(229, 4594637))\n                            mstore(add(memPtr_12, 4), 32)\n                            mstore(add(memPtr_12, 36), 33)\n                            mstore(add(memPtr_12, 68), \"Only iApp can perform this actio\")\n                            mstore(add(memPtr_12, 100), \"n\")\n                            revert(memPtr_12, 132)\n                        }\n                        if iszero(/** @src 1:3846:3872  \"expenseId < expenseCounter\" */ lt(value_14, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(1)))\n                        {\n                            let memPtr_13 := mload(64)\n                            mstore(memPtr_13, shl(229, 4594637))\n                            mstore(add(memPtr_13, 4), 32)\n                            mstore(add(memPtr_13, 36), 18)\n                            mstore(add(memPtr_13, 68), \"Invalid expense ID\")\n                            revert(memPtr_13, 100)\n                        }\n                        let memPtr_14 := mload(64)\n                        let newFreePtr := add(memPtr_14, 160)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_14))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        mstore(64, newFreePtr)\n                        mstore(memPtr_14, value1)\n                        /// @src 1:3943:4126  \"ExpenseItem({...\"\n                        let _49 := add(memPtr_14, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 32)\n                        mstore(_49, value_15)\n                        /// @src 1:3943:4126  \"ExpenseItem({...\"\n                        let _50 := add(memPtr_14, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 64)\n                        mstore(_50, value3)\n                        /// @src 1:3943:4126  \"ExpenseItem({...\"\n                        let _51 := add(memPtr_14, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 96)\n                        mstore(_51, 0)\n                        /// @src 1:3943:4126  \"ExpenseItem({...\"\n                        let _52 := add(memPtr_14, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 128)\n                        mstore(_52, /** @src 1:4100:4115  \"block.timestamp\" */ timestamp())\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        mstore(0, value_14)\n                        mstore(32, 0)\n                        /// @src 1:4145:4170  \"expenses[expenseId].items\"\n                        let _53 := add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:4145:4170  \"expenses[expenseId].items\" */ 5)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let oldLen := sload(_53)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        sstore(_53, add(oldLen, 1))\n                        let slot_2, offset_4 := storage_array_index_access_struct_ExpenseItem__dyn(_53, oldLen)\n                        if offset_4\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0)\n                            revert(0, 36)\n                        }\n                        let _54 := mload(memPtr_14)\n                        let newLen_1 := mload(_54)\n                        if gt(newLen_1, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        let _55 := extract_byte_array_length(sload(slot_2))\n                        if gt(_55, 31)\n                        {\n                            mstore(0, slot_2)\n                            let data_1 := keccak256(0, 32)\n                            let deleteStart_1 := add(data_1, shr(/** @src 1:4145:4170  \"expenses[expenseId].items\" */ 5, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(newLen_1, 31)))\n                            if lt(newLen_1, 32) { deleteStart_1 := data_1 }\n                            let _56 := add(data_1, shr(/** @src 1:4145:4170  \"expenses[expenseId].items\" */ 5, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(_55, 31)))\n                            let start_1 := deleteStart_1\n                            for { } lt(start_1, _56) { start_1 := add(start_1, 1) }\n                            { sstore(start_1, 0) }\n                        }\n                        let srcOffset_1 := 0\n                        srcOffset_1 := 32\n                        switch gt(newLen_1, 31)\n                        case 1 {\n                            let loopEnd_1 := and(newLen_1, not(31))\n                            mstore(0, slot_2)\n                            let dstPtr_1 := keccak256(0, srcOffset_1)\n                            let i_2 := 0\n                            for { } lt(i_2, loopEnd_1) { i_2 := add(i_2, 32) }\n                            {\n                                sstore(dstPtr_1, mload(add(_54, srcOffset_1)))\n                                dstPtr_1 := add(dstPtr_1, 1)\n                                srcOffset_1 := add(srcOffset_1, 32)\n                            }\n                            if lt(loopEnd_1, newLen_1)\n                            {\n                                let lastValue_1 := mload(add(_54, srcOffset_1))\n                                sstore(dstPtr_1, and(lastValue_1, not(shr(and(shl(3, newLen_1), 248), not(0)))))\n                            }\n                            sstore(slot_2, add(shl(1, newLen_1), 1))\n                        }\n                        default {\n                            let value_16 := 0\n                            if newLen_1\n                            {\n                                value_16 := mload(add(_54, srcOffset_1))\n                            }\n                            sstore(slot_2, or(and(value_16, not(shr(shl(3, newLen_1), not(0)))), shl(1, newLen_1)))\n                        }\n                        sstore(add(slot_2, 1), mload(_49))\n                        let memberSlot := add(slot_2, /** @src 1:2796:2809  \"iAppPublicKey\" */ 0x02)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        let _57 := mload(_50)\n                        let newLen_2 := mload(_57)\n                        if gt(newLen_2, 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 36)\n                        }\n                        let _58 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_58, 31)\n                        {\n                            mstore(0, memberSlot)\n                            let data_2 := keccak256(0, 32)\n                            let deleteStart_2 := add(data_2, shr(/** @src 1:4145:4170  \"expenses[expenseId].items\" */ 5, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(newLen_2, 31)))\n                            if lt(newLen_2, 32) { deleteStart_2 := data_2 }\n                            let _59 := add(data_2, shr(/** @src 1:4145:4170  \"expenses[expenseId].items\" */ 5, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(_58, 31)))\n                            let start_2 := deleteStart_2\n                            for { } lt(start_2, _59) { start_2 := add(start_2, 1) }\n                            { sstore(start_2, 0) }\n                        }\n                        let srcOffset_2 := 0\n                        srcOffset_2 := 32\n                        switch gt(newLen_2, 31)\n                        case 1 {\n                            let loopEnd_2 := and(newLen_2, not(31))\n                            mstore(0, memberSlot)\n                            let dstPtr_2 := keccak256(0, srcOffset_2)\n                            let i_3 := 0\n                            for { } lt(i_3, loopEnd_2) { i_3 := add(i_3, 32) }\n                            {\n                                sstore(dstPtr_2, mload(add(_57, srcOffset_2)))\n                                dstPtr_2 := add(dstPtr_2, 1)\n                                srcOffset_2 := add(srcOffset_2, 32)\n                            }\n                            if lt(loopEnd_2, newLen_2)\n                            {\n                                let lastValue_2 := mload(add(_57, srcOffset_2))\n                                sstore(dstPtr_2, and(lastValue_2, not(shr(and(shl(3, newLen_2), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(1, newLen_2), 1))\n                        }\n                        default {\n                            let value_17 := 0\n                            if newLen_2\n                            {\n                                value_17 := mload(add(_57, srcOffset_2))\n                            }\n                            sstore(memberSlot, or(and(value_17, not(shr(shl(3, newLen_2), not(0)))), shl(1, newLen_2)))\n                        }\n                        let memberSlot_1 := add(slot_2, 3)\n                        let cleaned_4 := iszero(iszero(mload(_51)))\n                        let value_18 := and(sload(memberSlot_1), not(255))\n                        sstore(memberSlot_1, or(value_18, and(cleaned_4, 255)))\n                        sstore(add(slot_2, 4), mload(_52))\n                        /// @src 1:4199:4250  \"ItemAdded(expenseId, _ipfsHash, _amount, _category)\"\n                        let _60 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ mload(64)\n                        mstore(_60, 96)\n                        let tail_7 := abi_encode_string(value1, add(_60, 96))\n                        mstore(add(_60, 32), value_15)\n                        mstore(add(_60, 64), sub(tail_7, _60))\n                        /// @src 1:4199:4250  \"ItemAdded(expenseId, _ipfsHash, _amount, _category)\"\n                        log2(_60, sub(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ abi_encode_string(value3, tail_7), /** @src 1:4199:4250  \"ItemAdded(expenseId, _ipfsHash, _amount, _category)\" */ _60), 0xbc18b01a751588b7c9834ad436ed469cee2267c2bc4c407ba474b477e21666f6, value_14)\n                        /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                        return(0, 0)\n                    }\n                    case 0xe0baeb29 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_6 := abi_decode_address()\n                        if iszero(/** @src 1:11479:11498  \"msg.sender == owner\" */ eq(/** @src 1:11479:11489  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:11493:11498  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        {\n                            let memPtr_15 := mload(64)\n                            mstore(memPtr_15, shl(229, 4594637))\n                            mstore(add(memPtr_15, 4), 32)\n                            mstore(add(memPtr_15, 36), 33)\n                            mstore(add(memPtr_15, 68), \"Only owner can update stable coi\")\n                            mstore(add(memPtr_15, 100), \"n\")\n                            revert(memPtr_15, 132)\n                        }\n                        sstore(4, or(and(sload(4), shl(160, 0xffffffffffffffffffffffff)), and(/** @src 1:11559:11588  \"IERC20(_newStableCoinAddress)\" */ value0_6, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))))\n                        return(0, 0)\n                    }\n                    case 0xea34ffb1 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let value_19 := and(sload(/** @src 1:1224:1252  \"address public iAppPublicKey\" */ 2), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1))\n                        let memPos_9 := mload(64)\n                        mstore(memPos_9, value_19)\n                        return(memPos_9, 32)\n                    }\n                    case 0xf7eb2096 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value_20 := calldataload(4)\n                        mstore(0, value_20)\n                        mstore(32, 0)\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_16 := /** @src 1:2147:2188  \"msg.sender == expenses[expenseId].creator\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2161:2188  \"expenses[expenseId].creator\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), 1)), sub(shl(160, 1), 1)))\n                        /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                        if iszero(expr_16)\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_20)\n                            mstore(32, 0)\n                            /// @src 1:2147:2244  \"msg.sender == expenses[expenseId].creator || ...\"\n                            expr_16 := /** @src 1:2205:2244  \"msg.sender == expenses[expenseId].payer\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2219:2244  \"expenses[expenseId].payer\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:2219:2244  \"expenses[expenseId].payer\" */ 2)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2288  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_17 := expr_16\n                        if iszero(expr_16)\n                        {\n                            expr_17 := /** @src 1:2261:2288  \"msg.sender == iAppPublicKey\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2275:2288  \"iAppPublicKey\" */ 0x02), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2147:2323  \"msg.sender == expenses[expenseId].creator || ...\"\n                        let expr_18 := expr_17\n                        if iszero(expr_17)\n                        {\n                            expr_18 := /** @src 1:2304:2323  \"msg.sender == owner\" */ eq(/** @src 1:2147:2157  \"msg.sender\" */ caller(), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:2318:2323  \"owner\" */ 0x03), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sub(shl(160, 1), 1)))\n                        }\n                        /// @src 1:2126:2386  \"require(...\"\n                        require_helper_stringliteral(expr_18)\n                        /// @src 1:10881:10904  \"uint256 unpaidTotal = 0\"\n                        let var_unpaidTotal := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:10919:10932  \"uint256 i = 0\"\n                        let var_i_8 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0\n                        /// @src 1:10914:11124  \"for (uint256 i = 0; i < expenses[expenseId].items.length; i++) {...\"\n                        for { }\n                        /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1\n                        /// @src 1:10919:10932  \"uint256 i = 0\"\n                        {\n                            /// @src 1:10972:10975  \"i++\"\n                            var_i_8 := /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ add(/** @src 1:10972:10975  \"i++\" */ var_i_8, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)\n                        }\n                        /// @src 1:10972:10975  \"i++\"\n                        {\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_20)\n                            mstore(32, 0)\n                            /// @src 1:10934:10970  \"i < expenses[expenseId].items.length\"\n                            if iszero(lt(var_i_8, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:10938:10963  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:10938:10963  \"expenses[expenseId].items\" */ 5))))\n                            /// @src 1:10934:10970  \"i < expenses[expenseId].items.length\"\n                            { break }\n                            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                            mstore(0, value_20)\n                            mstore(32, 0)\n                            /// @src 1:10996:11024  \"expenses[expenseId].items[i]\"\n                            let _61, _62 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:10996:11021  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:10938:10963  \"expenses[expenseId].items\" */ 5), /** @src 1:10996:11024  \"expenses[expenseId].items[i]\" */ var_i_8)\n                            /// @src 1:10991:11114  \"if (!expenses[expenseId].items[i].paid) {...\"\n                            if /** @src 1:10995:11029  \"!expenses[expenseId].items[i].paid\" */ iszero(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ and(sload(/** @src 1:10996:11029  \"expenses[expenseId].items[i].paid\" */ add(_61, 3)), /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0xff))\n                            /// @src 1:10991:11114  \"if (!expenses[expenseId].items[i].paid) {...\"\n                            {\n                                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                                mstore(0, value_20)\n                                mstore(32, 0)\n                                /// @src 1:11064:11092  \"expenses[expenseId].items[i]\"\n                                let _63, _64 := storage_array_index_access_struct_ExpenseItem__dyn(/** @src 1:11064:11089  \"expenses[expenseId].items\" */ add(/** @src 1:409:11706  \"contract OnChainExpenses {...\" */ keccak256(0, 64), /** @src 1:10938:10963  \"expenses[expenseId].items\" */ 5), /** @src 1:11064:11092  \"expenses[expenseId].items[i]\" */ var_i_8)\n                                /// @src 1:11049:11099  \"unpaidTotal += expenses[expenseId].items[i].amount\"\n                                var_unpaidTotal := checked_add_uint256(var_unpaidTotal, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ sload(/** @src 1:11064:11099  \"expenses[expenseId].items[i].amount\" */ add(_63, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 1)))\n                            }\n                        }\n                        let memPos_10 := mload(64)\n                        mstore(memPos_10, var_unpaidTotal)\n                        return(memPos_10, 32)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                mcopy(add(pos, 0x20), add(value, 0x20), length)\n                mstore(add(add(pos, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n            }\n            function abi_encode_array_string_dyn(value, pos) -> end\n            {\n                let pos_1 := pos\n                let length := mload(value)\n                mstore(pos, length)\n                pos := add(pos, 0x20)\n                let tail := add(add(pos_1, shl(5, length)), 0x20)\n                let srcPtr := add(value, 0x20)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, add(sub(tail, pos_1), not(31)))\n                    tail := abi_encode_string(mload(srcPtr), tail)\n                    srcPtr := add(srcPtr, 0x20)\n                    pos := add(pos, 0x20)\n                }\n                end := tail\n            }\n            function abi_encode_array_uint256_dyn(value, pos) -> end\n            {\n                let length := mload(value)\n                mstore(pos, length)\n                pos := add(pos, 0x20)\n                let srcPtr := add(value, 0x20)\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, mload(srcPtr))\n                    pos := add(pos, 0x20)\n                    srcPtr := add(srcPtr, 0x20)\n                }\n                end := pos\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(length, 0x1f), not(31)), 0x20))\n                mstore(memPtr, length)\n                if gt(add(add(offset, length), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                array := memPtr\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function array_allocation_size_array_uint256_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(shl(5, length), 0x20)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 37)\n                    mstore(add(memPtr, 68), \"Not authorized to access this ex\")\n                    mstore(add(memPtr, 100), \"pense\")\n                    revert(memPtr, 132)\n                }\n            }\n            function allocate_and_zero_memory_array_array_string_dyn(length) -> memPtr\n            {\n                let _1 := array_allocation_size_array_uint256_dyn(length)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                let _2 := add(array_allocation_size_array_uint256_dyn(length), not(31))\n                let i := /** @src -1:-1:-1 */ 0\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                for { } lt(i, _2) { i := add(i, 32) }\n                {\n                    mstore(add(add(memPtr_1, i), 32), 96)\n                }\n            }\n            function allocate_and_zero_memory_array_array_uint256_dyn(length) -> memPtr\n            {\n                let _1 := array_allocation_size_array_uint256_dyn(length)\n                let memPtr_1 := mload(64)\n                finalize_allocation(memPtr_1, _1)\n                mstore(memPtr_1, length)\n                memPtr := memPtr_1\n                calldatacopy(add(memPtr_1, 32), calldatasize(), add(array_allocation_size_array_uint256_dyn(length), not(31)))\n            }\n            function storage_array_index_access_struct_ExpenseItem__dyn(array, index) -> slot, offset\n            {\n                if iszero(lt(index, sload(array)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ array)\n                let data := keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0x20)\n                slot := add(data, mul(index, 5))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n            function memory_array_index_access_string_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := mload(64)\n                let ret := /** @src -1:-1:-1 */ 0\n                /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                let slotValue := sload(slot)\n                let length := extract_byte_array_length(slotValue)\n                mstore(memPtr, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(add(memPtr, 0x20), and(slotValue, not(255)))\n                    ret := add(add(memPtr, shl(5, iszero(iszero(length)))), 0x20)\n                }\n                case 1 {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ slot)\n                    let dataPos := keccak256(/** @src -1:-1:-1 */ 0, /** @src 1:409:11706  \"contract OnChainExpenses {...\" */ 0x20)\n                    let i := /** @src -1:-1:-1 */ 0\n                    /// @src 1:409:11706  \"contract OnChainExpenses {...\"\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(add(memPtr, i), 0x20), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(add(memPtr, i), 0x20)\n                }\n                finalize_allocation(memPtr, sub(ret, memPtr))\n            }\n            function increment_uint256(value) -> ret\n            {\n                if eq(value, not(0))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n                ret := add(value, 1)\n            }\n            function require_helper_stringliteral_1f36(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := mload(64)\n                    mstore(memPtr, shl(229, 4594637))\n                    mstore(add(memPtr, 4), 32)\n                    mstore(add(memPtr, 36), 15)\n                    mstore(add(memPtr, 68), \"Invalid item ID\")\n                    revert(memPtr, 100)\n                }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220b2e2e5ab755d77ec5f5e0b9ada5750d710fe8fe1cbd63aa27e8862229ba657e664736f6c634300081c0033\"\n    }\n}\n",
          "hash": "63cb2dcf4013fd79848c5ab0dab5d45ddd0a655b58abf4f10709ae796635362f",
          "factoryDependencies": {}
        }
      },
      "contracts/Storage.sol": {
        "Storage": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": false,
                  "internalType": "uint256",
                  "name": "newNumber",
                  "type": "uint256"
                }
              ],
              "name": "NumberChanged",
              "type": "event"
            },
            {
              "inputs": [],
              "name": "retrieve",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "newNumber",
                  "type": "uint256"
                }
              ],
              "name": "store",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "metadata": {
            "llvm_arguments": [],
            "optimizer_settings": {
              "is_debug_logging_enabled": false,
              "is_fallback_to_size_enabled": false,
              "is_verify_each_enabled": false,
              "level_back_end": "Aggressive",
              "level_middle_end": "Default",
              "level_middle_end_size": "Z"
            },
            "revive_pallet_version": null,
            "revive_version": "0.1.0-dev.16+commit.0421869.llvm-18.1.8",
            "solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"NumberChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Storage.sol\":\"Storage\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Storage.sol\":{\"keccak256\":\"0xe739804fd21edcacf42a06447cb4ab5d760015048fc0586900035e0d9f8a4412\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b743964a2d1dab4a28c87a1b906b62cb94d2da061a6622a2c597e878f1717b3b\",\"dweb:/ipfs/QmUsK6naFRndeQWknorNJ6dpeADvmttSNWh81nZ1Mqejyr\"]}},\"version\":1}",
            "solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
          },
          "evm": {
            "assembly": "// RO data = 0/0 bytes\n// RW data = 32/65616 bytes\n// Stack size = 32768 bytes\n\n// Instructions = 622\n// Code size = 1879 bytes\n\n      : @0 (gas: 2)\n     0: a1 = i32 [0x20028]\n     5: jump @23 if a1 == 0\n      : @1 (gas: 4)\n     9: a0 = 0x30050\n    14: i32 a0 = a0 + 0\n    16: ecalli 6 // 'set_immutable_data'\n    18: jump @23\n      : @2 [@dyn 1] (gas: 100)\n    21: a1 = u8 [a0 + 0x1]\n    24: a2 = u8 [a0]\n    26: a3 = u8 [a0 + 0x2]\n    29: a4 = u8 [a0 + 0x3]\n    32: a1 = a1 << 0x8\n    35: a1 = a1 | a2\n    38: a3 = a3 << 0x10\n    41: a4 = a4 << 0x18\n    44: a3 = a3 | a4\n    47: a1 = a1 | a3\n    50: a2 = u8 [a0 + 0x5]\n    53: a3 = u8 [a0 + 0x4]\n    56: a4 = u8 [a0 + 0x6]\n    59: a5 = u8 [a0 + 0x7]\n    62: a2 = a2 << 0x8\n    65: a2 = a2 | a3\n    68: a4 = a4 << 0x10\n    71: a5 = a5 << 0x18\n    74: a4 = a4 | a5\n    77: a2 = a2 | a4\n    80: a2 = a2 << 0x20\n    83: t0 = a2 | a1\n    86: a2 = u8 [a0 + 0x9]\n    89: a3 = u8 [a0 + 0x8]\n    92: a4 = u8 [a0 + 0xa]\n    95: a5 = u8 [a0 + 0xb]\n    98: a2 = a2 << 0x8\n   101: a2 = a2 | a3\n   104: a4 = a4 << 0x10\n   107: a5 = a5 << 0x18\n   110: a4 = a4 | a5\n   113: a2 = a2 | a4\n   116: a3 = u8 [a0 + 0xd]\n   119: a4 = u8 [a0 + 0xc]\n   122: a5 = u8 [a0 + 0xe]\n   125: a1 = u8 [a0 + 0xf]\n   128: a3 = a3 << 0x8\n   131: a3 = a3 | a4\n   134: a5 = a5 << 0x10\n   137: a1 = a1 << 0x18\n   140: a1 = a1 | a5\n   143: a1 = a1 | a3\n   146: a1 = a1 << 0x20\n   149: t1 = a1 | a2\n   152: a1 = u8 [a0 + 0x11]\n   155: a3 = u8 [a0 + 0x10]\n   158: a4 = u8 [a0 + 0x12]\n   161: a5 = u8 [a0 + 0x13]\n   164: a1 = a1 << 0x8\n   167: a1 = a1 | a3\n   170: a4 = a4 << 0x10\n   173: a5 = a5 << 0x18\n   176: a4 = a4 | a5\n   179: a1 = a1 | a4\n   182: a3 = u8 [a0 + 0x15]\n   185: a4 = u8 [a0 + 0x14]\n   188: a5 = u8 [a0 + 0x16]\n   191: a2 = u8 [a0 + 0x17]\n   194: a3 = a3 << 0x8\n   197: a3 = a3 | a4\n   200: a5 = a5 << 0x10\n   203: a2 = a2 << 0x18\n   206: a2 = a2 | a5\n   209: a2 = a2 | a3\n   212: a2 = a2 << 0x20\n   215: a3 = a2 | a1\n   218: a1 = u8 [a0 + 0x19]\n   221: a2 = u8 [a0 + 0x18]\n   224: a4 = u8 [a0 + 0x1a]\n   227: a5 = u8 [a0 + 0x1b]\n   230: a1 = a1 << 0x8\n   233: a1 = a1 | a2\n   236: a4 = a4 << 0x10\n   239: a5 = a5 << 0x18\n   242: a4 = a4 | a5\n   245: a1 = a1 | a4\n   248: a2 = u8 [a0 + 0x1d]\n   251: a4 = u8 [a0 + 0x1c]\n   254: a5 = u8 [a0 + 0x1e]\n   257: a0 = u8 [a0 + 0x1f]\n   260: a2 = a2 << 0x8\n   263: a2 = a2 | a4\n   266: a5 = a5 << 0x10\n   269: a0 = a0 << 0x18\n   272: a0 = a0 | a5\n   275: a0 = a0 | a2\n   278: a0 = a0 << 0x20\n   281: a0 = a0 | a1\n   284: a0 = reverse a0\n   286: a1 = reverse a3\n   288: a2 = reverse t1\n   290: a3 = reverse t0\n   292: u64 [s0 + 0x18] = a3\n   295: u64 [s0 + 0x10] = a2\n   298: u64 [s0 + 0x8] = a1\n   301: u64 [s0] = a0\n   303: ra = u64 [sp + 0x8]\n   306: s0 = u64 [sp]\n   308: sp = sp + 0x10\n   311: ret\n      : @3 (gas: 12)\n   313: sp = sp + 0xffffffffffffffd8\n   316: u64 [sp + 0x20] = ra\n   319: u64 [sp + 0x18] = s0\n   322: u64 [sp + 0x10] = s1\n   325: a2 = u64 [a1]\n   327: u64 [sp + 0x8] = a2\n   330: a2 = u64 [a1 + 0x8]\n   333: u64 [sp] = a2\n   335: s0 = u64 [a1 + 0x10]\n   338: s1 = u64 [a1 + 0x18]\n   341: a1 = 0x20\n   344: ra = 4, jump @6\n      : @4 [@dyn 2] (gas: 71)\n   349: a1 = reverse s1\n   351: a2 = reverse s0\n   353: a3 = u64 [sp]\n   355: a3 = reverse a3\n   357: a4 = u64 [sp + 0x8]\n   360: a4 = reverse a4\n   362: u8 [a0 + 0x18] = a4\n   365: u8 [a0 + 0x10] = a3\n   368: u8 [a0 + 0x8] = a2\n   371: u8 [a0] = a1\n   373: a5 = a4 >> 0x38\n   376: u8 [a0 + 0x1f] = a5\n   379: a5 = a4 >> 0x30\n   382: u8 [a0 + 0x1e] = a5\n   385: a5 = a4 >> 0x28\n   388: u8 [a0 + 0x1d] = a5\n   391: a5 = a4 >> 0x20\n   394: u8 [a0 + 0x1c] = a5\n   397: a5 = a4 >> 0x18\n   400: u8 [a0 + 0x1b] = a5\n   403: a5 = a4 >> 0x10\n   406: u8 [a0 + 0x1a] = a5\n   409: a4 = a4 >> 0x8\n   412: u8 [a0 + 0x19] = a4\n   415: a4 = a3 >> 0x38\n   418: u8 [a0 + 0x17] = a4\n   421: a4 = a3 >> 0x30\n   424: u8 [a0 + 0x16] = a4\n   427: a4 = a3 >> 0x28\n   430: u8 [a0 + 0x15] = a4\n   433: a4 = a3 >> 0x20\n   436: u8 [a0 + 0x14] = a4\n   439: a4 = a3 >> 0x18\n   442: u8 [a0 + 0x13] = a4\n   445: a4 = a3 >> 0x10\n   448: u8 [a0 + 0x12] = a4\n   451: a3 = a3 >> 0x8\n   454: u8 [a0 + 0x11] = a3\n   457: a3 = a2 >> 0x38\n   460: u8 [a0 + 0xf] = a3\n   463: a3 = a2 >> 0x30\n   466: u8 [a0 + 0xe] = a3\n   469: a3 = a2 >> 0x28\n   472: u8 [a0 + 0xd] = a3\n   475: a3 = a2 >> 0x20\n   478: u8 [a0 + 0xc] = a3\n   481: a3 = a2 >> 0x18\n   484: u8 [a0 + 0xb] = a3\n   487: a3 = a2 >> 0x10\n   490: u8 [a0 + 0xa] = a3\n   493: a2 = a2 >> 0x8\n   496: u8 [a0 + 0x9] = a2\n   499: a2 = a1 >> 0x38\n   502: u8 [a0 + 0x7] = a2\n   505: a2 = a1 >> 0x30\n   508: u8 [a0 + 0x6] = a2\n   511: a2 = a1 >> 0x28\n   514: u8 [a0 + 0x5] = a2\n   517: a2 = a1 >> 0x20\n   520: u8 [a0 + 0x4] = a2\n   523: a2 = a1 >> 0x18\n   526: u8 [a0 + 0x3] = a2\n   529: a2 = a1 >> 0x10\n   532: u8 [a0 + 0x2] = a2\n   535: a1 = a1 >> 0x8\n   538: u8 [a0 + 0x1] = a1\n   541: ra = u64 [sp + 0x20]\n   544: s0 = u64 [sp + 0x18]\n   547: s1 = u64 [sp + 0x10]\n   550: sp = sp + 0x28\n   553: ret\n      : @5 [@dyn 3] (gas: 23)\n   555: a1 = u64 [sp]\n   557: a1 = reverse a1\n   559: a2 = u64 [sp + 0x8]\n   562: a2 = reverse a2\n   564: a3 = u64 [sp + 0x10]\n   567: a3 = reverse a3\n   569: a4 = u64 [sp + 0x18]\n   572: a4 = reverse a4\n   574: u64 [sp + 0x38] = a4\n   577: u64 [sp + 0x30] = a3\n   580: u64 [sp + 0x28] = a2\n   583: u64 [sp + 0x20] = a1\n   586: i32 a2 = a0 + 0\n   588: i32 a3 = s1 + 0\n   590: i32 a0 = sp + 0x20\n   593: a1 = 0x1\n   596: ecalli 3 // 'deposit_event'\n   598: sp = s0 + 0xffffffffffffffa0\n   601: ra = u64 [sp + 0x58]\n   604: s0 = u64 [sp + 0x50]\n   607: s1 = u64 [sp + 0x48]\n   610: sp = sp + 0x60\n   613: ret\n      : @6 (gas: 2)\n   615: i32 a2 = a0 >> 0x10\n   618: jump @11 if a2 != 0\n      : @7 (gas: 4)\n   621: a1 = a1 + a0\n   624: i32 a1 = a1 + 0x1f\n   627: a1 = a1 & 0xffffffffffffffe0\n   630: jump @11 if a1 >u 65536\n      : @8 (gas: 3)\n   636: a2 = 0x20024\n   641: a3 = i32 [0x20024]\n   646: jump @10 if a3 >=u a1\n      : @9 (gas: 2)\n   649: u32 [0x20024] = a1\n   654: fallthrough\n      : @10 (gas: 4)\n   655: a1 = 0x20030\n   660: i32 a0 = a0 + 0\n   662: a0 = a0 + a1\n   665: ret\n      : @11 (gas: 1)\n   667: trap\n      : @12 (gas: 6)\n   668: sp = sp + 0xfffffffffffffff0\n   671: u64 [sp + 0x8] = ra\n   674: u64 [sp] = s0\n   676: s0 = a0 & 0x1\n   679: ecalli 2 // 'call_data_size'\n   681: fallthrough\n      : @13 (gas: 2)\n   682: u32 [0x20020] = a0\n   687: jump @15 if s0 == 0\n      : @14 (gas: 1)\n   690: ra = 8, jump @16\n      : @15 [@dyn 4] (gas: 1)\n   694: ra = 10, jump @25\n      : @16 [@dyn 5] (gas: 12)\n   699: sp = sp + 0xffffffffffffffa0\n   702: u64 [sp + 0x58] = ra\n   705: u64 [sp + 0x50] = s0\n   708: s0 = sp + 0x60\n   711: sp = sp & 0xffffffffffffffe0\n   714: u64 [sp + 24] = 0\n   717: u64 [sp + 16] = 0\n   720: u64 [sp + 0] = 0x80\n   724: a0 = 0x40\n   727: a1 = sp\n   729: u64 [sp + 8] = 0\n   732: ra = 12, jump @3\n      : @17 [@dyn 6] (gas: 7)\n   737: u64 [sp + 56] = 0\n   740: u64 [sp + 48] = 0\n   743: u64 [sp + 40] = 0\n   746: u64 [sp + 32] = 0\n   749: i32 a0 = sp + 0x20\n   752: ecalli 8 // 'value_transferred'\n   754: fallthrough\n      : @18 (gas: 8)\n   755: a0 = u64 [sp + 0x30]\n   758: a1 = u64 [sp + 0x38]\n   761: a2 = u64 [sp + 0x28]\n   764: a3 = u64 [sp + 0x20]\n   767: a1 = a1 | a2\n   770: a0 = a0 | a3\n   773: a0 = a0 | a1\n   776: jump @20 if a0 == 0\n      : @19 (gas: 7)\n   779: a1 = 0x20030\n   784: i32 a1 = a1 + 0\n   786: a0 = 0x1\n   789: a2 = 0\n   791: ra = 0x10\n   794: ecalli 5 // 'seal_return'\n   796: jump @25\n      : @20 (gas: 2)\n   798: a1 = i32 [0x20024]\n   803: jump @22 if a1 >u 127\n      : @21 (gas: 2)\n   807: u32 [0x20024] = 0x80\n   814: fallthrough\n      : @22 (gas: 6)\n   815: a0 = 0x20030\n   820: i32 a0 = a0 + 0x80\n   824: a1 = 0\n   826: a2 = 0\n   828: ecalli 0 // 'call_data_copy'\n   829: jump @0\n      : @23 (gas: 3)\n   832: a0 = 0x80\n   836: a1 = 0\n   838: ra = 14, jump @6\n      : @24 [@dyn 7] (gas: 6)\n   843: i32 a1 = a0 + 0\n   845: a0 = 0\n   847: a2 = 0\n   849: ra = 0x10\n   852: ecalli 5 // 'seal_return'\n   854: fallthrough\n      : @25 [@dyn 8] (gas: 14)\n   855: sp = sp + 0xfffffffffffffe20\n   859: u64 [sp + 0x1d8] = ra\n   863: u64 [sp + 0x1d0] = s0\n   867: u64 [sp + 0x1c8] = s1\n   871: s0 = sp + 0x1e0\n   875: sp = sp & 0xffffffffffffffe0\n   878: s1 = sp\n   880: u64 [s1 + 248] = 0\n   884: u64 [s1 + 240] = 0\n   888: u64 [s1 + 224] = 0x80\n   894: a0 = 0x40\n   897: a1 = s1 + 0xe0\n   901: u64 [s1 + 232] = 0\n   905: ra = 18, jump @3\n      : @26 [@dyn 9] (gas: 4)\n   910: a0 = 0x20020\n   915: u64 [s1 + 0x38] = a0\n   918: a0 = i32 [0x20020]\n   923: jump @40 if a0 <u 4\n      : @27 (gas: 4)\n   928: i32 a0 = s1 + 0x100\n   932: a1 = 0\n   934: ecalli 1 // 'call_data_load'\n   936: fallthrough\n      : @28 (gas: 2)\n   937: a0 = i32 [s1 + 0x11c]\n   941: jump @36 if a0 != 1616328221\n      : @29 (gas: 7)\n   949: u64 [s1 + 376] = 0\n   953: u64 [s1 + 368] = 0\n   957: u64 [s1 + 360] = 0\n   961: u64 [s1 + 352] = 0\n   965: i32 a0 = s1 + 0x160\n   969: ecalli 8 // 'value_transferred'\n   971: fallthrough\n      : @30 (gas: 9)\n   972: a4 = s1 + 0x100\n   976: a0 = u64 [a4 + 0x70]\n   979: a1 = u64 [a4 + 0x78]\n   982: a2 = u64 [a4 + 0x68]\n   985: a3 = u64 [a4 + 0x60]\n   988: a1 = a1 | a2\n   991: a0 = a0 | a3\n   994: a0 = a0 | a1\n   997: jump @41 if a0 != 0\n      : @31 (gas: 3)\n  1001: a0 = u64 [s1 + 0x38]\n  1004: a0 = i32 [a0]\n  1006: jump @42 if a0 <=u 35\n      : @32 (gas: 68)\n  1011: a0 = sp + 0xffffffffffffffe0\n  1014: a0 = a0 & 0xffffffffffffffe0\n  1017: u64 [s1 + 0x38] = a0\n  1020: sp = a0\n  1022: i32 a0 = s1 + 0x180\n  1026: a1 = 0x4\n  1029: ecalli 1 // 'call_data_load'\n  1031: a4 = s1 + 0x100\n  1035: a0 = u64 [a4 + 0x98]\n  1039: a1 = u64 [a4 + 0x90]\n  1043: a2 = u64 [a4 + 0x88]\n  1047: a3 = u64 [a4 + 0x80]\n  1051: u64 [s1 + 0x30] = a0\n  1054: a4 = u64 [s1 + 0x38]\n  1057: u64 [a4 + 0x18] = a0\n  1060: u64 [s1 + 0x28] = a1\n  1063: u64 [a4 + 0x10] = a1\n  1066: u64 [s1 + 0x20] = a2\n  1069: u64 [a4 + 0x8] = a2\n  1072: u64 [s1 + 0x18] = a3\n  1075: u64 [a4] = a3\n  1077: a1 = a4\n  1079: u64 [s1 + 440] = 0\n  1083: u64 [s1 + 432] = 0\n  1087: u64 [s1 + 424] = 0\n  1091: u64 [s1 + 416] = 0\n  1095: a0 = s1 + 0x1a0\n  1099: ra = 0x14\n  1102: sp = sp + 0xffffffffffffffa0\n  1105: u64 [sp + 0x58] = ra\n  1108: u64 [sp + 0x50] = s0\n  1111: s0 = sp + 0x60\n  1114: sp = sp & 0xffffffffffffffe0\n  1117: t0 = u64 [a0]\n  1119: a3 = u64 [a0 + 0x8]\n  1122: a4 = u64 [a0 + 0x10]\n  1125: a0 = u64 [a0 + 0x18]\n  1128: t1 = u64 [a1]\n  1130: a2 = u64 [a1 + 0x8]\n  1133: a5 = u64 [a1 + 0x10]\n  1136: a1 = u64 [a1 + 0x18]\n  1139: t2 = reverse a0\n  1141: a4 = reverse a4\n  1143: a3 = reverse a3\n  1145: a0 = reverse t0\n  1147: t0 = reverse a1\n  1149: a5 = reverse a5\n  1151: a2 = reverse a2\n  1153: a1 = reverse t1\n  1155: u64 [sp + 0x18] = a0\n  1158: u64 [sp + 0x10] = a3\n  1161: u64 [sp + 0x8] = a4\n  1164: u64 [sp] = t2\n  1166: u64 [sp + 0x38] = a1\n  1169: u64 [sp + 0x30] = a2\n  1172: u64 [sp + 0x28] = a5\n  1175: u64 [sp + 0x20] = t0\n  1178: i32 a1 = sp + 0\n  1180: i32 a3 = sp + 0x20\n  1183: a2 = 0xffffffffffffffff\n  1186: a4 = 0x20\n  1189: a0 = 0\n  1191: ecalli 7 // 'set_storage'\n  1193: sp = s0 + 0xffffffffffffffa0\n  1196: ra = u64 [sp + 0x58]\n  1199: s0 = u64 [sp + 0x50]\n  1202: sp = sp + 0x60\n  1205: ret\n      : @33 [@dyn 10] (gas: 12)\n  1207: a0 = s1 + 0xc0\n  1211: a1 = 0x40\n  1214: ra = 0x16\n  1217: sp = sp + 0xfffffffffffffff0\n  1220: u64 [sp + 0x8] = ra\n  1223: u64 [sp] = s0\n  1225: a2 = a1\n  1227: s0 = a0\n  1229: a1 = 0x20\n  1232: a0 = a2\n  1234: ra = 0x2\n  1237: jump @6\n      : @34 [@dyn 11] (gas: 12)\n  1240: a0 = u64 [s1 + 0xd8]\n  1244: a1 = u64 [s1 + 0xd0]\n  1248: a2 = u64 [s1 + 0xc8]\n  1252: a3 = u64 [s1 + 0xc0]\n  1256: a0 = a0 | a2\n  1259: a2 = a3 | a1\n  1262: a2 = a2 | a0\n  1265: a2 = a2 >> 0x20\n  1268: a0 = a0 | a1\n  1271: a0 = a0 << 0x20\n  1274: a0 = a0 | a2\n  1277: jump @43 if a0 == 0\n      : @35 (gas: 1)\n  1281: trap\n      : @36 (gas: 1)\n  1282: jump @40 if a0 != 778358465\n      : @37 (gas: 7)\n  1289: u64 [s1 + 312] = 0\n  1293: u64 [s1 + 304] = 0\n  1297: u64 [s1 + 296] = 0\n  1301: u64 [s1 + 288] = 0\n  1305: i32 a0 = s1 + 0x120\n  1309: ecalli 8 // 'value_transferred'\n  1311: fallthrough\n      : @38 (gas: 9)\n  1312: a4 = s1 + 0x100\n  1316: a0 = u64 [a4 + 0x30]\n  1319: a1 = u64 [a4 + 0x38]\n  1322: a2 = u64 [a4 + 0x28]\n  1325: a3 = u64 [a4 + 0x20]\n  1328: a1 = a1 | a2\n  1331: a0 = a0 | a3\n  1334: a0 = a0 | a1\n  1337: jump @46 if a0 == 0\n      : @39 (gas: 6)\n  1341: a1 = 0x20030\n  1346: i32 a1 = a1 + 0\n  1348: a0 = 0x1\n  1351: a2 = 0\n  1353: ecalli 5 // 'seal_return'\n  1355: jump @46\n      : @40 (gas: 6)\n  1358: a1 = 0x20030\n  1363: i32 a1 = a1 + 0\n  1365: a0 = 0x1\n  1368: a2 = 0\n  1370: ecalli 5 // 'seal_return'\n  1372: jump @46\n      : @41 (gas: 6)\n  1375: a1 = 0x20030\n  1380: i32 a1 = a1 + 0\n  1382: a0 = 0x1\n  1385: a2 = 0\n  1387: ecalli 5 // 'seal_return'\n  1389: jump @46\n      : @42 (gas: 6)\n  1392: a1 = 0x20030\n  1397: i32 a1 = a1 + 0\n  1399: a0 = 0x1\n  1402: a2 = 0\n  1404: ecalli 5 // 'seal_return'\n  1406: jump @46\n      : @43 (gas: 12)\n  1409: a0 = u64 [s1 + 0x18]\n  1412: u64 [s1 + 0xa0] = a0\n  1416: a0 = u64 [s1 + 0x20]\n  1419: u64 [s1 + 0xa8] = a0\n  1423: a0 = u64 [s1 + 0x28]\n  1426: u64 [s1 + 0xb0] = a0\n  1430: a1 = s1 + 0xa0\n  1434: a0 = u64 [s1 + 0x30]\n  1437: u64 [s1 + 0xb8] = a0\n  1441: a0 = a3\n  1443: u64 [s1 + 0x38] = a3\n  1446: ra = 24, jump @3\n      : @44 [@dyn 12] (gas: 29)\n  1451: a0 = u64 [0x20000]\n  1456: a1 = u64 [0x20008]\n  1461: u64 [s1 + 0x98] = a0\n  1465: a0 = u64 [0x20010]\n  1470: u64 [s1 + 0x90] = a1\n  1474: a3 = u64 [0x20018]\n  1479: u64 [s1 + 0x88] = a0\n  1483: a1 = 0x20\n  1486: a2 = s1 + 0x80\n  1490: u64 [s1 + 0x80] = a3\n  1494: a0 = u64 [s1 + 0x38]\n  1497: ra = 0x1a\n  1500: sp = sp + 0xffffffffffffffa0\n  1503: u64 [sp + 0x58] = ra\n  1506: u64 [sp + 0x50] = s0\n  1509: u64 [sp + 0x48] = s1\n  1512: s0 = sp + 0x60\n  1515: sp = sp & 0xffffffffffffffe0\n  1518: a3 = u64 [a2]\n  1520: u64 [sp + 0x18] = a3\n  1523: a3 = u64 [a2 + 0x8]\n  1526: u64 [sp + 0x10] = a3\n  1529: a3 = u64 [a2 + 0x10]\n  1532: u64 [sp + 0x8] = a3\n  1535: a2 = u64 [a2 + 0x18]\n  1538: u64 [sp] = a2\n  1540: s1 = a1\n  1542: ra = 0x6\n  1545: jump @6\n      : @45 [@dyn 13] (gas: 6)\n  1548: a1 = 0x20030\n  1553: i32 a1 = a1 + 0\n  1555: a0 = 0\n  1557: a2 = 0\n  1559: ecalli 5 // 'seal_return'\n  1561: fallthrough\n      : @46 (gas: 3)\n  1562: a0 = u64 [s1 + 0x38]\n  1565: a0 = i32 [a0]\n  1567: jump @48 if a0 >u 3\n      : @47 (gas: 6)\n  1571: a1 = 0x20030\n  1576: i32 a1 = a1 + 0\n  1578: a0 = 0x1\n  1581: a2 = 0\n  1583: ecalli 5 // 'seal_return'\n  1585: jump @46\n      : @48 (gas: 55)\n  1587: u64 [s1 + 344] = 0\n  1591: u64 [s1 + 336] = 0\n  1595: u64 [s1 + 328] = 0\n  1599: u64 [s1 + 320] = 0\n  1603: a0 = s1 + 0x60\n  1606: a1 = s1 + 0x140\n  1610: ra = 0x1c\n  1613: sp = sp + 0xffffffffffffffa0\n  1616: u64 [sp + 0x58] = ra\n  1619: u64 [sp + 0x50] = s0\n  1622: u64 [sp + 0x48] = s1\n  1625: s0 = sp + 0x60\n  1628: sp = sp & 0xffffffffffffffe0\n  1631: s1 = a0\n  1633: a0 = u64 [a1 + 0x18]\n  1636: a2 = u64 [a1 + 0x10]\n  1639: a3 = u64 [a1 + 0x8]\n  1642: a1 = u64 [a1]\n  1644: a0 = reverse a0\n  1646: a2 = reverse a2\n  1648: a3 = reverse a3\n  1650: a1 = reverse a1\n  1652: u64 [sp + 0x18] = a1\n  1655: u64 [sp + 0x10] = a3\n  1658: u64 [sp + 0x8] = a2\n  1661: u64 [sp] = a0\n  1663: u64 [sp + 56] = 0\n  1666: u64 [sp + 48] = 0\n  1669: u64 [sp + 40] = 0\n  1672: u64 [sp + 32] = 0\n  1675: u32 [sp + 64] = 0x20\n  1679: i32 a1 = sp + 0\n  1681: i32 a3 = sp + 0x20\n  1684: i32 a4 = sp + 0x40\n  1687: a2 = 0xffffffffffffffff\n  1690: a0 = 0\n  1692: ecalli 4 // 'get_storage'\n  1694: a0 = u64 [sp + 0x38]\n  1697: a1 = u64 [sp + 0x30]\n  1700: a2 = u64 [sp + 0x28]\n  1703: a3 = u64 [sp + 0x20]\n  1706: a0 = reverse a0\n  1708: a1 = reverse a1\n  1710: a2 = reverse a2\n  1712: a3 = reverse a3\n  1714: u64 [s1 + 0x18] = a3\n  1717: u64 [s1 + 0x10] = a2\n  1720: u64 [s1 + 0x8] = a1\n  1723: u64 [s1] = a0\n  1725: sp = s0 + 0xffffffffffffffa0\n  1728: ra = u64 [sp + 0x58]\n  1731: s0 = u64 [sp + 0x50]\n  1734: s1 = u64 [sp + 0x48]\n  1737: sp = sp + 0x60\n  1740: ret\n      : @49 [@dyn 14] (gas: 11)\n  1742: a2 = u64 [s1 + 0x60]\n  1745: a0 = u64 [s1 + 0x68]\n  1748: a1 = u64 [s1 + 0x70]\n  1751: a3 = u64 [s1 + 0x78]\n  1754: u64 [s1 + 0x58] = a3\n  1757: u64 [s1 + 0x50] = a1\n  1760: u64 [s1 + 0x48] = a0\n  1763: a0 = 0x80\n  1767: a1 = s1 + 0x40\n  1770: u64 [s1 + 0x40] = a2\n  1773: ra = 30, jump @3\n      : @50 [@dyn 15] (gas: 2)\n  1778: a1 = i32 [0x20024]\n  1783: jump @52 if a1 >u 159\n      : @51 (gas: 2)\n  1788: u32 [0x20024] = 0xa0\n  1795: fallthrough\n      : @52 (gas: 8)\n  1796: a0 = 0x20030\n  1801: i32 a1 = a0 + 0x80\n  1805: a2 = 0x20\n  1808: a0 = 0\n  1810: ecalli 5 // 'seal_return'\n  1812: a0 = 0\n  1814: ra = 0x20\n  1817: jump @12\n      : @53 [export #0: 'call'] (gas: 2)\n  1820: a0 = 0\n  1822: ra = 32, jump @12\n      : @54 [@dyn 16] [export #1: 'deploy'] (gas: 2)\n  1827: a0 = 0x1\n  1830: ra = 34, jump @12\n      : @55 [@dyn 17] (gas: 16)\n  1835: a4 = u64 [a3]\n  1837: u64 [sp + 0x18] = a4\n  1840: a4 = u64 [a3 + 0x8]\n  1843: u64 [sp + 0x20] = a4\n  1846: a4 = u64 [a3 + 0x10]\n  1849: u64 [sp + 0x28] = a4\n  1852: a3 = u64 [a3 + 0x18]\n  1855: u64 [sp + 0x30] = a3\n  1858: s1 = u64 [a2]\n  1860: a3 = u64 [a2 + 0x8]\n  1863: u64 [sp] = a3\n  1865: a3 = u64 [a2 + 0x10]\n  1868: u64 [sp + 0x8] = a3\n  1871: a2 = u64 [a2 + 0x18]\n  1874: u64 [sp + 0x10] = a2\n  1877: jump [t0]\n",
            "bytecode": {
              "object": "50564d00005a09000000000000010700c15000c0008003204b5c3c9dd11fd82fc8af1d453fd16d395f9cc494301bacbce3f0236345680ea90480a009000000000e0000001c0000002a00000037000000420000004d0000005f0000006a00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656465706f7369745f6576656e746765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051102871c0463616c6c8723066465706c6f790688681102875715005d012b02b602bb02e1024b0357038e03b704d804ab050c06ce06f20623072b07390828000251083b03330750000383770a06282e037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b198285108286183308205010040f016f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909988938787907988930787906988928787905988920787904988918787903988910787902988808787801821020821518821610951128320082186f888219086f99821a106faa821b186fbb7b1b387b1a307b19287b18208379836a8317203308010a039551a082105882155082164895116032008b7910520931c8780883881f8488e05638000001253309240002390a240002ae8a093d082400020133083000028377c887073200009511f07b10087b158475010a02013d072000025105075010080950100aa1009511a07b10587b15509515608411e049111849111049018000330740641849110850100c5dfe4911384911304911284911208317200a0801821730821838821928821a20d49808d4a707d487075107163308300002838833070133093300100a05283b390824000256187f0c2003240002800001330730000283778000330833090a28c3fc33078000330850100e21ff8378330733093300100a0501951120fe7b10d8017b15d0017b16c8019515e0018411e064164926f8004926f0004926e00080003307409568e0004926e800501012b0fd33072000027b67383907200002531704b3018367000133080a010181671c0152471d365760550149267801492670014926680149266001836760010a0801956b000182b77082b87882b96882ba60d49808d4a707d4870752077a01826738817754172382019517e08477e07b67386471836780013308040a01956b000182b7980082b8900082b9880082ba80007b6730826b387bb7187b68287bb8107b69207bb9087b6a187bba64b84926b8014926b0014926a8014926a0019567a0013300149511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a079551a082105882155095116032009567c0003308403300169511f07b10087b156489647533082064973300022892fd8267d8008268d0008269c800826ac000d49707d48a09d47909989920d48707977720d4970751078400005247c1ce642e4c49263801492630014926280149262001836720010a0801956b000182b73082b83882b92882ba20d49808d4a707d487075107e1003308300002838833070133090a0528cf003308300002838833070133090a0528be003308300002838833070133090a0528ad003308300002838833070133090a05289c008267187b67a0008267207b67a8008267287b67b0009568a0008267307b67b80064a77b6a3850101893fb3a070000023a080800027b6798003a071000027b6890003a0a1800027b678800330820956980007b6a800082673833001a9511a07b10587b15507b16489515608411e0829a7b1a18829a087b1a10829a107b1a088299187b196486330006285efc33083000028388330733090a05018267388177561703143308300002838833070133090a0528e9492658014926500149264801492640019567609568400133001c9511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33070a04821738821830821928821a206f776f886f996faa7b6a187b69107b68087b679551a08210588215508216489511603200826960826768826870826a787b6a587b68507b6748330780009568407b694050101e4cfa390824000256289f000d2003240002a0000133073000028378800033092033070a0533073300202883fb33075010207efb33070150102276fb82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b1910320221422525499224499224499224499224499224499224499224499224499224499224495295a49492a4a424a12a252949922449922449922449922449922449922449922449aa945292545292a424491042c2509a948644489224911292244d922409a55488c0103551a8d288884811412242480851232022221a499224524852a48888489224a988884892a42425a9aa4a529294a492a448922a251111499224062222a291244922944a2895502aa154128944244a08214284484492244949925412aaa608a58a8848244992925495a424899254925425294952922489248410182255524828499294922400"
            },
            "deployedBytecode": {
              "object": "50564d00005a09000000000000010700c15000c0008003204b5c3c9dd11fd82fc8af1d453fd16d395f9cc494301bacbce3f0236345680ea90480a009000000000e0000001c0000002a00000037000000420000004d0000005f0000006a00000063616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a656465706f7369745f6576656e746765745f73746f726167657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051102871c0463616c6c8723066465706c6f790688681102875715005d012b02b602bb02e1024b0357038e03b704d804ab050c06ce06f20623072b07390828000251083b03330750000383770a06282e037c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511d87b10207b15187b161082897b19088289087b198285108286183308205010040f016f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909988938787907988930787906988928787905988920787904988918787903988910787902988808787801821020821518821610951128320082186f888219086f99821a106faa821b186fbb7b1b387b1a307b19287b18208379836a8317203308010a039551a082105882155082164895116032008b7910520931c8780883881f8488e05638000001253309240002390a240002ae8a093d082400020133083000028377c887073200009511f07b10087b158475010a02013d072000025105075010080950100aa1009511a07b10587b15509515608411e049111849111049018000330740641849110850100c5dfe4911384911304911284911208317200a0801821730821838821928821a20d49808d4a707d487075107163308300002838833070133093300100a05283b390824000256187f0c2003240002800001330730000283778000330833090a28c3fc33078000330850100e21ff8378330733093300100a0501951120fe7b10d8017b15d0017b16c8019515e0018411e064164926f8004926f0004926e00080003307409568e0004926e800501012b0fd33072000027b67383907200002531704b3018367000133080a010181671c0152471d365760550149267801492670014926680149266001836760010a0801956b000182b77082b87882b96882ba60d49808d4a707d4870752077a01826738817754172382019517e08477e07b67386471836780013308040a01956b000182b7980082b8900082b9880082ba80007b6730826b387bb7187b68287bb8107b69207bb9087b6a187bba64b84926b8014926b0014926a8014926a0019567a0013300149511a07b10587b15509515608411e08272827a08827b108277188283828908828c108288186f746fbb6faa6f276f826fcc6f996f387b17187b1a107b1b087b147b18387b19307b1c287b12208318831a203309ff330b2033070a079551a082105882155095116032009567c0003308403300169511f07b10087b156489647533082064973300022892fd8267d8008268d0008269c800826ac000d49707d48a09d47909989920d48707977720d4970751078400005247c1ce642e4c49263801492630014926280149262001836720010a0801956b000182b73082b83882b92882ba20d49808d4a707d487075107e1003308300002838833070133090a0528cf003308300002838833070133090a0528be003308300002838833070133090a0528ad003308300002838833070133090a05289c008267187b67a0008267207b67a8008267287b67b0009568a0008267307b67b80064a77b6a3850101893fb3a070000023a080800027b6798003a071000027b6890003a0a1800027b678800330820956980007b6a800082673833001a9511a07b10587b15507b16489515608411e0829a7b1a18829a087b1a10829a107b1a088299187b196486330006285efc33083000028388330733090a05018267388177561703143308300002838833070133090a0528e9492658014926500149264801492640019567609568400133001c9511a07b10587b15507b16489515608411e06476828718828910828a0882886f776f996faa6f887b18187b1a107b19087b17491138491130491128491120481140208318831a20831b403309ff33070a04821738821830821928821a206f776f886f996faa7b6a187b69107b68087b679551a08210588215508216489511603200826960826768826870826a787b6a587b68507b6748330780009568407b694050101e4cfa390824000256289f000d2003240002a0000133073000028378800033092033070a0533073300202883fb33075010207efb33070150102276fb82ab7b1b1882ab087b1b2082ab107b1b2882aa187b1a308296829a087b1a829a107b1a088299187b1910320221422525499224499224499224499224499224499224499224499224499224499224495295a49492a4a424a12a252949922449922449922449922449922449922449922449aa945292545292a424491042c2509a948644489224911292244d922409a55488c0103551a8d288884811412242480851232022221a499224524852a48888489224a988884892a42425a9aa4a529294a492a448922a251111499224062222a291244922944a2895502aa154128944244a08214284484492244949925412aaa608a58a8848244992925495a424899254925425294952922489248410182255524828499294922400"
            },
            "methodIdentifiers": {
              "retrieve()": "2e64cec1",
              "store(uint256)": "6057361d"
            }
          },
          "irOptimized": "/// @use-src 2:\"contracts/Storage.sol\"\nobject \"Storage_1922\" {\n    code {\n        {\n            /// @src 2:58:531  \"contract Storage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"Storage_1922_deployed\")\n            codecopy(_1, dataoffset(\"Storage_1922_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 2:\"contracts/Storage.sol\"\n    object \"Storage_1922_deployed\" {\n        code {\n            {\n                /// @src 2:58:531  \"contract Storage {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, sload(0))\n                        return(_1, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value := calldataload(4)\n                        sstore(0, value)\n                        /// @src 2:366:390  \"NumberChanged(newNumber)\"\n                        let _2 := /** @src 2:58:531  \"contract Storage {...\" */ mload(64)\n                        mstore(_2, value)\n                        /// @src 2:366:390  \"NumberChanged(newNumber)\"\n                        log1(_2, /** @src 2:58:531  \"contract Storage {...\" */ 32, /** @src 2:366:390  \"NumberChanged(newNumber)\" */ 0x2fd81fd19d3c5c4b396dd13f451dafc8bcac1b3094c49c5fa90e68456323f0e3)\n                        /// @src 2:58:531  \"contract Storage {...\"\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122039c227a2a7a034307500b3b28e0f6ad37788cb2de1f0ad5ed2a2299a388772f964736f6c634300081c0033\"\n    }\n}\n",
          "hash": "3839204ae665e7b62e178ef9130c495dd109f95c02229c37b03cbebf2a91e4a5",
          "factoryDependencies": {}
        }
      }
    }
  }
}